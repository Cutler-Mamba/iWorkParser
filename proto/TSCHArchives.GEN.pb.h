// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.GEN.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eGEN_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eGEN_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCH3DArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCHArchives_2eGEN_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCHArchives_2eGEN_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHArchives_2eGEN_2eproto;
namespace TSCH {
namespace Generated {
class ChartAxisNonStyleArchive;
struct ChartAxisNonStyleArchiveDefaultTypeInternal;
extern ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
class ChartAxisStyleArchive;
struct ChartAxisStyleArchiveDefaultTypeInternal;
extern ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
class ChartNonStyleArchive;
struct ChartNonStyleArchiveDefaultTypeInternal;
extern ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
class ChartSeriesNonStyleArchive;
struct ChartSeriesNonStyleArchiveDefaultTypeInternal;
extern ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
class ChartSeriesStyleArchive;
struct ChartSeriesStyleArchiveDefaultTypeInternal;
extern ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
class ChartStyleArchive;
struct ChartStyleArchiveDefaultTypeInternal;
extern ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
class LegendNonStyleArchive;
struct LegendNonStyleArchiveDefaultTypeInternal;
extern LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
class LegendStyleArchive;
struct LegendStyleArchiveDefaultTypeInternal;
extern LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
}  // namespace Generated
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::Generated::ChartAxisNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartAxisNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartAxisStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartAxisStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartSeriesNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartSeriesNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartSeriesStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartSeriesStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartStyleArchive>(Arena*);
template<> ::TSCH::Generated::LegendNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::LegendNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::LegendStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::LegendStyleArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {
namespace Generated {

// ===================================================================

class ChartStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartStyleArchive) */ {
 public:
  inline ChartStyleArchive() : ChartStyleArchive(nullptr) {}
  ~ChartStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartStyleArchive(const ChartStyleArchive& from);
  ChartStyleArchive(ChartStyleArchive&& from) noexcept
    : ChartStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartStyleArchive& operator=(const ChartStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartStyleArchive& operator=(ChartStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartStyleArchive*>(
               &_ChartStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChartStyleArchive& a, ChartStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartStyleArchive& from) {
    ChartStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartStyleArchive";
  }
  protected:
  explicit ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartinfoarea3DlightingpackageFieldNumber = 2,
    kTschchartinfobar3DlightingpackageFieldNumber = 3,
    kTschchartinfocolumn3DlightingpackageFieldNumber = 4,
    kTschchartinfodefault3DlightingpackageFieldNumber = 5,
    kTschchartinfoline3DlightingpackageFieldNumber = 6,
    kTschchartinfopie3DlightingpackageFieldNumber = 7,
    kTschchartinfodefaultbackgroundfillFieldNumber = 8,
    kTschchartinfodefaultbackgroundstrokeFieldNumber = 9,
    kTschchartinfodefaultbordershadowFieldNumber = 11,
    kTschchartinfodefaultborderstrokeFieldNumber = 12,
    kTschchartinfodefaultgridbackgroundfillFieldNumber = 14,
    kTschchartinfodefaulttitlecolorFieldNumber = 19,
    kTschchartinfodefault3DchartopacityFieldNumber = 1,
    kTschchartinfodefaultborderopacityFieldNumber = 10,
    kTschchartinfodefaultgridbackgroundopacityFieldNumber = 15,
    kTschchartinfodefaultcombinelayersFieldNumber = 13,
    kTschchartinfodefaultshowborderFieldNumber = 18,
    kTschchartinfodefaultinterbargapFieldNumber = 16,
    kTschchartinfodefaultintersetgapFieldNumber = 17,
    kTschchartinfodefaulttitleparagraphstyleindexFieldNumber = 20,
    kTschchartinfodefaultdatasetnameparagraphstyleindexFieldNumber = 21,
  };
  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  bool has_tschchartinfoarea3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfoarea3dlightingpackage() const;
  public:
  void clear_tschchartinfoarea3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoarea3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoarea3dlightingpackage();
  void set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfoarea3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfoarea3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfoarea3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfoarea3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  bool has_tschchartinfobar3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfobar3dlightingpackage() const;
  public:
  void clear_tschchartinfobar3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfobar3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfobar3dlightingpackage();
  void set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfobar3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfobar3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfobar3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfobar3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  bool has_tschchartinfocolumn3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfocolumn3dlightingpackage() const;
  public:
  void clear_tschchartinfocolumn3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfocolumn3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfocolumn3dlightingpackage();
  void set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfocolumn3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfocolumn3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumn3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfocolumn3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  bool has_tschchartinfodefault3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfodefault3dlightingpackage() const;
  public:
  void clear_tschchartinfodefault3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfodefault3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfodefault3dlightingpackage();
  void set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfodefault3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfodefault3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfodefault3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  bool has_tschchartinfoline3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfoline3dlightingpackage() const;
  public:
  void clear_tschchartinfoline3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoline3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoline3dlightingpackage();
  void set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfoline3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfoline3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfoline3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfoline3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  bool has_tschchartinfopie3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfopie3dlightingpackage() const;
  public:
  void clear_tschchartinfopie3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfopie3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfopie3dlightingpackage();
  void set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfopie3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfopie3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfopie3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfopie3dlightingpackage();

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  bool has_tschchartinfodefaultbackgroundfill() const;
  private:
  bool _internal_has_tschchartinfodefaultbackgroundfill() const;
  public:
  void clear_tschchartinfodefaultbackgroundfill();
  const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartinfodefaultbackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfodefaultbackgroundfill();
  void set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfodefaultbackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfodefaultbackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbackgroundfill(
      ::TSD::FillArchive* tschchartinfodefaultbackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfodefaultbackgroundfill();

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  bool has_tschchartinfodefaultbackgroundstroke() const;
  private:
  bool _internal_has_tschchartinfodefaultbackgroundstroke() const;
  public:
  void clear_tschchartinfodefaultbackgroundstroke();
  const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartinfodefaultbackgroundstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfodefaultbackgroundstroke();
  void set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfodefaultbackgroundstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfodefaultbackgroundstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbackgroundstroke(
      ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfodefaultbackgroundstroke();

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  bool has_tschchartinfodefaultbordershadow() const;
  private:
  bool _internal_has_tschchartinfodefaultbordershadow() const;
  public:
  void clear_tschchartinfodefaultbordershadow();
  const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartinfodefaultbordershadow();
  ::TSD::ShadowArchive* mutable_tschchartinfodefaultbordershadow();
  void set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfodefaultbordershadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfodefaultbordershadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbordershadow(
      ::TSD::ShadowArchive* tschchartinfodefaultbordershadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfodefaultbordershadow();

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  bool has_tschchartinfodefaultborderstroke() const;
  private:
  bool _internal_has_tschchartinfodefaultborderstroke() const;
  public:
  void clear_tschchartinfodefaultborderstroke();
  const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartinfodefaultborderstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfodefaultborderstroke();
  void set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfodefaultborderstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfodefaultborderstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultborderstroke(
      ::TSD::StrokeArchive* tschchartinfodefaultborderstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfodefaultborderstroke();

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  bool has_tschchartinfodefaultgridbackgroundfill() const;
  private:
  bool _internal_has_tschchartinfodefaultgridbackgroundfill() const;
  public:
  void clear_tschchartinfodefaultgridbackgroundfill();
  const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartinfodefaultgridbackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfodefaultgridbackgroundfill();
  void set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfodefaultgridbackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfodefaultgridbackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultgridbackgroundfill(
      ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfodefaultgridbackgroundfill();

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  bool has_tschchartinfodefaulttitlecolor() const;
  private:
  bool _internal_has_tschchartinfodefaulttitlecolor() const;
  public:
  void clear_tschchartinfodefaulttitlecolor();
  const ::TSP::Color& tschchartinfodefaulttitlecolor() const;
  PROTOBUF_NODISCARD ::TSP::Color* release_tschchartinfodefaulttitlecolor();
  ::TSP::Color* mutable_tschchartinfodefaulttitlecolor();
  void set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor);
  private:
  const ::TSP::Color& _internal_tschchartinfodefaulttitlecolor() const;
  ::TSP::Color* _internal_mutable_tschchartinfodefaulttitlecolor();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaulttitlecolor(
      ::TSP::Color* tschchartinfodefaulttitlecolor);
  ::TSP::Color* unsafe_arena_release_tschchartinfodefaulttitlecolor();

  // optional float tschchartinfodefault3dchartopacity = 1;
  bool has_tschchartinfodefault3dchartopacity() const;
  private:
  bool _internal_has_tschchartinfodefault3dchartopacity() const;
  public:
  void clear_tschchartinfodefault3dchartopacity();
  float tschchartinfodefault3dchartopacity() const;
  void set_tschchartinfodefault3dchartopacity(float value);
  private:
  float _internal_tschchartinfodefault3dchartopacity() const;
  void _internal_set_tschchartinfodefault3dchartopacity(float value);
  public:

  // optional float tschchartinfodefaultborderopacity = 10;
  bool has_tschchartinfodefaultborderopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultborderopacity() const;
  public:
  void clear_tschchartinfodefaultborderopacity();
  float tschchartinfodefaultborderopacity() const;
  void set_tschchartinfodefaultborderopacity(float value);
  private:
  float _internal_tschchartinfodefaultborderopacity() const;
  void _internal_set_tschchartinfodefaultborderopacity(float value);
  public:

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  bool has_tschchartinfodefaultgridbackgroundopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultgridbackgroundopacity() const;
  public:
  void clear_tschchartinfodefaultgridbackgroundopacity();
  float tschchartinfodefaultgridbackgroundopacity() const;
  void set_tschchartinfodefaultgridbackgroundopacity(float value);
  private:
  float _internal_tschchartinfodefaultgridbackgroundopacity() const;
  void _internal_set_tschchartinfodefaultgridbackgroundopacity(float value);
  public:

  // optional bool tschchartinfodefaultcombinelayers = 13;
  bool has_tschchartinfodefaultcombinelayers() const;
  private:
  bool _internal_has_tschchartinfodefaultcombinelayers() const;
  public:
  void clear_tschchartinfodefaultcombinelayers();
  bool tschchartinfodefaultcombinelayers() const;
  void set_tschchartinfodefaultcombinelayers(bool value);
  private:
  bool _internal_tschchartinfodefaultcombinelayers() const;
  void _internal_set_tschchartinfodefaultcombinelayers(bool value);
  public:

  // optional bool tschchartinfodefaultshowborder = 18;
  bool has_tschchartinfodefaultshowborder() const;
  private:
  bool _internal_has_tschchartinfodefaultshowborder() const;
  public:
  void clear_tschchartinfodefaultshowborder();
  bool tschchartinfodefaultshowborder() const;
  void set_tschchartinfodefaultshowborder(bool value);
  private:
  bool _internal_tschchartinfodefaultshowborder() const;
  void _internal_set_tschchartinfodefaultshowborder(bool value);
  public:

  // optional float tschchartinfodefaultinterbargap = 16;
  bool has_tschchartinfodefaultinterbargap() const;
  private:
  bool _internal_has_tschchartinfodefaultinterbargap() const;
  public:
  void clear_tschchartinfodefaultinterbargap();
  float tschchartinfodefaultinterbargap() const;
  void set_tschchartinfodefaultinterbargap(float value);
  private:
  float _internal_tschchartinfodefaultinterbargap() const;
  void _internal_set_tschchartinfodefaultinterbargap(float value);
  public:

  // optional float tschchartinfodefaultintersetgap = 17;
  bool has_tschchartinfodefaultintersetgap() const;
  private:
  bool _internal_has_tschchartinfodefaultintersetgap() const;
  public:
  void clear_tschchartinfodefaultintersetgap();
  float tschchartinfodefaultintersetgap() const;
  void set_tschchartinfodefaultintersetgap(float value);
  private:
  float _internal_tschchartinfodefaultintersetgap() const;
  void _internal_set_tschchartinfodefaultintersetgap(float value);
  public:

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  bool has_tschchartinfodefaulttitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodefaulttitleparagraphstyleindex() const;
  public:
  void clear_tschchartinfodefaulttitleparagraphstyleindex();
  int32_t tschchartinfodefaulttitleparagraphstyleindex() const;
  void set_tschchartinfodefaulttitleparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartinfodefaulttitleparagraphstyleindex() const;
  void _internal_set_tschchartinfodefaulttitleparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  bool has_tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  public:
  void clear_tschchartinfodefaultdatasetnameparagraphstyleindex();
  int32_t tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  void set_tschchartinfodefaultdatasetnameparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  void _internal_set_tschchartinfodefaultdatasetnameparagraphstyleindex(int32_t value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage_;
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage_;
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage_;
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage_;
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage_;
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage_;
    ::TSD::FillArchive* tschchartinfodefaultbackgroundfill_;
    ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke_;
    ::TSD::ShadowArchive* tschchartinfodefaultbordershadow_;
    ::TSD::StrokeArchive* tschchartinfodefaultborderstroke_;
    ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill_;
    ::TSP::Color* tschchartinfodefaulttitlecolor_;
    float tschchartinfodefault3dchartopacity_;
    float tschchartinfodefaultborderopacity_;
    float tschchartinfodefaultgridbackgroundopacity_;
    bool tschchartinfodefaultcombinelayers_;
    bool tschchartinfodefaultshowborder_;
    float tschchartinfodefaultinterbargap_;
    float tschchartinfodefaultintersetgap_;
    int32_t tschchartinfodefaulttitleparagraphstyleindex_;
    int32_t tschchartinfodefaultdatasetnameparagraphstyleindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartNonStyleArchive) */ {
 public:
  inline ChartNonStyleArchive() : ChartNonStyleArchive(nullptr) {}
  ~ChartNonStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartNonStyleArchive(const ChartNonStyleArchive& from);
  ChartNonStyleArchive(ChartNonStyleArchive&& from) noexcept
    : ChartNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartNonStyleArchive& operator=(const ChartNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartNonStyleArchive& operator=(ChartNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartNonStyleArchive*>(
               &_ChartNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChartNonStyleArchive& a, ChartNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartNonStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartNonStyleArchive& from) {
    ChartNonStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartNonStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartNonStyleArchive";
  }
  protected:
  explicit ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartinfodefaulttitleFieldNumber = 23,
    kTschchartinfodefault3DrotationFieldNumber = 4,
    kTschchartinfoarea3DscaleFieldNumber = 5,
    kTschchartinfobar3DscaleFieldNumber = 6,
    kTschchartinfocolumn3DscaleFieldNumber = 7,
    kTschchartinfodefault3DscaleFieldNumber = 8,
    kTschchartinfoline3DscaleFieldNumber = 9,
    kTschchartinfopie3DscaleFieldNumber = 10,
    kTschchartinfodefault3DviewportFieldNumber = 11,
    kTschchartinfodefault3DbarshapeFieldNumber = 1,
    kTschchartinfodefault3DintersetdepthgapFieldNumber = 3,
    kTschchartinfodefault3DbeveledgesFieldNumber = 2,
    kTschchartinfodefaultshowlegendFieldNumber = 20,
    kTschchartinfodefaultshowtitleFieldNumber = 21,
    kTschchartinfodefaultskiphiddendataFieldNumber = 22,
    kTschchartinfodefaultpiestartangleFieldNumber = 19,
    kTschchartinfodefaultdatasetnamelocationFieldNumber = 24,
    kTschchartinfodefaultmultidatacontroltypeFieldNumber = 25,
  };
  // optional string tschchartinfodefaulttitle = 23;
  bool has_tschchartinfodefaulttitle() const;
  private:
  bool _internal_has_tschchartinfodefaulttitle() const;
  public:
  void clear_tschchartinfodefaulttitle();
  const std::string& tschchartinfodefaulttitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartinfodefaulttitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartinfodefaulttitle();
  PROTOBUF_NODISCARD std::string* release_tschchartinfodefaulttitle();
  void set_allocated_tschchartinfodefaulttitle(std::string* tschchartinfodefaulttitle);
  private:
  const std::string& _internal_tschchartinfodefaulttitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartinfodefaulttitle(const std::string& value);
  std::string* _internal_mutable_tschchartinfodefaulttitle();
  public:

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  bool has_tschchartinfodefault3drotation() const;
  private:
  bool _internal_has_tschchartinfodefault3drotation() const;
  public:
  void clear_tschchartinfodefault3drotation();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3drotation();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3drotation();
  void set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3drotation() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3drotation();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3drotation(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3drotation();

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  bool has_tschchartinfoarea3dscale() const;
  private:
  bool _internal_has_tschchartinfoarea3dscale() const;
  public:
  void clear_tschchartinfoarea3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfoarea3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoarea3dscale();
  void set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfoarea3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfoarea3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfoarea3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfoarea3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  bool has_tschchartinfobar3dscale() const;
  private:
  bool _internal_has_tschchartinfobar3dscale() const;
  public:
  void clear_tschchartinfobar3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfobar3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfobar3dscale();
  void set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfobar3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfobar3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfobar3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfobar3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  bool has_tschchartinfocolumn3dscale() const;
  private:
  bool _internal_has_tschchartinfocolumn3dscale() const;
  public:
  void clear_tschchartinfocolumn3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfocolumn3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfocolumn3dscale();
  void set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfocolumn3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfocolumn3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumn3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfocolumn3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  bool has_tschchartinfodefault3dscale() const;
  private:
  bool _internal_has_tschchartinfodefault3dscale() const;
  public:
  void clear_tschchartinfodefault3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dscale();
  void set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  bool has_tschchartinfoline3dscale() const;
  private:
  bool _internal_has_tschchartinfoline3dscale() const;
  public:
  void clear_tschchartinfoline3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfoline3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoline3dscale();
  void set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfoline3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfoline3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfoline3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfoline3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  bool has_tschchartinfopie3dscale() const;
  private:
  bool _internal_has_tschchartinfopie3dscale() const;
  public:
  void clear_tschchartinfopie3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfopie3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfopie3dscale();
  void set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfopie3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfopie3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfopie3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfopie3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  bool has_tschchartinfodefault3dviewport() const;
  private:
  bool _internal_has_tschchartinfodefault3dviewport() const;
  public:
  void clear_tschchartinfodefault3dviewport();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport() const;
  PROTOBUF_NODISCARD ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dviewport();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dviewport();
  void set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3dviewport() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3dviewport();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dviewport(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3dviewport();

  // optional int32 tschchartinfodefault3dbarshape = 1;
  bool has_tschchartinfodefault3dbarshape() const;
  private:
  bool _internal_has_tschchartinfodefault3dbarshape() const;
  public:
  void clear_tschchartinfodefault3dbarshape();
  int32_t tschchartinfodefault3dbarshape() const;
  void set_tschchartinfodefault3dbarshape(int32_t value);
  private:
  int32_t _internal_tschchartinfodefault3dbarshape() const;
  void _internal_set_tschchartinfodefault3dbarshape(int32_t value);
  public:

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  bool has_tschchartinfodefault3dintersetdepthgap() const;
  private:
  bool _internal_has_tschchartinfodefault3dintersetdepthgap() const;
  public:
  void clear_tschchartinfodefault3dintersetdepthgap();
  float tschchartinfodefault3dintersetdepthgap() const;
  void set_tschchartinfodefault3dintersetdepthgap(float value);
  private:
  float _internal_tschchartinfodefault3dintersetdepthgap() const;
  void _internal_set_tschchartinfodefault3dintersetdepthgap(float value);
  public:

  // optional bool tschchartinfodefault3dbeveledges = 2;
  bool has_tschchartinfodefault3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfodefault3dbeveledges() const;
  public:
  void clear_tschchartinfodefault3dbeveledges();
  bool tschchartinfodefault3dbeveledges() const;
  void set_tschchartinfodefault3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfodefault3dbeveledges() const;
  void _internal_set_tschchartinfodefault3dbeveledges(bool value);
  public:

  // optional bool tschchartinfodefaultshowlegend = 20;
  bool has_tschchartinfodefaultshowlegend() const;
  private:
  bool _internal_has_tschchartinfodefaultshowlegend() const;
  public:
  void clear_tschchartinfodefaultshowlegend();
  bool tschchartinfodefaultshowlegend() const;
  void set_tschchartinfodefaultshowlegend(bool value);
  private:
  bool _internal_tschchartinfodefaultshowlegend() const;
  void _internal_set_tschchartinfodefaultshowlegend(bool value);
  public:

  // optional bool tschchartinfodefaultshowtitle = 21;
  bool has_tschchartinfodefaultshowtitle() const;
  private:
  bool _internal_has_tschchartinfodefaultshowtitle() const;
  public:
  void clear_tschchartinfodefaultshowtitle();
  bool tschchartinfodefaultshowtitle() const;
  void set_tschchartinfodefaultshowtitle(bool value);
  private:
  bool _internal_tschchartinfodefaultshowtitle() const;
  void _internal_set_tschchartinfodefaultshowtitle(bool value);
  public:

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  bool has_tschchartinfodefaultskiphiddendata() const;
  private:
  bool _internal_has_tschchartinfodefaultskiphiddendata() const;
  public:
  void clear_tschchartinfodefaultskiphiddendata();
  bool tschchartinfodefaultskiphiddendata() const;
  void set_tschchartinfodefaultskiphiddendata(bool value);
  private:
  bool _internal_tschchartinfodefaultskiphiddendata() const;
  void _internal_set_tschchartinfodefaultskiphiddendata(bool value);
  public:

  // optional float tschchartinfodefaultpiestartangle = 19;
  bool has_tschchartinfodefaultpiestartangle() const;
  private:
  bool _internal_has_tschchartinfodefaultpiestartangle() const;
  public:
  void clear_tschchartinfodefaultpiestartangle();
  float tschchartinfodefaultpiestartangle() const;
  void set_tschchartinfodefaultpiestartangle(float value);
  private:
  float _internal_tschchartinfodefaultpiestartangle() const;
  void _internal_set_tschchartinfodefaultpiestartangle(float value);
  public:

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  bool has_tschchartinfodefaultdatasetnamelocation() const;
  private:
  bool _internal_has_tschchartinfodefaultdatasetnamelocation() const;
  public:
  void clear_tschchartinfodefaultdatasetnamelocation();
  int32_t tschchartinfodefaultdatasetnamelocation() const;
  void set_tschchartinfodefaultdatasetnamelocation(int32_t value);
  private:
  int32_t _internal_tschchartinfodefaultdatasetnamelocation() const;
  void _internal_set_tschchartinfodefaultdatasetnamelocation(int32_t value);
  public:

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  bool has_tschchartinfodefaultmultidatacontroltype() const;
  private:
  bool _internal_has_tschchartinfodefaultmultidatacontroltype() const;
  public:
  void clear_tschchartinfodefaultmultidatacontroltype();
  int32_t tschchartinfodefaultmultidatacontroltype() const;
  void set_tschchartinfodefaultmultidatacontroltype(int32_t value);
  private:
  int32_t _internal_tschchartinfodefaultmultidatacontroltype() const;
  void _internal_set_tschchartinfodefaultmultidatacontroltype(int32_t value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartinfodefaulttitle_;
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation_;
    ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale_;
    ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale_;
    ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale_;
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale_;
    ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale_;
    ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale_;
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport_;
    int32_t tschchartinfodefault3dbarshape_;
    float tschchartinfodefault3dintersetdepthgap_;
    bool tschchartinfodefault3dbeveledges_;
    bool tschchartinfodefaultshowlegend_;
    bool tschchartinfodefaultshowtitle_;
    bool tschchartinfodefaultskiphiddendata_;
    float tschchartinfodefaultpiestartangle_;
    int32_t tschchartinfodefaultdatasetnamelocation_;
    int32_t tschchartinfodefaultmultidatacontroltype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class LegendStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.LegendStyleArchive) */ {
 public:
  inline LegendStyleArchive() : LegendStyleArchive(nullptr) {}
  ~LegendStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendStyleArchive(const LegendStyleArchive& from);
  LegendStyleArchive(LegendStyleArchive&& from) noexcept
    : LegendStyleArchive() {
    *this = ::std::move(from);
  }

  inline LegendStyleArchive& operator=(const LegendStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendStyleArchive& operator=(LegendStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendStyleArchive* internal_default_instance() {
    return reinterpret_cast<const LegendStyleArchive*>(
               &_LegendStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LegendStyleArchive& a, LegendStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegendStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LegendStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LegendStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LegendStyleArchive& from) {
    LegendStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegendStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.LegendStyleArchive";
  }
  protected:
  explicit LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschlegendmodeldefaultfillFieldNumber = 1,
    kTschlegendmodeldefaultshadowFieldNumber = 4,
    kTschlegendmodeldefaultstrokeFieldNumber = 5,
    kTschlegendmodeldefaultlabelparagraphstyleindexFieldNumber = 2,
    kTschlegendmodeldefaultopacityFieldNumber = 3,
  };
  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  bool has_tschlegendmodeldefaultfill() const;
  private:
  bool _internal_has_tschlegendmodeldefaultfill() const;
  public:
  void clear_tschlegendmodeldefaultfill();
  const ::TSD::FillArchive& tschlegendmodeldefaultfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschlegendmodeldefaultfill();
  ::TSD::FillArchive* mutable_tschlegendmodeldefaultfill();
  void set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill);
  private:
  const ::TSD::FillArchive& _internal_tschlegendmodeldefaultfill() const;
  ::TSD::FillArchive* _internal_mutable_tschlegendmodeldefaultfill();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultfill(
      ::TSD::FillArchive* tschlegendmodeldefaultfill);
  ::TSD::FillArchive* unsafe_arena_release_tschlegendmodeldefaultfill();

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  bool has_tschlegendmodeldefaultshadow() const;
  private:
  bool _internal_has_tschlegendmodeldefaultshadow() const;
  public:
  void clear_tschlegendmodeldefaultshadow();
  const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschlegendmodeldefaultshadow();
  ::TSD::ShadowArchive* mutable_tschlegendmodeldefaultshadow();
  void set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschlegendmodeldefaultshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschlegendmodeldefaultshadow();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultshadow(
      ::TSD::ShadowArchive* tschlegendmodeldefaultshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschlegendmodeldefaultshadow();

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  bool has_tschlegendmodeldefaultstroke() const;
  private:
  bool _internal_has_tschlegendmodeldefaultstroke() const;
  public:
  void clear_tschlegendmodeldefaultstroke();
  const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschlegendmodeldefaultstroke();
  ::TSD::StrokeArchive* mutable_tschlegendmodeldefaultstroke();
  void set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschlegendmodeldefaultstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschlegendmodeldefaultstroke();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultstroke(
      ::TSD::StrokeArchive* tschlegendmodeldefaultstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschlegendmodeldefaultstroke();

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  bool has_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschlegendmodeldefaultlabelparagraphstyleindex();
  int32_t tschlegendmodeldefaultlabelparagraphstyleindex() const;
  void set_tschlegendmodeldefaultlabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  void _internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(int32_t value);
  public:

  // optional float tschlegendmodeldefaultopacity = 3;
  bool has_tschlegendmodeldefaultopacity() const;
  private:
  bool _internal_has_tschlegendmodeldefaultopacity() const;
  public:
  void clear_tschlegendmodeldefaultopacity();
  float tschlegendmodeldefaultopacity() const;
  void set_tschlegendmodeldefaultopacity(float value);
  private:
  float _internal_tschlegendmodeldefaultopacity() const;
  void _internal_set_tschlegendmodeldefaultopacity(float value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::FillArchive* tschlegendmodeldefaultfill_;
    ::TSD::ShadowArchive* tschlegendmodeldefaultshadow_;
    ::TSD::StrokeArchive* tschlegendmodeldefaultstroke_;
    int32_t tschlegendmodeldefaultlabelparagraphstyleindex_;
    float tschlegendmodeldefaultopacity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class LegendNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.Generated.LegendNonStyleArchive) */ {
 public:
  inline LegendNonStyleArchive() : LegendNonStyleArchive(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendNonStyleArchive(const LegendNonStyleArchive& from);
  LegendNonStyleArchive(LegendNonStyleArchive&& from) noexcept
    : LegendNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline LegendNonStyleArchive& operator=(const LegendNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendNonStyleArchive& operator=(LegendNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const LegendNonStyleArchive*>(
               &_LegendNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LegendNonStyleArchive& a, LegendNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendNonStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegendNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LegendNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LegendNonStyleArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LegendNonStyleArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.LegendNonStyleArchive";
  }
  protected:
  explicit LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartAxisStyleArchive) */ {
 public:
  inline ChartAxisStyleArchive() : ChartAxisStyleArchive(nullptr) {}
  ~ChartAxisStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisStyleArchive(const ChartAxisStyleArchive& from);
  ChartAxisStyleArchive(ChartAxisStyleArchive&& from) noexcept
    : ChartAxisStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisStyleArchive& operator=(const ChartAxisStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisStyleArchive& operator=(ChartAxisStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisStyleArchive*>(
               &_ChartAxisStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChartAxisStyleArchive& a, ChartAxisStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartAxisStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartAxisStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartAxisStyleArchive& from) {
    ChartAxisStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartAxisStyleArchive";
  }
  protected:
  explicit ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartaxiscategory3DgridlinestrokeFieldNumber = 3,
    kTschchartaxisvalue3DgridlinestrokeFieldNumber = 4,
    kTschchartaxiscategorymajorgridlineshadowFieldNumber = 14,
    kTschchartaxisvaluemajorgridlineshadowFieldNumber = 15,
    kTschchartaxiscategorymajorgridlinestrokeFieldNumber = 16,
    kTschchartaxisvaluemajorgridlinestrokeFieldNumber = 17,
    kTschchartaxiscategoryminorgridlineshadowFieldNumber = 20,
    kTschchartaxisvalueminorgridlineshadowFieldNumber = 21,
    kTschchartaxiscategoryminorgridlinestrokeFieldNumber = 22,
    kTschchartaxisvalueminorgridlinestrokeFieldNumber = 23,
    kTschchartaxiscategory3DgridlineopacityFieldNumber = 1,
    kTschchartaxisvalue3DgridlineopacityFieldNumber = 2,
    kTschchartaxiscategoryhorizontalspacingFieldNumber = 5,
    kTschchartaxiscategorylabelparagraphstyleindexFieldNumber = 6,
    kTschchartaxisdefaultlabelparagraphstyleindexFieldNumber = 7,
    kTschchartaxisvaluelabelparagraphstyleindexFieldNumber = 8,
    kTschchartaxiscategorylabelsorientationFieldNumber = 9,
    kTschchartaxisdefaultlabelsorientationFieldNumber = 10,
    kTschchartaxisvaluelabelsorientationFieldNumber = 11,
    kTschchartaxiscategorymajorgridlineopacityFieldNumber = 12,
    kTschchartaxisvaluemajorgridlineopacityFieldNumber = 13,
    kTschchartaxiscategoryminorgridlineopacityFieldNumber = 18,
    kTschchartaxisvalueminorgridlineopacityFieldNumber = 19,
    kTschchartaxiscategoryshowaxisFieldNumber = 24,
    kTschchartaxisvalueshowaxisFieldNumber = 25,
    kTschchartaxiscategoryshowlastlabelFieldNumber = 26,
    kTschchartaxiscategoryshowmajorgridlinesFieldNumber = 27,
    kTschchartaxisvalueshowmajorgridlinesFieldNumber = 28,
    kTschchartaxiscategoryshowmajortickmarksFieldNumber = 29,
    kTschchartaxisvalueshowmajortickmarksFieldNumber = 30,
    kTschchartaxisvalueshowminimumlabelFieldNumber = 31,
    kTschchartaxiscategoryshowminorgridlinesFieldNumber = 32,
    kTschchartaxisvalueshowminorgridlinesFieldNumber = 33,
    kTschchartaxiscategoryshowminortickmarksFieldNumber = 34,
    kTschchartaxisvalueshowminortickmarksFieldNumber = 35,
    kTschchartaxiscategorytickmarklocationFieldNumber = 36,
    kTschchartaxisvaluetickmarklocationFieldNumber = 37,
    kTschchartaxiscategorytitleparagraphstyleindexFieldNumber = 38,
    kTschchartaxisdefaulttitleparagraphstyleindexFieldNumber = 39,
    kTschchartaxisvaluetitleparagraphstyleindexFieldNumber = 40,
    kTschchartaxiscategoryverticalspacingFieldNumber = 41,
  };
  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  bool has_tschchartaxiscategory3dgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategory3dgridlinestroke() const;
  public:
  void clear_tschchartaxiscategory3dgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartaxiscategory3dgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategory3dgridlinestroke();
  void set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategory3dgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategory3dgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategory3dgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategory3dgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  bool has_tschchartaxisvalue3dgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvalue3dgridlinestroke() const;
  public:
  void clear_tschchartaxisvalue3dgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartaxisvalue3dgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvalue3dgridlinestroke();
  void set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvalue3dgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvalue3dgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalue3dgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvalue3dgridlinestroke();

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  bool has_tschchartaxiscategorymajorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlineshadow() const;
  public:
  void clear_tschchartaxiscategorymajorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartaxiscategorymajorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxiscategorymajorgridlineshadow();
  void set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxiscategorymajorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxiscategorymajorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxiscategorymajorgridlineshadow();

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  bool has_tschchartaxisvaluemajorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlineshadow() const;
  public:
  void clear_tschchartaxisvaluemajorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartaxisvaluemajorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxisvaluemajorgridlineshadow();
  void set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxisvaluemajorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxisvaluemajorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxisvaluemajorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  bool has_tschchartaxiscategorymajorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlinestroke() const;
  public:
  void clear_tschchartaxiscategorymajorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartaxiscategorymajorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategorymajorgridlinestroke();
  void set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategorymajorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategorymajorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategorymajorgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  bool has_tschchartaxisvaluemajorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlinestroke() const;
  public:
  void clear_tschchartaxisvaluemajorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartaxisvaluemajorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvaluemajorgridlinestroke();
  void set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvaluemajorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvaluemajorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvaluemajorgridlinestroke();

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  bool has_tschchartaxiscategoryminorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlineshadow() const;
  public:
  void clear_tschchartaxiscategoryminorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartaxiscategoryminorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxiscategoryminorgridlineshadow();
  void set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxiscategoryminorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxiscategoryminorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxiscategoryminorgridlineshadow();

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  bool has_tschchartaxisvalueminorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlineshadow() const;
  public:
  void clear_tschchartaxisvalueminorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartaxisvalueminorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxisvalueminorgridlineshadow();
  void set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxisvalueminorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxisvalueminorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalueminorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxisvalueminorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  bool has_tschchartaxiscategoryminorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlinestroke() const;
  public:
  void clear_tschchartaxiscategoryminorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartaxiscategoryminorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategoryminorgridlinestroke();
  void set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategoryminorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategoryminorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategoryminorgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  bool has_tschchartaxisvalueminorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlinestroke() const;
  public:
  void clear_tschchartaxisvalueminorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartaxisvalueminorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvalueminorgridlinestroke();
  void set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvalueminorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvalueminorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalueminorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvalueminorgridlinestroke();

  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  bool has_tschchartaxiscategory3dgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategory3dgridlineopacity() const;
  public:
  void clear_tschchartaxiscategory3dgridlineopacity();
  float tschchartaxiscategory3dgridlineopacity() const;
  void set_tschchartaxiscategory3dgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategory3dgridlineopacity() const;
  void _internal_set_tschchartaxiscategory3dgridlineopacity(float value);
  public:

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  bool has_tschchartaxisvalue3dgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvalue3dgridlineopacity() const;
  public:
  void clear_tschchartaxisvalue3dgridlineopacity();
  float tschchartaxisvalue3dgridlineopacity() const;
  void set_tschchartaxisvalue3dgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvalue3dgridlineopacity() const;
  void _internal_set_tschchartaxisvalue3dgridlineopacity(float value);
  public:

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  bool has_tschchartaxiscategoryhorizontalspacing() const;
  private:
  bool _internal_has_tschchartaxiscategoryhorizontalspacing() const;
  public:
  void clear_tschchartaxiscategoryhorizontalspacing();
  int32_t tschchartaxiscategoryhorizontalspacing() const;
  void set_tschchartaxiscategoryhorizontalspacing(int32_t value);
  private:
  int32_t _internal_tschchartaxiscategoryhorizontalspacing() const;
  void _internal_set_tschchartaxiscategoryhorizontalspacing(int32_t value);
  public:

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  bool has_tschchartaxiscategorylabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxiscategorylabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxiscategorylabelparagraphstyleindex();
  int32_t tschchartaxiscategorylabelparagraphstyleindex() const;
  void set_tschchartaxiscategorylabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartaxiscategorylabelparagraphstyleindex() const;
  void _internal_set_tschchartaxiscategorylabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  bool has_tschchartaxisdefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisdefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxisdefaultlabelparagraphstyleindex();
  int32_t tschchartaxisdefaultlabelparagraphstyleindex() const;
  void set_tschchartaxisdefaultlabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartaxisdefaultlabelparagraphstyleindex() const;
  void _internal_set_tschchartaxisdefaultlabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  bool has_tschchartaxisvaluelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisvaluelabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxisvaluelabelparagraphstyleindex();
  int32_t tschchartaxisvaluelabelparagraphstyleindex() const;
  void set_tschchartaxisvaluelabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartaxisvaluelabelparagraphstyleindex() const;
  void _internal_set_tschchartaxisvaluelabelparagraphstyleindex(int32_t value);
  public:

  // optional float tschchartaxiscategorylabelsorientation = 9;
  bool has_tschchartaxiscategorylabelsorientation() const;
  private:
  bool _internal_has_tschchartaxiscategorylabelsorientation() const;
  public:
  void clear_tschchartaxiscategorylabelsorientation();
  float tschchartaxiscategorylabelsorientation() const;
  void set_tschchartaxiscategorylabelsorientation(float value);
  private:
  float _internal_tschchartaxiscategorylabelsorientation() const;
  void _internal_set_tschchartaxiscategorylabelsorientation(float value);
  public:

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  bool has_tschchartaxisdefaultlabelsorientation() const;
  private:
  bool _internal_has_tschchartaxisdefaultlabelsorientation() const;
  public:
  void clear_tschchartaxisdefaultlabelsorientation();
  float tschchartaxisdefaultlabelsorientation() const;
  void set_tschchartaxisdefaultlabelsorientation(float value);
  private:
  float _internal_tschchartaxisdefaultlabelsorientation() const;
  void _internal_set_tschchartaxisdefaultlabelsorientation(float value);
  public:

  // optional float tschchartaxisvaluelabelsorientation = 11;
  bool has_tschchartaxisvaluelabelsorientation() const;
  private:
  bool _internal_has_tschchartaxisvaluelabelsorientation() const;
  public:
  void clear_tschchartaxisvaluelabelsorientation();
  float tschchartaxisvaluelabelsorientation() const;
  void set_tschchartaxisvaluelabelsorientation(float value);
  private:
  float _internal_tschchartaxisvaluelabelsorientation() const;
  void _internal_set_tschchartaxisvaluelabelsorientation(float value);
  public:

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  bool has_tschchartaxiscategorymajorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlineopacity() const;
  public:
  void clear_tschchartaxiscategorymajorgridlineopacity();
  float tschchartaxiscategorymajorgridlineopacity() const;
  void set_tschchartaxiscategorymajorgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategorymajorgridlineopacity() const;
  void _internal_set_tschchartaxiscategorymajorgridlineopacity(float value);
  public:

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  bool has_tschchartaxisvaluemajorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlineopacity() const;
  public:
  void clear_tschchartaxisvaluemajorgridlineopacity();
  float tschchartaxisvaluemajorgridlineopacity() const;
  void set_tschchartaxisvaluemajorgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvaluemajorgridlineopacity() const;
  void _internal_set_tschchartaxisvaluemajorgridlineopacity(float value);
  public:

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  bool has_tschchartaxiscategoryminorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlineopacity() const;
  public:
  void clear_tschchartaxiscategoryminorgridlineopacity();
  float tschchartaxiscategoryminorgridlineopacity() const;
  void set_tschchartaxiscategoryminorgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategoryminorgridlineopacity() const;
  void _internal_set_tschchartaxiscategoryminorgridlineopacity(float value);
  public:

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  bool has_tschchartaxisvalueminorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlineopacity() const;
  public:
  void clear_tschchartaxisvalueminorgridlineopacity();
  float tschchartaxisvalueminorgridlineopacity() const;
  void set_tschchartaxisvalueminorgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvalueminorgridlineopacity() const;
  void _internal_set_tschchartaxisvalueminorgridlineopacity(float value);
  public:

  // optional bool tschchartaxiscategoryshowaxis = 24;
  bool has_tschchartaxiscategoryshowaxis() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowaxis() const;
  public:
  void clear_tschchartaxiscategoryshowaxis();
  bool tschchartaxiscategoryshowaxis() const;
  void set_tschchartaxiscategoryshowaxis(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowaxis() const;
  void _internal_set_tschchartaxiscategoryshowaxis(bool value);
  public:

  // optional bool tschchartaxisvalueshowaxis = 25;
  bool has_tschchartaxisvalueshowaxis() const;
  private:
  bool _internal_has_tschchartaxisvalueshowaxis() const;
  public:
  void clear_tschchartaxisvalueshowaxis();
  bool tschchartaxisvalueshowaxis() const;
  void set_tschchartaxisvalueshowaxis(bool value);
  private:
  bool _internal_tschchartaxisvalueshowaxis() const;
  void _internal_set_tschchartaxisvalueshowaxis(bool value);
  public:

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  bool has_tschchartaxiscategoryshowlastlabel() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowlastlabel() const;
  public:
  void clear_tschchartaxiscategoryshowlastlabel();
  bool tschchartaxiscategoryshowlastlabel() const;
  void set_tschchartaxiscategoryshowlastlabel(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowlastlabel() const;
  void _internal_set_tschchartaxiscategoryshowlastlabel(bool value);
  public:

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  bool has_tschchartaxiscategoryshowmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowmajorgridlines() const;
  public:
  void clear_tschchartaxiscategoryshowmajorgridlines();
  bool tschchartaxiscategoryshowmajorgridlines() const;
  void set_tschchartaxiscategoryshowmajorgridlines(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowmajorgridlines() const;
  void _internal_set_tschchartaxiscategoryshowmajorgridlines(bool value);
  public:

  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  bool has_tschchartaxisvalueshowmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvalueshowmajorgridlines() const;
  public:
  void clear_tschchartaxisvalueshowmajorgridlines();
  bool tschchartaxisvalueshowmajorgridlines() const;
  void set_tschchartaxisvalueshowmajorgridlines(bool value);
  private:
  bool _internal_tschchartaxisvalueshowmajorgridlines() const;
  void _internal_set_tschchartaxisvalueshowmajorgridlines(bool value);
  public:

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  bool has_tschchartaxiscategoryshowmajortickmarks() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowmajortickmarks() const;
  public:
  void clear_tschchartaxiscategoryshowmajortickmarks();
  bool tschchartaxiscategoryshowmajortickmarks() const;
  void set_tschchartaxiscategoryshowmajortickmarks(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowmajortickmarks() const;
  void _internal_set_tschchartaxiscategoryshowmajortickmarks(bool value);
  public:

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  bool has_tschchartaxisvalueshowmajortickmarks() const;
  private:
  bool _internal_has_tschchartaxisvalueshowmajortickmarks() const;
  public:
  void clear_tschchartaxisvalueshowmajortickmarks();
  bool tschchartaxisvalueshowmajortickmarks() const;
  void set_tschchartaxisvalueshowmajortickmarks(bool value);
  private:
  bool _internal_tschchartaxisvalueshowmajortickmarks() const;
  void _internal_set_tschchartaxisvalueshowmajortickmarks(bool value);
  public:

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  bool has_tschchartaxisvalueshowminimumlabel() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminimumlabel() const;
  public:
  void clear_tschchartaxisvalueshowminimumlabel();
  bool tschchartaxisvalueshowminimumlabel() const;
  void set_tschchartaxisvalueshowminimumlabel(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminimumlabel() const;
  void _internal_set_tschchartaxisvalueshowminimumlabel(bool value);
  public:

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  bool has_tschchartaxiscategoryshowminorgridlines() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowminorgridlines() const;
  public:
  void clear_tschchartaxiscategoryshowminorgridlines();
  bool tschchartaxiscategoryshowminorgridlines() const;
  void set_tschchartaxiscategoryshowminorgridlines(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowminorgridlines() const;
  void _internal_set_tschchartaxiscategoryshowminorgridlines(bool value);
  public:

  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  bool has_tschchartaxisvalueshowminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminorgridlines() const;
  public:
  void clear_tschchartaxisvalueshowminorgridlines();
  bool tschchartaxisvalueshowminorgridlines() const;
  void set_tschchartaxisvalueshowminorgridlines(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminorgridlines() const;
  void _internal_set_tschchartaxisvalueshowminorgridlines(bool value);
  public:

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  bool has_tschchartaxiscategoryshowminortickmarks() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowminortickmarks() const;
  public:
  void clear_tschchartaxiscategoryshowminortickmarks();
  bool tschchartaxiscategoryshowminortickmarks() const;
  void set_tschchartaxiscategoryshowminortickmarks(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowminortickmarks() const;
  void _internal_set_tschchartaxiscategoryshowminortickmarks(bool value);
  public:

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  bool has_tschchartaxisvalueshowminortickmarks() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminortickmarks() const;
  public:
  void clear_tschchartaxisvalueshowminortickmarks();
  bool tschchartaxisvalueshowminortickmarks() const;
  void set_tschchartaxisvalueshowminortickmarks(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminortickmarks() const;
  void _internal_set_tschchartaxisvalueshowminortickmarks(bool value);
  public:

  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  bool has_tschchartaxiscategorytickmarklocation() const;
  private:
  bool _internal_has_tschchartaxiscategorytickmarklocation() const;
  public:
  void clear_tschchartaxiscategorytickmarklocation();
  int32_t tschchartaxiscategorytickmarklocation() const;
  void set_tschchartaxiscategorytickmarklocation(int32_t value);
  private:
  int32_t _internal_tschchartaxiscategorytickmarklocation() const;
  void _internal_set_tschchartaxiscategorytickmarklocation(int32_t value);
  public:

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  bool has_tschchartaxisvaluetickmarklocation() const;
  private:
  bool _internal_has_tschchartaxisvaluetickmarklocation() const;
  public:
  void clear_tschchartaxisvaluetickmarklocation();
  int32_t tschchartaxisvaluetickmarklocation() const;
  void set_tschchartaxisvaluetickmarklocation(int32_t value);
  private:
  int32_t _internal_tschchartaxisvaluetickmarklocation() const;
  void _internal_set_tschchartaxisvaluetickmarklocation(int32_t value);
  public:

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  bool has_tschchartaxiscategorytitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxiscategorytitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxiscategorytitleparagraphstyleindex();
  int32_t tschchartaxiscategorytitleparagraphstyleindex() const;
  void set_tschchartaxiscategorytitleparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartaxiscategorytitleparagraphstyleindex() const;
  void _internal_set_tschchartaxiscategorytitleparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  bool has_tschchartaxisdefaulttitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisdefaulttitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxisdefaulttitleparagraphstyleindex();
  int32_t tschchartaxisdefaulttitleparagraphstyleindex() const;
  void set_tschchartaxisdefaulttitleparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartaxisdefaulttitleparagraphstyleindex() const;
  void _internal_set_tschchartaxisdefaulttitleparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  bool has_tschchartaxisvaluetitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisvaluetitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxisvaluetitleparagraphstyleindex();
  int32_t tschchartaxisvaluetitleparagraphstyleindex() const;
  void set_tschchartaxisvaluetitleparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartaxisvaluetitleparagraphstyleindex() const;
  void _internal_set_tschchartaxisvaluetitleparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  bool has_tschchartaxiscategoryverticalspacing() const;
  private:
  bool _internal_has_tschchartaxiscategoryverticalspacing() const;
  public:
  void clear_tschchartaxiscategoryverticalspacing();
  int32_t tschchartaxiscategoryverticalspacing() const;
  void set_tschchartaxiscategoryverticalspacing(int32_t value);
  private:
  int32_t _internal_tschchartaxiscategoryverticalspacing() const;
  void _internal_set_tschchartaxiscategoryverticalspacing(int32_t value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke_;
    ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke_;
    ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow_;
    ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow_;
    ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke_;
    ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke_;
    ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow_;
    ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow_;
    ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke_;
    ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke_;
    float tschchartaxiscategory3dgridlineopacity_;
    float tschchartaxisvalue3dgridlineopacity_;
    int32_t tschchartaxiscategoryhorizontalspacing_;
    int32_t tschchartaxiscategorylabelparagraphstyleindex_;
    int32_t tschchartaxisdefaultlabelparagraphstyleindex_;
    int32_t tschchartaxisvaluelabelparagraphstyleindex_;
    float tschchartaxiscategorylabelsorientation_;
    float tschchartaxisdefaultlabelsorientation_;
    float tschchartaxisvaluelabelsorientation_;
    float tschchartaxiscategorymajorgridlineopacity_;
    float tschchartaxisvaluemajorgridlineopacity_;
    float tschchartaxiscategoryminorgridlineopacity_;
    float tschchartaxisvalueminorgridlineopacity_;
    bool tschchartaxiscategoryshowaxis_;
    bool tschchartaxisvalueshowaxis_;
    bool tschchartaxiscategoryshowlastlabel_;
    bool tschchartaxiscategoryshowmajorgridlines_;
    bool tschchartaxisvalueshowmajorgridlines_;
    bool tschchartaxiscategoryshowmajortickmarks_;
    bool tschchartaxisvalueshowmajortickmarks_;
    bool tschchartaxisvalueshowminimumlabel_;
    bool tschchartaxiscategoryshowminorgridlines_;
    bool tschchartaxisvalueshowminorgridlines_;
    bool tschchartaxiscategoryshowminortickmarks_;
    bool tschchartaxisvalueshowminortickmarks_;
    int32_t tschchartaxiscategorytickmarklocation_;
    int32_t tschchartaxisvaluetickmarklocation_;
    int32_t tschchartaxiscategorytitleparagraphstyleindex_;
    int32_t tschchartaxisdefaulttitleparagraphstyleindex_;
    int32_t tschchartaxisvaluetitleparagraphstyleindex_;
    int32_t tschchartaxiscategoryverticalspacing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartAxisNonStyleArchive) */ {
 public:
  inline ChartAxisNonStyleArchive() : ChartAxisNonStyleArchive(nullptr) {}
  ~ChartAxisNonStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from);
  ChartAxisNonStyleArchive(ChartAxisNonStyleArchive&& from) noexcept
    : ChartAxisNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisNonStyleArchive& operator=(const ChartAxisNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisNonStyleArchive& operator=(ChartAxisNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisNonStyleArchive*>(
               &_ChartAxisNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChartAxisNonStyleArchive& a, ChartAxisNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisNonStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartAxisNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartAxisNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartAxisNonStyleArchive& from) {
    ChartAxisNonStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisNonStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartAxisNonStyleArchive";
  }
  protected:
  explicit ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartaxiscategorytitleFieldNumber = 15,
    kTschchartaxisvaluetitleFieldNumber = 16,
    kTschchartaxisdefaultnumberformatFieldNumber = 2,
    kTschchartaxisdefaultusermaxFieldNumber = 17,
    kTschchartaxisdefaultuserminFieldNumber = 18,
    kTschchartaxisdefault3DlabelpositionFieldNumber = 1,
    kTschchartaxisdefaultnumberformattypeFieldNumber = 3,
    kTschchartaxisvaluenumberofdecadesFieldNumber = 4,
    kTschchartaxisvaluenumberofmajorgridlinesFieldNumber = 5,
    kTschchartaxisvaluenumberofminorgridlinesFieldNumber = 6,
    kTschchartaxisvaluescaleFieldNumber = 8,
    kTschchartaxiscategoryplottoedgesFieldNumber = 7,
    kTschchartaxiscategoryshowlabelsFieldNumber = 9,
    kTschchartaxisdefaultshowlabelsFieldNumber = 10,
    kTschchartaxisvalueshowlabelsFieldNumber = 11,
    kTschchartaxiscategoryshowserieslabelsFieldNumber = 12,
    kTschchartaxismultidatashowserieslabelsFieldNumber = 19,
    kTschchartaxiscategoryshowtitleFieldNumber = 13,
    kTschchartaxisvalueshowtitleFieldNumber = 14,
  };
  // optional string tschchartaxiscategorytitle = 15;
  bool has_tschchartaxiscategorytitle() const;
  private:
  bool _internal_has_tschchartaxiscategorytitle() const;
  public:
  void clear_tschchartaxiscategorytitle();
  const std::string& tschchartaxiscategorytitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartaxiscategorytitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartaxiscategorytitle();
  PROTOBUF_NODISCARD std::string* release_tschchartaxiscategorytitle();
  void set_allocated_tschchartaxiscategorytitle(std::string* tschchartaxiscategorytitle);
  private:
  const std::string& _internal_tschchartaxiscategorytitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartaxiscategorytitle(const std::string& value);
  std::string* _internal_mutable_tschchartaxiscategorytitle();
  public:

  // optional string tschchartaxisvaluetitle = 16;
  bool has_tschchartaxisvaluetitle() const;
  private:
  bool _internal_has_tschchartaxisvaluetitle() const;
  public:
  void clear_tschchartaxisvaluetitle();
  const std::string& tschchartaxisvaluetitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartaxisvaluetitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartaxisvaluetitle();
  PROTOBUF_NODISCARD std::string* release_tschchartaxisvaluetitle();
  void set_allocated_tschchartaxisvaluetitle(std::string* tschchartaxisvaluetitle);
  private:
  const std::string& _internal_tschchartaxisvaluetitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartaxisvaluetitle(const std::string& value);
  std::string* _internal_mutable_tschchartaxisvaluetitle();
  public:

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 2;
  bool has_tschchartaxisdefaultnumberformat() const;
  private:
  bool _internal_has_tschchartaxisdefaultnumberformat() const;
  public:
  void clear_tschchartaxisdefaultnumberformat();
  const ::TSK::FormatStructArchive& tschchartaxisdefaultnumberformat() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_tschchartaxisdefaultnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdefaultnumberformat();
  void set_allocated_tschchartaxisdefaultnumberformat(::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdefaultnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdefaultnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultnumberformat(
      ::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdefaultnumberformat();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  bool has_tschchartaxisdefaultusermax() const;
  private:
  bool _internal_has_tschchartaxisdefaultusermax() const;
  public:
  void clear_tschchartaxisdefaultusermax();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax() const;
  PROTOBUF_NODISCARD ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermax();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermax();
  void set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisdefaultusermax() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisdefaultusermax();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultusermax(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisdefaultusermax();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  bool has_tschchartaxisdefaultusermin() const;
  private:
  bool _internal_has_tschchartaxisdefaultusermin() const;
  public:
  void clear_tschchartaxisdefaultusermin();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin() const;
  PROTOBUF_NODISCARD ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermin();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermin();
  void set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisdefaultusermin() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisdefaultusermin();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultusermin(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisdefaultusermin();

  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  bool has_tschchartaxisdefault3dlabelposition() const;
  private:
  bool _internal_has_tschchartaxisdefault3dlabelposition() const;
  public:
  void clear_tschchartaxisdefault3dlabelposition();
  int32_t tschchartaxisdefault3dlabelposition() const;
  void set_tschchartaxisdefault3dlabelposition(int32_t value);
  private:
  int32_t _internal_tschchartaxisdefault3dlabelposition() const;
  void _internal_set_tschchartaxisdefault3dlabelposition(int32_t value);
  public:

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  bool has_tschchartaxisdefaultnumberformattype() const;
  private:
  bool _internal_has_tschchartaxisdefaultnumberformattype() const;
  public:
  void clear_tschchartaxisdefaultnumberformattype();
  int32_t tschchartaxisdefaultnumberformattype() const;
  void set_tschchartaxisdefaultnumberformattype(int32_t value);
  private:
  int32_t _internal_tschchartaxisdefaultnumberformattype() const;
  void _internal_set_tschchartaxisdefaultnumberformattype(int32_t value);
  public:

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  bool has_tschchartaxisvaluenumberofdecades() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofdecades() const;
  public:
  void clear_tschchartaxisvaluenumberofdecades();
  int32_t tschchartaxisvaluenumberofdecades() const;
  void set_tschchartaxisvaluenumberofdecades(int32_t value);
  private:
  int32_t _internal_tschchartaxisvaluenumberofdecades() const;
  void _internal_set_tschchartaxisvaluenumberofdecades(int32_t value);
  public:

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  bool has_tschchartaxisvaluenumberofmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofmajorgridlines() const;
  public:
  void clear_tschchartaxisvaluenumberofmajorgridlines();
  int32_t tschchartaxisvaluenumberofmajorgridlines() const;
  void set_tschchartaxisvaluenumberofmajorgridlines(int32_t value);
  private:
  int32_t _internal_tschchartaxisvaluenumberofmajorgridlines() const;
  void _internal_set_tschchartaxisvaluenumberofmajorgridlines(int32_t value);
  public:

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  bool has_tschchartaxisvaluenumberofminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofminorgridlines() const;
  public:
  void clear_tschchartaxisvaluenumberofminorgridlines();
  int32_t tschchartaxisvaluenumberofminorgridlines() const;
  void set_tschchartaxisvaluenumberofminorgridlines(int32_t value);
  private:
  int32_t _internal_tschchartaxisvaluenumberofminorgridlines() const;
  void _internal_set_tschchartaxisvaluenumberofminorgridlines(int32_t value);
  public:

  // optional int32 tschchartaxisvaluescale = 8;
  bool has_tschchartaxisvaluescale() const;
  private:
  bool _internal_has_tschchartaxisvaluescale() const;
  public:
  void clear_tschchartaxisvaluescale();
  int32_t tschchartaxisvaluescale() const;
  void set_tschchartaxisvaluescale(int32_t value);
  private:
  int32_t _internal_tschchartaxisvaluescale() const;
  void _internal_set_tschchartaxisvaluescale(int32_t value);
  public:

  // optional bool tschchartaxiscategoryplottoedges = 7;
  bool has_tschchartaxiscategoryplottoedges() const;
  private:
  bool _internal_has_tschchartaxiscategoryplottoedges() const;
  public:
  void clear_tschchartaxiscategoryplottoedges();
  bool tschchartaxiscategoryplottoedges() const;
  void set_tschchartaxiscategoryplottoedges(bool value);
  private:
  bool _internal_tschchartaxiscategoryplottoedges() const;
  void _internal_set_tschchartaxiscategoryplottoedges(bool value);
  public:

  // optional bool tschchartaxiscategoryshowlabels = 9;
  bool has_tschchartaxiscategoryshowlabels() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowlabels() const;
  public:
  void clear_tschchartaxiscategoryshowlabels();
  bool tschchartaxiscategoryshowlabels() const;
  void set_tschchartaxiscategoryshowlabels(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowlabels() const;
  void _internal_set_tschchartaxiscategoryshowlabels(bool value);
  public:

  // optional bool tschchartaxisdefaultshowlabels = 10;
  bool has_tschchartaxisdefaultshowlabels() const;
  private:
  bool _internal_has_tschchartaxisdefaultshowlabels() const;
  public:
  void clear_tschchartaxisdefaultshowlabels();
  bool tschchartaxisdefaultshowlabels() const;
  void set_tschchartaxisdefaultshowlabels(bool value);
  private:
  bool _internal_tschchartaxisdefaultshowlabels() const;
  void _internal_set_tschchartaxisdefaultshowlabels(bool value);
  public:

  // optional bool tschchartaxisvalueshowlabels = 11;
  bool has_tschchartaxisvalueshowlabels() const;
  private:
  bool _internal_has_tschchartaxisvalueshowlabels() const;
  public:
  void clear_tschchartaxisvalueshowlabels();
  bool tschchartaxisvalueshowlabels() const;
  void set_tschchartaxisvalueshowlabels(bool value);
  private:
  bool _internal_tschchartaxisvalueshowlabels() const;
  void _internal_set_tschchartaxisvalueshowlabels(bool value);
  public:

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  bool has_tschchartaxiscategoryshowserieslabels() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowserieslabels() const;
  public:
  void clear_tschchartaxiscategoryshowserieslabels();
  bool tschchartaxiscategoryshowserieslabels() const;
  void set_tschchartaxiscategoryshowserieslabels(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowserieslabels() const;
  void _internal_set_tschchartaxiscategoryshowserieslabels(bool value);
  public:

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  bool has_tschchartaxismultidatashowserieslabels() const;
  private:
  bool _internal_has_tschchartaxismultidatashowserieslabels() const;
  public:
  void clear_tschchartaxismultidatashowserieslabels();
  bool tschchartaxismultidatashowserieslabels() const;
  void set_tschchartaxismultidatashowserieslabels(bool value);
  private:
  bool _internal_tschchartaxismultidatashowserieslabels() const;
  void _internal_set_tschchartaxismultidatashowserieslabels(bool value);
  public:

  // optional bool tschchartaxiscategoryshowtitle = 13;
  bool has_tschchartaxiscategoryshowtitle() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowtitle() const;
  public:
  void clear_tschchartaxiscategoryshowtitle();
  bool tschchartaxiscategoryshowtitle() const;
  void set_tschchartaxiscategoryshowtitle(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowtitle() const;
  void _internal_set_tschchartaxiscategoryshowtitle(bool value);
  public:

  // optional bool tschchartaxisvalueshowtitle = 14;
  bool has_tschchartaxisvalueshowtitle() const;
  private:
  bool _internal_has_tschchartaxisvalueshowtitle() const;
  public:
  void clear_tschchartaxisvalueshowtitle();
  bool tschchartaxisvalueshowtitle() const;
  void set_tschchartaxisvalueshowtitle(bool value);
  private:
  bool _internal_tschchartaxisvalueshowtitle() const;
  void _internal_set_tschchartaxisvalueshowtitle(bool value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartaxiscategorytitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartaxisvaluetitle_;
    ::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat_;
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax_;
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin_;
    int32_t tschchartaxisdefault3dlabelposition_;
    int32_t tschchartaxisdefaultnumberformattype_;
    int32_t tschchartaxisvaluenumberofdecades_;
    int32_t tschchartaxisvaluenumberofmajorgridlines_;
    int32_t tschchartaxisvaluenumberofminorgridlines_;
    int32_t tschchartaxisvaluescale_;
    bool tschchartaxiscategoryplottoedges_;
    bool tschchartaxiscategoryshowlabels_;
    bool tschchartaxisdefaultshowlabels_;
    bool tschchartaxisvalueshowlabels_;
    bool tschchartaxiscategoryshowserieslabels_;
    bool tschchartaxismultidatashowserieslabels_;
    bool tschchartaxiscategoryshowtitle_;
    bool tschchartaxisvalueshowtitle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartSeriesStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartSeriesStyleArchive) */ {
 public:
  inline ChartSeriesStyleArchive() : ChartSeriesStyleArchive(nullptr) {}
  ~ChartSeriesStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from);
  ChartSeriesStyleArchive(ChartSeriesStyleArchive&& from) noexcept
    : ChartSeriesStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartSeriesStyleArchive& operator=(const ChartSeriesStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSeriesStyleArchive& operator=(ChartSeriesStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSeriesStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSeriesStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSeriesStyleArchive*>(
               &_ChartSeriesStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChartSeriesStyleArchive& a, ChartSeriesStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSeriesStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSeriesStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSeriesStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSeriesStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSeriesStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSeriesStyleArchive& from) {
    ChartSeriesStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSeriesStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartSeriesStyleArchive";
  }
  protected:
  explicit ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartseriesdefaulterrorbarlineendFieldNumber = 1,
    kTschchartseriesdefaulterrorbarlineendscatterxFieldNumber = 2,
    kTschchartseriesdefaulterrorbarshadowFieldNumber = 3,
    kTschchartseriesdefaulterrorbarstrokeFieldNumber = 4,
    kTschchartseriesdefaulterrorbarstrokescatterxFieldNumber = 5,
    kTschchartseries3DareafillFieldNumber = 6,
    kTschchartseries3DbarfillFieldNumber = 7,
    kTschchartseries3DcolumnfillFieldNumber = 8,
    kTschchartseries3DlinefillFieldNumber = 9,
    kTschchartseries3DpiefillFieldNumber = 10,
    kTschchartseriesareafillFieldNumber = 11,
    kTschchartseriesbarfillFieldNumber = 12,
    kTschchartseriescolumnfillFieldNumber = 13,
    kTschchartseriesdefaultfillFieldNumber = 14,
    kTschchartseriesmixedareafillFieldNumber = 15,
    kTschchartseriesmixedcolumnfillFieldNumber = 16,
    kTschchartseriespiefillFieldNumber = 17,
    kTschchartseries3DareashadowFieldNumber = 30,
    kTschchartseries3DbarshadowFieldNumber = 31,
    kTschchartseries3DcolumnshadowFieldNumber = 32,
    kTschchartseries3DlineshadowFieldNumber = 33,
    kTschchartseries3DpieshadowFieldNumber = 34,
    kTschchartseriesareashadowFieldNumber = 35,
    kTschchartseriesbarshadowFieldNumber = 36,
    kTschchartseriesbubbleshadowFieldNumber = 37,
    kTschchartseriesdefaultshadowFieldNumber = 38,
    kTschchartserieslineshadowFieldNumber = 39,
    kTschchartseriesmixedareashadowFieldNumber = 40,
    kTschchartseriesmixedcolumnshadowFieldNumber = 41,
    kTschchartseriesmixedlineshadowFieldNumber = 42,
    kTschchartseriespieshadowFieldNumber = 43,
    kTschchartseriesscattershadowFieldNumber = 44,
    kTschchartseriesareastrokeFieldNumber = 45,
    kTschchartseriesbarstrokeFieldNumber = 46,
    kTschchartseriesbubblestrokeFieldNumber = 47,
    kTschchartserieslinestrokeFieldNumber = 48,
    kTschchartseriesmixedareastrokeFieldNumber = 49,
    kTschchartseriesmixedcolumnstrokeFieldNumber = 50,
    kTschchartseriesmixedlinestrokeFieldNumber = 51,
    kTschchartseriespiestrokeFieldNumber = 52,
    kTschchartseriesscatterstrokeFieldNumber = 53,
    kTschchartseriesareasymbolfillFieldNumber = 54,
    kTschchartseriesbubblesymbolfillFieldNumber = 55,
    kTschchartserieslinesymbolfillFieldNumber = 56,
    kTschchartseriesmixedareasymbolfillFieldNumber = 57,
    kTschchartseriesmixedlinesymbolfillFieldNumber = 58,
    kTschchartseriesscattersymbolfillFieldNumber = 59,
    kTschchartseriesareasymbolstrokeFieldNumber = 75,
    kTschchartseriesbubblesymbolstrokeFieldNumber = 76,
    kTschchartserieslinesymbolstrokeFieldNumber = 77,
    kTschchartseriesmixedareasymbolstrokeFieldNumber = 78,
    kTschchartseriesmixedlinesymbolstrokeFieldNumber = 79,
    kTschchartseriesscattersymbolstrokeFieldNumber = 80,
    kTschchartseriesdefaulttrendlineshadowFieldNumber = 85,
    kTschchartseriesdefaulttrendlinestrokeFieldNumber = 86,
    kTschchartseriesarealabelparagraphstyleindexFieldNumber = 18,
    kTschchartseriesbarlabelparagraphstyleindexFieldNumber = 19,
    kTschchartseriesdefaultlabelparagraphstyleindexFieldNumber = 20,
    kTschchartserieslinelabelparagraphstyleindexFieldNumber = 21,
    kTschchartseriesmixedlabelparagraphstyleindexFieldNumber = 22,
    kTschchartseriespielabelparagraphstyleindexFieldNumber = 23,
    kTschchartseriesdefaultopacityFieldNumber = 24,
    kTschchartseriesareaoutsidelabelparagraphstyleindexFieldNumber = 25,
    kTschchartseriesbaroutsidelabelparagraphstyleindexFieldNumber = 26,
    kTschchartseriesdefaultoutsidelabelparagraphstyleindexFieldNumber = 27,
    kTschchartseriesmixedoutsidelabelparagraphstyleindexFieldNumber = 28,
    kTschchartseriespieoutsidelabelparagraphstyleindexFieldNumber = 29,
    kTschchartseriesareasymbolfilluseseriesfillFieldNumber = 60,
    kTschchartserieslinesymbolfilluseseriesfillFieldNumber = 61,
    kTschchartseriesmixedareasymbolfilluseseriesfillFieldNumber = 62,
    kTschchartseriesmixedlinesymbolfilluseseriesfillFieldNumber = 63,
    kTschchartseriesareasymbolfilluseseriesstrokeFieldNumber = 64,
    kTschchartseriesbubblesymbolfilluseseriesstrokeFieldNumber = 65,
    kTschchartserieslinesymbolfilluseseriesstrokeFieldNumber = 66,
    kTschchartseriesmixedareasymbolfilluseseriesstrokeFieldNumber = 67,
    kTschchartseriesmixedlinesymbolfilluseseriesstrokeFieldNumber = 68,
    kTschchartseriesscattersymbolfilluseseriesstrokeFieldNumber = 69,
    kTschchartseriesareasymbolsizeFieldNumber = 70,
    kTschchartserieslinesymbolsizeFieldNumber = 71,
    kTschchartseriesmixedareasymbolsizeFieldNumber = 72,
    kTschchartseriesmixedlinesymbolsizeFieldNumber = 73,
    kTschchartseriesscattersymbolsizeFieldNumber = 74,
    kTschchartseriesdefaulttrendlineequationopacityFieldNumber = 81,
    kTschchartseriesdefaulttrendlineequationparagraphstyleindexFieldNumber = 82,
    kTschchartseriesdefaulttrendlinersquaredopacityFieldNumber = 83,
    kTschchartseriesdefaulttrendlinersquaredparagraphstyleindexFieldNumber = 84,
    kTschchartseriesareavaluelabelpositionFieldNumber = 87,
    kTschchartseriesbarvaluelabelpositionFieldNumber = 88,
    kTschchartseriesbubblevaluelabelpositionFieldNumber = 89,
    kTschchartseriesdefaultvaluelabelpositionFieldNumber = 90,
    kTschchartserieslinevaluelabelpositionFieldNumber = 91,
    kTschchartseriesmixedareavaluelabelpositionFieldNumber = 92,
    kTschchartseriesmixedcolumnvaluelabelpositionFieldNumber = 93,
    kTschchartseriesmixedlinevaluelabelpositionFieldNumber = 94,
    kTschchartseriesscattervaluelabelpositionFieldNumber = 95,
    kTschchartseriesstackedareavaluelabelpositionFieldNumber = 96,
    kTschchartseriesstackedbarvaluelabelpositionFieldNumber = 97,
  };
  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  bool has_tschchartseriesdefaulterrorbarlineend() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarlineend() const;
  public:
  void clear_tschchartseriesdefaulterrorbarlineend();
  const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend() const;
  PROTOBUF_NODISCARD ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineend();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineend();
  void set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaulterrorbarlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaulterrorbarlineend();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineend(
      ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarlineend();

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  bool has_tschchartseriesdefaulterrorbarlineendscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarlineendscatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarlineendscatterx();
  const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx() const;
  PROTOBUF_NODISCARD ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineendscatterx();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  void set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaulterrorbarlineendscatterx() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(
      ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarlineendscatterx();

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  bool has_tschchartseriesdefaulterrorbarshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarshadow() const;
  public:
  void clear_tschchartseriesdefaulterrorbarshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesdefaulterrorbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaulterrorbarshadow();
  void set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaulterrorbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaulterrorbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarshadow();

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  bool has_tschchartseriesdefaulterrorbarstroke() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstroke() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstroke();
  const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstroke();
  void set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulterrorbarstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulterrorbarstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstroke(
      ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarstroke();

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  bool has_tschchartseriesdefaulterrorbarstrokescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstrokescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstrokescatterx();
  const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstrokescatterx();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  void set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulterrorbarstrokescatterx() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(
      ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarstrokescatterx();

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  bool has_tschchartseries3dareafill() const;
  private:
  bool _internal_has_tschchartseries3dareafill() const;
  public:
  void clear_tschchartseries3dareafill();
  const ::TSD::FillArchive& tschchartseries3dareafill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseries3dareafill();
  ::TSD::FillArchive* mutable_tschchartseries3dareafill();
  void set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dareafill(
      ::TSD::FillArchive* tschchartseries3dareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dareafill();

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  bool has_tschchartseries3dbarfill() const;
  private:
  bool _internal_has_tschchartseries3dbarfill() const;
  public:
  void clear_tschchartseries3dbarfill();
  const ::TSD::FillArchive& tschchartseries3dbarfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseries3dbarfill();
  ::TSD::FillArchive* mutable_tschchartseries3dbarfill();
  void set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dbarfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dbarfill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dbarfill(
      ::TSD::FillArchive* tschchartseries3dbarfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dbarfill();

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  bool has_tschchartseries3dcolumnfill() const;
  private:
  bool _internal_has_tschchartseries3dcolumnfill() const;
  public:
  void clear_tschchartseries3dcolumnfill();
  const ::TSD::FillArchive& tschchartseries3dcolumnfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseries3dcolumnfill();
  ::TSD::FillArchive* mutable_tschchartseries3dcolumnfill();
  void set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dcolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dcolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dcolumnfill(
      ::TSD::FillArchive* tschchartseries3dcolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dcolumnfill();

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  bool has_tschchartseries3dlinefill() const;
  private:
  bool _internal_has_tschchartseries3dlinefill() const;
  public:
  void clear_tschchartseries3dlinefill();
  const ::TSD::FillArchive& tschchartseries3dlinefill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseries3dlinefill();
  ::TSD::FillArchive* mutable_tschchartseries3dlinefill();
  void set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dlinefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dlinefill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dlinefill(
      ::TSD::FillArchive* tschchartseries3dlinefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dlinefill();

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  bool has_tschchartseries3dpiefill() const;
  private:
  bool _internal_has_tschchartseries3dpiefill() const;
  public:
  void clear_tschchartseries3dpiefill();
  const ::TSD::FillArchive& tschchartseries3dpiefill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseries3dpiefill();
  ::TSD::FillArchive* mutable_tschchartseries3dpiefill();
  void set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dpiefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dpiefill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dpiefill(
      ::TSD::FillArchive* tschchartseries3dpiefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dpiefill();

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  bool has_tschchartseriesareafill() const;
  private:
  bool _internal_has_tschchartseriesareafill() const;
  public:
  void clear_tschchartseriesareafill();
  const ::TSD::FillArchive& tschchartseriesareafill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesareafill();
  ::TSD::FillArchive* mutable_tschchartseriesareafill();
  void set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareafill(
      ::TSD::FillArchive* tschchartseriesareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesareafill();

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  bool has_tschchartseriesbarfill() const;
  private:
  bool _internal_has_tschchartseriesbarfill() const;
  public:
  void clear_tschchartseriesbarfill();
  const ::TSD::FillArchive& tschchartseriesbarfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesbarfill();
  ::TSD::FillArchive* mutable_tschchartseriesbarfill();
  void set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesbarfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesbarfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarfill(
      ::TSD::FillArchive* tschchartseriesbarfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesbarfill();

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  bool has_tschchartseriescolumnfill() const;
  private:
  bool _internal_has_tschchartseriescolumnfill() const;
  public:
  void clear_tschchartseriescolumnfill();
  const ::TSD::FillArchive& tschchartseriescolumnfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriescolumnfill();
  ::TSD::FillArchive* mutable_tschchartseriescolumnfill();
  void set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriescolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriescolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriescolumnfill(
      ::TSD::FillArchive* tschchartseriescolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriescolumnfill();

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  bool has_tschchartseriesdefaultfill() const;
  private:
  bool _internal_has_tschchartseriesdefaultfill() const;
  public:
  void clear_tschchartseriesdefaultfill();
  const ::TSD::FillArchive& tschchartseriesdefaultfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesdefaultfill();
  ::TSD::FillArchive* mutable_tschchartseriesdefaultfill();
  void set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesdefaultfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesdefaultfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultfill(
      ::TSD::FillArchive* tschchartseriesdefaultfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesdefaultfill();

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  bool has_tschchartseriesmixedareafill() const;
  private:
  bool _internal_has_tschchartseriesmixedareafill() const;
  public:
  void clear_tschchartseriesmixedareafill();
  const ::TSD::FillArchive& tschchartseriesmixedareafill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesmixedareafill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedareafill();
  void set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareafill(
      ::TSD::FillArchive* tschchartseriesmixedareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedareafill();

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  bool has_tschchartseriesmixedcolumnfill() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnfill() const;
  public:
  void clear_tschchartseriesmixedcolumnfill();
  const ::TSD::FillArchive& tschchartseriesmixedcolumnfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesmixedcolumnfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedcolumnfill();
  void set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedcolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedcolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnfill(
      ::TSD::FillArchive* tschchartseriesmixedcolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedcolumnfill();

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  bool has_tschchartseriespiefill() const;
  private:
  bool _internal_has_tschchartseriespiefill() const;
  public:
  void clear_tschchartseriespiefill();
  const ::TSD::FillArchive& tschchartseriespiefill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriespiefill();
  ::TSD::FillArchive* mutable_tschchartseriespiefill();
  void set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriespiefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriespiefill();
  public:
  void unsafe_arena_set_allocated_tschchartseriespiefill(
      ::TSD::FillArchive* tschchartseriespiefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriespiefill();

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  bool has_tschchartseries3dareashadow() const;
  private:
  bool _internal_has_tschchartseries3dareashadow() const;
  public:
  void clear_tschchartseries3dareashadow();
  const ::TSD::ShadowArchive& tschchartseries3dareashadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseries3dareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dareashadow();
  void set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dareashadow(
      ::TSD::ShadowArchive* tschchartseries3dareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dareashadow();

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  bool has_tschchartseries3dbarshadow() const;
  private:
  bool _internal_has_tschchartseries3dbarshadow() const;
  public:
  void clear_tschchartseries3dbarshadow();
  const ::TSD::ShadowArchive& tschchartseries3dbarshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseries3dbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dbarshadow();
  void set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dbarshadow(
      ::TSD::ShadowArchive* tschchartseries3dbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dbarshadow();

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  bool has_tschchartseries3dcolumnshadow() const;
  private:
  bool _internal_has_tschchartseries3dcolumnshadow() const;
  public:
  void clear_tschchartseries3dcolumnshadow();
  const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseries3dcolumnshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dcolumnshadow();
  void set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dcolumnshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dcolumnshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dcolumnshadow(
      ::TSD::ShadowArchive* tschchartseries3dcolumnshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dcolumnshadow();

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  bool has_tschchartseries3dlineshadow() const;
  private:
  bool _internal_has_tschchartseries3dlineshadow() const;
  public:
  void clear_tschchartseries3dlineshadow();
  const ::TSD::ShadowArchive& tschchartseries3dlineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseries3dlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dlineshadow();
  void set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dlineshadow(
      ::TSD::ShadowArchive* tschchartseries3dlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dlineshadow();

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  bool has_tschchartseries3dpieshadow() const;
  private:
  bool _internal_has_tschchartseries3dpieshadow() const;
  public:
  void clear_tschchartseries3dpieshadow();
  const ::TSD::ShadowArchive& tschchartseries3dpieshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseries3dpieshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dpieshadow();
  void set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dpieshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dpieshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dpieshadow(
      ::TSD::ShadowArchive* tschchartseries3dpieshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dpieshadow();

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  bool has_tschchartseriesareashadow() const;
  private:
  bool _internal_has_tschchartseriesareashadow() const;
  public:
  void clear_tschchartseriesareashadow();
  const ::TSD::ShadowArchive& tschchartseriesareashadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesareashadow();
  void set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareashadow(
      ::TSD::ShadowArchive* tschchartseriesareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesareashadow();

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  bool has_tschchartseriesbarshadow() const;
  private:
  bool _internal_has_tschchartseriesbarshadow() const;
  public:
  void clear_tschchartseriesbarshadow();
  const ::TSD::ShadowArchive& tschchartseriesbarshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesbarshadow();
  void set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarshadow(
      ::TSD::ShadowArchive* tschchartseriesbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesbarshadow();

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  bool has_tschchartseriesbubbleshadow() const;
  private:
  bool _internal_has_tschchartseriesbubbleshadow() const;
  public:
  void clear_tschchartseriesbubbleshadow();
  const ::TSD::ShadowArchive& tschchartseriesbubbleshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesbubbleshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesbubbleshadow();
  void set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesbubbleshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesbubbleshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubbleshadow(
      ::TSD::ShadowArchive* tschchartseriesbubbleshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesbubbleshadow();

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  bool has_tschchartseriesdefaultshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaultshadow() const;
  public:
  void clear_tschchartseriesdefaultshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaultshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesdefaultshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaultshadow();
  void set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaultshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaultshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaultshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaultshadow();

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  bool has_tschchartserieslineshadow() const;
  private:
  bool _internal_has_tschchartserieslineshadow() const;
  public:
  void clear_tschchartserieslineshadow();
  const ::TSD::ShadowArchive& tschchartserieslineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartserieslineshadow();
  ::TSD::ShadowArchive* mutable_tschchartserieslineshadow();
  void set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartserieslineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartserieslineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartserieslineshadow(
      ::TSD::ShadowArchive* tschchartserieslineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartserieslineshadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  bool has_tschchartseriesmixedareashadow() const;
  private:
  bool _internal_has_tschchartseriesmixedareashadow() const;
  public:
  void clear_tschchartseriesmixedareashadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedareashadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesmixedareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedareashadow();
  void set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareashadow(
      ::TSD::ShadowArchive* tschchartseriesmixedareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedareashadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  bool has_tschchartseriesmixedcolumnshadow() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnshadow() const;
  public:
  void clear_tschchartseriesmixedcolumnshadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesmixedcolumnshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedcolumnshadow();
  void set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedcolumnshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedcolumnshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnshadow(
      ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedcolumnshadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  bool has_tschchartseriesmixedlineshadow() const;
  private:
  bool _internal_has_tschchartseriesmixedlineshadow() const;
  public:
  void clear_tschchartseriesmixedlineshadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesmixedlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedlineshadow();
  void set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlineshadow(
      ::TSD::ShadowArchive* tschchartseriesmixedlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedlineshadow();

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  bool has_tschchartseriespieshadow() const;
  private:
  bool _internal_has_tschchartseriespieshadow() const;
  public:
  void clear_tschchartseriespieshadow();
  const ::TSD::ShadowArchive& tschchartseriespieshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriespieshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriespieshadow();
  void set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriespieshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriespieshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriespieshadow(
      ::TSD::ShadowArchive* tschchartseriespieshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriespieshadow();

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  bool has_tschchartseriesscattershadow() const;
  private:
  bool _internal_has_tschchartseriesscattershadow() const;
  public:
  void clear_tschchartseriesscattershadow();
  const ::TSD::ShadowArchive& tschchartseriesscattershadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesscattershadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesscattershadow();
  void set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesscattershadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesscattershadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattershadow(
      ::TSD::ShadowArchive* tschchartseriesscattershadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesscattershadow();

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  bool has_tschchartseriesareastroke() const;
  private:
  bool _internal_has_tschchartseriesareastroke() const;
  public:
  void clear_tschchartseriesareastroke();
  const ::TSD::StrokeArchive& tschchartseriesareastroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesareastroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesareastroke();
  void set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesareastroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesareastroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareastroke(
      ::TSD::StrokeArchive* tschchartseriesareastroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesareastroke();

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  bool has_tschchartseriesbarstroke() const;
  private:
  bool _internal_has_tschchartseriesbarstroke() const;
  public:
  void clear_tschchartseriesbarstroke();
  const ::TSD::StrokeArchive& tschchartseriesbarstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesbarstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbarstroke();
  void set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbarstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbarstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarstroke(
      ::TSD::StrokeArchive* tschchartseriesbarstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbarstroke();

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  bool has_tschchartseriesbubblestroke() const;
  private:
  bool _internal_has_tschchartseriesbubblestroke() const;
  public:
  void clear_tschchartseriesbubblestroke();
  const ::TSD::StrokeArchive& tschchartseriesbubblestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesbubblestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbubblestroke();
  void set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbubblestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbubblestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblestroke(
      ::TSD::StrokeArchive* tschchartseriesbubblestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbubblestroke();

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  bool has_tschchartserieslinestroke() const;
  private:
  bool _internal_has_tschchartserieslinestroke() const;
  public:
  void clear_tschchartserieslinestroke();
  const ::TSD::StrokeArchive& tschchartserieslinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartserieslinestroke();
  ::TSD::StrokeArchive* mutable_tschchartserieslinestroke();
  void set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieslinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieslinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinestroke(
      ::TSD::StrokeArchive* tschchartserieslinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieslinestroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  bool has_tschchartseriesmixedareastroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareastroke() const;
  public:
  void clear_tschchartseriesmixedareastroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedareastroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesmixedareastroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedareastroke();
  void set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedareastroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedareastroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareastroke(
      ::TSD::StrokeArchive* tschchartseriesmixedareastroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedareastroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  bool has_tschchartseriesmixedcolumnstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnstroke() const;
  public:
  void clear_tschchartseriesmixedcolumnstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesmixedcolumnstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedcolumnstroke();
  void set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedcolumnstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedcolumnstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedcolumnstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  bool has_tschchartseriesmixedlinestroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinestroke() const;
  public:
  void clear_tschchartseriesmixedlinestroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesmixedlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinestroke();
  void set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinestroke(
      ::TSD::StrokeArchive* tschchartseriesmixedlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedlinestroke();

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  bool has_tschchartseriespiestroke() const;
  private:
  bool _internal_has_tschchartseriespiestroke() const;
  public:
  void clear_tschchartseriespiestroke();
  const ::TSD::StrokeArchive& tschchartseriespiestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriespiestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriespiestroke();
  void set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriespiestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriespiestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriespiestroke(
      ::TSD::StrokeArchive* tschchartseriespiestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriespiestroke();

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  bool has_tschchartseriesscatterstroke() const;
  private:
  bool _internal_has_tschchartseriesscatterstroke() const;
  public:
  void clear_tschchartseriesscatterstroke();
  const ::TSD::StrokeArchive& tschchartseriesscatterstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesscatterstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesscatterstroke();
  void set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesscatterstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesscatterstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscatterstroke(
      ::TSD::StrokeArchive* tschchartseriesscatterstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesscatterstroke();

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  bool has_tschchartseriesareasymbolfill() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfill() const;
  public:
  void clear_tschchartseriesareasymbolfill();
  const ::TSD::FillArchive& tschchartseriesareasymbolfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesareasymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesareasymbolfill();
  void set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesareasymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesareasymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareasymbolfill(
      ::TSD::FillArchive* tschchartseriesareasymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesareasymbolfill();

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  bool has_tschchartseriesbubblesymbolfill() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolfill() const;
  public:
  void clear_tschchartseriesbubblesymbolfill();
  const ::TSD::FillArchive& tschchartseriesbubblesymbolfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesbubblesymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesbubblesymbolfill();
  void set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesbubblesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesbubblesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblesymbolfill(
      ::TSD::FillArchive* tschchartseriesbubblesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesbubblesymbolfill();

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  bool has_tschchartserieslinesymbolfill() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfill() const;
  public:
  void clear_tschchartserieslinesymbolfill();
  const ::TSD::FillArchive& tschchartserieslinesymbolfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartserieslinesymbolfill();
  ::TSD::FillArchive* mutable_tschchartserieslinesymbolfill();
  void set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartserieslinesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartserieslinesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinesymbolfill(
      ::TSD::FillArchive* tschchartserieslinesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartserieslinesymbolfill();

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  bool has_tschchartseriesmixedareasymbolfill() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfill() const;
  public:
  void clear_tschchartseriesmixedareasymbolfill();
  const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesmixedareasymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedareasymbolfill();
  void set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedareasymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedareasymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareasymbolfill(
      ::TSD::FillArchive* tschchartseriesmixedareasymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedareasymbolfill();

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  bool has_tschchartseriesmixedlinesymbolfill() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfill() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfill();
  const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesmixedlinesymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedlinesymbolfill();
  void set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedlinesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedlinesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolfill(
      ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedlinesymbolfill();

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  bool has_tschchartseriesscattersymbolfill() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolfill() const;
  public:
  void clear_tschchartseriesscattersymbolfill();
  const ::TSD::FillArchive& tschchartseriesscattersymbolfill() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_tschchartseriesscattersymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesscattersymbolfill();
  void set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesscattersymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesscattersymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattersymbolfill(
      ::TSD::FillArchive* tschchartseriesscattersymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesscattersymbolfill();

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  bool has_tschchartseriesareasymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesareasymbolstroke() const;
  public:
  void clear_tschchartseriesareasymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesareasymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesareasymbolstroke();
  void set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesareasymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesareasymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareasymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesareasymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesareasymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  bool has_tschchartseriesbubblesymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolstroke() const;
  public:
  void clear_tschchartseriesbubblesymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesbubblesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbubblesymbolstroke();
  void set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbubblesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbubblesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblesymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbubblesymbolstroke();

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  bool has_tschchartserieslinesymbolstroke() const;
  private:
  bool _internal_has_tschchartserieslinesymbolstroke() const;
  public:
  void clear_tschchartserieslinesymbolstroke();
  const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartserieslinesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartserieslinesymbolstroke();
  void set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieslinesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieslinesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinesymbolstroke(
      ::TSD::StrokeArchive* tschchartserieslinesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieslinesymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  bool has_tschchartseriesmixedareasymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolstroke() const;
  public:
  void clear_tschchartseriesmixedareasymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesmixedareasymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedareasymbolstroke();
  void set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedareasymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedareasymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareasymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedareasymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  bool has_tschchartseriesmixedlinesymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolstroke() const;
  public:
  void clear_tschchartseriesmixedlinesymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesmixedlinesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinesymbolstroke();
  void set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedlinesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedlinesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedlinesymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  bool has_tschchartseriesscattersymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolstroke() const;
  public:
  void clear_tschchartseriesscattersymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesscattersymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesscattersymbolstroke();
  void set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesscattersymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesscattersymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattersymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesscattersymbolstroke();

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  bool has_tschchartseriesdefaulttrendlineshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshadow() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_tschchartseriesdefaulttrendlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaulttrendlineshadow();
  void set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaulttrendlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaulttrendlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulttrendlineshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaulttrendlineshadow();

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  bool has_tschchartseriesdefaulttrendlinestroke() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinestroke() const;
  public:
  void clear_tschchartseriesdefaulttrendlinestroke();
  const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke() const;
  PROTOBUF_NODISCARD ::TSD::StrokeArchive* release_tschchartseriesdefaulttrendlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulttrendlinestroke();
  void set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulttrendlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulttrendlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulttrendlinestroke(
      ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulttrendlinestroke();

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  bool has_tschchartseriesarealabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesarealabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesarealabelparagraphstyleindex();
  int32_t tschchartseriesarealabelparagraphstyleindex() const;
  void set_tschchartseriesarealabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesarealabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesarealabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  bool has_tschchartseriesbarlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesbarlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesbarlabelparagraphstyleindex();
  int32_t tschchartseriesbarlabelparagraphstyleindex() const;
  void set_tschchartseriesbarlabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesbarlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesbarlabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  bool has_tschchartseriesdefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaultlabelparagraphstyleindex();
  int32_t tschchartseriesdefaultlabelparagraphstyleindex() const;
  void set_tschchartseriesdefaultlabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaultlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaultlabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  bool has_tschchartserieslinelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartserieslinelabelparagraphstyleindex() const;
  public:
  void clear_tschchartserieslinelabelparagraphstyleindex();
  int32_t tschchartserieslinelabelparagraphstyleindex() const;
  void set_tschchartserieslinelabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartserieslinelabelparagraphstyleindex() const;
  void _internal_set_tschchartserieslinelabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  bool has_tschchartseriesmixedlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesmixedlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesmixedlabelparagraphstyleindex();
  int32_t tschchartseriesmixedlabelparagraphstyleindex() const;
  void set_tschchartseriesmixedlabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesmixedlabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  bool has_tschchartseriespielabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriespielabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriespielabelparagraphstyleindex();
  int32_t tschchartseriespielabelparagraphstyleindex() const;
  void set_tschchartseriespielabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriespielabelparagraphstyleindex() const;
  void _internal_set_tschchartseriespielabelparagraphstyleindex(int32_t value);
  public:

  // optional float tschchartseriesdefaultopacity = 24;
  bool has_tschchartseriesdefaultopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaultopacity() const;
  public:
  void clear_tschchartseriesdefaultopacity();
  float tschchartseriesdefaultopacity() const;
  void set_tschchartseriesdefaultopacity(float value);
  private:
  float _internal_tschchartseriesdefaultopacity() const;
  void _internal_set_tschchartseriesdefaultopacity(float value);
  public:

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  bool has_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesareaoutsidelabelparagraphstyleindex();
  int32_t tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesareaoutsidelabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  bool has_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesbaroutsidelabelparagraphstyleindex();
  int32_t tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesbaroutsidelabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  bool has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
  int32_t tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  bool has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesmixedoutsidelabelparagraphstyleindex();
  int32_t tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesmixedoutsidelabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  bool has_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriespieoutsidelabelparagraphstyleindex();
  int32_t tschchartseriespieoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriespieoutsidelabelparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(int32_t value);
  public:

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  bool has_tschchartseriesareasymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesareasymbolfilluseseriesfill();
  bool tschchartseriesareasymbolfilluseseriesfill() const;
  void set_tschchartseriesareasymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesareasymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesareasymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  bool has_tschchartserieslinesymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfilluseseriesfill() const;
  public:
  void clear_tschchartserieslinesymbolfilluseseriesfill();
  bool tschchartserieslinesymbolfilluseseriesfill() const;
  void set_tschchartserieslinesymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartserieslinesymbolfilluseseriesfill() const;
  void _internal_set_tschchartserieslinesymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  bool has_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesmixedareasymbolfilluseseriesfill();
  bool tschchartseriesmixedareasymbolfilluseseriesfill() const;
  void set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  bool has_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfilluseseriesfill();
  bool tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  void set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  bool has_tschchartseriesareasymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesareasymbolfilluseseriesstroke();
  bool tschchartseriesareasymbolfilluseseriesstroke() const;
  void set_tschchartseriesareasymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesareasymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesareasymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  bool has_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesbubblesymbolfilluseseriesstroke();
  bool tschchartseriesbubblesymbolfilluseseriesstroke() const;
  void set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  bool has_tschchartserieslinesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartserieslinesymbolfilluseseriesstroke();
  bool tschchartserieslinesymbolfilluseseriesstroke() const;
  void set_tschchartserieslinesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartserieslinesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartserieslinesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  bool has_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesmixedareasymbolfilluseseriesstroke();
  bool tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  void set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  bool has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfilluseseriesstroke();
  bool tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  void set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  bool has_tschchartseriesscattersymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesscattersymbolfilluseseriesstroke();
  bool tschchartseriesscattersymbolfilluseseriesstroke() const;
  void set_tschchartseriesscattersymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesscattersymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesscattersymbolfilluseseriesstroke(bool value);
  public:

  // optional float tschchartseriesareasymbolsize = 70;
  bool has_tschchartseriesareasymbolsize() const;
  private:
  bool _internal_has_tschchartseriesareasymbolsize() const;
  public:
  void clear_tschchartseriesareasymbolsize();
  float tschchartseriesareasymbolsize() const;
  void set_tschchartseriesareasymbolsize(float value);
  private:
  float _internal_tschchartseriesareasymbolsize() const;
  void _internal_set_tschchartseriesareasymbolsize(float value);
  public:

  // optional float tschchartserieslinesymbolsize = 71;
  bool has_tschchartserieslinesymbolsize() const;
  private:
  bool _internal_has_tschchartserieslinesymbolsize() const;
  public:
  void clear_tschchartserieslinesymbolsize();
  float tschchartserieslinesymbolsize() const;
  void set_tschchartserieslinesymbolsize(float value);
  private:
  float _internal_tschchartserieslinesymbolsize() const;
  void _internal_set_tschchartserieslinesymbolsize(float value);
  public:

  // optional float tschchartseriesmixedareasymbolsize = 72;
  bool has_tschchartseriesmixedareasymbolsize() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolsize() const;
  public:
  void clear_tschchartseriesmixedareasymbolsize();
  float tschchartseriesmixedareasymbolsize() const;
  void set_tschchartseriesmixedareasymbolsize(float value);
  private:
  float _internal_tschchartseriesmixedareasymbolsize() const;
  void _internal_set_tschchartseriesmixedareasymbolsize(float value);
  public:

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  bool has_tschchartseriesmixedlinesymbolsize() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolsize() const;
  public:
  void clear_tschchartseriesmixedlinesymbolsize();
  float tschchartseriesmixedlinesymbolsize() const;
  void set_tschchartseriesmixedlinesymbolsize(float value);
  private:
  float _internal_tschchartseriesmixedlinesymbolsize() const;
  void _internal_set_tschchartseriesmixedlinesymbolsize(float value);
  public:

  // optional float tschchartseriesscattersymbolsize = 74;
  bool has_tschchartseriesscattersymbolsize() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolsize() const;
  public:
  void clear_tschchartseriesscattersymbolsize();
  float tschchartseriesscattersymbolsize() const;
  void set_tschchartseriesscattersymbolsize(float value);
  private:
  float _internal_tschchartseriesscattersymbolsize() const;
  void _internal_set_tschchartseriesscattersymbolsize(float value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  bool has_tschchartseriesdefaulttrendlineequationopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationopacity() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationopacity();
  float tschchartseriesdefaulttrendlineequationopacity() const;
  void set_tschchartseriesdefaulttrendlineequationopacity(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationopacity() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationopacity(float value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  bool has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
  int32_t tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  void set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(int32_t value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  bool has_tschchartseriesdefaulttrendlinersquaredopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredopacity() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredopacity();
  float tschchartseriesdefaulttrendlinersquaredopacity() const;
  void set_tschchartseriesdefaulttrendlinersquaredopacity(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredopacity() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredopacity(float value);
  public:

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  bool has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
  int32_t tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  void set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(int32_t value);
  public:

  // optional int32 tschchartseriesareavaluelabelposition = 87;
  bool has_tschchartseriesareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesareavaluelabelposition() const;
  public:
  void clear_tschchartseriesareavaluelabelposition();
  int32_t tschchartseriesareavaluelabelposition() const;
  void set_tschchartseriesareavaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesareavaluelabelposition() const;
  void _internal_set_tschchartseriesareavaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  bool has_tschchartseriesbarvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesbarvaluelabelposition() const;
  public:
  void clear_tschchartseriesbarvaluelabelposition();
  int32_t tschchartseriesbarvaluelabelposition() const;
  void set_tschchartseriesbarvaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesbarvaluelabelposition() const;
  void _internal_set_tschchartseriesbarvaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  bool has_tschchartseriesbubblevaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesbubblevaluelabelposition() const;
  public:
  void clear_tschchartseriesbubblevaluelabelposition();
  int32_t tschchartseriesbubblevaluelabelposition() const;
  void set_tschchartseriesbubblevaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesbubblevaluelabelposition() const;
  void _internal_set_tschchartseriesbubblevaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  bool has_tschchartseriesdefaultvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesdefaultvaluelabelposition() const;
  public:
  void clear_tschchartseriesdefaultvaluelabelposition();
  int32_t tschchartseriesdefaultvaluelabelposition() const;
  void set_tschchartseriesdefaultvaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaultvaluelabelposition() const;
  void _internal_set_tschchartseriesdefaultvaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  bool has_tschchartserieslinevaluelabelposition() const;
  private:
  bool _internal_has_tschchartserieslinevaluelabelposition() const;
  public:
  void clear_tschchartserieslinevaluelabelposition();
  int32_t tschchartserieslinevaluelabelposition() const;
  void set_tschchartserieslinevaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartserieslinevaluelabelposition() const;
  void _internal_set_tschchartserieslinevaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  bool has_tschchartseriesmixedareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedareavaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedareavaluelabelposition();
  int32_t tschchartseriesmixedareavaluelabelposition() const;
  void set_tschchartseriesmixedareavaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedareavaluelabelposition() const;
  void _internal_set_tschchartseriesmixedareavaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  bool has_tschchartseriesmixedcolumnvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnvaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedcolumnvaluelabelposition();
  int32_t tschchartseriesmixedcolumnvaluelabelposition() const;
  void set_tschchartseriesmixedcolumnvaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedcolumnvaluelabelposition() const;
  void _internal_set_tschchartseriesmixedcolumnvaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  bool has_tschchartseriesmixedlinevaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedlinevaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedlinevaluelabelposition();
  int32_t tschchartseriesmixedlinevaluelabelposition() const;
  void set_tschchartseriesmixedlinevaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedlinevaluelabelposition() const;
  void _internal_set_tschchartseriesmixedlinevaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  bool has_tschchartseriesscattervaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesscattervaluelabelposition() const;
  public:
  void clear_tschchartseriesscattervaluelabelposition();
  int32_t tschchartseriesscattervaluelabelposition() const;
  void set_tschchartseriesscattervaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesscattervaluelabelposition() const;
  void _internal_set_tschchartseriesscattervaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  bool has_tschchartseriesstackedareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesstackedareavaluelabelposition() const;
  public:
  void clear_tschchartseriesstackedareavaluelabelposition();
  int32_t tschchartseriesstackedareavaluelabelposition() const;
  void set_tschchartseriesstackedareavaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesstackedareavaluelabelposition() const;
  void _internal_set_tschchartseriesstackedareavaluelabelposition(int32_t value);
  public:

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  bool has_tschchartseriesstackedbarvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesstackedbarvaluelabelposition() const;
  public:
  void clear_tschchartseriesstackedbarvaluelabelposition();
  int32_t tschchartseriesstackedbarvaluelabelposition() const;
  void set_tschchartseriesstackedbarvaluelabelposition(int32_t value);
  private:
  int32_t _internal_tschchartseriesstackedbarvaluelabelposition() const;
  void _internal_set_tschchartseriesstackedbarvaluelabelposition(int32_t value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<4> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend_;
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx_;
    ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow_;
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke_;
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx_;
    ::TSD::FillArchive* tschchartseries3dareafill_;
    ::TSD::FillArchive* tschchartseries3dbarfill_;
    ::TSD::FillArchive* tschchartseries3dcolumnfill_;
    ::TSD::FillArchive* tschchartseries3dlinefill_;
    ::TSD::FillArchive* tschchartseries3dpiefill_;
    ::TSD::FillArchive* tschchartseriesareafill_;
    ::TSD::FillArchive* tschchartseriesbarfill_;
    ::TSD::FillArchive* tschchartseriescolumnfill_;
    ::TSD::FillArchive* tschchartseriesdefaultfill_;
    ::TSD::FillArchive* tschchartseriesmixedareafill_;
    ::TSD::FillArchive* tschchartseriesmixedcolumnfill_;
    ::TSD::FillArchive* tschchartseriespiefill_;
    ::TSD::ShadowArchive* tschchartseries3dareashadow_;
    ::TSD::ShadowArchive* tschchartseries3dbarshadow_;
    ::TSD::ShadowArchive* tschchartseries3dcolumnshadow_;
    ::TSD::ShadowArchive* tschchartseries3dlineshadow_;
    ::TSD::ShadowArchive* tschchartseries3dpieshadow_;
    ::TSD::ShadowArchive* tschchartseriesareashadow_;
    ::TSD::ShadowArchive* tschchartseriesbarshadow_;
    ::TSD::ShadowArchive* tschchartseriesbubbleshadow_;
    ::TSD::ShadowArchive* tschchartseriesdefaultshadow_;
    ::TSD::ShadowArchive* tschchartserieslineshadow_;
    ::TSD::ShadowArchive* tschchartseriesmixedareashadow_;
    ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow_;
    ::TSD::ShadowArchive* tschchartseriesmixedlineshadow_;
    ::TSD::ShadowArchive* tschchartseriespieshadow_;
    ::TSD::ShadowArchive* tschchartseriesscattershadow_;
    ::TSD::StrokeArchive* tschchartseriesareastroke_;
    ::TSD::StrokeArchive* tschchartseriesbarstroke_;
    ::TSD::StrokeArchive* tschchartseriesbubblestroke_;
    ::TSD::StrokeArchive* tschchartserieslinestroke_;
    ::TSD::StrokeArchive* tschchartseriesmixedareastroke_;
    ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke_;
    ::TSD::StrokeArchive* tschchartseriesmixedlinestroke_;
    ::TSD::StrokeArchive* tschchartseriespiestroke_;
    ::TSD::StrokeArchive* tschchartseriesscatterstroke_;
    ::TSD::FillArchive* tschchartseriesareasymbolfill_;
    ::TSD::FillArchive* tschchartseriesbubblesymbolfill_;
    ::TSD::FillArchive* tschchartserieslinesymbolfill_;
    ::TSD::FillArchive* tschchartseriesmixedareasymbolfill_;
    ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill_;
    ::TSD::FillArchive* tschchartseriesscattersymbolfill_;
    ::TSD::StrokeArchive* tschchartseriesareasymbolstroke_;
    ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke_;
    ::TSD::StrokeArchive* tschchartserieslinesymbolstroke_;
    ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke_;
    ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke_;
    ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke_;
    ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow_;
    ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke_;
    int32_t tschchartseriesarealabelparagraphstyleindex_;
    int32_t tschchartseriesbarlabelparagraphstyleindex_;
    int32_t tschchartseriesdefaultlabelparagraphstyleindex_;
    int32_t tschchartserieslinelabelparagraphstyleindex_;
    int32_t tschchartseriesmixedlabelparagraphstyleindex_;
    int32_t tschchartseriespielabelparagraphstyleindex_;
    float tschchartseriesdefaultopacity_;
    int32_t tschchartseriesareaoutsidelabelparagraphstyleindex_;
    int32_t tschchartseriesbaroutsidelabelparagraphstyleindex_;
    int32_t tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
    int32_t tschchartseriesmixedoutsidelabelparagraphstyleindex_;
    int32_t tschchartseriespieoutsidelabelparagraphstyleindex_;
    bool tschchartseriesareasymbolfilluseseriesfill_;
    bool tschchartserieslinesymbolfilluseseriesfill_;
    bool tschchartseriesmixedareasymbolfilluseseriesfill_;
    bool tschchartseriesmixedlinesymbolfilluseseriesfill_;
    bool tschchartseriesareasymbolfilluseseriesstroke_;
    bool tschchartseriesbubblesymbolfilluseseriesstroke_;
    bool tschchartserieslinesymbolfilluseseriesstroke_;
    bool tschchartseriesmixedareasymbolfilluseseriesstroke_;
    bool tschchartseriesmixedlinesymbolfilluseseriesstroke_;
    bool tschchartseriesscattersymbolfilluseseriesstroke_;
    float tschchartseriesareasymbolsize_;
    float tschchartserieslinesymbolsize_;
    float tschchartseriesmixedareasymbolsize_;
    float tschchartseriesmixedlinesymbolsize_;
    float tschchartseriesscattersymbolsize_;
    float tschchartseriesdefaulttrendlineequationopacity_;
    int32_t tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
    float tschchartseriesdefaulttrendlinersquaredopacity_;
    int32_t tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
    int32_t tschchartseriesareavaluelabelposition_;
    int32_t tschchartseriesbarvaluelabelposition_;
    int32_t tschchartseriesbubblevaluelabelposition_;
    int32_t tschchartseriesdefaultvaluelabelposition_;
    int32_t tschchartserieslinevaluelabelposition_;
    int32_t tschchartseriesmixedareavaluelabelposition_;
    int32_t tschchartseriesmixedcolumnvaluelabelposition_;
    int32_t tschchartseriesmixedlinevaluelabelposition_;
    int32_t tschchartseriesscattervaluelabelposition_;
    int32_t tschchartseriesstackedareavaluelabelposition_;
    int32_t tschchartseriesstackedbarvaluelabelposition_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartSeriesNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartSeriesNonStyleArchive) */ {
 public:
  inline ChartSeriesNonStyleArchive() : ChartSeriesNonStyleArchive(nullptr) {}
  ~ChartSeriesNonStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from);
  ChartSeriesNonStyleArchive(ChartSeriesNonStyleArchive&& from) noexcept
    : ChartSeriesNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartSeriesNonStyleArchive& operator=(const ChartSeriesNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSeriesNonStyleArchive& operator=(ChartSeriesNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSeriesNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSeriesNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSeriesNonStyleArchive*>(
               &_ChartSeriesNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChartSeriesNonStyleArchive& a, ChartSeriesNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSeriesNonStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSeriesNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSeriesNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSeriesNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSeriesNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSeriesNonStyleArchive& from) {
    ChartSeriesNonStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSeriesNonStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartSeriesNonStyleArchive";
  }
  protected:
  explicit ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartseriesdefaulttrendlinelabelstringFieldNumber = 54,
    kTschchartseriesdefaulterrorbarcustomnegativedataFieldNumber = 2,
    kTschchartseriesdefaulterrorbarcustomnegativedatascatterxFieldNumber = 3,
    kTschchartseriesdefaulterrorbarcustompositivedataFieldNumber = 4,
    kTschchartseriesdefaulterrorbarcustompositivedatascatterxFieldNumber = 5,
    kTschchartseriesdefaultnumberformatFieldNumber = 21,
    kTschchartseriespienumberformatFieldNumber = 22,
    kTschchartseriesstackedpercentnumberformatFieldNumber = 25,
    kTschchartseriesbubbleadjustmentscaleFieldNumber = 1,
    kTschchartseriesdefaulterrorbarfixedvalueFieldNumber = 6,
    kTschchartseriesdefaulterrorbarfixedvaluescatterxFieldNumber = 7,
    kTschchartseriesdefaulterrorbarpercentvalueFieldNumber = 8,
    kTschchartseriesdefaulterrorbarpercentvaluescatterxFieldNumber = 9,
    kTschchartseriesdefaulterrorbarsettingFieldNumber = 10,
    kTschchartseriesdefaulterrorbarsettingscatterxFieldNumber = 11,
    kTschchartseriesdefaulterrorbarstddevvalueFieldNumber = 12,
    kTschchartseriesdefaulterrorbarstddevvaluescatterxFieldNumber = 13,
    kTschchartseriesdefaulterrorbartypeFieldNumber = 14,
    kTschchartseriesdefaulterrorbartypescatterxFieldNumber = 15,
    kTschchartseriespielabelexplosionFieldNumber = 16,
    kTschchartseriesbubblelinetypeFieldNumber = 17,
    kTschchartserieslinelinetypeFieldNumber = 18,
    kTschchartseriesmixedlinelinetypeFieldNumber = 19,
    kTschchartseriesscatterlinetypeFieldNumber = 20,
    kTschchartseriesdefaultnumberformattypeFieldNumber = 23,
    kTschchartseriespienumberformattypeFieldNumber = 24,
    kTschchartseriesdefaultseriestypeFieldNumber = 26,
    kTschchartseriesdefaultshowerrorbarFieldNumber = 27,
    kTschchartseriesdefaultshowerrorbarscatterxFieldNumber = 28,
    kTschchartseriesscattershowlineFieldNumber = 29,
    kTschchartseriesbubbleshownegativedataFieldNumber = 30,
    kTschchartseriespieshowserieslabelsFieldNumber = 31,
    kTschchartseriesareashowsymbolFieldNumber = 32,
    kTschchartserieslineshowsymbolFieldNumber = 33,
    kTschchartseriesmixedareashowsymbolFieldNumber = 34,
    kTschchartseriesmixedlineshowsymbolFieldNumber = 35,
    kTschchartseriesscattershowsymbolFieldNumber = 36,
    kTschchartseriesdefaultshowtrendlineFieldNumber = 37,
    kTschchartseriesareashowvaluelabelsFieldNumber = 38,
    kTschchartseriesbarshowvaluelabelsFieldNumber = 39,
    kTschchartseriesbubbleshowvaluelabelsFieldNumber = 40,
    kTschchartseriesdefaultshowvaluelabelsFieldNumber = 41,
    kTschchartserieslineshowvaluelabelsFieldNumber = 42,
    kTschchartseriesbubblesizedimensionFieldNumber = 46,
    kTschchartseriesareasymboltypeFieldNumber = 47,
    kTschchartseriesmixedshowvaluelabelsFieldNumber = 43,
    kTschchartseriespieshowvaluelabelsFieldNumber = 44,
    kTschchartseriesscattershowvaluelabelsFieldNumber = 45,
    kTschchartseriesdefaulttrendlineshowequationFieldNumber = 59,
    kTschchartserieslinesymboltypeFieldNumber = 48,
    kTschchartseriesmixedareasymboltypeFieldNumber = 49,
    kTschchartseriesmixedlinesymboltypeFieldNumber = 50,
    kTschchartseriesscattersymboltypeFieldNumber = 51,
    kTschchartseriesdefaulttrendlineequationoffsetxFieldNumber = 52,
    kTschchartseriesdefaulttrendlineequationoffsetyFieldNumber = 53,
    kTschchartseriesdefaulttrendlineorderFieldNumber = 55,
    kTschchartseriesdefaulttrendlineperiodFieldNumber = 56,
    kTschchartseriesdefaulttrendlinersquaredoffsetxFieldNumber = 57,
    kTschchartseriesdefaulttrendlinersquaredoffsetyFieldNumber = 58,
    kTschchartseriesdefaulttrendlinetypeFieldNumber = 62,
    kTschchartseriespiewedgeexplosionFieldNumber = 63,
    kTschchartseriesdefaulttrendlineshowlabelFieldNumber = 60,
    kTschchartseriesdefaulttrendlineshowr2ValueFieldNumber = 61,
    kTschchartseriesbubbleshowserieslabelsFieldNumber = 65,
    kTschchartseriesscattershowserieslabelsFieldNumber = 67,
    kTschchartseriesdefaultyaxisordinalFieldNumber = 64,
    kTschchartseriesbubblevaluelabelsaxisFieldNumber = 66,
    kTschchartseriesscattervaluelabelsaxisFieldNumber = 68,
  };
  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  bool has_tschchartseriesdefaulttrendlinelabelstring() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinelabelstring() const;
  public:
  void clear_tschchartseriesdefaulttrendlinelabelstring();
  const std::string& tschchartseriesdefaulttrendlinelabelstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartseriesdefaulttrendlinelabelstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartseriesdefaulttrendlinelabelstring();
  PROTOBUF_NODISCARD std::string* release_tschchartseriesdefaulttrendlinelabelstring();
  void set_allocated_tschchartseriesdefaulttrendlinelabelstring(std::string* tschchartseriesdefaulttrendlinelabelstring);
  private:
  const std::string& _internal_tschchartseriesdefaulttrendlinelabelstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartseriesdefaulttrendlinelabelstring(const std::string& value);
  std::string* _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
  public:

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  bool has_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustomnegativedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata() const;
  PROTOBUF_NODISCARD ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  bool has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  PROTOBUF_NODISCARD ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  bool has_tschchartseriesdefaulterrorbarcustompositivedata() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustompositivedata() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustompositivedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata() const;
  PROTOBUF_NODISCARD ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  void set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustompositivedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  bool has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  PROTOBUF_NODISCARD ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  void set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedatascatterx();

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 21;
  bool has_tschchartseriesdefaultnumberformat() const;
  private:
  bool _internal_has_tschchartseriesdefaultnumberformat() const;
  public:
  void clear_tschchartseriesdefaultnumberformat();
  const ::TSK::FormatStructArchive& tschchartseriesdefaultnumberformat() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_tschchartseriesdefaultnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdefaultnumberformat();
  void set_allocated_tschchartseriesdefaultnumberformat(::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdefaultnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdefaultnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultnumberformat(
      ::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdefaultnumberformat();

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 22;
  bool has_tschchartseriespienumberformat() const;
  private:
  bool _internal_has_tschchartseriespienumberformat() const;
  public:
  void clear_tschchartseriespienumberformat();
  const ::TSK::FormatStructArchive& tschchartseriespienumberformat() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_tschchartseriespienumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriespienumberformat();
  void set_allocated_tschchartseriespienumberformat(::TSK::FormatStructArchive* tschchartseriespienumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriespienumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriespienumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriespienumberformat(
      ::TSK::FormatStructArchive* tschchartseriespienumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriespienumberformat();

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  bool has_tschchartseriesstackedpercentnumberformat() const;
  private:
  bool _internal_has_tschchartseriesstackedpercentnumberformat() const;
  public:
  void clear_tschchartseriesstackedpercentnumberformat();
  const ::TSK::FormatStructArchive& tschchartseriesstackedpercentnumberformat() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_tschchartseriesstackedpercentnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesstackedpercentnumberformat();
  void set_allocated_tschchartseriesstackedpercentnumberformat(::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesstackedpercentnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesstackedpercentnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesstackedpercentnumberformat(
      ::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesstackedpercentnumberformat();

  // optional float tschchartseriesbubbleadjustmentscale = 1;
  bool has_tschchartseriesbubbleadjustmentscale() const;
  private:
  bool _internal_has_tschchartseriesbubbleadjustmentscale() const;
  public:
  void clear_tschchartseriesbubbleadjustmentscale();
  float tschchartseriesbubbleadjustmentscale() const;
  void set_tschchartseriesbubbleadjustmentscale(float value);
  private:
  float _internal_tschchartseriesbubbleadjustmentscale() const;
  void _internal_set_tschchartseriesbubbleadjustmentscale(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  bool has_tschchartseriesdefaulterrorbarfixedvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarfixedvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarfixedvalue();
  float tschchartseriesdefaulterrorbarfixedvalue() const;
  void set_tschchartseriesdefaulterrorbarfixedvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarfixedvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarfixedvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  bool has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarfixedvaluescatterx();
  float tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  bool has_tschchartseriesdefaulterrorbarpercentvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarpercentvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarpercentvalue();
  float tschchartseriesdefaulterrorbarpercentvalue() const;
  void set_tschchartseriesdefaulterrorbarpercentvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarpercentvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarpercentvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  bool has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarpercentvaluescatterx();
  float tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  bool has_tschchartseriesdefaulterrorbarsetting() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarsetting() const;
  public:
  void clear_tschchartseriesdefaulterrorbarsetting();
  int32_t tschchartseriesdefaulterrorbarsetting() const;
  void set_tschchartseriesdefaulterrorbarsetting(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulterrorbarsetting() const;
  void _internal_set_tschchartseriesdefaulterrorbarsetting(int32_t value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  bool has_tschchartseriesdefaulterrorbarsettingscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarsettingscatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarsettingscatterx();
  int32_t tschchartseriesdefaulterrorbarsettingscatterx() const;
  void set_tschchartseriesdefaulterrorbarsettingscatterx(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulterrorbarsettingscatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarsettingscatterx(int32_t value);
  public:

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  bool has_tschchartseriesdefaulterrorbarstddevvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstddevvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstddevvalue();
  float tschchartseriesdefaulterrorbarstddevvalue() const;
  void set_tschchartseriesdefaulterrorbarstddevvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarstddevvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarstddevvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  bool has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstddevvaluescatterx();
  float tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value);
  public:

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  bool has_tschchartseriesdefaulterrorbartype() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbartype() const;
  public:
  void clear_tschchartseriesdefaulterrorbartype();
  int32_t tschchartseriesdefaulterrorbartype() const;
  void set_tschchartseriesdefaulterrorbartype(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulterrorbartype() const;
  void _internal_set_tschchartseriesdefaulterrorbartype(int32_t value);
  public:

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  bool has_tschchartseriesdefaulterrorbartypescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbartypescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbartypescatterx();
  int32_t tschchartseriesdefaulterrorbartypescatterx() const;
  void set_tschchartseriesdefaulterrorbartypescatterx(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulterrorbartypescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbartypescatterx(int32_t value);
  public:

  // optional float tschchartseriespielabelexplosion = 16;
  bool has_tschchartseriespielabelexplosion() const;
  private:
  bool _internal_has_tschchartseriespielabelexplosion() const;
  public:
  void clear_tschchartseriespielabelexplosion();
  float tschchartseriespielabelexplosion() const;
  void set_tschchartseriespielabelexplosion(float value);
  private:
  float _internal_tschchartseriespielabelexplosion() const;
  void _internal_set_tschchartseriespielabelexplosion(float value);
  public:

  // optional int32 tschchartseriesbubblelinetype = 17;
  bool has_tschchartseriesbubblelinetype() const;
  private:
  bool _internal_has_tschchartseriesbubblelinetype() const;
  public:
  void clear_tschchartseriesbubblelinetype();
  int32_t tschchartseriesbubblelinetype() const;
  void set_tschchartseriesbubblelinetype(int32_t value);
  private:
  int32_t _internal_tschchartseriesbubblelinetype() const;
  void _internal_set_tschchartseriesbubblelinetype(int32_t value);
  public:

  // optional int32 tschchartserieslinelinetype = 18;
  bool has_tschchartserieslinelinetype() const;
  private:
  bool _internal_has_tschchartserieslinelinetype() const;
  public:
  void clear_tschchartserieslinelinetype();
  int32_t tschchartserieslinelinetype() const;
  void set_tschchartserieslinelinetype(int32_t value);
  private:
  int32_t _internal_tschchartserieslinelinetype() const;
  void _internal_set_tschchartserieslinelinetype(int32_t value);
  public:

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  bool has_tschchartseriesmixedlinelinetype() const;
  private:
  bool _internal_has_tschchartseriesmixedlinelinetype() const;
  public:
  void clear_tschchartseriesmixedlinelinetype();
  int32_t tschchartseriesmixedlinelinetype() const;
  void set_tschchartseriesmixedlinelinetype(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedlinelinetype() const;
  void _internal_set_tschchartseriesmixedlinelinetype(int32_t value);
  public:

  // optional int32 tschchartseriesscatterlinetype = 20;
  bool has_tschchartseriesscatterlinetype() const;
  private:
  bool _internal_has_tschchartseriesscatterlinetype() const;
  public:
  void clear_tschchartseriesscatterlinetype();
  int32_t tschchartseriesscatterlinetype() const;
  void set_tschchartseriesscatterlinetype(int32_t value);
  private:
  int32_t _internal_tschchartseriesscatterlinetype() const;
  void _internal_set_tschchartseriesscatterlinetype(int32_t value);
  public:

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  bool has_tschchartseriesdefaultnumberformattype() const;
  private:
  bool _internal_has_tschchartseriesdefaultnumberformattype() const;
  public:
  void clear_tschchartseriesdefaultnumberformattype();
  int32_t tschchartseriesdefaultnumberformattype() const;
  void set_tschchartseriesdefaultnumberformattype(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaultnumberformattype() const;
  void _internal_set_tschchartseriesdefaultnumberformattype(int32_t value);
  public:

  // optional int32 tschchartseriespienumberformattype = 24;
  bool has_tschchartseriespienumberformattype() const;
  private:
  bool _internal_has_tschchartseriespienumberformattype() const;
  public:
  void clear_tschchartseriespienumberformattype();
  int32_t tschchartseriespienumberformattype() const;
  void set_tschchartseriespienumberformattype(int32_t value);
  private:
  int32_t _internal_tschchartseriespienumberformattype() const;
  void _internal_set_tschchartseriespienumberformattype(int32_t value);
  public:

  // optional int32 tschchartseriesdefaultseriestype = 26;
  bool has_tschchartseriesdefaultseriestype() const;
  private:
  bool _internal_has_tschchartseriesdefaultseriestype() const;
  public:
  void clear_tschchartseriesdefaultseriestype();
  int32_t tschchartseriesdefaultseriestype() const;
  void set_tschchartseriesdefaultseriestype(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaultseriestype() const;
  void _internal_set_tschchartseriesdefaultseriestype(int32_t value);
  public:

  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  bool has_tschchartseriesdefaultshowerrorbar() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowerrorbar() const;
  public:
  void clear_tschchartseriesdefaultshowerrorbar();
  bool tschchartseriesdefaultshowerrorbar() const;
  void set_tschchartseriesdefaultshowerrorbar(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowerrorbar() const;
  void _internal_set_tschchartseriesdefaultshowerrorbar(bool value);
  public:

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  bool has_tschchartseriesdefaultshowerrorbarscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowerrorbarscatterx() const;
  public:
  void clear_tschchartseriesdefaultshowerrorbarscatterx();
  bool tschchartseriesdefaultshowerrorbarscatterx() const;
  void set_tschchartseriesdefaultshowerrorbarscatterx(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowerrorbarscatterx() const;
  void _internal_set_tschchartseriesdefaultshowerrorbarscatterx(bool value);
  public:

  // optional bool tschchartseriesscattershowline = 29;
  bool has_tschchartseriesscattershowline() const;
  private:
  bool _internal_has_tschchartseriesscattershowline() const;
  public:
  void clear_tschchartseriesscattershowline();
  bool tschchartseriesscattershowline() const;
  void set_tschchartseriesscattershowline(bool value);
  private:
  bool _internal_tschchartseriesscattershowline() const;
  void _internal_set_tschchartseriesscattershowline(bool value);
  public:

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  bool has_tschchartseriesbubbleshownegativedata() const;
  private:
  bool _internal_has_tschchartseriesbubbleshownegativedata() const;
  public:
  void clear_tschchartseriesbubbleshownegativedata();
  bool tschchartseriesbubbleshownegativedata() const;
  void set_tschchartseriesbubbleshownegativedata(bool value);
  private:
  bool _internal_tschchartseriesbubbleshownegativedata() const;
  void _internal_set_tschchartseriesbubbleshownegativedata(bool value);
  public:

  // optional bool tschchartseriespieshowserieslabels = 31;
  bool has_tschchartseriespieshowserieslabels() const;
  private:
  bool _internal_has_tschchartseriespieshowserieslabels() const;
  public:
  void clear_tschchartseriespieshowserieslabels();
  bool tschchartseriespieshowserieslabels() const;
  void set_tschchartseriespieshowserieslabels(bool value);
  private:
  bool _internal_tschchartseriespieshowserieslabels() const;
  void _internal_set_tschchartseriespieshowserieslabels(bool value);
  public:

  // optional bool tschchartseriesareashowsymbol = 32;
  bool has_tschchartseriesareashowsymbol() const;
  private:
  bool _internal_has_tschchartseriesareashowsymbol() const;
  public:
  void clear_tschchartseriesareashowsymbol();
  bool tschchartseriesareashowsymbol() const;
  void set_tschchartseriesareashowsymbol(bool value);
  private:
  bool _internal_tschchartseriesareashowsymbol() const;
  void _internal_set_tschchartseriesareashowsymbol(bool value);
  public:

  // optional bool tschchartserieslineshowsymbol = 33;
  bool has_tschchartserieslineshowsymbol() const;
  private:
  bool _internal_has_tschchartserieslineshowsymbol() const;
  public:
  void clear_tschchartserieslineshowsymbol();
  bool tschchartserieslineshowsymbol() const;
  void set_tschchartserieslineshowsymbol(bool value);
  private:
  bool _internal_tschchartserieslineshowsymbol() const;
  void _internal_set_tschchartserieslineshowsymbol(bool value);
  public:

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  bool has_tschchartseriesmixedareashowsymbol() const;
  private:
  bool _internal_has_tschchartseriesmixedareashowsymbol() const;
  public:
  void clear_tschchartseriesmixedareashowsymbol();
  bool tschchartseriesmixedareashowsymbol() const;
  void set_tschchartseriesmixedareashowsymbol(bool value);
  private:
  bool _internal_tschchartseriesmixedareashowsymbol() const;
  void _internal_set_tschchartseriesmixedareashowsymbol(bool value);
  public:

  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  bool has_tschchartseriesmixedlineshowsymbol() const;
  private:
  bool _internal_has_tschchartseriesmixedlineshowsymbol() const;
  public:
  void clear_tschchartseriesmixedlineshowsymbol();
  bool tschchartseriesmixedlineshowsymbol() const;
  void set_tschchartseriesmixedlineshowsymbol(bool value);
  private:
  bool _internal_tschchartseriesmixedlineshowsymbol() const;
  void _internal_set_tschchartseriesmixedlineshowsymbol(bool value);
  public:

  // optional bool tschchartseriesscattershowsymbol = 36;
  bool has_tschchartseriesscattershowsymbol() const;
  private:
  bool _internal_has_tschchartseriesscattershowsymbol() const;
  public:
  void clear_tschchartseriesscattershowsymbol();
  bool tschchartseriesscattershowsymbol() const;
  void set_tschchartseriesscattershowsymbol(bool value);
  private:
  bool _internal_tschchartseriesscattershowsymbol() const;
  void _internal_set_tschchartseriesscattershowsymbol(bool value);
  public:

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  bool has_tschchartseriesdefaultshowtrendline() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowtrendline() const;
  public:
  void clear_tschchartseriesdefaultshowtrendline();
  bool tschchartseriesdefaultshowtrendline() const;
  void set_tschchartseriesdefaultshowtrendline(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowtrendline() const;
  void _internal_set_tschchartseriesdefaultshowtrendline(bool value);
  public:

  // optional bool tschchartseriesareashowvaluelabels = 38;
  bool has_tschchartseriesareashowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesareashowvaluelabels() const;
  public:
  void clear_tschchartseriesareashowvaluelabels();
  bool tschchartseriesareashowvaluelabels() const;
  void set_tschchartseriesareashowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesareashowvaluelabels() const;
  void _internal_set_tschchartseriesareashowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  bool has_tschchartseriesbarshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesbarshowvaluelabels() const;
  public:
  void clear_tschchartseriesbarshowvaluelabels();
  bool tschchartseriesbarshowvaluelabels() const;
  void set_tschchartseriesbarshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesbarshowvaluelabels() const;
  void _internal_set_tschchartseriesbarshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  bool has_tschchartseriesbubbleshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesbubbleshowvaluelabels() const;
  public:
  void clear_tschchartseriesbubbleshowvaluelabels();
  bool tschchartseriesbubbleshowvaluelabels() const;
  void set_tschchartseriesbubbleshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesbubbleshowvaluelabels() const;
  void _internal_set_tschchartseriesbubbleshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  bool has_tschchartseriesdefaultshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowvaluelabels() const;
  public:
  void clear_tschchartseriesdefaultshowvaluelabels();
  bool tschchartseriesdefaultshowvaluelabels() const;
  void set_tschchartseriesdefaultshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowvaluelabels() const;
  void _internal_set_tschchartseriesdefaultshowvaluelabels(bool value);
  public:

  // optional bool tschchartserieslineshowvaluelabels = 42;
  bool has_tschchartserieslineshowvaluelabels() const;
  private:
  bool _internal_has_tschchartserieslineshowvaluelabels() const;
  public:
  void clear_tschchartserieslineshowvaluelabels();
  bool tschchartserieslineshowvaluelabels() const;
  void set_tschchartserieslineshowvaluelabels(bool value);
  private:
  bool _internal_tschchartserieslineshowvaluelabels() const;
  void _internal_set_tschchartserieslineshowvaluelabels(bool value);
  public:

  // optional int32 tschchartseriesbubblesizedimension = 46;
  bool has_tschchartseriesbubblesizedimension() const;
  private:
  bool _internal_has_tschchartseriesbubblesizedimension() const;
  public:
  void clear_tschchartseriesbubblesizedimension();
  int32_t tschchartseriesbubblesizedimension() const;
  void set_tschchartseriesbubblesizedimension(int32_t value);
  private:
  int32_t _internal_tschchartseriesbubblesizedimension() const;
  void _internal_set_tschchartseriesbubblesizedimension(int32_t value);
  public:

  // optional int32 tschchartseriesareasymboltype = 47;
  bool has_tschchartseriesareasymboltype() const;
  private:
  bool _internal_has_tschchartseriesareasymboltype() const;
  public:
  void clear_tschchartseriesareasymboltype();
  int32_t tschchartseriesareasymboltype() const;
  void set_tschchartseriesareasymboltype(int32_t value);
  private:
  int32_t _internal_tschchartseriesareasymboltype() const;
  void _internal_set_tschchartseriesareasymboltype(int32_t value);
  public:

  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  bool has_tschchartseriesmixedshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesmixedshowvaluelabels() const;
  public:
  void clear_tschchartseriesmixedshowvaluelabels();
  bool tschchartseriesmixedshowvaluelabels() const;
  void set_tschchartseriesmixedshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesmixedshowvaluelabels() const;
  void _internal_set_tschchartseriesmixedshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriespieshowvaluelabels = 44;
  bool has_tschchartseriespieshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriespieshowvaluelabels() const;
  public:
  void clear_tschchartseriespieshowvaluelabels();
  bool tschchartseriespieshowvaluelabels() const;
  void set_tschchartseriespieshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriespieshowvaluelabels() const;
  void _internal_set_tschchartseriespieshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  bool has_tschchartseriesscattershowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesscattershowvaluelabels() const;
  public:
  void clear_tschchartseriesscattershowvaluelabels();
  bool tschchartseriesscattershowvaluelabels() const;
  void set_tschchartseriesscattershowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesscattershowvaluelabels() const;
  void _internal_set_tschchartseriesscattershowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  bool has_tschchartseriesdefaulttrendlineshowequation() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowequation() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowequation();
  bool tschchartseriesdefaulttrendlineshowequation() const;
  void set_tschchartseriesdefaulttrendlineshowequation(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowequation() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowequation(bool value);
  public:

  // optional int32 tschchartserieslinesymboltype = 48;
  bool has_tschchartserieslinesymboltype() const;
  private:
  bool _internal_has_tschchartserieslinesymboltype() const;
  public:
  void clear_tschchartserieslinesymboltype();
  int32_t tschchartserieslinesymboltype() const;
  void set_tschchartserieslinesymboltype(int32_t value);
  private:
  int32_t _internal_tschchartserieslinesymboltype() const;
  void _internal_set_tschchartserieslinesymboltype(int32_t value);
  public:

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  bool has_tschchartseriesmixedareasymboltype() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymboltype() const;
  public:
  void clear_tschchartseriesmixedareasymboltype();
  int32_t tschchartseriesmixedareasymboltype() const;
  void set_tschchartseriesmixedareasymboltype(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedareasymboltype() const;
  void _internal_set_tschchartseriesmixedareasymboltype(int32_t value);
  public:

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  bool has_tschchartseriesmixedlinesymboltype() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymboltype() const;
  public:
  void clear_tschchartseriesmixedlinesymboltype();
  int32_t tschchartseriesmixedlinesymboltype() const;
  void set_tschchartseriesmixedlinesymboltype(int32_t value);
  private:
  int32_t _internal_tschchartseriesmixedlinesymboltype() const;
  void _internal_set_tschchartseriesmixedlinesymboltype(int32_t value);
  public:

  // optional int32 tschchartseriesscattersymboltype = 51;
  bool has_tschchartseriesscattersymboltype() const;
  private:
  bool _internal_has_tschchartseriesscattersymboltype() const;
  public:
  void clear_tschchartseriesscattersymboltype();
  int32_t tschchartseriesscattersymboltype() const;
  void set_tschchartseriesscattersymboltype(int32_t value);
  private:
  int32_t _internal_tschchartseriesscattersymboltype() const;
  void _internal_set_tschchartseriesscattersymboltype(int32_t value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  bool has_tschchartseriesdefaulttrendlineequationoffsetx() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationoffsetx() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationoffsetx();
  float tschchartseriesdefaulttrendlineequationoffsetx() const;
  void set_tschchartseriesdefaulttrendlineequationoffsetx(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationoffsetx() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationoffsetx(float value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  bool has_tschchartseriesdefaulttrendlineequationoffsety() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationoffsety() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationoffsety();
  float tschchartseriesdefaulttrendlineequationoffsety() const;
  void set_tschchartseriesdefaulttrendlineequationoffsety(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationoffsety() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationoffsety(float value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  bool has_tschchartseriesdefaulttrendlineorder() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineorder() const;
  public:
  void clear_tschchartseriesdefaulttrendlineorder();
  int32_t tschchartseriesdefaulttrendlineorder() const;
  void set_tschchartseriesdefaulttrendlineorder(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulttrendlineorder() const;
  void _internal_set_tschchartseriesdefaulttrendlineorder(int32_t value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  bool has_tschchartseriesdefaulttrendlineperiod() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineperiod() const;
  public:
  void clear_tschchartseriesdefaulttrendlineperiod();
  int32_t tschchartseriesdefaulttrendlineperiod() const;
  void set_tschchartseriesdefaulttrendlineperiod(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulttrendlineperiod() const;
  void _internal_set_tschchartseriesdefaulttrendlineperiod(int32_t value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  bool has_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredoffsetx();
  float tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  void set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  bool has_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredoffsety();
  float tschchartseriesdefaulttrendlinersquaredoffsety() const;
  void set_tschchartseriesdefaulttrendlinersquaredoffsety(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(float value);
  public:

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  bool has_tschchartseriesdefaulttrendlinetype() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinetype() const;
  public:
  void clear_tschchartseriesdefaulttrendlinetype();
  int32_t tschchartseriesdefaulttrendlinetype() const;
  void set_tschchartseriesdefaulttrendlinetype(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaulttrendlinetype() const;
  void _internal_set_tschchartseriesdefaulttrendlinetype(int32_t value);
  public:

  // optional float tschchartseriespiewedgeexplosion = 63;
  bool has_tschchartseriespiewedgeexplosion() const;
  private:
  bool _internal_has_tschchartseriespiewedgeexplosion() const;
  public:
  void clear_tschchartseriespiewedgeexplosion();
  float tschchartseriespiewedgeexplosion() const;
  void set_tschchartseriespiewedgeexplosion(float value);
  private:
  float _internal_tschchartseriespiewedgeexplosion() const;
  void _internal_set_tschchartseriespiewedgeexplosion(float value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  bool has_tschchartseriesdefaulttrendlineshowlabel() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowlabel() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowlabel();
  bool tschchartseriesdefaulttrendlineshowlabel() const;
  void set_tschchartseriesdefaulttrendlineshowlabel(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowlabel() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowlabel(bool value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  bool has_tschchartseriesdefaulttrendlineshowr2value() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowr2value() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowr2value();
  bool tschchartseriesdefaulttrendlineshowr2value() const;
  void set_tschchartseriesdefaulttrendlineshowr2value(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowr2value() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowr2value(bool value);
  public:

  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  bool has_tschchartseriesbubbleshowserieslabels() const;
  private:
  bool _internal_has_tschchartseriesbubbleshowserieslabels() const;
  public:
  void clear_tschchartseriesbubbleshowserieslabels();
  bool tschchartseriesbubbleshowserieslabels() const;
  void set_tschchartseriesbubbleshowserieslabels(bool value);
  private:
  bool _internal_tschchartseriesbubbleshowserieslabels() const;
  void _internal_set_tschchartseriesbubbleshowserieslabels(bool value);
  public:

  // optional bool tschchartseriesscattershowserieslabels = 67;
  bool has_tschchartseriesscattershowserieslabels() const;
  private:
  bool _internal_has_tschchartseriesscattershowserieslabels() const;
  public:
  void clear_tschchartseriesscattershowserieslabels();
  bool tschchartseriesscattershowserieslabels() const;
  void set_tschchartseriesscattershowserieslabels(bool value);
  private:
  bool _internal_tschchartseriesscattershowserieslabels() const;
  void _internal_set_tschchartseriesscattershowserieslabels(bool value);
  public:

  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  bool has_tschchartseriesdefaultyaxisordinal() const;
  private:
  bool _internal_has_tschchartseriesdefaultyaxisordinal() const;
  public:
  void clear_tschchartseriesdefaultyaxisordinal();
  int32_t tschchartseriesdefaultyaxisordinal() const;
  void set_tschchartseriesdefaultyaxisordinal(int32_t value);
  private:
  int32_t _internal_tschchartseriesdefaultyaxisordinal() const;
  void _internal_set_tschchartseriesdefaultyaxisordinal(int32_t value);
  public:

  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  bool has_tschchartseriesbubblevaluelabelsaxis() const;
  private:
  bool _internal_has_tschchartseriesbubblevaluelabelsaxis() const;
  public:
  void clear_tschchartseriesbubblevaluelabelsaxis();
  int32_t tschchartseriesbubblevaluelabelsaxis() const;
  void set_tschchartseriesbubblevaluelabelsaxis(int32_t value);
  private:
  int32_t _internal_tschchartseriesbubblevaluelabelsaxis() const;
  void _internal_set_tschchartseriesbubblevaluelabelsaxis(int32_t value);
  public:

  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  bool has_tschchartseriesscattervaluelabelsaxis() const;
  private:
  bool _internal_has_tschchartseriesscattervaluelabelsaxis() const;
  public:
  void clear_tschchartseriesscattervaluelabelsaxis();
  int32_t tschchartseriesscattervaluelabelsaxis() const;
  void set_tschchartseriesscattervaluelabelsaxis(int32_t value);
  private:
  int32_t _internal_tschchartseriesscattervaluelabelsaxis() const;
  void _internal_set_tschchartseriesscattervaluelabelsaxis(int32_t value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartseriesdefaulttrendlinelabelstring_;
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata_;
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata_;
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
    ::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat_;
    ::TSK::FormatStructArchive* tschchartseriespienumberformat_;
    ::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat_;
    float tschchartseriesbubbleadjustmentscale_;
    float tschchartseriesdefaulterrorbarfixedvalue_;
    float tschchartseriesdefaulterrorbarfixedvaluescatterx_;
    float tschchartseriesdefaulterrorbarpercentvalue_;
    float tschchartseriesdefaulterrorbarpercentvaluescatterx_;
    int32_t tschchartseriesdefaulterrorbarsetting_;
    int32_t tschchartseriesdefaulterrorbarsettingscatterx_;
    float tschchartseriesdefaulterrorbarstddevvalue_;
    float tschchartseriesdefaulterrorbarstddevvaluescatterx_;
    int32_t tschchartseriesdefaulterrorbartype_;
    int32_t tschchartseriesdefaulterrorbartypescatterx_;
    float tschchartseriespielabelexplosion_;
    int32_t tschchartseriesbubblelinetype_;
    int32_t tschchartserieslinelinetype_;
    int32_t tschchartseriesmixedlinelinetype_;
    int32_t tschchartseriesscatterlinetype_;
    int32_t tschchartseriesdefaultnumberformattype_;
    int32_t tschchartseriespienumberformattype_;
    int32_t tschchartseriesdefaultseriestype_;
    bool tschchartseriesdefaultshowerrorbar_;
    bool tschchartseriesdefaultshowerrorbarscatterx_;
    bool tschchartseriesscattershowline_;
    bool tschchartseriesbubbleshownegativedata_;
    bool tschchartseriespieshowserieslabels_;
    bool tschchartseriesareashowsymbol_;
    bool tschchartserieslineshowsymbol_;
    bool tschchartseriesmixedareashowsymbol_;
    bool tschchartseriesmixedlineshowsymbol_;
    bool tschchartseriesscattershowsymbol_;
    bool tschchartseriesdefaultshowtrendline_;
    bool tschchartseriesareashowvaluelabels_;
    bool tschchartseriesbarshowvaluelabels_;
    bool tschchartseriesbubbleshowvaluelabels_;
    bool tschchartseriesdefaultshowvaluelabels_;
    bool tschchartserieslineshowvaluelabels_;
    int32_t tschchartseriesbubblesizedimension_;
    int32_t tschchartseriesareasymboltype_;
    bool tschchartseriesmixedshowvaluelabels_;
    bool tschchartseriespieshowvaluelabels_;
    bool tschchartseriesscattershowvaluelabels_;
    bool tschchartseriesdefaulttrendlineshowequation_;
    int32_t tschchartserieslinesymboltype_;
    int32_t tschchartseriesmixedareasymboltype_;
    int32_t tschchartseriesmixedlinesymboltype_;
    int32_t tschchartseriesscattersymboltype_;
    float tschchartseriesdefaulttrendlineequationoffsetx_;
    float tschchartseriesdefaulttrendlineequationoffsety_;
    int32_t tschchartseriesdefaulttrendlineorder_;
    int32_t tschchartseriesdefaulttrendlineperiod_;
    float tschchartseriesdefaulttrendlinersquaredoffsetx_;
    float tschchartseriesdefaulttrendlinersquaredoffsety_;
    int32_t tschchartseriesdefaulttrendlinetype_;
    float tschchartseriespiewedgeexplosion_;
    bool tschchartseriesdefaulttrendlineshowlabel_;
    bool tschchartseriesdefaulttrendlineshowr2value_;
    bool tschchartseriesbubbleshowserieslabels_;
    bool tschchartseriesscattershowserieslabels_;
    int32_t tschchartseriesdefaultyaxisordinal_;
    int32_t tschchartseriesbubblevaluelabelsaxis_;
    int32_t tschchartseriesscattervaluelabelsaxis_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartStyleArchive

// optional float tschchartinfodefault3dchartopacity = 1;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefault3dchartopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefault3dchartopacity() const {
  return _internal_has_tschchartinfodefault3dchartopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefault3dchartopacity() {
  _impl_.tschchartinfodefault3dchartopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefault3dchartopacity() const {
  return _impl_.tschchartinfodefault3dchartopacity_;
}
inline float ChartStyleArchive::tschchartinfodefault3dchartopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dchartopacity)
  return _internal_tschchartinfodefault3dchartopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefault3dchartopacity(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tschchartinfodefault3dchartopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefault3dchartopacity(float value) {
  _internal_set_tschchartinfodefault3dchartopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dchartopacity)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
inline bool ChartStyleArchive::_internal_has_tschchartinfoarea3dlightingpackage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfoarea3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfoarea3dlightingpackage() const {
  return _internal_has_tschchartinfoarea3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfoarea3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = _impl_.tschchartinfoarea3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoarea3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  return _internal_tschchartinfoarea3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfoarea3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoarea3dlightingpackage_);
  }
  _impl_.tschchartinfoarea3dlightingpackage_ = tschchartinfoarea3dlightingpackage;
  if (tschchartinfoarea3dlightingpackage) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoarea3dlightingpackage() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfoarea3dlightingpackage_;
  _impl_.tschchartinfoarea3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfoarea3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfoarea3dlightingpackage_;
  _impl_.tschchartinfoarea3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfoarea3dlightingpackage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tschchartinfoarea3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    _impl_.tschchartinfoarea3dlightingpackage_ = p;
  }
  return _impl_.tschchartinfoarea3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoarea3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfoarea3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoarea3dlightingpackage_);
  }
  if (tschchartinfoarea3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfoarea3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoarea3dlightingpackage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tschchartinfoarea3dlightingpackage_ = tschchartinfoarea3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
inline bool ChartStyleArchive::_internal_has_tschchartinfobar3dlightingpackage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfobar3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfobar3dlightingpackage() const {
  return _internal_has_tschchartinfobar3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfobar3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = _impl_.tschchartinfobar3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfobar3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  return _internal_tschchartinfobar3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfobar3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfobar3dlightingpackage_);
  }
  _impl_.tschchartinfobar3dlightingpackage_ = tschchartinfobar3dlightingpackage;
  if (tschchartinfobar3dlightingpackage) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfobar3dlightingpackage() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfobar3dlightingpackage_;
  _impl_.tschchartinfobar3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfobar3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfobar3dlightingpackage_;
  _impl_.tschchartinfobar3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfobar3dlightingpackage() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tschchartinfobar3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    _impl_.tschchartinfobar3dlightingpackage_ = p;
  }
  return _impl_.tschchartinfobar3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfobar3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfobar3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfobar3dlightingpackage_);
  }
  if (tschchartinfobar3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfobar3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobar3dlightingpackage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tschchartinfobar3dlightingpackage_ = tschchartinfobar3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
inline bool ChartStyleArchive::_internal_has_tschchartinfocolumn3dlightingpackage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfocolumn3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfocolumn3dlightingpackage() const {
  return _internal_has_tschchartinfocolumn3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfocolumn3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = _impl_.tschchartinfocolumn3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfocolumn3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  return _internal_tschchartinfocolumn3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumn3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfocolumn3dlightingpackage_);
  }
  _impl_.tschchartinfocolumn3dlightingpackage_ = tschchartinfocolumn3dlightingpackage;
  if (tschchartinfocolumn3dlightingpackage) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfocolumn3dlightingpackage() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfocolumn3dlightingpackage_;
  _impl_.tschchartinfocolumn3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfocolumn3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfocolumn3dlightingpackage_;
  _impl_.tschchartinfocolumn3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfocolumn3dlightingpackage() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tschchartinfocolumn3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    _impl_.tschchartinfocolumn3dlightingpackage_ = p;
  }
  return _impl_.tschchartinfocolumn3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfocolumn3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfocolumn3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfocolumn3dlightingpackage_);
  }
  if (tschchartinfocolumn3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfocolumn3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumn3dlightingpackage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tschchartinfocolumn3dlightingpackage_ = tschchartinfocolumn3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefault3dlightingpackage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefault3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefault3dlightingpackage() const {
  return _internal_has_tschchartinfodefault3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfodefault3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = _impl_.tschchartinfodefault3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfodefault3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  return _internal_tschchartinfodefault3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3dlightingpackage_);
  }
  _impl_.tschchartinfodefault3dlightingpackage_ = tschchartinfodefault3dlightingpackage;
  if (tschchartinfodefault3dlightingpackage) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfodefault3dlightingpackage() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfodefault3dlightingpackage_;
  _impl_.tschchartinfodefault3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefault3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfodefault3dlightingpackage_;
  _impl_.tschchartinfodefault3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefault3dlightingpackage() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.tschchartinfodefault3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefault3dlightingpackage_ = p;
  }
  return _impl_.tschchartinfodefault3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfodefault3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfodefault3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3dlightingpackage_);
  }
  if (tschchartinfodefault3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dlightingpackage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tschchartinfodefault3dlightingpackage_ = tschchartinfodefault3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
inline bool ChartStyleArchive::_internal_has_tschchartinfoline3dlightingpackage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfoline3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfoline3dlightingpackage() const {
  return _internal_has_tschchartinfoline3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfoline3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = _impl_.tschchartinfoline3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoline3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  return _internal_tschchartinfoline3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfoline3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoline3dlightingpackage_);
  }
  _impl_.tschchartinfoline3dlightingpackage_ = tschchartinfoline3dlightingpackage;
  if (tschchartinfoline3dlightingpackage) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoline3dlightingpackage() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfoline3dlightingpackage_;
  _impl_.tschchartinfoline3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfoline3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfoline3dlightingpackage_;
  _impl_.tschchartinfoline3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfoline3dlightingpackage() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.tschchartinfoline3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    _impl_.tschchartinfoline3dlightingpackage_ = p;
  }
  return _impl_.tschchartinfoline3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoline3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfoline3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoline3dlightingpackage_);
  }
  if (tschchartinfoline3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfoline3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoline3dlightingpackage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.tschchartinfoline3dlightingpackage_ = tschchartinfoline3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
inline bool ChartStyleArchive::_internal_has_tschchartinfopie3dlightingpackage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfopie3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfopie3dlightingpackage() const {
  return _internal_has_tschchartinfopie3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfopie3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = _impl_.tschchartinfopie3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfopie3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  return _internal_tschchartinfopie3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfopie3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfopie3dlightingpackage_);
  }
  _impl_.tschchartinfopie3dlightingpackage_ = tschchartinfopie3dlightingpackage;
  if (tschchartinfopie3dlightingpackage) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfopie3dlightingpackage() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfopie3dlightingpackage_;
  _impl_.tschchartinfopie3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfopie3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DLightingPackageArchive* temp = _impl_.tschchartinfopie3dlightingpackage_;
  _impl_.tschchartinfopie3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfopie3dlightingpackage() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.tschchartinfopie3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    _impl_.tschchartinfopie3dlightingpackage_ = p;
  }
  return _impl_.tschchartinfopie3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfopie3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfopie3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfopie3dlightingpackage_);
  }
  if (tschchartinfopie3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfopie3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopie3dlightingpackage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.tschchartinfopie3dlightingpackage_ = tschchartinfopie3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
}

// optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbackgroundfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefaultbackgroundfill_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundfill() const {
  return _internal_has_tschchartinfodefaultbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::_internal_tschchartinfodefaultbackgroundfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartinfodefaultbackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultbackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  return _internal_tschchartinfodefaultbackgroundfill();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbackgroundfill(
    ::TSD::FillArchive* tschchartinfodefaultbackgroundfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultbackgroundfill_);
  }
  _impl_.tschchartinfodefaultbackgroundfill_ = tschchartinfodefaultbackgroundfill;
  if (tschchartinfodefaultbackgroundfill) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundfill() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = _impl_.tschchartinfodefaultbackgroundfill_;
  _impl_.tschchartinfodefaultbackgroundfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = _impl_.tschchartinfodefaultbackgroundfill_;
  _impl_.tschchartinfodefaultbackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbackgroundfill() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.tschchartinfodefaultbackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefaultbackgroundfill_ = p;
  }
  return _impl_.tschchartinfodefaultbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartinfodefaultbackgroundfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultbackgroundfill_);
  }
  if (tschchartinfodefaultbackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundfill));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbackgroundfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.tschchartinfodefaultbackgroundfill_ = tschchartinfodefaultbackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
}

// optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbackgroundstroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefaultbackgroundstroke_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundstroke() const {
  return _internal_has_tschchartinfodefaultbackgroundstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::_internal_tschchartinfodefaultbackgroundstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartinfodefaultbackgroundstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultbackgroundstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  return _internal_tschchartinfodefaultbackgroundstroke();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbackgroundstroke(
    ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultbackgroundstroke_);
  }
  _impl_.tschchartinfodefaultbackgroundstroke_ = tschchartinfodefaultbackgroundstroke;
  if (tschchartinfodefaultbackgroundstroke) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundstroke() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartinfodefaultbackgroundstroke_;
  _impl_.tschchartinfodefaultbackgroundstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbackgroundstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartinfodefaultbackgroundstroke_;
  _impl_.tschchartinfodefaultbackgroundstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbackgroundstroke() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.tschchartinfodefaultbackgroundstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefaultbackgroundstroke_ = p;
  }
  return _impl_.tschchartinfodefaultbackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartinfodefaultbackgroundstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultbackgroundstroke_);
  }
  if (tschchartinfodefaultbackgroundstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundstroke));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbackgroundstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbackgroundstroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.tschchartinfodefaultbackgroundstroke_ = tschchartinfodefaultbackgroundstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
}

// optional float tschchartinfodefaultborderopacity = 10;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultborderopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultborderopacity() const {
  return _internal_has_tschchartinfodefaultborderopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultborderopacity() {
  _impl_.tschchartinfodefaultborderopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultborderopacity() const {
  return _impl_.tschchartinfodefaultborderopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultborderopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderopacity)
  return _internal_tschchartinfodefaultborderopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultborderopacity(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.tschchartinfodefaultborderopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultborderopacity(float value) {
  _internal_set_tschchartinfodefaultborderopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderopacity)
}

// optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbordershadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefaultbordershadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbordershadow() const {
  return _internal_has_tschchartinfodefaultbordershadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfodefaultbordershadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartinfodefaultbordershadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfodefaultbordershadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
  return _internal_tschchartinfodefaultbordershadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbordershadow(
    ::TSD::ShadowArchive* tschchartinfodefaultbordershadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultbordershadow_);
  }
  _impl_.tschchartinfodefaultbordershadow_ = tschchartinfodefaultbordershadow;
  if (tschchartinfodefaultbordershadow) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfodefaultbordershadow() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartinfodefaultbordershadow_;
  _impl_.tschchartinfodefaultbordershadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbordershadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartinfodefaultbordershadow_;
  _impl_.tschchartinfodefaultbordershadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbordershadow() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.tschchartinfodefaultbordershadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefaultbordershadow_ = p;
  }
  return _impl_.tschchartinfodefaultbordershadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfodefaultbordershadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartinfodefaultbordershadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultbordershadow_);
  }
  if (tschchartinfodefaultbordershadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbordershadow));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbordershadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbordershadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.tschchartinfodefaultbordershadow_ = tschchartinfodefaultbordershadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
}

// optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultborderstroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefaultborderstroke_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultborderstroke() const {
  return _internal_has_tschchartinfodefaultborderstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::_internal_tschchartinfodefaultborderstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartinfodefaultborderstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultborderstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
  return _internal_tschchartinfodefaultborderstroke();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultborderstroke(
    ::TSD::StrokeArchive* tschchartinfodefaultborderstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultborderstroke_);
  }
  _impl_.tschchartinfodefaultborderstroke_ = tschchartinfodefaultborderstroke;
  if (tschchartinfodefaultborderstroke) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultborderstroke() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartinfodefaultborderstroke_;
  _impl_.tschchartinfodefaultborderstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultborderstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartinfodefaultborderstroke_;
  _impl_.tschchartinfodefaultborderstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultborderstroke() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.tschchartinfodefaultborderstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefaultborderstroke_ = p;
  }
  return _impl_.tschchartinfodefaultborderstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultborderstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartinfodefaultborderstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultborderstroke_);
  }
  if (tschchartinfodefaultborderstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultborderstroke));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultborderstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultborderstroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.tschchartinfodefaultborderstroke_ = tschchartinfodefaultborderstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
}

// optional bool tschchartinfodefaultcombinelayers = 13;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultcombinelayers() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultcombinelayers() const {
  return _internal_has_tschchartinfodefaultcombinelayers();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultcombinelayers() {
  _impl_.tschchartinfodefaultcombinelayers_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultcombinelayers() const {
  return _impl_.tschchartinfodefaultcombinelayers_;
}
inline bool ChartStyleArchive::tschchartinfodefaultcombinelayers() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultcombinelayers)
  return _internal_tschchartinfodefaultcombinelayers();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultcombinelayers(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.tschchartinfodefaultcombinelayers_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultcombinelayers(bool value) {
  _internal_set_tschchartinfodefaultcombinelayers(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultcombinelayers)
}

// optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultgridbackgroundfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefaultgridbackgroundfill_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundfill() const {
  return _internal_has_tschchartinfodefaultgridbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::_internal_tschchartinfodefaultgridbackgroundfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartinfodefaultgridbackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultgridbackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  return _internal_tschchartinfodefaultgridbackgroundfill();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultgridbackgroundfill(
    ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultgridbackgroundfill_);
  }
  _impl_.tschchartinfodefaultgridbackgroundfill_ = tschchartinfodefaultgridbackgroundfill;
  if (tschchartinfodefaultgridbackgroundfill) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultgridbackgroundfill() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = _impl_.tschchartinfodefaultgridbackgroundfill_;
  _impl_.tschchartinfodefaultgridbackgroundfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultgridbackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = _impl_.tschchartinfodefaultgridbackgroundfill_;
  _impl_.tschchartinfodefaultgridbackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultgridbackgroundfill() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.tschchartinfodefaultgridbackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefaultgridbackgroundfill_ = p;
  }
  return _impl_.tschchartinfodefaultgridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultgridbackgroundfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartinfodefaultgridbackgroundfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaultgridbackgroundfill_);
  }
  if (tschchartinfodefaultgridbackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultgridbackgroundfill));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultgridbackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultgridbackgroundfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.tschchartinfodefaultgridbackgroundfill_ = tschchartinfodefaultgridbackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
}

// optional float tschchartinfodefaultgridbackgroundopacity = 15;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultgridbackgroundopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundopacity() const {
  return _internal_has_tschchartinfodefaultgridbackgroundopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundopacity() {
  _impl_.tschchartinfodefaultgridbackgroundopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultgridbackgroundopacity() const {
  return _impl_.tschchartinfodefaultgridbackgroundopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultgridbackgroundopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundopacity)
  return _internal_tschchartinfodefaultgridbackgroundopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultgridbackgroundopacity(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.tschchartinfodefaultgridbackgroundopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultgridbackgroundopacity(float value) {
  _internal_set_tschchartinfodefaultgridbackgroundopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundopacity)
}

// optional float tschchartinfodefaultinterbargap = 16;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultinterbargap() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultinterbargap() const {
  return _internal_has_tschchartinfodefaultinterbargap();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultinterbargap() {
  _impl_.tschchartinfodefaultinterbargap_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultinterbargap() const {
  return _impl_.tschchartinfodefaultinterbargap_;
}
inline float ChartStyleArchive::tschchartinfodefaultinterbargap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultinterbargap)
  return _internal_tschchartinfodefaultinterbargap();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultinterbargap(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.tschchartinfodefaultinterbargap_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultinterbargap(float value) {
  _internal_set_tschchartinfodefaultinterbargap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultinterbargap)
}

// optional float tschchartinfodefaultintersetgap = 17;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultintersetgap() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultintersetgap() const {
  return _internal_has_tschchartinfodefaultintersetgap();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultintersetgap() {
  _impl_.tschchartinfodefaultintersetgap_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultintersetgap() const {
  return _impl_.tschchartinfodefaultintersetgap_;
}
inline float ChartStyleArchive::tschchartinfodefaultintersetgap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultintersetgap)
  return _internal_tschchartinfodefaultintersetgap();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultintersetgap(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.tschchartinfodefaultintersetgap_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultintersetgap(float value) {
  _internal_set_tschchartinfodefaultintersetgap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultintersetgap)
}

// optional bool tschchartinfodefaultshowborder = 18;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultshowborder() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultshowborder() const {
  return _internal_has_tschchartinfodefaultshowborder();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultshowborder() {
  _impl_.tschchartinfodefaultshowborder_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultshowborder() const {
  return _impl_.tschchartinfodefaultshowborder_;
}
inline bool ChartStyleArchive::tschchartinfodefaultshowborder() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultshowborder)
  return _internal_tschchartinfodefaultshowborder();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultshowborder(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.tschchartinfodefaultshowborder_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultshowborder(bool value) {
  _internal_set_tschchartinfodefaultshowborder(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultshowborder)
}

// optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaulttitlecolor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefaulttitlecolor_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaulttitlecolor() const {
  return _internal_has_tschchartinfodefaulttitlecolor();
}
inline const ::TSP::Color& ChartStyleArchive::_internal_tschchartinfodefaulttitlecolor() const {
  const ::TSP::Color* p = _impl_.tschchartinfodefaulttitlecolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ChartStyleArchive::tschchartinfodefaulttitlecolor() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  return _internal_tschchartinfodefaulttitlecolor();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaulttitlecolor(
    ::TSP::Color* tschchartinfodefaulttitlecolor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaulttitlecolor_);
  }
  _impl_.tschchartinfodefaulttitlecolor_ = tschchartinfodefaulttitlecolor;
  if (tschchartinfodefaulttitlecolor) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
}
inline ::TSP::Color* ChartStyleArchive::release_tschchartinfodefaulttitlecolor() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Color* temp = _impl_.tschchartinfodefaulttitlecolor_;
  _impl_.tschchartinfodefaulttitlecolor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaulttitlecolor() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::Color* temp = _impl_.tschchartinfodefaulttitlecolor_;
  _impl_.tschchartinfodefaulttitlecolor_ = nullptr;
  return temp;
}
inline ::TSP::Color* ChartStyleArchive::_internal_mutable_tschchartinfodefaulttitlecolor() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.tschchartinfodefaulttitlecolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    _impl_.tschchartinfodefaulttitlecolor_ = p;
  }
  return _impl_.tschchartinfodefaulttitlecolor_;
}
inline ::TSP::Color* ChartStyleArchive::mutable_tschchartinfodefaulttitlecolor() {
  ::TSP::Color* _msg = _internal_mutable_tschchartinfodefaulttitlecolor();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefaulttitlecolor_);
  }
  if (tschchartinfodefaulttitlecolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaulttitlecolor));
    if (message_arena != submessage_arena) {
      tschchartinfodefaulttitlecolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaulttitlecolor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.tschchartinfodefaulttitlecolor_ = tschchartinfodefaulttitlecolor;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
}

// optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaulttitleparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaulttitleparagraphstyleindex() const {
  return _internal_has_tschchartinfodefaulttitleparagraphstyleindex();
}
inline void ChartStyleArchive::clear_tschchartinfodefaulttitleparagraphstyleindex() {
  _impl_.tschchartinfodefaulttitleparagraphstyleindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t ChartStyleArchive::_internal_tschchartinfodefaulttitleparagraphstyleindex() const {
  return _impl_.tschchartinfodefaulttitleparagraphstyleindex_;
}
inline int32_t ChartStyleArchive::tschchartinfodefaulttitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitleparagraphstyleindex)
  return _internal_tschchartinfodefaulttitleparagraphstyleindex();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaulttitleparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.tschchartinfodefaulttitleparagraphstyleindex_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaulttitleparagraphstyleindex(int32_t value) {
  _internal_set_tschchartinfodefaulttitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitleparagraphstyleindex)
}

// optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  return _internal_has_tschchartinfodefaultdatasetnameparagraphstyleindex();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdatasetnameparagraphstyleindex() {
  _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t ChartStyleArchive::_internal_tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  return _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_;
}
inline int32_t ChartStyleArchive::tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultdatasetnameparagraphstyleindex)
  return _internal_tschchartinfodefaultdatasetnameparagraphstyleindex();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdatasetnameparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdatasetnameparagraphstyleindex(int32_t value) {
  _internal_set_tschchartinfodefaultdatasetnameparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultdatasetnameparagraphstyleindex)
}

// -------------------------------------------------------------------

// ChartNonStyleArchive

// optional int32 tschchartinfodefault3dbarshape = 1;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dbarshape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbarshape() const {
  return _internal_has_tschchartinfodefault3dbarshape();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbarshape() {
  _impl_.tschchartinfodefault3dbarshape_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t ChartNonStyleArchive::_internal_tschchartinfodefault3dbarshape() const {
  return _impl_.tschchartinfodefault3dbarshape_;
}
inline int32_t ChartNonStyleArchive::tschchartinfodefault3dbarshape() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbarshape)
  return _internal_tschchartinfodefault3dbarshape();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dbarshape(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.tschchartinfodefault3dbarshape_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbarshape(int32_t value) {
  _internal_set_tschchartinfodefault3dbarshape(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbarshape)
}

// optional bool tschchartinfodefault3dbeveledges = 2;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dbeveledges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbeveledges() const {
  return _internal_has_tschchartinfodefault3dbeveledges();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbeveledges() {
  _impl_.tschchartinfodefault3dbeveledges_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefault3dbeveledges() const {
  return _impl_.tschchartinfodefault3dbeveledges_;
}
inline bool ChartNonStyleArchive::tschchartinfodefault3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbeveledges)
  return _internal_tschchartinfodefault3dbeveledges();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dbeveledges(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.tschchartinfodefault3dbeveledges_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbeveledges(bool value) {
  _internal_set_tschchartinfodefault3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbeveledges)
}

// optional float tschchartinfodefault3dintersetdepthgap = 3;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dintersetdepthgap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dintersetdepthgap() const {
  return _internal_has_tschchartinfodefault3dintersetdepthgap();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dintersetdepthgap() {
  _impl_.tschchartinfodefault3dintersetdepthgap_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefault3dintersetdepthgap() const {
  return _impl_.tschchartinfodefault3dintersetdepthgap_;
}
inline float ChartNonStyleArchive::tschchartinfodefault3dintersetdepthgap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dintersetdepthgap)
  return _internal_tschchartinfodefault3dintersetdepthgap();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dintersetdepthgap(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.tschchartinfodefault3dintersetdepthgap_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dintersetdepthgap(float value) {
  _internal_set_tschchartinfodefault3dintersetdepthgap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dintersetdepthgap)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3drotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefault3drotation_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3drotation() const {
  return _internal_has_tschchartinfodefault3drotation();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3drotation() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfodefault3drotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3drotation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
  return _internal_tschchartinfodefault3drotation();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3drotation(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3drotation_);
  }
  _impl_.tschchartinfodefault3drotation_ = tschchartinfodefault3drotation;
  if (tschchartinfodefault3drotation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3drotation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfodefault3drotation_;
  _impl_.tschchartinfodefault3drotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3drotation() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfodefault3drotation_;
  _impl_.tschchartinfodefault3drotation_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3drotation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tschchartinfodefault3drotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefault3drotation_ = p;
  }
  return _impl_.tschchartinfodefault3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3drotation() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfodefault3drotation();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3drotation_);
  }
  if (tschchartinfodefault3drotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3drotation));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3drotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3drotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tschchartinfodefault3drotation_ = tschchartinfodefault3drotation;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoarea3dscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfoarea3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoarea3dscale() const {
  return _internal_has_tschchartinfoarea3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfoarea3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfoarea3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoarea3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
  return _internal_tschchartinfoarea3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfoarea3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoarea3dscale_);
  }
  _impl_.tschchartinfoarea3dscale_ = tschchartinfoarea3dscale;
  if (tschchartinfoarea3dscale) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoarea3dscale() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfoarea3dscale_;
  _impl_.tschchartinfoarea3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfoarea3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfoarea3dscale_;
  _impl_.tschchartinfoarea3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfoarea3dscale() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tschchartinfoarea3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfoarea3dscale_ = p;
  }
  return _impl_.tschchartinfoarea3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoarea3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfoarea3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoarea3dscale_);
  }
  if (tschchartinfoarea3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfoarea3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoarea3dscale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tschchartinfoarea3dscale_ = tschchartinfoarea3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfobar3dscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfobar3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfobar3dscale() const {
  return _internal_has_tschchartinfobar3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfobar3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfobar3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfobar3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
  return _internal_tschchartinfobar3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfobar3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfobar3dscale_);
  }
  _impl_.tschchartinfobar3dscale_ = tschchartinfobar3dscale;
  if (tschchartinfobar3dscale) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfobar3dscale() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfobar3dscale_;
  _impl_.tschchartinfobar3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfobar3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfobar3dscale_;
  _impl_.tschchartinfobar3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfobar3dscale() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.tschchartinfobar3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfobar3dscale_ = p;
  }
  return _impl_.tschchartinfobar3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfobar3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfobar3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfobar3dscale_);
  }
  if (tschchartinfobar3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfobar3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobar3dscale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tschchartinfobar3dscale_ = tschchartinfobar3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfocolumn3dscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfocolumn3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfocolumn3dscale() const {
  return _internal_has_tschchartinfocolumn3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfocolumn3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfocolumn3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfocolumn3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  return _internal_tschchartinfocolumn3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumn3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfocolumn3dscale_);
  }
  _impl_.tschchartinfocolumn3dscale_ = tschchartinfocolumn3dscale;
  if (tschchartinfocolumn3dscale) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfocolumn3dscale() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfocolumn3dscale_;
  _impl_.tschchartinfocolumn3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfocolumn3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfocolumn3dscale_;
  _impl_.tschchartinfocolumn3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfocolumn3dscale() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.tschchartinfocolumn3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfocolumn3dscale_ = p;
  }
  return _impl_.tschchartinfocolumn3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfocolumn3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfocolumn3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfocolumn3dscale_);
  }
  if (tschchartinfocolumn3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfocolumn3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumn3dscale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.tschchartinfocolumn3dscale_ = tschchartinfocolumn3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefault3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dscale() const {
  return _internal_has_tschchartinfodefault3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfodefault3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
  return _internal_tschchartinfodefault3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3dscale_);
  }
  _impl_.tschchartinfodefault3dscale_ = tschchartinfodefault3dscale;
  if (tschchartinfodefault3dscale) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dscale() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfodefault3dscale_;
  _impl_.tschchartinfodefault3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfodefault3dscale_;
  _impl_.tschchartinfodefault3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3dscale() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.tschchartinfodefault3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefault3dscale_ = p;
  }
  return _impl_.tschchartinfodefault3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfodefault3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3dscale_);
  }
  if (tschchartinfodefault3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dscale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.tschchartinfodefault3dscale_ = tschchartinfodefault3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoline3dscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfoline3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoline3dscale() const {
  return _internal_has_tschchartinfoline3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfoline3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfoline3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoline3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
  return _internal_tschchartinfoline3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfoline3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoline3dscale_);
  }
  _impl_.tschchartinfoline3dscale_ = tschchartinfoline3dscale;
  if (tschchartinfoline3dscale) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoline3dscale() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfoline3dscale_;
  _impl_.tschchartinfoline3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfoline3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfoline3dscale_;
  _impl_.tschchartinfoline3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfoline3dscale() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.tschchartinfoline3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfoline3dscale_ = p;
  }
  return _impl_.tschchartinfoline3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoline3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfoline3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfoline3dscale_);
  }
  if (tschchartinfoline3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfoline3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoline3dscale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.tschchartinfoline3dscale_ = tschchartinfoline3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfopie3dscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfopie3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfopie3dscale() const {
  return _internal_has_tschchartinfopie3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfopie3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfopie3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfopie3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
  return _internal_tschchartinfopie3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfopie3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfopie3dscale_);
  }
  _impl_.tschchartinfopie3dscale_ = tschchartinfopie3dscale;
  if (tschchartinfopie3dscale) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfopie3dscale() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfopie3dscale_;
  _impl_.tschchartinfopie3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfopie3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfopie3dscale_;
  _impl_.tschchartinfopie3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfopie3dscale() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.tschchartinfopie3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfopie3dscale_ = p;
  }
  return _impl_.tschchartinfopie3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfopie3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfopie3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfopie3dscale_);
  }
  if (tschchartinfopie3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfopie3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopie3dscale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.tschchartinfopie3dscale_ = tschchartinfopie3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dviewport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartinfodefault3dviewport_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dviewport() const {
  return _internal_has_tschchartinfodefault3dviewport();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3dviewport() const {
  const ::TSCH::Chart3DVectorArchive* p = _impl_.tschchartinfodefault3dviewport_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dviewport() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  return _internal_tschchartinfodefault3dviewport();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dviewport(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3dviewport_);
  }
  _impl_.tschchartinfodefault3dviewport_ = tschchartinfodefault3dviewport;
  if (tschchartinfodefault3dviewport) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dviewport() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfodefault3dviewport_;
  _impl_.tschchartinfodefault3dviewport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3dviewport() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCH::Chart3DVectorArchive* temp = _impl_.tschchartinfodefault3dviewport_;
  _impl_.tschchartinfodefault3dviewport_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3dviewport() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.tschchartinfodefault3dviewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    _impl_.tschchartinfodefault3dviewport_ = p;
  }
  return _impl_.tschchartinfodefault3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dviewport() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfodefault3dviewport();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartinfodefault3dviewport_);
  }
  if (tschchartinfodefault3dviewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dviewport));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dviewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dviewport, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.tschchartinfodefault3dviewport_ = tschchartinfodefault3dviewport;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
}

// optional float tschchartinfodefaultpiestartangle = 19;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultpiestartangle() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultpiestartangle() const {
  return _internal_has_tschchartinfodefaultpiestartangle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultpiestartangle() {
  _impl_.tschchartinfodefaultpiestartangle_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefaultpiestartangle() const {
  return _impl_.tschchartinfodefaultpiestartangle_;
}
inline float ChartNonStyleArchive::tschchartinfodefaultpiestartangle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultpiestartangle)
  return _internal_tschchartinfodefaultpiestartangle();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultpiestartangle(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.tschchartinfodefaultpiestartangle_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultpiestartangle(float value) {
  _internal_set_tschchartinfodefaultpiestartangle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultpiestartangle)
}

// optional bool tschchartinfodefaultshowlegend = 20;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultshowlegend() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowlegend() const {
  return _internal_has_tschchartinfodefaultshowlegend();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowlegend() {
  _impl_.tschchartinfodefaultshowlegend_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultshowlegend() const {
  return _impl_.tschchartinfodefaultshowlegend_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowlegend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowlegend)
  return _internal_tschchartinfodefaultshowlegend();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultshowlegend(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tschchartinfodefaultshowlegend_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowlegend(bool value) {
  _internal_set_tschchartinfodefaultshowlegend(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowlegend)
}

// optional bool tschchartinfodefaultshowtitle = 21;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultshowtitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowtitle() const {
  return _internal_has_tschchartinfodefaultshowtitle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowtitle() {
  _impl_.tschchartinfodefaultshowtitle_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultshowtitle() const {
  return _impl_.tschchartinfodefaultshowtitle_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowtitle)
  return _internal_tschchartinfodefaultshowtitle();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultshowtitle(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.tschchartinfodefaultshowtitle_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowtitle(bool value) {
  _internal_set_tschchartinfodefaultshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowtitle)
}

// optional bool tschchartinfodefaultskiphiddendata = 22;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultskiphiddendata() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultskiphiddendata() const {
  return _internal_has_tschchartinfodefaultskiphiddendata();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultskiphiddendata() {
  _impl_.tschchartinfodefaultskiphiddendata_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultskiphiddendata() const {
  return _impl_.tschchartinfodefaultskiphiddendata_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultskiphiddendata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultskiphiddendata)
  return _internal_tschchartinfodefaultskiphiddendata();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultskiphiddendata(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.tschchartinfodefaultskiphiddendata_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultskiphiddendata(bool value) {
  _internal_set_tschchartinfodefaultskiphiddendata(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultskiphiddendata)
}

// optional string tschchartinfodefaulttitle = 23;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaulttitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaulttitle() const {
  return _internal_has_tschchartinfodefaulttitle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaulttitle() {
  _impl_.tschchartinfodefaulttitle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartNonStyleArchive::tschchartinfodefaulttitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
  return _internal_tschchartinfodefaulttitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartNonStyleArchive::set_tschchartinfodefaulttitle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tschchartinfodefaulttitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
}
inline std::string* ChartNonStyleArchive::mutable_tschchartinfodefaulttitle() {
  std::string* _s = _internal_mutable_tschchartinfodefaulttitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
  return _s;
}
inline const std::string& ChartNonStyleArchive::_internal_tschchartinfodefaulttitle() const {
  return _impl_.tschchartinfodefaulttitle_.Get();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaulttitle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tschchartinfodefaulttitle_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartNonStyleArchive::_internal_mutable_tschchartinfodefaulttitle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tschchartinfodefaulttitle_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartNonStyleArchive::release_tschchartinfodefaulttitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
  if (!_internal_has_tschchartinfodefaulttitle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tschchartinfodefaulttitle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartinfodefaulttitle_.IsDefault()) {
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefaulttitle(std::string* tschchartinfodefaulttitle) {
  if (tschchartinfodefaulttitle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tschchartinfodefaulttitle_.SetAllocated(tschchartinfodefaulttitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartinfodefaulttitle_.IsDefault()) {
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
}

// optional int32 tschchartinfodefaultdatasetnamelocation = 24;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultdatasetnamelocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdatasetnamelocation() const {
  return _internal_has_tschchartinfodefaultdatasetnamelocation();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultdatasetnamelocation() {
  _impl_.tschchartinfodefaultdatasetnamelocation_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t ChartNonStyleArchive::_internal_tschchartinfodefaultdatasetnamelocation() const {
  return _impl_.tschchartinfodefaultdatasetnamelocation_;
}
inline int32_t ChartNonStyleArchive::tschchartinfodefaultdatasetnamelocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdatasetnamelocation)
  return _internal_tschchartinfodefaultdatasetnamelocation();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultdatasetnamelocation(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.tschchartinfodefaultdatasetnamelocation_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultdatasetnamelocation(int32_t value) {
  _internal_set_tschchartinfodefaultdatasetnamelocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdatasetnamelocation)
}

// optional int32 tschchartinfodefaultmultidatacontroltype = 25;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultmultidatacontroltype() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultmultidatacontroltype() const {
  return _internal_has_tschchartinfodefaultmultidatacontroltype();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultmultidatacontroltype() {
  _impl_.tschchartinfodefaultmultidatacontroltype_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t ChartNonStyleArchive::_internal_tschchartinfodefaultmultidatacontroltype() const {
  return _impl_.tschchartinfodefaultmultidatacontroltype_;
}
inline int32_t ChartNonStyleArchive::tschchartinfodefaultmultidatacontroltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultmultidatacontroltype)
  return _internal_tschchartinfodefaultmultidatacontroltype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultmultidatacontroltype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.tschchartinfodefaultmultidatacontroltype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultmultidatacontroltype(int32_t value) {
  _internal_set_tschchartinfodefaultmultidatacontroltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultmultidatacontroltype)
}

// -------------------------------------------------------------------

// LegendStyleArchive

// optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschlegendmodeldefaultfill_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultfill() const {
  return _internal_has_tschlegendmodeldefaultfill();
}
inline const ::TSD::FillArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultfill() const {
  const ::TSD::FillArchive* p = _impl_.tschlegendmodeldefaultfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& LegendStyleArchive::tschlegendmodeldefaultfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
  return _internal_tschlegendmodeldefaultfill();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultfill(
    ::TSD::FillArchive* tschlegendmodeldefaultfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschlegendmodeldefaultfill_);
  }
  _impl_.tschlegendmodeldefaultfill_ = tschlegendmodeldefaultfill;
  if (tschlegendmodeldefaultfill) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
}
inline ::TSD::FillArchive* LegendStyleArchive::release_tschlegendmodeldefaultfill() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = _impl_.tschlegendmodeldefaultfill_;
  _impl_.tschlegendmodeldefaultfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = _impl_.tschlegendmodeldefaultfill_;
  _impl_.tschlegendmodeldefaultfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultfill() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tschlegendmodeldefaultfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschlegendmodeldefaultfill_ = p;
  }
  return _impl_.tschlegendmodeldefaultfill_;
}
inline ::TSD::FillArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschlegendmodeldefaultfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
  return _msg;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschlegendmodeldefaultfill_);
  }
  if (tschlegendmodeldefaultfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultfill));
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tschlegendmodeldefaultfill_ = tschlegendmodeldefaultfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
}

// optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return _internal_has_tschlegendmodeldefaultlabelparagraphstyleindex();
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultlabelparagraphstyleindex() {
  _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t LegendStyleArchive::_internal_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_;
}
inline int32_t LegendStyleArchive::tschlegendmodeldefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultlabelparagraphstyleindex)
  return _internal_tschlegendmodeldefaultlabelparagraphstyleindex();
}
inline void LegendStyleArchive::_internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = value;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultlabelparagraphstyleindex(int32_t value) {
  _internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultlabelparagraphstyleindex)
}

// optional float tschlegendmodeldefaultopacity = 3;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultopacity() const {
  return _internal_has_tschlegendmodeldefaultopacity();
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultopacity() {
  _impl_.tschlegendmodeldefaultopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float LegendStyleArchive::_internal_tschlegendmodeldefaultopacity() const {
  return _impl_.tschlegendmodeldefaultopacity_;
}
inline float LegendStyleArchive::tschlegendmodeldefaultopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultopacity)
  return _internal_tschlegendmodeldefaultopacity();
}
inline void LegendStyleArchive::_internal_set_tschlegendmodeldefaultopacity(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tschlegendmodeldefaultopacity_ = value;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultopacity(float value) {
  _internal_set_tschlegendmodeldefaultopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultopacity)
}

// optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschlegendmodeldefaultshadow_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultshadow() const {
  return _internal_has_tschlegendmodeldefaultshadow();
}
inline const ::TSD::ShadowArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschlegendmodeldefaultshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& LegendStyleArchive::tschlegendmodeldefaultshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
  return _internal_tschlegendmodeldefaultshadow();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultshadow(
    ::TSD::ShadowArchive* tschlegendmodeldefaultshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschlegendmodeldefaultshadow_);
  }
  _impl_.tschlegendmodeldefaultshadow_ = tschlegendmodeldefaultshadow;
  if (tschlegendmodeldefaultshadow) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
}
inline ::TSD::ShadowArchive* LegendStyleArchive::release_tschlegendmodeldefaultshadow() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = _impl_.tschlegendmodeldefaultshadow_;
  _impl_.tschlegendmodeldefaultshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = _impl_.tschlegendmodeldefaultshadow_;
  _impl_.tschlegendmodeldefaultshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultshadow() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tschlegendmodeldefaultshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschlegendmodeldefaultshadow_ = p;
  }
  return _impl_.tschlegendmodeldefaultshadow_;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschlegendmodeldefaultshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
  return _msg;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschlegendmodeldefaultshadow_);
  }
  if (tschlegendmodeldefaultshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultshadow));
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tschlegendmodeldefaultshadow_ = tschlegendmodeldefaultshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
}

// optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultstroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschlegendmodeldefaultstroke_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultstroke() const {
  return _internal_has_tschlegendmodeldefaultstroke();
}
inline const ::TSD::StrokeArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschlegendmodeldefaultstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& LegendStyleArchive::tschlegendmodeldefaultstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
  return _internal_tschlegendmodeldefaultstroke();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultstroke(
    ::TSD::StrokeArchive* tschlegendmodeldefaultstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschlegendmodeldefaultstroke_);
  }
  _impl_.tschlegendmodeldefaultstroke_ = tschlegendmodeldefaultstroke;
  if (tschlegendmodeldefaultstroke) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
}
inline ::TSD::StrokeArchive* LegendStyleArchive::release_tschlegendmodeldefaultstroke() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = _impl_.tschlegendmodeldefaultstroke_;
  _impl_.tschlegendmodeldefaultstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = _impl_.tschlegendmodeldefaultstroke_;
  _impl_.tschlegendmodeldefaultstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultstroke() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tschlegendmodeldefaultstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschlegendmodeldefaultstroke_ = p;
  }
  return _impl_.tschlegendmodeldefaultstroke_;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschlegendmodeldefaultstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
  return _msg;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschlegendmodeldefaultstroke_);
  }
  if (tschlegendmodeldefaultstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultstroke));
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultstroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tschlegendmodeldefaultstroke_ = tschlegendmodeldefaultstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
}

// -------------------------------------------------------------------

// LegendNonStyleArchive

// -------------------------------------------------------------------

// ChartAxisStyleArchive

// optional float tschchartaxiscategory3dgridlineopacity = 1;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategory3dgridlineopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlineopacity() const {
  return _internal_has_tschchartaxiscategory3dgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlineopacity() {
  _impl_.tschchartaxiscategory3dgridlineopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategory3dgridlineopacity() const {
  return _impl_.tschchartaxiscategory3dgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategory3dgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlineopacity)
  return _internal_tschchartaxiscategory3dgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategory3dgridlineopacity(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.tschchartaxiscategory3dgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategory3dgridlineopacity(float value) {
  _internal_set_tschchartaxiscategory3dgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlineopacity)
}

// optional float tschchartaxisvalue3dgridlineopacity = 2;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalue3dgridlineopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlineopacity() const {
  return _internal_has_tschchartaxisvalue3dgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlineopacity() {
  _impl_.tschchartaxisvalue3dgridlineopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvalue3dgridlineopacity() const {
  return _impl_.tschchartaxisvalue3dgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvalue3dgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlineopacity)
  return _internal_tschchartaxisvalue3dgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalue3dgridlineopacity(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.tschchartaxisvalue3dgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalue3dgridlineopacity(float value) {
  _internal_set_tschchartaxisvalue3dgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlineopacity)
}

// optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategory3dgridlinestroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxiscategory3dgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlinestroke() const {
  return _internal_has_tschchartaxiscategory3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategory3dgridlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartaxiscategory3dgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategory3dgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  return _internal_tschchartaxiscategory3dgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategory3dgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategory3dgridlinestroke_);
  }
  _impl_.tschchartaxiscategory3dgridlinestroke_ = tschchartaxiscategory3dgridlinestroke;
  if (tschchartaxiscategory3dgridlinestroke) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategory3dgridlinestroke() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxiscategory3dgridlinestroke_;
  _impl_.tschchartaxiscategory3dgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategory3dgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxiscategory3dgridlinestroke_;
  _impl_.tschchartaxiscategory3dgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategory3dgridlinestroke() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tschchartaxiscategory3dgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartaxiscategory3dgridlinestroke_ = p;
  }
  return _impl_.tschchartaxiscategory3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategory3dgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxiscategory3dgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategory3dgridlinestroke_);
  }
  if (tschchartaxiscategory3dgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategory3dgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxiscategory3dgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategory3dgridlinestroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tschchartaxiscategory3dgridlinestroke_ = tschchartaxiscategory3dgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalue3dgridlinestroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisvalue3dgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlinestroke() const {
  return _internal_has_tschchartaxisvalue3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalue3dgridlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartaxisvalue3dgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalue3dgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  return _internal_tschchartaxisvalue3dgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalue3dgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvalue3dgridlinestroke_);
  }
  _impl_.tschchartaxisvalue3dgridlinestroke_ = tschchartaxisvalue3dgridlinestroke;
  if (tschchartaxisvalue3dgridlinestroke) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalue3dgridlinestroke() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxisvalue3dgridlinestroke_;
  _impl_.tschchartaxisvalue3dgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalue3dgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxisvalue3dgridlinestroke_;
  _impl_.tschchartaxisvalue3dgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalue3dgridlinestroke() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tschchartaxisvalue3dgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisvalue3dgridlinestroke_ = p;
  }
  return _impl_.tschchartaxisvalue3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalue3dgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxisvalue3dgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvalue3dgridlinestroke_);
  }
  if (tschchartaxisvalue3dgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalue3dgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxisvalue3dgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalue3dgridlinestroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tschchartaxisvalue3dgridlinestroke_ = tschchartaxisvalue3dgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
}

// optional int32 tschchartaxiscategoryhorizontalspacing = 5;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryhorizontalspacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryhorizontalspacing() const {
  return _internal_has_tschchartaxiscategoryhorizontalspacing();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryhorizontalspacing() {
  _impl_.tschchartaxiscategoryhorizontalspacing_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxiscategoryhorizontalspacing() const {
  return _impl_.tschchartaxiscategoryhorizontalspacing_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxiscategoryhorizontalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryhorizontalspacing)
  return _internal_tschchartaxiscategoryhorizontalspacing();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryhorizontalspacing(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tschchartaxiscategoryhorizontalspacing_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryhorizontalspacing(int32_t value) {
  _internal_set_tschchartaxiscategoryhorizontalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryhorizontalspacing)
}

// optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorylabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelparagraphstyleindex() const {
  return _internal_has_tschchartaxiscategorylabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelparagraphstyleindex() {
  _impl_.tschchartaxiscategorylabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxiscategorylabelparagraphstyleindex() const {
  return _impl_.tschchartaxiscategorylabelparagraphstyleindex_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxiscategorylabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelparagraphstyleindex)
  return _internal_tschchartaxiscategorylabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorylabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.tschchartaxiscategorylabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartaxiscategorylabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelparagraphstyleindex)
}

// optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaultlabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelparagraphstyleindex() const {
  return _internal_has_tschchartaxisdefaultlabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelparagraphstyleindex() {
  _impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxisdefaultlabelparagraphstyleindex() const {
  return _impl_.tschchartaxisdefaultlabelparagraphstyleindex_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxisdefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelparagraphstyleindex)
  return _internal_tschchartaxisdefaultlabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaultlabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartaxisdefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelparagraphstyleindex)
}

// optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluelabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelparagraphstyleindex() const {
  return _internal_has_tschchartaxisvaluelabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelparagraphstyleindex() {
  _impl_.tschchartaxisvaluelabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxisvaluelabelparagraphstyleindex() const {
  return _impl_.tschchartaxisvaluelabelparagraphstyleindex_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxisvaluelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelparagraphstyleindex)
  return _internal_tschchartaxisvaluelabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluelabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.tschchartaxisvaluelabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartaxisvaluelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelparagraphstyleindex)
}

// optional float tschchartaxiscategorylabelsorientation = 9;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorylabelsorientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelsorientation() const {
  return _internal_has_tschchartaxiscategorylabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelsorientation() {
  _impl_.tschchartaxiscategorylabelsorientation_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategorylabelsorientation() const {
  return _impl_.tschchartaxiscategorylabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategorylabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelsorientation)
  return _internal_tschchartaxiscategorylabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorylabelsorientation(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.tschchartaxiscategorylabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelsorientation(float value) {
  _internal_set_tschchartaxiscategorylabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelsorientation)
}

// optional float tschchartaxisdefaultlabelsorientation = 10;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaultlabelsorientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelsorientation() const {
  return _internal_has_tschchartaxisdefaultlabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelsorientation() {
  _impl_.tschchartaxisdefaultlabelsorientation_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisdefaultlabelsorientation() const {
  return _impl_.tschchartaxisdefaultlabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxisdefaultlabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelsorientation)
  return _internal_tschchartaxisdefaultlabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaultlabelsorientation(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.tschchartaxisdefaultlabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelsorientation(float value) {
  _internal_set_tschchartaxisdefaultlabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelsorientation)
}

// optional float tschchartaxisvaluelabelsorientation = 11;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluelabelsorientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelsorientation() const {
  return _internal_has_tschchartaxisvaluelabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelsorientation() {
  _impl_.tschchartaxisvaluelabelsorientation_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvaluelabelsorientation() const {
  return _impl_.tschchartaxisvaluelabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxisvaluelabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelsorientation)
  return _internal_tschchartaxisvaluelabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluelabelsorientation(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.tschchartaxisvaluelabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelsorientation(float value) {
  _internal_set_tschchartaxisvaluelabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelsorientation)
}

// optional float tschchartaxiscategorymajorgridlineopacity = 12;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlineopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineopacity() const {
  return _internal_has_tschchartaxiscategorymajorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineopacity() {
  _impl_.tschchartaxiscategorymajorgridlineopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlineopacity() const {
  return _impl_.tschchartaxiscategorymajorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineopacity)
  return _internal_tschchartaxiscategorymajorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorymajorgridlineopacity(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.tschchartaxiscategorymajorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorymajorgridlineopacity(float value) {
  _internal_set_tschchartaxiscategorymajorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineopacity)
}

// optional float tschchartaxisvaluemajorgridlineopacity = 13;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlineopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineopacity() const {
  return _internal_has_tschchartaxisvaluemajorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineopacity() {
  _impl_.tschchartaxisvaluemajorgridlineopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlineopacity() const {
  return _impl_.tschchartaxisvaluemajorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineopacity)
  return _internal_tschchartaxisvaluemajorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluemajorgridlineopacity(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.tschchartaxisvaluemajorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluemajorgridlineopacity(float value) {
  _internal_set_tschchartaxisvaluemajorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineopacity)
}

// optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlineshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxiscategorymajorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineshadow() const {
  return _internal_has_tschchartaxiscategorymajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartaxiscategorymajorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  return _internal_tschchartaxiscategorymajorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategorymajorgridlineshadow_);
  }
  _impl_.tschchartaxiscategorymajorgridlineshadow_ = tschchartaxiscategorymajorgridlineshadow;
  if (tschchartaxiscategorymajorgridlineshadow) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlineshadow() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxiscategorymajorgridlineshadow_;
  _impl_.tschchartaxiscategorymajorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategorymajorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxiscategorymajorgridlineshadow_;
  _impl_.tschchartaxiscategorymajorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategorymajorgridlineshadow() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tschchartaxiscategorymajorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartaxiscategorymajorgridlineshadow_ = p;
  }
  return _impl_.tschchartaxiscategorymajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxiscategorymajorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategorymajorgridlineshadow_);
  }
  if (tschchartaxiscategorymajorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxiscategorymajorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategorymajorgridlineshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tschchartaxiscategorymajorgridlineshadow_ = tschchartaxiscategorymajorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
}

// optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlineshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisvaluemajorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineshadow() const {
  return _internal_has_tschchartaxisvaluemajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartaxisvaluemajorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  return _internal_tschchartaxisvaluemajorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvaluemajorgridlineshadow_);
  }
  _impl_.tschchartaxisvaluemajorgridlineshadow_ = tschchartaxisvaluemajorgridlineshadow;
  if (tschchartaxisvaluemajorgridlineshadow) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlineshadow() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxisvaluemajorgridlineshadow_;
  _impl_.tschchartaxisvaluemajorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvaluemajorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxisvaluemajorgridlineshadow_;
  _impl_.tschchartaxisvaluemajorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvaluemajorgridlineshadow() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.tschchartaxisvaluemajorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisvaluemajorgridlineshadow_ = p;
  }
  return _impl_.tschchartaxisvaluemajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxisvaluemajorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvaluemajorgridlineshadow_);
  }
  if (tschchartaxisvaluemajorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxisvaluemajorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvaluemajorgridlineshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tschchartaxisvaluemajorgridlineshadow_ = tschchartaxisvaluemajorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
}

// optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlinestroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxiscategorymajorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlinestroke() const {
  return _internal_has_tschchartaxiscategorymajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartaxiscategorymajorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  return _internal_tschchartaxiscategorymajorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategorymajorgridlinestroke_);
  }
  _impl_.tschchartaxiscategorymajorgridlinestroke_ = tschchartaxiscategorymajorgridlinestroke;
  if (tschchartaxiscategorymajorgridlinestroke) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlinestroke() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxiscategorymajorgridlinestroke_;
  _impl_.tschchartaxiscategorymajorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategorymajorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxiscategorymajorgridlinestroke_;
  _impl_.tschchartaxiscategorymajorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategorymajorgridlinestroke() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.tschchartaxiscategorymajorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartaxiscategorymajorgridlinestroke_ = p;
  }
  return _impl_.tschchartaxiscategorymajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxiscategorymajorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategorymajorgridlinestroke_);
  }
  if (tschchartaxiscategorymajorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxiscategorymajorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategorymajorgridlinestroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.tschchartaxiscategorymajorgridlinestroke_ = tschchartaxiscategorymajorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlinestroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisvaluemajorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlinestroke() const {
  return _internal_has_tschchartaxisvaluemajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartaxisvaluemajorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  return _internal_tschchartaxisvaluemajorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvaluemajorgridlinestroke_);
  }
  _impl_.tschchartaxisvaluemajorgridlinestroke_ = tschchartaxisvaluemajorgridlinestroke;
  if (tschchartaxisvaluemajorgridlinestroke) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlinestroke() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxisvaluemajorgridlinestroke_;
  _impl_.tschchartaxisvaluemajorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvaluemajorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxisvaluemajorgridlinestroke_;
  _impl_.tschchartaxisvaluemajorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvaluemajorgridlinestroke() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.tschchartaxisvaluemajorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisvaluemajorgridlinestroke_ = p;
  }
  return _impl_.tschchartaxisvaluemajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxisvaluemajorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvaluemajorgridlinestroke_);
  }
  if (tschchartaxisvaluemajorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxisvaluemajorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvaluemajorgridlinestroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.tschchartaxisvaluemajorgridlinestroke_ = tschchartaxisvaluemajorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
}

// optional float tschchartaxiscategoryminorgridlineopacity = 18;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlineopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineopacity() const {
  return _internal_has_tschchartaxiscategoryminorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineopacity() {
  _impl_.tschchartaxiscategoryminorgridlineopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlineopacity() const {
  return _impl_.tschchartaxiscategoryminorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineopacity)
  return _internal_tschchartaxiscategoryminorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryminorgridlineopacity(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.tschchartaxiscategoryminorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryminorgridlineopacity(float value) {
  _internal_set_tschchartaxiscategoryminorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineopacity)
}

// optional float tschchartaxisvalueminorgridlineopacity = 19;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlineopacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineopacity() const {
  return _internal_has_tschchartaxisvalueminorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineopacity() {
  _impl_.tschchartaxisvalueminorgridlineopacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlineopacity() const {
  return _impl_.tschchartaxisvalueminorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvalueminorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineopacity)
  return _internal_tschchartaxisvalueminorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueminorgridlineopacity(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.tschchartaxisvalueminorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueminorgridlineopacity(float value) {
  _internal_set_tschchartaxisvalueminorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineopacity)
}

// optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlineshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxiscategoryminorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineshadow() const {
  return _internal_has_tschchartaxiscategoryminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartaxiscategoryminorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  return _internal_tschchartaxiscategoryminorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategoryminorgridlineshadow_);
  }
  _impl_.tschchartaxiscategoryminorgridlineshadow_ = tschchartaxiscategoryminorgridlineshadow;
  if (tschchartaxiscategoryminorgridlineshadow) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlineshadow() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxiscategoryminorgridlineshadow_;
  _impl_.tschchartaxiscategoryminorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategoryminorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxiscategoryminorgridlineshadow_;
  _impl_.tschchartaxiscategoryminorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategoryminorgridlineshadow() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.tschchartaxiscategoryminorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartaxiscategoryminorgridlineshadow_ = p;
  }
  return _impl_.tschchartaxiscategoryminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxiscategoryminorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategoryminorgridlineshadow_);
  }
  if (tschchartaxiscategoryminorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxiscategoryminorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategoryminorgridlineshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.tschchartaxiscategoryminorgridlineshadow_ = tschchartaxiscategoryminorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
}

// optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlineshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisvalueminorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineshadow() const {
  return _internal_has_tschchartaxisvalueminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartaxisvalueminorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  return _internal_tschchartaxisvalueminorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalueminorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvalueminorgridlineshadow_);
  }
  _impl_.tschchartaxisvalueminorgridlineshadow_ = tschchartaxisvalueminorgridlineshadow;
  if (tschchartaxisvalueminorgridlineshadow) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlineshadow() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxisvalueminorgridlineshadow_;
  _impl_.tschchartaxisvalueminorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalueminorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartaxisvalueminorgridlineshadow_;
  _impl_.tschchartaxisvalueminorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalueminorgridlineshadow() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.tschchartaxisvalueminorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisvalueminorgridlineshadow_ = p;
  }
  return _impl_.tschchartaxisvalueminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxisvalueminorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvalueminorgridlineshadow_);
  }
  if (tschchartaxisvalueminorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxisvalueminorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalueminorgridlineshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.tschchartaxisvalueminorgridlineshadow_ = tschchartaxisvalueminorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
}

// optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlinestroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxiscategoryminorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlinestroke() const {
  return _internal_has_tschchartaxiscategoryminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartaxiscategoryminorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  return _internal_tschchartaxiscategoryminorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategoryminorgridlinestroke_);
  }
  _impl_.tschchartaxiscategoryminorgridlinestroke_ = tschchartaxiscategoryminorgridlinestroke;
  if (tschchartaxiscategoryminorgridlinestroke) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlinestroke() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxiscategoryminorgridlinestroke_;
  _impl_.tschchartaxiscategoryminorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategoryminorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxiscategoryminorgridlinestroke_;
  _impl_.tschchartaxiscategoryminorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategoryminorgridlinestroke() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.tschchartaxiscategoryminorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartaxiscategoryminorgridlinestroke_ = p;
  }
  return _impl_.tschchartaxiscategoryminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxiscategoryminorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxiscategoryminorgridlinestroke_);
  }
  if (tschchartaxiscategoryminorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxiscategoryminorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategoryminorgridlinestroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.tschchartaxiscategoryminorgridlinestroke_ = tschchartaxiscategoryminorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlinestroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisvalueminorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlinestroke() const {
  return _internal_has_tschchartaxisvalueminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartaxisvalueminorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  return _internal_tschchartaxisvalueminorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalueminorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvalueminorgridlinestroke_);
  }
  _impl_.tschchartaxisvalueminorgridlinestroke_ = tschchartaxisvalueminorgridlinestroke;
  if (tschchartaxisvalueminorgridlinestroke) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlinestroke() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxisvalueminorgridlinestroke_;
  _impl_.tschchartaxisvalueminorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalueminorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartaxisvalueminorgridlinestroke_;
  _impl_.tschchartaxisvalueminorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalueminorgridlinestroke() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.tschchartaxisvalueminorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisvalueminorgridlinestroke_ = p;
  }
  return _impl_.tschchartaxisvalueminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxisvalueminorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisvalueminorgridlinestroke_);
  }
  if (tschchartaxisvalueminorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxisvalueminorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalueminorgridlinestroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.tschchartaxisvalueminorgridlinestroke_ = tschchartaxisvalueminorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
}

// optional bool tschchartaxiscategoryshowaxis = 24;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowaxis() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowaxis() const {
  return _internal_has_tschchartaxiscategoryshowaxis();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowaxis() {
  _impl_.tschchartaxiscategoryshowaxis_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowaxis() const {
  return _impl_.tschchartaxiscategoryshowaxis_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowaxis)
  return _internal_tschchartaxiscategoryshowaxis();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowaxis(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.tschchartaxiscategoryshowaxis_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowaxis(bool value) {
  _internal_set_tschchartaxiscategoryshowaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowaxis)
}

// optional bool tschchartaxisvalueshowaxis = 25;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowaxis() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowaxis() const {
  return _internal_has_tschchartaxisvalueshowaxis();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowaxis() {
  _impl_.tschchartaxisvalueshowaxis_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowaxis() const {
  return _impl_.tschchartaxisvalueshowaxis_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowaxis)
  return _internal_tschchartaxisvalueshowaxis();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowaxis(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.tschchartaxisvalueshowaxis_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowaxis(bool value) {
  _internal_set_tschchartaxisvalueshowaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowaxis)
}

// optional bool tschchartaxiscategoryshowlastlabel = 26;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowlastlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowlastlabel() const {
  return _internal_has_tschchartaxiscategoryshowlastlabel();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowlastlabel() {
  _impl_.tschchartaxiscategoryshowlastlabel_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowlastlabel() const {
  return _impl_.tschchartaxiscategoryshowlastlabel_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowlastlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowlastlabel)
  return _internal_tschchartaxiscategoryshowlastlabel();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowlastlabel(bool value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.tschchartaxiscategoryshowlastlabel_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowlastlabel(bool value) {
  _internal_set_tschchartaxiscategoryshowlastlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowlastlabel)
}

// optional bool tschchartaxiscategoryshowmajorgridlines = 27;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowmajorgridlines() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajorgridlines() const {
  return _internal_has_tschchartaxiscategoryshowmajorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajorgridlines() {
  _impl_.tschchartaxiscategoryshowmajorgridlines_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowmajorgridlines() const {
  return _impl_.tschchartaxiscategoryshowmajorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajorgridlines)
  return _internal_tschchartaxiscategoryshowmajorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowmajorgridlines(bool value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.tschchartaxiscategoryshowmajorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajorgridlines(bool value) {
  _internal_set_tschchartaxiscategoryshowmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajorgridlines)
}

// optional bool tschchartaxisvalueshowmajorgridlines = 28;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowmajorgridlines() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajorgridlines() const {
  return _internal_has_tschchartaxisvalueshowmajorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajorgridlines() {
  _impl_.tschchartaxisvalueshowmajorgridlines_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowmajorgridlines() const {
  return _impl_.tschchartaxisvalueshowmajorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajorgridlines)
  return _internal_tschchartaxisvalueshowmajorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowmajorgridlines(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.tschchartaxisvalueshowmajorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajorgridlines(bool value) {
  _internal_set_tschchartaxisvalueshowmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajorgridlines)
}

// optional bool tschchartaxiscategoryshowmajortickmarks = 29;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowmajortickmarks() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajortickmarks() const {
  return _internal_has_tschchartaxiscategoryshowmajortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajortickmarks() {
  _impl_.tschchartaxiscategoryshowmajortickmarks_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowmajortickmarks() const {
  return _impl_.tschchartaxiscategoryshowmajortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajortickmarks)
  return _internal_tschchartaxiscategoryshowmajortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowmajortickmarks(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.tschchartaxiscategoryshowmajortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajortickmarks(bool value) {
  _internal_set_tschchartaxiscategoryshowmajortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajortickmarks)
}

// optional bool tschchartaxisvalueshowmajortickmarks = 30;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowmajortickmarks() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajortickmarks() const {
  return _internal_has_tschchartaxisvalueshowmajortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajortickmarks() {
  _impl_.tschchartaxisvalueshowmajortickmarks_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowmajortickmarks() const {
  return _impl_.tschchartaxisvalueshowmajortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajortickmarks)
  return _internal_tschchartaxisvalueshowmajortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowmajortickmarks(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.tschchartaxisvalueshowmajortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajortickmarks(bool value) {
  _internal_set_tschchartaxisvalueshowmajortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajortickmarks)
}

// optional bool tschchartaxisvalueshowminimumlabel = 31;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminimumlabel() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminimumlabel() const {
  return _internal_has_tschchartaxisvalueshowminimumlabel();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminimumlabel() {
  _impl_.tschchartaxisvalueshowminimumlabel_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminimumlabel() const {
  return _impl_.tschchartaxisvalueshowminimumlabel_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminimumlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminimumlabel)
  return _internal_tschchartaxisvalueshowminimumlabel();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminimumlabel(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.tschchartaxisvalueshowminimumlabel_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminimumlabel(bool value) {
  _internal_set_tschchartaxisvalueshowminimumlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminimumlabel)
}

// optional bool tschchartaxiscategoryshowminorgridlines = 32;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowminorgridlines() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminorgridlines() const {
  return _internal_has_tschchartaxiscategoryshowminorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminorgridlines() {
  _impl_.tschchartaxiscategoryshowminorgridlines_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowminorgridlines() const {
  return _impl_.tschchartaxiscategoryshowminorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminorgridlines)
  return _internal_tschchartaxiscategoryshowminorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowminorgridlines(bool value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.tschchartaxiscategoryshowminorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminorgridlines(bool value) {
  _internal_set_tschchartaxiscategoryshowminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminorgridlines)
}

// optional bool tschchartaxisvalueshowminorgridlines = 33;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminorgridlines() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminorgridlines() const {
  return _internal_has_tschchartaxisvalueshowminorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminorgridlines() {
  _impl_.tschchartaxisvalueshowminorgridlines_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminorgridlines() const {
  return _impl_.tschchartaxisvalueshowminorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminorgridlines)
  return _internal_tschchartaxisvalueshowminorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminorgridlines(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.tschchartaxisvalueshowminorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminorgridlines(bool value) {
  _internal_set_tschchartaxisvalueshowminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminorgridlines)
}

// optional bool tschchartaxiscategoryshowminortickmarks = 34;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowminortickmarks() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminortickmarks() const {
  return _internal_has_tschchartaxiscategoryshowminortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminortickmarks() {
  _impl_.tschchartaxiscategoryshowminortickmarks_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowminortickmarks() const {
  return _impl_.tschchartaxiscategoryshowminortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminortickmarks)
  return _internal_tschchartaxiscategoryshowminortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowminortickmarks(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.tschchartaxiscategoryshowminortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminortickmarks(bool value) {
  _internal_set_tschchartaxiscategoryshowminortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminortickmarks)
}

// optional bool tschchartaxisvalueshowminortickmarks = 35;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminortickmarks() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminortickmarks() const {
  return _internal_has_tschchartaxisvalueshowminortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminortickmarks() {
  _impl_.tschchartaxisvalueshowminortickmarks_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminortickmarks() const {
  return _impl_.tschchartaxisvalueshowminortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminortickmarks)
  return _internal_tschchartaxisvalueshowminortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminortickmarks(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.tschchartaxisvalueshowminortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminortickmarks(bool value) {
  _internal_set_tschchartaxisvalueshowminortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminortickmarks)
}

// optional int32 tschchartaxiscategorytickmarklocation = 36;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorytickmarklocation() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytickmarklocation() const {
  return _internal_has_tschchartaxiscategorytickmarklocation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytickmarklocation() {
  _impl_.tschchartaxiscategorytickmarklocation_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxiscategorytickmarklocation() const {
  return _impl_.tschchartaxiscategorytickmarklocation_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxiscategorytickmarklocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytickmarklocation)
  return _internal_tschchartaxiscategorytickmarklocation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorytickmarklocation(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.tschchartaxiscategorytickmarklocation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytickmarklocation(int32_t value) {
  _internal_set_tschchartaxiscategorytickmarklocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytickmarklocation)
}

// optional int32 tschchartaxisvaluetickmarklocation = 37;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluetickmarklocation() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetickmarklocation() const {
  return _internal_has_tschchartaxisvaluetickmarklocation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetickmarklocation() {
  _impl_.tschchartaxisvaluetickmarklocation_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxisvaluetickmarklocation() const {
  return _impl_.tschchartaxisvaluetickmarklocation_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxisvaluetickmarklocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetickmarklocation)
  return _internal_tschchartaxisvaluetickmarklocation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluetickmarklocation(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.tschchartaxisvaluetickmarklocation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetickmarklocation(int32_t value) {
  _internal_set_tschchartaxisvaluetickmarklocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetickmarklocation)
}

// optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorytitleparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytitleparagraphstyleindex() const {
  return _internal_has_tschchartaxiscategorytitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytitleparagraphstyleindex() {
  _impl_.tschchartaxiscategorytitleparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxiscategorytitleparagraphstyleindex() const {
  return _impl_.tschchartaxiscategorytitleparagraphstyleindex_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxiscategorytitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytitleparagraphstyleindex)
  return _internal_tschchartaxiscategorytitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorytitleparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.tschchartaxiscategorytitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytitleparagraphstyleindex(int32_t value) {
  _internal_set_tschchartaxiscategorytitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytitleparagraphstyleindex)
}

// optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaulttitleparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaulttitleparagraphstyleindex() const {
  return _internal_has_tschchartaxisdefaulttitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaulttitleparagraphstyleindex() {
  _impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxisdefaulttitleparagraphstyleindex() const {
  return _impl_.tschchartaxisdefaulttitleparagraphstyleindex_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxisdefaulttitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaulttitleparagraphstyleindex)
  return _internal_tschchartaxisdefaulttitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaulttitleparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaulttitleparagraphstyleindex(int32_t value) {
  _internal_set_tschchartaxisdefaulttitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaulttitleparagraphstyleindex)
}

// optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluetitleparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetitleparagraphstyleindex() const {
  return _internal_has_tschchartaxisvaluetitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetitleparagraphstyleindex() {
  _impl_.tschchartaxisvaluetitleparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxisvaluetitleparagraphstyleindex() const {
  return _impl_.tschchartaxisvaluetitleparagraphstyleindex_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxisvaluetitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetitleparagraphstyleindex)
  return _internal_tschchartaxisvaluetitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluetitleparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.tschchartaxisvaluetitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetitleparagraphstyleindex(int32_t value) {
  _internal_set_tschchartaxisvaluetitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetitleparagraphstyleindex)
}

// optional int32 tschchartaxiscategoryverticalspacing = 41;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryverticalspacing() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryverticalspacing() const {
  return _internal_has_tschchartaxiscategoryverticalspacing();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryverticalspacing() {
  _impl_.tschchartaxiscategoryverticalspacing_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline int32_t ChartAxisStyleArchive::_internal_tschchartaxiscategoryverticalspacing() const {
  return _impl_.tschchartaxiscategoryverticalspacing_;
}
inline int32_t ChartAxisStyleArchive::tschchartaxiscategoryverticalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryverticalspacing)
  return _internal_tschchartaxiscategoryverticalspacing();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryverticalspacing(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.tschchartaxiscategoryverticalspacing_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryverticalspacing(int32_t value) {
  _internal_set_tschchartaxiscategoryverticalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryverticalspacing)
}

// -------------------------------------------------------------------

// ChartAxisNonStyleArchive

// optional int32 tschchartaxisdefault3dlabelposition = 1;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefault3dlabelposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault3dlabelposition() const {
  return _internal_has_tschchartaxisdefault3dlabelposition();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefault3dlabelposition() {
  _impl_.tschchartaxisdefault3dlabelposition_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ChartAxisNonStyleArchive::_internal_tschchartaxisdefault3dlabelposition() const {
  return _impl_.tschchartaxisdefault3dlabelposition_;
}
inline int32_t ChartAxisNonStyleArchive::tschchartaxisdefault3dlabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault3dlabelposition)
  return _internal_tschchartaxisdefault3dlabelposition();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefault3dlabelposition(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tschchartaxisdefault3dlabelposition_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefault3dlabelposition(int32_t value) {
  _internal_set_tschchartaxisdefault3dlabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault3dlabelposition)
}

// optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 2;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultnumberformat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisdefaultnumberformat_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformat() const {
  return _internal_has_tschchartaxisdefaultnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultnumberformat() const {
  const ::TSK::FormatStructArchive* p = _impl_.tschchartaxisdefaultnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  return _internal_tschchartaxisdefaultnumberformat();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultnumberformat(
    ::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisdefaultnumberformat_);
  }
  _impl_.tschchartaxisdefaultnumberformat_ = tschchartaxisdefaultnumberformat;
  if (tschchartaxisdefaultnumberformat) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultnumberformat() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartaxisdefaultnumberformat_;
  _impl_.tschchartaxisdefaultnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartaxisdefaultnumberformat_;
  _impl_.tschchartaxisdefaultnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultnumberformat() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tschchartaxisdefaultnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisdefaultnumberformat_ = p;
  }
  return _impl_.tschchartaxisdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdefaultnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultnumberformat(::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisdefaultnumberformat_);
  }
  if (tschchartaxisdefaultnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultnumberformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultnumberformat, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tschchartaxisdefaultnumberformat_ = tschchartaxisdefaultnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
}

// optional int32 tschchartaxisdefaultnumberformattype = 3;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultnumberformattype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformattype() const {
  return _internal_has_tschchartaxisdefaultnumberformattype();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformattype() {
  _impl_.tschchartaxisdefaultnumberformattype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultnumberformattype() const {
  return _impl_.tschchartaxisdefaultnumberformattype_;
}
inline int32_t ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformattype)
  return _internal_tschchartaxisdefaultnumberformattype();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefaultnumberformattype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.tschchartaxisdefaultnumberformattype_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultnumberformattype(int32_t value) {
  _internal_set_tschchartaxisdefaultnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformattype)
}

// optional int32 tschchartaxisvaluenumberofdecades = 4;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofdecades() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofdecades() const {
  return _internal_has_tschchartaxisvaluenumberofdecades();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofdecades() {
  _impl_.tschchartaxisvaluenumberofdecades_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofdecades() const {
  return _impl_.tschchartaxisvaluenumberofdecades_;
}
inline int32_t ChartAxisNonStyleArchive::tschchartaxisvaluenumberofdecades() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofdecades)
  return _internal_tschchartaxisvaluenumberofdecades();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofdecades(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.tschchartaxisvaluenumberofdecades_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofdecades(int32_t value) {
  _internal_set_tschchartaxisvaluenumberofdecades(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofdecades)
}

// optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofmajorgridlines() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofmajorgridlines() const {
  return _internal_has_tschchartaxisvaluenumberofmajorgridlines();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofmajorgridlines() {
  _impl_.tschchartaxisvaluenumberofmajorgridlines_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofmajorgridlines() const {
  return _impl_.tschchartaxisvaluenumberofmajorgridlines_;
}
inline int32_t ChartAxisNonStyleArchive::tschchartaxisvaluenumberofmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofmajorgridlines)
  return _internal_tschchartaxisvaluenumberofmajorgridlines();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofmajorgridlines(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.tschchartaxisvaluenumberofmajorgridlines_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofmajorgridlines(int32_t value) {
  _internal_set_tschchartaxisvaluenumberofmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofmajorgridlines)
}

// optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofminorgridlines() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofminorgridlines() const {
  return _internal_has_tschchartaxisvaluenumberofminorgridlines();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofminorgridlines() {
  _impl_.tschchartaxisvaluenumberofminorgridlines_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofminorgridlines() const {
  return _impl_.tschchartaxisvaluenumberofminorgridlines_;
}
inline int32_t ChartAxisNonStyleArchive::tschchartaxisvaluenumberofminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofminorgridlines)
  return _internal_tschchartaxisvaluenumberofminorgridlines();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofminorgridlines(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.tschchartaxisvaluenumberofminorgridlines_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofminorgridlines(int32_t value) {
  _internal_set_tschchartaxisvaluenumberofminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofminorgridlines)
}

// optional bool tschchartaxiscategoryplottoedges = 7;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryplottoedges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryplottoedges() const {
  return _internal_has_tschchartaxiscategoryplottoedges();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryplottoedges() {
  _impl_.tschchartaxiscategoryplottoedges_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryplottoedges() const {
  return _impl_.tschchartaxiscategoryplottoedges_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryplottoedges() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryplottoedges)
  return _internal_tschchartaxiscategoryplottoedges();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryplottoedges(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.tschchartaxiscategoryplottoedges_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryplottoedges(bool value) {
  _internal_set_tschchartaxiscategoryplottoedges(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryplottoedges)
}

// optional int32 tschchartaxisvaluescale = 8;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluescale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluescale() const {
  return _internal_has_tschchartaxisvaluescale();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluescale() {
  _impl_.tschchartaxisvaluescale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t ChartAxisNonStyleArchive::_internal_tschchartaxisvaluescale() const {
  return _impl_.tschchartaxisvaluescale_;
}
inline int32_t ChartAxisNonStyleArchive::tschchartaxisvaluescale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluescale)
  return _internal_tschchartaxisvaluescale();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluescale(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.tschchartaxisvaluescale_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluescale(int32_t value) {
  _internal_set_tschchartaxisvaluescale(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluescale)
}

// optional bool tschchartaxiscategoryshowlabels = 9;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowlabels() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowlabels() const {
  return _internal_has_tschchartaxiscategoryshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowlabels() {
  _impl_.tschchartaxiscategoryshowlabels_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowlabels() const {
  return _impl_.tschchartaxiscategoryshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowlabels)
  return _internal_tschchartaxiscategoryshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowlabels(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tschchartaxiscategoryshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowlabels(bool value) {
  _internal_set_tschchartaxiscategoryshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowlabels)
}

// optional bool tschchartaxisdefaultshowlabels = 10;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultshowlabels() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultshowlabels() const {
  return _internal_has_tschchartaxisdefaultshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultshowlabels() {
  _impl_.tschchartaxisdefaultshowlabels_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultshowlabels() const {
  return _impl_.tschchartaxisdefaultshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisdefaultshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultshowlabels)
  return _internal_tschchartaxisdefaultshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefaultshowlabels(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.tschchartaxisdefaultshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultshowlabels(bool value) {
  _internal_set_tschchartaxisdefaultshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultshowlabels)
}

// optional bool tschchartaxisvalueshowlabels = 11;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvalueshowlabels() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowlabels() const {
  return _internal_has_tschchartaxisvalueshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowlabels() {
  _impl_.tschchartaxisvalueshowlabels_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisvalueshowlabels() const {
  return _impl_.tschchartaxisvalueshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowlabels)
  return _internal_tschchartaxisvalueshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvalueshowlabels(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.tschchartaxisvalueshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowlabels(bool value) {
  _internal_set_tschchartaxisvalueshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowlabels)
}

// optional bool tschchartaxiscategoryshowserieslabels = 12;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowserieslabels() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowserieslabels() const {
  return _internal_has_tschchartaxiscategoryshowserieslabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowserieslabels() {
  _impl_.tschchartaxiscategoryshowserieslabels_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowserieslabels() const {
  return _impl_.tschchartaxiscategoryshowserieslabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowserieslabels)
  return _internal_tschchartaxiscategoryshowserieslabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowserieslabels(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.tschchartaxiscategoryshowserieslabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowserieslabels(bool value) {
  _internal_set_tschchartaxiscategoryshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowserieslabels)
}

// optional bool tschchartaxismultidatashowserieslabels = 19;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxismultidatashowserieslabels() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxismultidatashowserieslabels() const {
  return _internal_has_tschchartaxismultidatashowserieslabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxismultidatashowserieslabels() {
  _impl_.tschchartaxismultidatashowserieslabels_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxismultidatashowserieslabels() const {
  return _impl_.tschchartaxismultidatashowserieslabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxismultidatashowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxismultidatashowserieslabels)
  return _internal_tschchartaxismultidatashowserieslabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxismultidatashowserieslabels(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.tschchartaxismultidatashowserieslabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxismultidatashowserieslabels(bool value) {
  _internal_set_tschchartaxismultidatashowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxismultidatashowserieslabels)
}

// optional bool tschchartaxiscategoryshowtitle = 13;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowtitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowtitle() const {
  return _internal_has_tschchartaxiscategoryshowtitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowtitle() {
  _impl_.tschchartaxiscategoryshowtitle_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowtitle() const {
  return _impl_.tschchartaxiscategoryshowtitle_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowtitle)
  return _internal_tschchartaxiscategoryshowtitle();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowtitle(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.tschchartaxiscategoryshowtitle_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowtitle(bool value) {
  _internal_set_tschchartaxiscategoryshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowtitle)
}

// optional bool tschchartaxisvalueshowtitle = 14;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvalueshowtitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowtitle() const {
  return _internal_has_tschchartaxisvalueshowtitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowtitle() {
  _impl_.tschchartaxisvalueshowtitle_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisvalueshowtitle() const {
  return _impl_.tschchartaxisvalueshowtitle_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowtitle)
  return _internal_tschchartaxisvalueshowtitle();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvalueshowtitle(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.tschchartaxisvalueshowtitle_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowtitle(bool value) {
  _internal_set_tschchartaxisvalueshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowtitle)
}

// optional string tschchartaxiscategorytitle = 15;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategorytitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategorytitle() const {
  return _internal_has_tschchartaxiscategorytitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategorytitle() {
  _impl_.tschchartaxiscategorytitle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartAxisNonStyleArchive::tschchartaxiscategorytitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  return _internal_tschchartaxiscategorytitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartAxisNonStyleArchive::set_tschchartaxiscategorytitle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tschchartaxiscategorytitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
}
inline std::string* ChartAxisNonStyleArchive::mutable_tschchartaxiscategorytitle() {
  std::string* _s = _internal_mutable_tschchartaxiscategorytitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  return _s;
}
inline const std::string& ChartAxisNonStyleArchive::_internal_tschchartaxiscategorytitle() const {
  return _impl_.tschchartaxiscategorytitle_.Get();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategorytitle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tschchartaxiscategorytitle_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxiscategorytitle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tschchartaxiscategorytitle_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::release_tschchartaxiscategorytitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  if (!_internal_has_tschchartaxiscategorytitle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tschchartaxiscategorytitle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartaxiscategorytitle_.IsDefault()) {
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxiscategorytitle(std::string* tschchartaxiscategorytitle) {
  if (tschchartaxiscategorytitle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tschchartaxiscategorytitle_.SetAllocated(tschchartaxiscategorytitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartaxiscategorytitle_.IsDefault()) {
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
}

// optional string tschchartaxisvaluetitle = 16;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluetitle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluetitle() const {
  return _internal_has_tschchartaxisvaluetitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluetitle() {
  _impl_.tschchartaxisvaluetitle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartAxisNonStyleArchive::tschchartaxisvaluetitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  return _internal_tschchartaxisvaluetitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartAxisNonStyleArchive::set_tschchartaxisvaluetitle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.tschchartaxisvaluetitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
}
inline std::string* ChartAxisNonStyleArchive::mutable_tschchartaxisvaluetitle() {
  std::string* _s = _internal_mutable_tschchartaxisvaluetitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  return _s;
}
inline const std::string& ChartAxisNonStyleArchive::_internal_tschchartaxisvaluetitle() const {
  return _impl_.tschchartaxisvaluetitle_.Get();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluetitle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tschchartaxisvaluetitle_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisvaluetitle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.tschchartaxisvaluetitle_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::release_tschchartaxisvaluetitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  if (!_internal_has_tschchartaxisvaluetitle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.tschchartaxisvaluetitle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartaxisvaluetitle_.IsDefault()) {
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisvaluetitle(std::string* tschchartaxisvaluetitle) {
  if (tschchartaxisvaluetitle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tschchartaxisvaluetitle_.SetAllocated(tschchartaxisvaluetitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartaxisvaluetitle_.IsDefault()) {
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultusermax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisdefaultusermax_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermax() const {
  return _internal_has_tschchartaxisdefaultusermax();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultusermax() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = _impl_.tschchartaxisdefaultusermax_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermax() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  return _internal_tschchartaxisdefaultusermax();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultusermax(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisdefaultusermax_);
  }
  _impl_.tschchartaxisdefaultusermax_ = tschchartaxisdefaultusermax;
  if (tschchartaxisdefaultusermax) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermax() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = _impl_.tschchartaxisdefaultusermax_;
  _impl_.tschchartaxisdefaultusermax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultusermax() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = _impl_.tschchartaxisdefaultusermax_;
  _impl_.tschchartaxisdefaultusermax_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultusermax() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.tschchartaxisdefaultusermax_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisdefaultusermax_ = p;
  }
  return _impl_.tschchartaxisdefaultusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermax() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschchartaxisdefaultusermax();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisdefaultusermax_);
  }
  if (tschchartaxisdefaultusermax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermax));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultusermax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultusermax, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tschchartaxisdefaultusermax_ = tschchartaxisdefaultusermax;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultusermin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartaxisdefaultusermin_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermin() const {
  return _internal_has_tschchartaxisdefaultusermin();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultusermin() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = _impl_.tschchartaxisdefaultusermin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermin() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  return _internal_tschchartaxisdefaultusermin();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultusermin(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisdefaultusermin_);
  }
  _impl_.tschchartaxisdefaultusermin_ = tschchartaxisdefaultusermin;
  if (tschchartaxisdefaultusermin) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermin() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = _impl_.tschchartaxisdefaultusermin_;
  _impl_.tschchartaxisdefaultusermin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultusermin() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = _impl_.tschchartaxisdefaultusermin_;
  _impl_.tschchartaxisdefaultusermin_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultusermin() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.tschchartaxisdefaultusermin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    _impl_.tschchartaxisdefaultusermin_ = p;
  }
  return _impl_.tschchartaxisdefaultusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermin() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschchartaxisdefaultusermin();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartaxisdefaultusermin_);
  }
  if (tschchartaxisdefaultusermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermin));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultusermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultusermin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.tschchartaxisdefaultusermin_ = tschchartaxisdefaultusermin;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
}

// -------------------------------------------------------------------

// ChartSeriesStyleArchive

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarlineend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineend() const {
  return _internal_has_tschchartseriesdefaulterrorbarlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarlineend() const {
  const ::TSD::LineEndArchive* p = _impl_.tschchartseriesdefaulterrorbarlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  return _internal_tschchartseriesdefaulterrorbarlineend();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineend(
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarlineend_);
  }
  _impl_.tschchartseriesdefaulterrorbarlineend_ = tschchartseriesdefaulterrorbarlineend;
  if (tschchartseriesdefaulterrorbarlineend) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineend() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::LineEndArchive* temp = _impl_.tschchartseriesdefaulterrorbarlineend_;
  _impl_.tschchartseriesdefaulterrorbarlineend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarlineend() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::LineEndArchive* temp = _impl_.tschchartseriesdefaulterrorbarlineend_;
  _impl_.tschchartseriesdefaulterrorbarlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarlineend() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tschchartseriesdefaulterrorbarlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarlineend_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineend() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarlineend();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarlineend_);
  }
  if (tschchartseriesdefaulterrorbarlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineend));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarlineend, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tschchartseriesdefaulterrorbarlineend_ = tschchartseriesdefaulterrorbarlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
}

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarlineendscatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineendscatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarlineendscatterx() const {
  const ::TSD::LineEndArchive* p = _impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineendscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  return _internal_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  _impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = tschchartseriesdefaulterrorbarlineendscatterx;
  if (tschchartseriesdefaulterrorbarlineendscatterx) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineendscatterx() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::LineEndArchive* temp = _impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
  _impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarlineendscatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::LineEndArchive* temp = _impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
  _impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineendscatterx() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  if (tschchartseriesdefaulterrorbarlineendscatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineendscatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarlineendscatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarlineendscatterx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = tschchartseriesdefaulterrorbarlineendscatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
}

// optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarshadow() const {
  return _internal_has_tschchartseriesdefaulterrorbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesdefaulterrorbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  return _internal_tschchartseriesdefaulterrorbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarshadow_);
  }
  _impl_.tschchartseriesdefaulterrorbarshadow_ = tschchartseriesdefaulterrorbarshadow;
  if (tschchartseriesdefaulterrorbarshadow) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarshadow() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesdefaulterrorbarshadow_;
  _impl_.tschchartseriesdefaulterrorbarshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesdefaulterrorbarshadow_;
  _impl_.tschchartseriesdefaulterrorbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarshadow() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tschchartseriesdefaulterrorbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarshadow_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarshadow_);
  }
  if (tschchartseriesdefaulterrorbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tschchartseriesdefaulterrorbarshadow_ = tschchartseriesdefaulterrorbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstroke() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstroke() const {
  return _internal_has_tschchartseriesdefaulterrorbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesdefaulterrorbarstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  return _internal_tschchartseriesdefaulterrorbarstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstroke(
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarstroke_);
  }
  _impl_.tschchartseriesdefaulterrorbarstroke_ = tschchartseriesdefaulterrorbarstroke;
  if (tschchartseriesdefaulterrorbarstroke) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstroke() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesdefaulterrorbarstroke_;
  _impl_.tschchartseriesdefaulterrorbarstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesdefaulterrorbarstroke_;
  _impl_.tschchartseriesdefaulterrorbarstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarstroke() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.tschchartseriesdefaulterrorbarstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarstroke_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarstroke_);
  }
  if (tschchartseriesdefaulterrorbarstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarstroke, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tschchartseriesdefaulterrorbarstroke_ = tschchartseriesdefaulterrorbarstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstrokescatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstrokescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarstrokescatterx() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstrokescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  return _internal_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  _impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = tschchartseriesdefaulterrorbarstrokescatterx;
  if (tschchartseriesdefaulterrorbarstrokescatterx) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstrokescatterx() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
  _impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarstrokescatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
  _impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstrokescatterx() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  if (tschchartseriesdefaulterrorbarstrokescatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstrokescatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarstrokescatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarstrokescatterx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = tschchartseriesdefaulterrorbarstrokescatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
}

// optional .TSD.FillArchive tschchartseries3dareafill = 6;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dareafill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareafill() const {
  return _internal_has_tschchartseries3dareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dareafill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseries3dareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
  return _internal_tschchartseries3dareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dareafill(
    ::TSD::FillArchive* tschchartseries3dareafill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dareafill_);
  }
  _impl_.tschchartseries3dareafill_ = tschchartseries3dareafill;
  if (tschchartseries3dareafill) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dareafill() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dareafill_;
  _impl_.tschchartseries3dareafill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dareafill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dareafill_;
  _impl_.tschchartseries3dareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dareafill() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.tschchartseries3dareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dareafill_ = p;
  }
  return _impl_.tschchartseries3dareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareafill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dareafill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dareafill_);
  }
  if (tschchartseries3dareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareafill));
    if (message_arena != submessage_arena) {
      tschchartseries3dareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dareafill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.tschchartseries3dareafill_ = tschchartseries3dareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
}

// optional .TSD.FillArchive tschchartseries3dbarfill = 7;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dbarfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dbarfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarfill() const {
  return _internal_has_tschchartseries3dbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dbarfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseries3dbarfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dbarfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  return _internal_tschchartseries3dbarfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dbarfill(
    ::TSD::FillArchive* tschchartseries3dbarfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dbarfill_);
  }
  _impl_.tschchartseries3dbarfill_ = tschchartseries3dbarfill;
  if (tschchartseries3dbarfill) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarfill() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dbarfill_;
  _impl_.tschchartseries3dbarfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dbarfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dbarfill_;
  _impl_.tschchartseries3dbarfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dbarfill() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.tschchartseries3dbarfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dbarfill_ = p;
  }
  return _impl_.tschchartseries3dbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dbarfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dbarfill_);
  }
  if (tschchartseries3dbarfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarfill));
    if (message_arena != submessage_arena) {
      tschchartseries3dbarfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dbarfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.tschchartseries3dbarfill_ = tschchartseries3dbarfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
}

// optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dcolumnfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dcolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnfill() const {
  return _internal_has_tschchartseries3dcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dcolumnfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseries3dcolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  return _internal_tschchartseries3dcolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dcolumnfill(
    ::TSD::FillArchive* tschchartseries3dcolumnfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dcolumnfill_);
  }
  _impl_.tschchartseries3dcolumnfill_ = tschchartseries3dcolumnfill;
  if (tschchartseries3dcolumnfill) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnfill() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dcolumnfill_;
  _impl_.tschchartseries3dcolumnfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dcolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dcolumnfill_;
  _impl_.tschchartseries3dcolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dcolumnfill() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.tschchartseries3dcolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dcolumnfill_ = p;
  }
  return _impl_.tschchartseries3dcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dcolumnfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dcolumnfill_);
  }
  if (tschchartseries3dcolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnfill));
    if (message_arena != submessage_arena) {
      tschchartseries3dcolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dcolumnfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.tschchartseries3dcolumnfill_ = tschchartseries3dcolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
}

// optional .TSD.FillArchive tschchartseries3dlinefill = 9;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dlinefill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dlinefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlinefill() const {
  return _internal_has_tschchartseries3dlinefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dlinefill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseries3dlinefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dlinefill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  return _internal_tschchartseries3dlinefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dlinefill(
    ::TSD::FillArchive* tschchartseries3dlinefill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dlinefill_);
  }
  _impl_.tschchartseries3dlinefill_ = tschchartseries3dlinefill;
  if (tschchartseries3dlinefill) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dlinefill() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dlinefill_;
  _impl_.tschchartseries3dlinefill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dlinefill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dlinefill_;
  _impl_.tschchartseries3dlinefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dlinefill() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.tschchartseries3dlinefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dlinefill_ = p;
  }
  return _impl_.tschchartseries3dlinefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlinefill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dlinefill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dlinefill_);
  }
  if (tschchartseries3dlinefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlinefill));
    if (message_arena != submessage_arena) {
      tschchartseries3dlinefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dlinefill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.tschchartseries3dlinefill_ = tschchartseries3dlinefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
}

// optional .TSD.FillArchive tschchartseries3dpiefill = 10;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dpiefill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dpiefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpiefill() const {
  return _internal_has_tschchartseries3dpiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dpiefill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseries3dpiefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dpiefill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  return _internal_tschchartseries3dpiefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dpiefill(
    ::TSD::FillArchive* tschchartseries3dpiefill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dpiefill_);
  }
  _impl_.tschchartseries3dpiefill_ = tschchartseries3dpiefill;
  if (tschchartseries3dpiefill) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dpiefill() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dpiefill_;
  _impl_.tschchartseries3dpiefill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dpiefill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSD::FillArchive* temp = _impl_.tschchartseries3dpiefill_;
  _impl_.tschchartseries3dpiefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dpiefill() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.tschchartseries3dpiefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dpiefill_ = p;
  }
  return _impl_.tschchartseries3dpiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpiefill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dpiefill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dpiefill_);
  }
  if (tschchartseries3dpiefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpiefill));
    if (message_arena != submessage_arena) {
      tschchartseries3dpiefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dpiefill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.tschchartseries3dpiefill_ = tschchartseries3dpiefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
}

// optional .TSD.FillArchive tschchartseriesareafill = 11;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareafill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareafill() const {
  return _internal_has_tschchartseriesareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareafill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
  return _internal_tschchartseriesareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareafill(
    ::TSD::FillArchive* tschchartseriesareafill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareafill_);
  }
  _impl_.tschchartseriesareafill_ = tschchartseriesareafill;
  if (tschchartseriesareafill) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareafill() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesareafill_;
  _impl_.tschchartseriesareafill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareafill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesareafill_;
  _impl_.tschchartseriesareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareafill() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.tschchartseriesareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesareafill_ = p;
  }
  return _impl_.tschchartseriesareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareafill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesareafill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareafill_);
  }
  if (tschchartseriesareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareafill));
    if (message_arena != submessage_arena) {
      tschchartseriesareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareafill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.tschchartseriesareafill_ = tschchartseriesareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
}

// optional .TSD.FillArchive tschchartseriesbarfill = 12;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesbarfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarfill() const {
  return _internal_has_tschchartseriesbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesbarfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbarfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
  return _internal_tschchartseriesbarfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarfill(
    ::TSD::FillArchive* tschchartseriesbarfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbarfill_);
  }
  _impl_.tschchartseriesbarfill_ = tschchartseriesbarfill;
  if (tschchartseriesbarfill) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbarfill() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesbarfill_;
  _impl_.tschchartseriesbarfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesbarfill_;
  _impl_.tschchartseriesbarfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarfill() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.tschchartseriesbarfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesbarfill_ = p;
  }
  return _impl_.tschchartseriesbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesbarfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbarfill_);
  }
  if (tschchartseriesbarfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarfill));
    if (message_arena != submessage_arena) {
      tschchartseriesbarfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.tschchartseriesbarfill_ = tschchartseriesbarfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
}

// optional .TSD.FillArchive tschchartseriescolumnfill = 13;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriescolumnfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriescolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriescolumnfill() const {
  return _internal_has_tschchartseriescolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriescolumnfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriescolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriescolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  return _internal_tschchartseriescolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriescolumnfill(
    ::TSD::FillArchive* tschchartseriescolumnfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriescolumnfill_);
  }
  _impl_.tschchartseriescolumnfill_ = tschchartseriescolumnfill;
  if (tschchartseriescolumnfill) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriescolumnfill() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriescolumnfill_;
  _impl_.tschchartseriescolumnfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriescolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriescolumnfill_;
  _impl_.tschchartseriescolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriescolumnfill() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.tschchartseriescolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriescolumnfill_ = p;
  }
  return _impl_.tschchartseriescolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriescolumnfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriescolumnfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriescolumnfill_);
  }
  if (tschchartseriescolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumnfill));
    if (message_arena != submessage_arena) {
      tschchartseriescolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriescolumnfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.tschchartseriescolumnfill_ = tschchartseriescolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
}

// optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaultfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultfill() const {
  return _internal_has_tschchartseriesdefaultfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesdefaultfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesdefaultfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  return _internal_tschchartseriesdefaultfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultfill(
    ::TSD::FillArchive* tschchartseriesdefaultfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaultfill_);
  }
  _impl_.tschchartseriesdefaultfill_ = tschchartseriesdefaultfill;
  if (tschchartseriesdefaultfill) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultfill() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesdefaultfill_;
  _impl_.tschchartseriesdefaultfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesdefaultfill_;
  _impl_.tschchartseriesdefaultfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultfill() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.tschchartseriesdefaultfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaultfill_ = p;
  }
  return _impl_.tschchartseriesdefaultfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesdefaultfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaultfill_);
  }
  if (tschchartseriesdefaultfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultfill));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.tschchartseriesdefaultfill_ = tschchartseriesdefaultfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
}

// optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareafill() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareafill() const {
  return _internal_has_tschchartseriesmixedareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareafill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesmixedareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  return _internal_tschchartseriesmixedareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareafill(
    ::TSD::FillArchive* tschchartseriesmixedareafill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareafill_);
  }
  _impl_.tschchartseriesmixedareafill_ = tschchartseriesmixedareafill;
  if (tschchartseriesmixedareafill) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareafill() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedareafill_;
  _impl_.tschchartseriesmixedareafill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareafill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedareafill_;
  _impl_.tschchartseriesmixedareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareafill() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.tschchartseriesmixedareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedareafill_ = p;
  }
  return _impl_.tschchartseriesmixedareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareafill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedareafill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareafill_);
  }
  if (tschchartseriesmixedareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareafill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareafill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.tschchartseriesmixedareafill_ = tschchartseriesmixedareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
}

// optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnfill() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedcolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnfill() const {
  return _internal_has_tschchartseriesmixedcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesmixedcolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  return _internal_tschchartseriesmixedcolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnfill(
    ::TSD::FillArchive* tschchartseriesmixedcolumnfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedcolumnfill_);
  }
  _impl_.tschchartseriesmixedcolumnfill_ = tschchartseriesmixedcolumnfill;
  if (tschchartseriesmixedcolumnfill) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnfill() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedcolumnfill_;
  _impl_.tschchartseriesmixedcolumnfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedcolumnfill_;
  _impl_.tschchartseriesmixedcolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnfill() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.tschchartseriesmixedcolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedcolumnfill_ = p;
  }
  return _impl_.tschchartseriesmixedcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedcolumnfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedcolumnfill_);
  }
  if (tschchartseriesmixedcolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnfill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnfill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.tschchartseriesmixedcolumnfill_ = tschchartseriesmixedcolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
}

// optional .TSD.FillArchive tschchartseriespiefill = 17;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiefill() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriespiefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiefill() const {
  return _internal_has_tschchartseriespiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriespiefill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriespiefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriespiefill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
  return _internal_tschchartseriespiefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespiefill(
    ::TSD::FillArchive* tschchartseriespiefill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespiefill_);
  }
  _impl_.tschchartseriespiefill_ = tschchartseriespiefill;
  if (tschchartseriespiefill) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriespiefill() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriespiefill_;
  _impl_.tschchartseriespiefill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespiefill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriespiefill_;
  _impl_.tschchartseriespiefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespiefill() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.tschchartseriespiefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriespiefill_ = p;
  }
  return _impl_.tschchartseriespiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiefill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriespiefill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespiefill_);
  }
  if (tschchartseriespiefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiefill));
    if (message_arena != submessage_arena) {
      tschchartseriespiefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespiefill, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.tschchartseriespiefill_ = tschchartseriespiefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
}

// optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesarealabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesarealabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesarealabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesarealabelparagraphstyleindex() {
  _impl_.tschchartseriesarealabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesarealabelparagraphstyleindex() const {
  return _impl_.tschchartseriesarealabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesarealabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesarealabelparagraphstyleindex)
  return _internal_tschchartseriesarealabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesarealabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.tschchartseriesarealabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesarealabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesarealabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesarealabelparagraphstyleindex)
}

// optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarlabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesbarlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarlabelparagraphstyleindex() {
  _impl_.tschchartseriesbarlabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesbarlabelparagraphstyleindex() const {
  return _impl_.tschchartseriesbarlabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesbarlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarlabelparagraphstyleindex)
  return _internal_tschchartseriesbarlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbarlabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.tschchartseriesbarlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarlabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesbarlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarlabelparagraphstyleindex)
}

// optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultlabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaultlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultlabelparagraphstyleindex() {
  _impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesdefaultlabelparagraphstyleindex() const {
  return _impl_.tschchartseriesdefaultlabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesdefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultlabelparagraphstyleindex)
  return _internal_tschchartseriesdefaultlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultlabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x02000000u;
  _impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultlabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesdefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultlabelparagraphstyleindex)
}

// optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinelabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinelabelparagraphstyleindex() const {
  return _internal_has_tschchartserieslinelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinelabelparagraphstyleindex() {
  _impl_.tschchartserieslinelabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartserieslinelabelparagraphstyleindex() const {
  return _impl_.tschchartserieslinelabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartserieslinelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinelabelparagraphstyleindex)
  return _internal_tschchartserieslinelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinelabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x04000000u;
  _impl_.tschchartserieslinelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinelabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartserieslinelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinelabelparagraphstyleindex)
}

// optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesmixedlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlabelparagraphstyleindex() {
  _impl_.tschchartseriesmixedlabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesmixedlabelparagraphstyleindex() const {
  return _impl_.tschchartseriesmixedlabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesmixedlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlabelparagraphstyleindex)
  return _internal_tschchartseriesmixedlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x08000000u;
  _impl_.tschchartseriesmixedlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesmixedlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlabelparagraphstyleindex)
}

// optional int32 tschchartseriespielabelparagraphstyleindex = 23;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespielabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespielabelparagraphstyleindex() const {
  return _internal_has_tschchartseriespielabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespielabelparagraphstyleindex() {
  _impl_.tschchartseriespielabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriespielabelparagraphstyleindex() const {
  return _impl_.tschchartseriespielabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriespielabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespielabelparagraphstyleindex)
  return _internal_tschchartseriespielabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriespielabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x10000000u;
  _impl_.tschchartseriespielabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespielabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriespielabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespielabelparagraphstyleindex)
}

// optional float tschchartseriesdefaultopacity = 24;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultopacity() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultopacity() const {
  return _internal_has_tschchartseriesdefaultopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultopacity() {
  _impl_.tschchartseriesdefaultopacity_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaultopacity() const {
  return _impl_.tschchartseriesdefaultopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaultopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultopacity)
  return _internal_tschchartseriesdefaultopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultopacity(float value) {
  _impl_._has_bits_[1] |= 0x20000000u;
  _impl_.tschchartseriesdefaultopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultopacity(float value) {
  _internal_set_tschchartseriesdefaultopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultopacity)
}

// optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareaoutsidelabelparagraphstyleindex() {
  _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareaoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesareaoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x40000000u;
  _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareaoutsidelabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareaoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbaroutsidelabelparagraphstyleindex() {
  _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbaroutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesbaroutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[1] |= 0x80000000u;
  _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbaroutsidelabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbaroutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex() {
  _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000001u;
  _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedoutsidelabelparagraphstyleindex() {
  _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesmixedoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000002u;
  _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedoutsidelabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriespieoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespieoutsidelabelparagraphstyleindex() {
  _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriespieoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriespieoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000004u;
  _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespieoutsidelabelparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieoutsidelabelparagraphstyleindex)
}

// optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dareashadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareashadow() const {
  return _internal_has_tschchartseries3dareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dareashadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseries3dareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  return _internal_tschchartseries3dareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dareashadow(
    ::TSD::ShadowArchive* tschchartseries3dareashadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dareashadow_);
  }
  _impl_.tschchartseries3dareashadow_ = tschchartseries3dareashadow;
  if (tschchartseries3dareashadow) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dareashadow() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dareashadow_;
  _impl_.tschchartseries3dareashadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dareashadow_;
  _impl_.tschchartseries3dareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dareashadow() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.tschchartseries3dareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dareashadow_ = p;
  }
  return _impl_.tschchartseries3dareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareashadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dareashadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dareashadow_);
  }
  if (tschchartseries3dareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareashadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dareashadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.tschchartseries3dareashadow_ = tschchartseries3dareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
}

// optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dbarshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarshadow() const {
  return _internal_has_tschchartseries3dbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dbarshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseries3dbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  return _internal_tschchartseries3dbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dbarshadow(
    ::TSD::ShadowArchive* tschchartseries3dbarshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dbarshadow_);
  }
  _impl_.tschchartseries3dbarshadow_ = tschchartseries3dbarshadow;
  if (tschchartseries3dbarshadow) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarshadow() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dbarshadow_;
  _impl_.tschchartseries3dbarshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dbarshadow_;
  _impl_.tschchartseries3dbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dbarshadow() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.tschchartseries3dbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dbarshadow_ = p;
  }
  return _impl_.tschchartseries3dbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dbarshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dbarshadow_);
  }
  if (tschchartseries3dbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dbarshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.tschchartseries3dbarshadow_ = tschchartseries3dbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dcolumnshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dcolumnshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnshadow() const {
  return _internal_has_tschchartseries3dcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dcolumnshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseries3dcolumnshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  return _internal_tschchartseries3dcolumnshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dcolumnshadow(
    ::TSD::ShadowArchive* tschchartseries3dcolumnshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dcolumnshadow_);
  }
  _impl_.tschchartseries3dcolumnshadow_ = tschchartseries3dcolumnshadow;
  if (tschchartseries3dcolumnshadow) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnshadow() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dcolumnshadow_;
  _impl_.tschchartseries3dcolumnshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dcolumnshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dcolumnshadow_;
  _impl_.tschchartseries3dcolumnshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dcolumnshadow() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.tschchartseries3dcolumnshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dcolumnshadow_ = p;
  }
  return _impl_.tschchartseries3dcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dcolumnshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dcolumnshadow_);
  }
  if (tschchartseries3dcolumnshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dcolumnshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dcolumnshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.tschchartseries3dcolumnshadow_ = tschchartseries3dcolumnshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dlineshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlineshadow() const {
  return _internal_has_tschchartseries3dlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dlineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseries3dlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  return _internal_tschchartseries3dlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dlineshadow(
    ::TSD::ShadowArchive* tschchartseries3dlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dlineshadow_);
  }
  _impl_.tschchartseries3dlineshadow_ = tschchartseries3dlineshadow;
  if (tschchartseries3dlineshadow) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dlineshadow() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dlineshadow_;
  _impl_.tschchartseries3dlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dlineshadow_;
  _impl_.tschchartseries3dlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dlineshadow() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.tschchartseries3dlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dlineshadow_ = p;
  }
  return _impl_.tschchartseries3dlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dlineshadow_);
  }
  if (tschchartseries3dlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlineshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dlineshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.tschchartseries3dlineshadow_ = tschchartseries3dlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dpieshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseries3dpieshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpieshadow() const {
  return _internal_has_tschchartseries3dpieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dpieshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseries3dpieshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dpieshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  return _internal_tschchartseries3dpieshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dpieshadow(
    ::TSD::ShadowArchive* tschchartseries3dpieshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dpieshadow_);
  }
  _impl_.tschchartseries3dpieshadow_ = tschchartseries3dpieshadow;
  if (tschchartseries3dpieshadow) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dpieshadow() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dpieshadow_;
  _impl_.tschchartseries3dpieshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dpieshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseries3dpieshadow_;
  _impl_.tschchartseries3dpieshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dpieshadow() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.tschchartseries3dpieshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseries3dpieshadow_ = p;
  }
  return _impl_.tschchartseries3dpieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpieshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dpieshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseries3dpieshadow_);
  }
  if (tschchartseries3dpieshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpieshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dpieshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dpieshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.tschchartseries3dpieshadow_ = tschchartseries3dpieshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
}

// optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareashadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareashadow() const {
  return _internal_has_tschchartseriesareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareashadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
  return _internal_tschchartseriesareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareashadow(
    ::TSD::ShadowArchive* tschchartseriesareashadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareashadow_);
  }
  _impl_.tschchartseriesareashadow_ = tschchartseriesareashadow;
  if (tschchartseriesareashadow) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesareashadow() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesareashadow_;
  _impl_.tschchartseriesareashadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesareashadow_;
  _impl_.tschchartseriesareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareashadow() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.tschchartseriesareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesareashadow_ = p;
  }
  return _impl_.tschchartseriesareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareashadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesareashadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareashadow_);
  }
  if (tschchartseriesareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareashadow));
    if (message_arena != submessage_arena) {
      tschchartseriesareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareashadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.tschchartseriesareashadow_ = tschchartseriesareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
}

// optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarshadow() const {
  return _internal_has_tschchartseriesbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  return _internal_tschchartseriesbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarshadow(
    ::TSD::ShadowArchive* tschchartseriesbarshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbarshadow_);
  }
  _impl_.tschchartseriesbarshadow_ = tschchartseriesbarshadow;
  if (tschchartseriesbarshadow) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbarshadow() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesbarshadow_;
  _impl_.tschchartseriesbarshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesbarshadow_;
  _impl_.tschchartseriesbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarshadow() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.tschchartseriesbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesbarshadow_ = p;
  }
  return _impl_.tschchartseriesbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesbarshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbarshadow_);
  }
  if (tschchartseriesbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.tschchartseriesbarshadow_ = tschchartseriesbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
}

// optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubbleshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesbubbleshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubbleshadow() const {
  return _internal_has_tschchartseriesbubbleshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubbleshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesbubbleshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbubbleshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  return _internal_tschchartseriesbubbleshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubbleshadow(
    ::TSD::ShadowArchive* tschchartseriesbubbleshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubbleshadow_);
  }
  _impl_.tschchartseriesbubbleshadow_ = tschchartseriesbubbleshadow;
  if (tschchartseriesbubbleshadow) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbubbleshadow() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesbubbleshadow_;
  _impl_.tschchartseriesbubbleshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubbleshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesbubbleshadow_;
  _impl_.tschchartseriesbubbleshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubbleshadow() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.tschchartseriesbubbleshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesbubbleshadow_ = p;
  }
  return _impl_.tschchartseriesbubbleshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubbleshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesbubbleshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubbleshadow_);
  }
  if (tschchartseriesbubbleshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubbleshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesbubbleshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubbleshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.tschchartseriesbubbleshadow_ = tschchartseriesbubbleshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
}

// optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaultshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultshadow() const {
  return _internal_has_tschchartseriesdefaultshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesdefaultshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaultshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  return _internal_tschchartseriesdefaultshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaultshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaultshadow_);
  }
  _impl_.tschchartseriesdefaultshadow_ = tschchartseriesdefaultshadow;
  if (tschchartseriesdefaultshadow) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultshadow() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesdefaultshadow_;
  _impl_.tschchartseriesdefaultshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesdefaultshadow_;
  _impl_.tschchartseriesdefaultshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultshadow() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.tschchartseriesdefaultshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaultshadow_ = p;
  }
  return _impl_.tschchartseriesdefaultshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesdefaultshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaultshadow_);
  }
  if (tschchartseriesdefaultshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.tschchartseriesdefaultshadow_ = tschchartseriesdefaultshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
}

// optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslineshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartserieslineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslineshadow() const {
  return _internal_has_tschchartserieslineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartserieslineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartserieslineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartserieslineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
  return _internal_tschchartserieslineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslineshadow(
    ::TSD::ShadowArchive* tschchartserieslineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslineshadow_);
  }
  _impl_.tschchartserieslineshadow_ = tschchartserieslineshadow;
  if (tschchartserieslineshadow) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartserieslineshadow() {
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartserieslineshadow_;
  _impl_.tschchartserieslineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartserieslineshadow_;
  _impl_.tschchartserieslineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslineshadow() {
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.tschchartserieslineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartserieslineshadow_ = p;
  }
  return _impl_.tschchartserieslineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartserieslineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartserieslineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslineshadow_);
  }
  if (tschchartserieslineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslineshadow));
    if (message_arena != submessage_arena) {
      tschchartserieslineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslineshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.tschchartserieslineshadow_ = tschchartserieslineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareashadow() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareashadow() const {
  return _internal_has_tschchartseriesmixedareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareashadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesmixedareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  return _internal_tschchartseriesmixedareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareashadow(
    ::TSD::ShadowArchive* tschchartseriesmixedareashadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareashadow_);
  }
  _impl_.tschchartseriesmixedareashadow_ = tschchartseriesmixedareashadow;
  if (tschchartseriesmixedareashadow) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareashadow() {
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesmixedareashadow_;
  _impl_.tschchartseriesmixedareashadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesmixedareashadow_;
  _impl_.tschchartseriesmixedareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareashadow() {
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.tschchartseriesmixedareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedareashadow_ = p;
  }
  return _impl_.tschchartseriesmixedareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareashadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesmixedareashadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareashadow_);
  }
  if (tschchartseriesmixedareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareashadow));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareashadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.tschchartseriesmixedareashadow_ = tschchartseriesmixedareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedcolumnshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnshadow() const {
  return _internal_has_tschchartseriesmixedcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesmixedcolumnshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  return _internal_tschchartseriesmixedcolumnshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnshadow(
    ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedcolumnshadow_);
  }
  _impl_.tschchartseriesmixedcolumnshadow_ = tschchartseriesmixedcolumnshadow;
  if (tschchartseriesmixedcolumnshadow) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnshadow() {
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesmixedcolumnshadow_;
  _impl_.tschchartseriesmixedcolumnshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesmixedcolumnshadow_;
  _impl_.tschchartseriesmixedcolumnshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnshadow() {
  _impl_._has_bits_[0] |= 0x10000000u;
  if (_impl_.tschchartseriesmixedcolumnshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedcolumnshadow_ = p;
  }
  return _impl_.tschchartseriesmixedcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesmixedcolumnshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedcolumnshadow_);
  }
  if (tschchartseriesmixedcolumnshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.tschchartseriesmixedcolumnshadow_ = tschchartseriesmixedcolumnshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlineshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlineshadow() const {
  return _internal_has_tschchartseriesmixedlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesmixedlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  return _internal_tschchartseriesmixedlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlineshadow(
    ::TSD::ShadowArchive* tschchartseriesmixedlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlineshadow_);
  }
  _impl_.tschchartseriesmixedlineshadow_ = tschchartseriesmixedlineshadow;
  if (tschchartseriesmixedlineshadow) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlineshadow() {
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesmixedlineshadow_;
  _impl_.tschchartseriesmixedlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesmixedlineshadow_;
  _impl_.tschchartseriesmixedlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlineshadow() {
  _impl_._has_bits_[0] |= 0x20000000u;
  if (_impl_.tschchartseriesmixedlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedlineshadow_ = p;
  }
  return _impl_.tschchartseriesmixedlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesmixedlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlineshadow_);
  }
  if (tschchartseriesmixedlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlineshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlineshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.tschchartseriesmixedlineshadow_ = tschchartseriesmixedlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
}

// optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespieshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriespieshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespieshadow() const {
  return _internal_has_tschchartseriespieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriespieshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriespieshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriespieshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
  return _internal_tschchartseriespieshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespieshadow(
    ::TSD::ShadowArchive* tschchartseriespieshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespieshadow_);
  }
  _impl_.tschchartseriespieshadow_ = tschchartseriespieshadow;
  if (tschchartseriespieshadow) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriespieshadow() {
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriespieshadow_;
  _impl_.tschchartseriespieshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespieshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriespieshadow_;
  _impl_.tschchartseriespieshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespieshadow() {
  _impl_._has_bits_[0] |= 0x40000000u;
  if (_impl_.tschchartseriespieshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriespieshadow_ = p;
  }
  return _impl_.tschchartseriespieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriespieshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriespieshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespieshadow_);
  }
  if (tschchartseriespieshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespieshadow));
    if (message_arena != submessage_arena) {
      tschchartseriespieshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespieshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.tschchartseriespieshadow_ = tschchartseriespieshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
}

// optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattershadow() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesscattershadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattershadow() const {
  return _internal_has_tschchartseriesscattershadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattershadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesscattershadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesscattershadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  return _internal_tschchartseriesscattershadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattershadow(
    ::TSD::ShadowArchive* tschchartseriesscattershadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscattershadow_);
  }
  _impl_.tschchartseriesscattershadow_ = tschchartseriesscattershadow;
  if (tschchartseriesscattershadow) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesscattershadow() {
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesscattershadow_;
  _impl_.tschchartseriesscattershadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattershadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesscattershadow_;
  _impl_.tschchartseriesscattershadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattershadow() {
  _impl_._has_bits_[0] |= 0x80000000u;
  if (_impl_.tschchartseriesscattershadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesscattershadow_ = p;
  }
  return _impl_.tschchartseriesscattershadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattershadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesscattershadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscattershadow_);
  }
  if (tschchartseriesscattershadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattershadow));
    if (message_arena != submessage_arena) {
      tschchartseriesscattershadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattershadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.tschchartseriesscattershadow_ = tschchartseriesscattershadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
}

// optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareastroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesareastroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareastroke() const {
  return _internal_has_tschchartseriesareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareastroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesareastroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareastroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
  return _internal_tschchartseriesareastroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareastroke(
    ::TSD::StrokeArchive* tschchartseriesareastroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareastroke_);
  }
  _impl_.tschchartseriesareastroke_ = tschchartseriesareastroke;
  if (tschchartseriesareastroke) {
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareastroke() {
  _impl_._has_bits_[1] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesareastroke_;
  _impl_.tschchartseriesareastroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareastroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
  _impl_._has_bits_[1] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesareastroke_;
  _impl_.tschchartseriesareastroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareastroke() {
  _impl_._has_bits_[1] |= 0x00000001u;
  if (_impl_.tschchartseriesareastroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesareastroke_ = p;
  }
  return _impl_.tschchartseriesareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareastroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesareastroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareastroke_);
  }
  if (tschchartseriesareastroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareastroke));
    if (message_arena != submessage_arena) {
      tschchartseriesareastroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareastroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  _impl_.tschchartseriesareastroke_ = tschchartseriesareastroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
}

// optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesbarstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarstroke() const {
  return _internal_has_tschchartseriesbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesbarstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbarstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  return _internal_tschchartseriesbarstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarstroke(
    ::TSD::StrokeArchive* tschchartseriesbarstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbarstroke_);
  }
  _impl_.tschchartseriesbarstroke_ = tschchartseriesbarstroke;
  if (tschchartseriesbarstroke) {
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbarstroke() {
  _impl_._has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesbarstroke_;
  _impl_.tschchartseriesbarstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  _impl_._has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesbarstroke_;
  _impl_.tschchartseriesbarstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarstroke() {
  _impl_._has_bits_[1] |= 0x00000002u;
  if (_impl_.tschchartseriesbarstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesbarstroke_ = p;
  }
  return _impl_.tschchartseriesbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesbarstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbarstroke_);
  }
  if (tschchartseriesbarstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesbarstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  _impl_.tschchartseriesbarstroke_ = tschchartseriesbarstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
}

// optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblestroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesbubblestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblestroke() const {
  return _internal_has_tschchartseriesbubblestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesbubblestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  return _internal_tschchartseriesbubblestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblestroke(
    ::TSD::StrokeArchive* tschchartseriesbubblestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubblestroke_);
  }
  _impl_.tschchartseriesbubblestroke_ = tschchartseriesbubblestroke;
  if (tschchartseriesbubblestroke) {
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblestroke() {
  _impl_._has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesbubblestroke_;
  _impl_.tschchartseriesbubblestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  _impl_._has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesbubblestroke_;
  _impl_.tschchartseriesbubblestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblestroke() {
  _impl_._has_bits_[1] |= 0x00000004u;
  if (_impl_.tschchartseriesbubblestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesbubblestroke_ = p;
  }
  return _impl_.tschchartseriesbubblestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesbubblestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubblestroke_);
  }
  if (tschchartseriesbubblestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblestroke));
    if (message_arena != submessage_arena) {
      tschchartseriesbubblestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblestroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  _impl_.tschchartseriesbubblestroke_ = tschchartseriesbubblestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
}

// optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinestroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartserieslinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinestroke() const {
  return _internal_has_tschchartserieslinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartserieslinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
  return _internal_tschchartserieslinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinestroke(
    ::TSD::StrokeArchive* tschchartserieslinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslinestroke_);
  }
  _impl_.tschchartserieslinestroke_ = tschchartserieslinestroke;
  if (tschchartserieslinestroke) {
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinestroke() {
  _impl_._has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartserieslinestroke_;
  _impl_.tschchartserieslinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
  _impl_._has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartserieslinestroke_;
  _impl_.tschchartserieslinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinestroke() {
  _impl_._has_bits_[1] |= 0x00000008u;
  if (_impl_.tschchartserieslinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartserieslinestroke_ = p;
  }
  return _impl_.tschchartserieslinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartserieslinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslinestroke_);
  }
  if (tschchartserieslinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinestroke));
    if (message_arena != submessage_arena) {
      tschchartserieslinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinestroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  _impl_.tschchartserieslinestroke_ = tschchartserieslinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareastroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedareastroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareastroke() const {
  return _internal_has_tschchartseriesmixedareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareastroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesmixedareastroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareastroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  return _internal_tschchartseriesmixedareastroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareastroke(
    ::TSD::StrokeArchive* tschchartseriesmixedareastroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareastroke_);
  }
  _impl_.tschchartseriesmixedareastroke_ = tschchartseriesmixedareastroke;
  if (tschchartseriesmixedareastroke) {
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareastroke() {
  _impl_._has_bits_[1] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedareastroke_;
  _impl_.tschchartseriesmixedareastroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareastroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  _impl_._has_bits_[1] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedareastroke_;
  _impl_.tschchartseriesmixedareastroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareastroke() {
  _impl_._has_bits_[1] |= 0x00000010u;
  if (_impl_.tschchartseriesmixedareastroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedareastroke_ = p;
  }
  return _impl_.tschchartseriesmixedareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareastroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedareastroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareastroke_);
  }
  if (tschchartseriesmixedareastroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareastroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareastroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareastroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  _impl_.tschchartseriesmixedareastroke_ = tschchartseriesmixedareastroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedcolumnstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnstroke() const {
  return _internal_has_tschchartseriesmixedcolumnstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesmixedcolumnstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  return _internal_tschchartseriesmixedcolumnstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedcolumnstroke_);
  }
  _impl_.tschchartseriesmixedcolumnstroke_ = tschchartseriesmixedcolumnstroke;
  if (tschchartseriesmixedcolumnstroke) {
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnstroke() {
  _impl_._has_bits_[1] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedcolumnstroke_;
  _impl_.tschchartseriesmixedcolumnstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  _impl_._has_bits_[1] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedcolumnstroke_;
  _impl_.tschchartseriesmixedcolumnstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnstroke() {
  _impl_._has_bits_[1] |= 0x00000020u;
  if (_impl_.tschchartseriesmixedcolumnstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedcolumnstroke_ = p;
  }
  return _impl_.tschchartseriesmixedcolumnstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedcolumnstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedcolumnstroke_);
  }
  if (tschchartseriesmixedcolumnstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  _impl_.tschchartseriesmixedcolumnstroke_ = tschchartseriesmixedcolumnstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinestroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedlinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinestroke() const {
  return _internal_has_tschchartseriesmixedlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesmixedlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  return _internal_tschchartseriesmixedlinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinestroke(
    ::TSD::StrokeArchive* tschchartseriesmixedlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlinestroke_);
  }
  _impl_.tschchartseriesmixedlinestroke_ = tschchartseriesmixedlinestroke;
  if (tschchartseriesmixedlinestroke) {
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinestroke() {
  _impl_._has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedlinestroke_;
  _impl_.tschchartseriesmixedlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  _impl_._has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedlinestroke_;
  _impl_.tschchartseriesmixedlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinestroke() {
  _impl_._has_bits_[1] |= 0x00000040u;
  if (_impl_.tschchartseriesmixedlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedlinestroke_ = p;
  }
  return _impl_.tschchartseriesmixedlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlinestroke_);
  }
  if (tschchartseriesmixedlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinestroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinestroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  _impl_.tschchartseriesmixedlinestroke_ = tschchartseriesmixedlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
}

// optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiestroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriespiestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiestroke() const {
  return _internal_has_tschchartseriespiestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriespiestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriespiestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriespiestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
  return _internal_tschchartseriespiestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespiestroke(
    ::TSD::StrokeArchive* tschchartseriespiestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespiestroke_);
  }
  _impl_.tschchartseriespiestroke_ = tschchartseriespiestroke;
  if (tschchartseriespiestroke) {
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriespiestroke() {
  _impl_._has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriespiestroke_;
  _impl_.tschchartseriespiestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespiestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
  _impl_._has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriespiestroke_;
  _impl_.tschchartseriespiestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespiestroke() {
  _impl_._has_bits_[1] |= 0x00000080u;
  if (_impl_.tschchartseriespiestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriespiestroke_ = p;
  }
  return _impl_.tschchartseriespiestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriespiestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespiestroke_);
  }
  if (tschchartseriespiestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiestroke));
    if (message_arena != submessage_arena) {
      tschchartseriespiestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespiestroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  _impl_.tschchartseriespiestroke_ = tschchartseriespiestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
}

// optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscatterstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesscatterstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscatterstroke() const {
  return _internal_has_tschchartseriesscatterstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscatterstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesscatterstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscatterstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  return _internal_tschchartseriesscatterstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscatterstroke(
    ::TSD::StrokeArchive* tschchartseriesscatterstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscatterstroke_);
  }
  _impl_.tschchartseriesscatterstroke_ = tschchartseriesscatterstroke;
  if (tschchartseriesscatterstroke) {
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscatterstroke() {
  _impl_._has_bits_[1] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesscatterstroke_;
  _impl_.tschchartseriesscatterstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscatterstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  _impl_._has_bits_[1] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesscatterstroke_;
  _impl_.tschchartseriesscatterstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscatterstroke() {
  _impl_._has_bits_[1] |= 0x00000100u;
  if (_impl_.tschchartseriesscatterstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesscatterstroke_ = p;
  }
  return _impl_.tschchartseriesscatterstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscatterstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesscatterstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscatterstroke_);
  }
  if (tschchartseriesscatterstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscatterstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesscatterstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscatterstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  _impl_.tschchartseriesscatterstroke_ = tschchartseriesscatterstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
}

// optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfill() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesareasymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfill() const {
  return _internal_has_tschchartseriesareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesareasymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  return _internal_tschchartseriesareasymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareasymbolfill(
    ::TSD::FillArchive* tschchartseriesareasymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareasymbolfill_);
  }
  _impl_.tschchartseriesareasymbolfill_ = tschchartseriesareasymbolfill;
  if (tschchartseriesareasymbolfill) {
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolfill() {
  _impl_._has_bits_[1] &= ~0x00000200u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesareasymbolfill_;
  _impl_.tschchartseriesareasymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareasymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  _impl_._has_bits_[1] &= ~0x00000200u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesareasymbolfill_;
  _impl_.tschchartseriesareasymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareasymbolfill() {
  _impl_._has_bits_[1] |= 0x00000200u;
  if (_impl_.tschchartseriesareasymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesareasymbolfill_ = p;
  }
  return _impl_.tschchartseriesareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesareasymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareasymbolfill_);
  }
  if (tschchartseriesareasymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesareasymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareasymbolfill, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  _impl_.tschchartseriesareasymbolfill_ = tschchartseriesareasymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
}

// optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolfill() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesbubblesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfill() const {
  return _internal_has_tschchartseriesbubblesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesbubblesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  return _internal_tschchartseriesbubblesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblesymbolfill(
    ::TSD::FillArchive* tschchartseriesbubblesymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubblesymbolfill_);
  }
  _impl_.tschchartseriesbubblesymbolfill_ = tschchartseriesbubblesymbolfill;
  if (tschchartseriesbubblesymbolfill) {
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolfill() {
  _impl_._has_bits_[1] &= ~0x00000400u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesbubblesymbolfill_;
  _impl_.tschchartseriesbubblesymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  _impl_._has_bits_[1] &= ~0x00000400u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesbubblesymbolfill_;
  _impl_.tschchartseriesbubblesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblesymbolfill() {
  _impl_._has_bits_[1] |= 0x00000400u;
  if (_impl_.tschchartseriesbubblesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesbubblesymbolfill_ = p;
  }
  return _impl_.tschchartseriesbubblesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesbubblesymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubblesymbolfill_);
  }
  if (tschchartseriesbubblesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesbubblesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblesymbolfill, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  _impl_.tschchartseriesbubblesymbolfill_ = tschchartseriesbubblesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
}

// optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfill() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartserieslinesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfill() const {
  return _internal_has_tschchartserieslinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartserieslinesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  return _internal_tschchartserieslinesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinesymbolfill(
    ::TSD::FillArchive* tschchartserieslinesymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslinesymbolfill_);
  }
  _impl_.tschchartserieslinesymbolfill_ = tschchartserieslinesymbolfill;
  if (tschchartserieslinesymbolfill) {
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolfill() {
  _impl_._has_bits_[1] &= ~0x00000800u;
  ::TSD::FillArchive* temp = _impl_.tschchartserieslinesymbolfill_;
  _impl_.tschchartserieslinesymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  _impl_._has_bits_[1] &= ~0x00000800u;
  ::TSD::FillArchive* temp = _impl_.tschchartserieslinesymbolfill_;
  _impl_.tschchartserieslinesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinesymbolfill() {
  _impl_._has_bits_[1] |= 0x00000800u;
  if (_impl_.tschchartserieslinesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartserieslinesymbolfill_ = p;
  }
  return _impl_.tschchartserieslinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartserieslinesymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslinesymbolfill_);
  }
  if (tschchartserieslinesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolfill));
    if (message_arena != submessage_arena) {
      tschchartserieslinesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinesymbolfill, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  _impl_.tschchartserieslinesymbolfill_ = tschchartserieslinesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
}

// optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfill() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedareasymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfill() const {
  return _internal_has_tschchartseriesmixedareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesmixedareasymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  return _internal_tschchartseriesmixedareasymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareasymbolfill(
    ::TSD::FillArchive* tschchartseriesmixedareasymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareasymbolfill_);
  }
  _impl_.tschchartseriesmixedareasymbolfill_ = tschchartseriesmixedareasymbolfill;
  if (tschchartseriesmixedareasymbolfill) {
    _impl_._has_bits_[1] |= 0x00001000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolfill() {
  _impl_._has_bits_[1] &= ~0x00001000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedareasymbolfill_;
  _impl_.tschchartseriesmixedareasymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareasymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  _impl_._has_bits_[1] &= ~0x00001000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedareasymbolfill_;
  _impl_.tschchartseriesmixedareasymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareasymbolfill() {
  _impl_._has_bits_[1] |= 0x00001000u;
  if (_impl_.tschchartseriesmixedareasymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedareasymbolfill_ = p;
  }
  return _impl_.tschchartseriesmixedareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedareasymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareasymbolfill_);
  }
  if (tschchartseriesmixedareasymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareasymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareasymbolfill, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00001000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00001000u;
  }
  _impl_.tschchartseriesmixedareasymbolfill_ = tschchartseriesmixedareasymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
}

// optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfill() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedlinesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfill() const {
  return _internal_has_tschchartseriesmixedlinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesmixedlinesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  return _internal_tschchartseriesmixedlinesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolfill(
    ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlinesymbolfill_);
  }
  _impl_.tschchartseriesmixedlinesymbolfill_ = tschchartseriesmixedlinesymbolfill;
  if (tschchartseriesmixedlinesymbolfill) {
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolfill() {
  _impl_._has_bits_[1] &= ~0x00002000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedlinesymbolfill_;
  _impl_.tschchartseriesmixedlinesymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  _impl_._has_bits_[1] &= ~0x00002000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesmixedlinesymbolfill_;
  _impl_.tschchartseriesmixedlinesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinesymbolfill() {
  _impl_._has_bits_[1] |= 0x00002000u;
  if (_impl_.tschchartseriesmixedlinesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedlinesymbolfill_ = p;
  }
  return _impl_.tschchartseriesmixedlinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedlinesymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlinesymbolfill_);
  }
  if (tschchartseriesmixedlinesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinesymbolfill, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }
  _impl_.tschchartseriesmixedlinesymbolfill_ = tschchartseriesmixedlinesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
}

// optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolfill() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesscattersymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfill() const {
  return _internal_has_tschchartseriesscattersymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolfill() const {
  const ::TSD::FillArchive* p = _impl_.tschchartseriesscattersymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  return _internal_tschchartseriesscattersymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattersymbolfill(
    ::TSD::FillArchive* tschchartseriesscattersymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscattersymbolfill_);
  }
  _impl_.tschchartseriesscattersymbolfill_ = tschchartseriesscattersymbolfill;
  if (tschchartseriesscattersymbolfill) {
    _impl_._has_bits_[1] |= 0x00004000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolfill() {
  _impl_._has_bits_[1] &= ~0x00004000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesscattersymbolfill_;
  _impl_.tschchartseriesscattersymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattersymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  _impl_._has_bits_[1] &= ~0x00004000u;
  ::TSD::FillArchive* temp = _impl_.tschchartseriesscattersymbolfill_;
  _impl_.tschchartseriesscattersymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattersymbolfill() {
  _impl_._has_bits_[1] |= 0x00004000u;
  if (_impl_.tschchartseriesscattersymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesscattersymbolfill_ = p;
  }
  return _impl_.tschchartseriesscattersymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesscattersymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscattersymbolfill_);
  }
  if (tschchartseriesscattersymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesscattersymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattersymbolfill, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00004000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00004000u;
  }
  _impl_.tschchartseriesscattersymbolfill_ = tschchartseriesscattersymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
}

// optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfilluseseriesfill() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesfill() {
  _impl_.tschchartseriesareasymbolfilluseseriesfill_ = false;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfilluseseriesfill() const {
  return _impl_.tschchartseriesareasymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesfill)
  return _internal_tschchartseriesareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolfilluseseriesfill(bool value) {
  _impl_._has_bits_[2] |= 0x00000008u;
  _impl_.tschchartseriesareasymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesareasymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesfill)
}

// optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfilluseseriesfill() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesfill() const {
  return _internal_has_tschchartserieslinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesfill() {
  _impl_.tschchartserieslinesymbolfilluseseriesfill_ = false;
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfilluseseriesfill() const {
  return _impl_.tschchartserieslinesymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesfill)
  return _internal_tschchartserieslinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolfilluseseriesfill(bool value) {
  _impl_._has_bits_[2] |= 0x00000010u;
  _impl_.tschchartserieslinesymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartserieslinesymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesfill)
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesmixedareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesfill() {
  _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesfill)
  return _internal_tschchartseriesmixedareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value) {
  _impl_._has_bits_[2] |= 0x00000020u;
  _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesfill)
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesfill() {
  _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesfill)
  return _internal_tschchartseriesmixedlinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value) {
  _impl_._has_bits_[2] |= 0x00000040u;
  _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesfill)
}

// optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfilluseseriesstroke() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesstroke() {
  _impl_.tschchartseriesareasymbolfilluseseriesstroke_ = false;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfilluseseriesstroke() const {
  return _impl_.tschchartseriesareasymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesstroke)
  return _internal_tschchartseriesareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolfilluseseriesstroke(bool value) {
  _impl_._has_bits_[2] |= 0x00000080u;
  _impl_.tschchartseriesareasymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesareasymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesstroke)
}

// optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesbubblesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfilluseseriesstroke() {
  _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesbubblesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfilluseseriesstroke)
  return _internal_tschchartseriesbubblesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value) {
  _impl_._has_bits_[2] |= 0x00000100u;
  _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfilluseseriesstroke)
}

// optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfilluseseriesstroke() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartserieslinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesstroke() {
  _impl_.tschchartserieslinesymbolfilluseseriesstroke_ = false;
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfilluseseriesstroke() const {
  return _impl_.tschchartserieslinesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesstroke)
  return _internal_tschchartserieslinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolfilluseseriesstroke(bool value) {
  _impl_._has_bits_[2] |= 0x00000200u;
  _impl_.tschchartserieslinesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartserieslinesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesstroke)
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesstroke() {
  _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesstroke)
  return _internal_tschchartseriesmixedareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value) {
  _impl_._has_bits_[2] |= 0x00000400u;
  _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesstroke)
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesstroke() {
  _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesstroke)
  return _internal_tschchartseriesmixedlinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value) {
  _impl_._has_bits_[2] |= 0x00000800u;
  _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesstroke)
}

// optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolfilluseseriesstroke() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesscattersymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfilluseseriesstroke() {
  _impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = false;
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolfilluseseriesstroke() const {
  return _impl_.tschchartseriesscattersymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesscattersymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfilluseseriesstroke)
  return _internal_tschchartseriesscattersymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattersymbolfilluseseriesstroke(bool value) {
  _impl_._has_bits_[2] |= 0x00001000u;
  _impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesscattersymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfilluseseriesstroke)
}

// optional float tschchartseriesareasymbolsize = 70;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolsize() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolsize() const {
  return _internal_has_tschchartseriesareasymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolsize() {
  _impl_.tschchartseriesareasymbolsize_ = 0;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolsize() const {
  return _impl_.tschchartseriesareasymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesareasymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolsize)
  return _internal_tschchartseriesareasymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolsize(float value) {
  _impl_._has_bits_[2] |= 0x00002000u;
  _impl_.tschchartseriesareasymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolsize(float value) {
  _internal_set_tschchartseriesareasymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolsize)
}

// optional float tschchartserieslinesymbolsize = 71;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolsize() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolsize() const {
  return _internal_has_tschchartserieslinesymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolsize() {
  _impl_.tschchartserieslinesymbolsize_ = 0;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolsize() const {
  return _impl_.tschchartserieslinesymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartserieslinesymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolsize)
  return _internal_tschchartserieslinesymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolsize(float value) {
  _impl_._has_bits_[2] |= 0x00004000u;
  _impl_.tschchartserieslinesymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolsize(float value) {
  _internal_set_tschchartserieslinesymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolsize)
}

// optional float tschchartseriesmixedareasymbolsize = 72;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolsize() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolsize() const {
  return _internal_has_tschchartseriesmixedareasymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolsize() {
  _impl_.tschchartseriesmixedareasymbolsize_ = 0;
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolsize() const {
  return _impl_.tschchartseriesmixedareasymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedareasymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolsize)
  return _internal_tschchartseriesmixedareasymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolsize(float value) {
  _impl_._has_bits_[2] |= 0x00008000u;
  _impl_.tschchartseriesmixedareasymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolsize(float value) {
  _internal_set_tschchartseriesmixedareasymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolsize)
}

// optional float tschchartseriesmixedlinesymbolsize = 73;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolsize() const {
  bool value = (_impl_._has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolsize() const {
  return _internal_has_tschchartseriesmixedlinesymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolsize() {
  _impl_.tschchartseriesmixedlinesymbolsize_ = 0;
  _impl_._has_bits_[2] &= ~0x00010000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolsize() const {
  return _impl_.tschchartseriesmixedlinesymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolsize)
  return _internal_tschchartseriesmixedlinesymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolsize(float value) {
  _impl_._has_bits_[2] |= 0x00010000u;
  _impl_.tschchartseriesmixedlinesymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolsize(float value) {
  _internal_set_tschchartseriesmixedlinesymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolsize)
}

// optional float tschchartseriesscattersymbolsize = 74;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolsize() const {
  bool value = (_impl_._has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolsize() const {
  return _internal_has_tschchartseriesscattersymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolsize() {
  _impl_.tschchartseriesscattersymbolsize_ = 0;
  _impl_._has_bits_[2] &= ~0x00020000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolsize() const {
  return _impl_.tschchartseriesscattersymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesscattersymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolsize)
  return _internal_tschchartseriesscattersymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattersymbolsize(float value) {
  _impl_._has_bits_[2] |= 0x00020000u;
  _impl_.tschchartseriesscattersymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolsize(float value) {
  _internal_set_tschchartseriesscattersymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolsize)
}

// optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesareasymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolstroke() const {
  return _internal_has_tschchartseriesareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesareasymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  return _internal_tschchartseriesareasymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareasymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesareasymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareasymbolstroke_);
  }
  _impl_.tschchartseriesareasymbolstroke_ = tschchartseriesareasymbolstroke;
  if (tschchartseriesareasymbolstroke) {
    _impl_._has_bits_[1] |= 0x00008000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolstroke() {
  _impl_._has_bits_[1] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesareasymbolstroke_;
  _impl_.tschchartseriesareasymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareasymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  _impl_._has_bits_[1] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesareasymbolstroke_;
  _impl_.tschchartseriesareasymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareasymbolstroke() {
  _impl_._has_bits_[1] |= 0x00008000u;
  if (_impl_.tschchartseriesareasymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesareasymbolstroke_ = p;
  }
  return _impl_.tschchartseriesareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesareasymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesareasymbolstroke_);
  }
  if (tschchartseriesareasymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesareasymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareasymbolstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00008000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00008000u;
  }
  _impl_.tschchartseriesareasymbolstroke_ = tschchartseriesareasymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesbubblesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolstroke() const {
  return _internal_has_tschchartseriesbubblesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesbubblesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  return _internal_tschchartseriesbubblesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblesymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubblesymbolstroke_);
  }
  _impl_.tschchartseriesbubblesymbolstroke_ = tschchartseriesbubblesymbolstroke;
  if (tschchartseriesbubblesymbolstroke) {
    _impl_._has_bits_[1] |= 0x00010000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolstroke() {
  _impl_._has_bits_[1] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesbubblesymbolstroke_;
  _impl_.tschchartseriesbubblesymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  _impl_._has_bits_[1] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesbubblesymbolstroke_;
  _impl_.tschchartseriesbubblesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblesymbolstroke() {
  _impl_._has_bits_[1] |= 0x00010000u;
  if (_impl_.tschchartseriesbubblesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesbubblesymbolstroke_ = p;
  }
  return _impl_.tschchartseriesbubblesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesbubblesymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesbubblesymbolstroke_);
  }
  if (tschchartseriesbubblesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesbubblesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblesymbolstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00010000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00010000u;
  }
  _impl_.tschchartseriesbubblesymbolstroke_ = tschchartseriesbubblesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
}

// optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartserieslinesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolstroke() const {
  return _internal_has_tschchartserieslinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartserieslinesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  return _internal_tschchartserieslinesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinesymbolstroke(
    ::TSD::StrokeArchive* tschchartserieslinesymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslinesymbolstroke_);
  }
  _impl_.tschchartserieslinesymbolstroke_ = tschchartserieslinesymbolstroke;
  if (tschchartserieslinesymbolstroke) {
    _impl_._has_bits_[1] |= 0x00020000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolstroke() {
  _impl_._has_bits_[1] &= ~0x00020000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartserieslinesymbolstroke_;
  _impl_.tschchartserieslinesymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  _impl_._has_bits_[1] &= ~0x00020000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartserieslinesymbolstroke_;
  _impl_.tschchartserieslinesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinesymbolstroke() {
  _impl_._has_bits_[1] |= 0x00020000u;
  if (_impl_.tschchartserieslinesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartserieslinesymbolstroke_ = p;
  }
  return _impl_.tschchartserieslinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartserieslinesymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartserieslinesymbolstroke_);
  }
  if (tschchartserieslinesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartserieslinesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinesymbolstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00020000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00020000u;
  }
  _impl_.tschchartserieslinesymbolstroke_ = tschchartserieslinesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedareasymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolstroke() const {
  return _internal_has_tschchartseriesmixedareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesmixedareasymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  return _internal_tschchartseriesmixedareasymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareasymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareasymbolstroke_);
  }
  _impl_.tschchartseriesmixedareasymbolstroke_ = tschchartseriesmixedareasymbolstroke;
  if (tschchartseriesmixedareasymbolstroke) {
    _impl_._has_bits_[1] |= 0x00040000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolstroke() {
  _impl_._has_bits_[1] &= ~0x00040000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedareasymbolstroke_;
  _impl_.tschchartseriesmixedareasymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareasymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  _impl_._has_bits_[1] &= ~0x00040000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedareasymbolstroke_;
  _impl_.tschchartseriesmixedareasymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareasymbolstroke() {
  _impl_._has_bits_[1] |= 0x00040000u;
  if (_impl_.tschchartseriesmixedareasymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedareasymbolstroke_ = p;
  }
  return _impl_.tschchartseriesmixedareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedareasymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedareasymbolstroke_);
  }
  if (tschchartseriesmixedareasymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareasymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareasymbolstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00040000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00040000u;
  }
  _impl_.tschchartseriesmixedareasymbolstroke_ = tschchartseriesmixedareasymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesmixedlinesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolstroke() const {
  return _internal_has_tschchartseriesmixedlinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesmixedlinesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  return _internal_tschchartseriesmixedlinesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlinesymbolstroke_);
  }
  _impl_.tschchartseriesmixedlinesymbolstroke_ = tschchartseriesmixedlinesymbolstroke;
  if (tschchartseriesmixedlinesymbolstroke) {
    _impl_._has_bits_[1] |= 0x00080000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolstroke() {
  _impl_._has_bits_[1] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedlinesymbolstroke_;
  _impl_.tschchartseriesmixedlinesymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  _impl_._has_bits_[1] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesmixedlinesymbolstroke_;
  _impl_.tschchartseriesmixedlinesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinesymbolstroke() {
  _impl_._has_bits_[1] |= 0x00080000u;
  if (_impl_.tschchartseriesmixedlinesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesmixedlinesymbolstroke_ = p;
  }
  return _impl_.tschchartseriesmixedlinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedlinesymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesmixedlinesymbolstroke_);
  }
  if (tschchartseriesmixedlinesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinesymbolstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00080000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00080000u;
  }
  _impl_.tschchartseriesmixedlinesymbolstroke_ = tschchartseriesmixedlinesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolstroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesscattersymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolstroke() const {
  return _internal_has_tschchartseriesscattersymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolstroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesscattersymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  return _internal_tschchartseriesscattersymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattersymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscattersymbolstroke_);
  }
  _impl_.tschchartseriesscattersymbolstroke_ = tschchartseriesscattersymbolstroke;
  if (tschchartseriesscattersymbolstroke) {
    _impl_._has_bits_[1] |= 0x00100000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolstroke() {
  _impl_._has_bits_[1] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesscattersymbolstroke_;
  _impl_.tschchartseriesscattersymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattersymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  _impl_._has_bits_[1] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesscattersymbolstroke_;
  _impl_.tschchartseriesscattersymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattersymbolstroke() {
  _impl_._has_bits_[1] |= 0x00100000u;
  if (_impl_.tschchartseriesscattersymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesscattersymbolstroke_ = p;
  }
  return _impl_.tschchartseriesscattersymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesscattersymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesscattersymbolstroke_);
  }
  if (tschchartseriesscattersymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesscattersymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattersymbolstroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00100000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00100000u;
  }
  _impl_.tschchartseriesscattersymbolstroke_ = tschchartseriesscattersymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
}

// optional float tschchartseriesdefaulttrendlineequationopacity = 81;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationopacity() const {
  bool value = (_impl_._has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationopacity() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationopacity() {
  _impl_.tschchartseriesdefaulttrendlineequationopacity_ = 0;
  _impl_._has_bits_[2] &= ~0x00040000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineequationopacity() const {
  return _impl_.tschchartseriesdefaulttrendlineequationopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationopacity)
  return _internal_tschchartseriesdefaulttrendlineequationopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationopacity(float value) {
  _impl_._has_bits_[2] |= 0x00040000u;
  _impl_.tschchartseriesdefaulttrendlineequationopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationopacity(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationopacity)
}

// optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex() {
  _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
  _impl_._has_bits_[2] &= ~0x00080000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationparagraphstyleindex)
  return _internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[2] |= 0x00080000u;
  _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationparagraphstyleindex)
}

// optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredopacity() const {
  bool value = (_impl_._has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredopacity() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredopacity() {
  _impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
  _impl_._has_bits_[2] &= ~0x00100000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredopacity() const {
  return _impl_.tschchartseriesdefaulttrendlinersquaredopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredopacity)
  return _internal_tschchartseriesdefaulttrendlinersquaredopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredopacity(float value) {
  _impl_._has_bits_[2] |= 0x00100000u;
  _impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredopacity(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredopacity)
}

// optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  bool value = (_impl_._has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() {
  _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
  _impl_._has_bits_[2] &= ~0x00200000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex)
  return _internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(int32_t value) {
  _impl_._has_bits_[2] |= 0x00200000u;
  _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(int32_t value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex)
}

// optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshadow() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulttrendlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineshadow() const {
  return _internal_has_tschchartseriesdefaulttrendlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.tschchartseriesdefaulttrendlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  return _internal_tschchartseriesdefaulttrendlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulttrendlineshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulttrendlineshadow_);
  }
  _impl_.tschchartseriesdefaulttrendlineshadow_ = tschchartseriesdefaulttrendlineshadow;
  if (tschchartseriesdefaulttrendlineshadow) {
    _impl_._has_bits_[1] |= 0x00200000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlineshadow() {
  _impl_._has_bits_[1] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesdefaulttrendlineshadow_;
  _impl_.tschchartseriesdefaulttrendlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulttrendlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  _impl_._has_bits_[1] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = _impl_.tschchartseriesdefaulttrendlineshadow_;
  _impl_.tschchartseriesdefaulttrendlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlineshadow() {
  _impl_._has_bits_[1] |= 0x00200000u;
  if (_impl_.tschchartseriesdefaulttrendlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulttrendlineshadow_ = p;
  }
  return _impl_.tschchartseriesdefaulttrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesdefaulttrendlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulttrendlineshadow_);
  }
  if (tschchartseriesdefaulttrendlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlineshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulttrendlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulttrendlineshadow, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00200000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00200000u;
  }
  _impl_.tschchartseriesdefaulttrendlineshadow_ = tschchartseriesdefaulttrendlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinestroke() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulttrendlinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinestroke() const {
  return _internal_has_tschchartseriesdefaulttrendlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinestroke() const {
  const ::TSD::StrokeArchive* p = _impl_.tschchartseriesdefaulttrendlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  return _internal_tschchartseriesdefaulttrendlinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulttrendlinestroke(
    ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulttrendlinestroke_);
  }
  _impl_.tschchartseriesdefaulttrendlinestroke_ = tschchartseriesdefaulttrendlinestroke;
  if (tschchartseriesdefaulttrendlinestroke) {
    _impl_._has_bits_[1] |= 0x00400000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlinestroke() {
  _impl_._has_bits_[1] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesdefaulttrendlinestroke_;
  _impl_.tschchartseriesdefaulttrendlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulttrendlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  _impl_._has_bits_[1] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = _impl_.tschchartseriesdefaulttrendlinestroke_;
  _impl_.tschchartseriesdefaulttrendlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlinestroke() {
  _impl_._has_bits_[1] |= 0x00400000u;
  if (_impl_.tschchartseriesdefaulttrendlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulttrendlinestroke_ = p;
  }
  return _impl_.tschchartseriesdefaulttrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesdefaulttrendlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulttrendlinestroke_);
  }
  if (tschchartseriesdefaulttrendlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlinestroke));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulttrendlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulttrendlinestroke, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00400000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00400000u;
  }
  _impl_.tschchartseriesdefaulttrendlinestroke_ = tschchartseriesdefaulttrendlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
}

// optional int32 tschchartseriesareavaluelabelposition = 87;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareavaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareavaluelabelposition() const {
  return _internal_has_tschchartseriesareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareavaluelabelposition() {
  _impl_.tschchartseriesareavaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x00400000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesareavaluelabelposition() const {
  return _impl_.tschchartseriesareavaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareavaluelabelposition)
  return _internal_tschchartseriesareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareavaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x00400000u;
  _impl_.tschchartseriesareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareavaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareavaluelabelposition)
}

// optional int32 tschchartseriesbarvaluelabelposition = 88;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarvaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarvaluelabelposition() const {
  return _internal_has_tschchartseriesbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarvaluelabelposition() {
  _impl_.tschchartseriesbarvaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x00800000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesbarvaluelabelposition() const {
  return _impl_.tschchartseriesbarvaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesbarvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarvaluelabelposition)
  return _internal_tschchartseriesbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbarvaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x00800000u;
  _impl_.tschchartseriesbarvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarvaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesbarvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarvaluelabelposition)
}

// optional int32 tschchartseriesbubblevaluelabelposition = 89;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblevaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblevaluelabelposition() const {
  return _internal_has_tschchartseriesbubblevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblevaluelabelposition() {
  _impl_.tschchartseriesbubblevaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x01000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesbubblevaluelabelposition() const {
  return _impl_.tschchartseriesbubblevaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesbubblevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblevaluelabelposition)
  return _internal_tschchartseriesbubblevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbubblevaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x01000000u;
  _impl_.tschchartseriesbubblevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblevaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesbubblevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblevaluelabelposition)
}

// optional int32 tschchartseriesdefaultvaluelabelposition = 90;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultvaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultvaluelabelposition() const {
  return _internal_has_tschchartseriesdefaultvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultvaluelabelposition() {
  _impl_.tschchartseriesdefaultvaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x02000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesdefaultvaluelabelposition() const {
  return _impl_.tschchartseriesdefaultvaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesdefaultvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelposition)
  return _internal_tschchartseriesdefaultvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultvaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x02000000u;
  _impl_.tschchartseriesdefaultvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultvaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesdefaultvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelposition)
}

// optional int32 tschchartserieslinevaluelabelposition = 91;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinevaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinevaluelabelposition() const {
  return _internal_has_tschchartserieslinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinevaluelabelposition() {
  _impl_.tschchartserieslinevaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x04000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartserieslinevaluelabelposition() const {
  return _impl_.tschchartserieslinevaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartserieslinevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinevaluelabelposition)
  return _internal_tschchartserieslinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinevaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x04000000u;
  _impl_.tschchartserieslinevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinevaluelabelposition(int32_t value) {
  _internal_set_tschchartserieslinevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinevaluelabelposition)
}

// optional int32 tschchartseriesmixedareavaluelabelposition = 92;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareavaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareavaluelabelposition() const {
  return _internal_has_tschchartseriesmixedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareavaluelabelposition() {
  _impl_.tschchartseriesmixedareavaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x08000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesmixedareavaluelabelposition() const {
  return _impl_.tschchartseriesmixedareavaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesmixedareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareavaluelabelposition)
  return _internal_tschchartseriesmixedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareavaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x08000000u;
  _impl_.tschchartseriesmixedareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareavaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesmixedareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareavaluelabelposition)
}

// optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnvaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnvaluelabelposition() const {
  return _internal_has_tschchartseriesmixedcolumnvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnvaluelabelposition() {
  _impl_.tschchartseriesmixedcolumnvaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x10000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnvaluelabelposition() const {
  return _impl_.tschchartseriesmixedcolumnvaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesmixedcolumnvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnvaluelabelposition)
  return _internal_tschchartseriesmixedcolumnvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedcolumnvaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x10000000u;
  _impl_.tschchartseriesmixedcolumnvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedcolumnvaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesmixedcolumnvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnvaluelabelposition)
}

// optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinevaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinevaluelabelposition() const {
  return _internal_has_tschchartseriesmixedlinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinevaluelabelposition() {
  _impl_.tschchartseriesmixedlinevaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x20000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinevaluelabelposition() const {
  return _impl_.tschchartseriesmixedlinevaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesmixedlinevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinevaluelabelposition)
  return _internal_tschchartseriesmixedlinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinevaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x20000000u;
  _impl_.tschchartseriesmixedlinevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinevaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesmixedlinevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinevaluelabelposition)
}

// optional int32 tschchartseriesscattervaluelabelposition = 95;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattervaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattervaluelabelposition() const {
  return _internal_has_tschchartseriesscattervaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattervaluelabelposition() {
  _impl_.tschchartseriesscattervaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x40000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesscattervaluelabelposition() const {
  return _impl_.tschchartseriesscattervaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesscattervaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattervaluelabelposition)
  return _internal_tschchartseriesscattervaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattervaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x40000000u;
  _impl_.tschchartseriesscattervaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattervaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesscattervaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattervaluelabelposition)
}

// optional int32 tschchartseriesstackedareavaluelabelposition = 96;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesstackedareavaluelabelposition() const {
  bool value = (_impl_._has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedareavaluelabelposition() const {
  return _internal_has_tschchartseriesstackedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedareavaluelabelposition() {
  _impl_.tschchartseriesstackedareavaluelabelposition_ = 0;
  _impl_._has_bits_[2] &= ~0x80000000u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesstackedareavaluelabelposition() const {
  return _impl_.tschchartseriesstackedareavaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesstackedareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedareavaluelabelposition)
  return _internal_tschchartseriesstackedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesstackedareavaluelabelposition(int32_t value) {
  _impl_._has_bits_[2] |= 0x80000000u;
  _impl_.tschchartseriesstackedareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedareavaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesstackedareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedareavaluelabelposition)
}

// optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesstackedbarvaluelabelposition() const {
  bool value = (_impl_._has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedbarvaluelabelposition() const {
  return _internal_has_tschchartseriesstackedbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedbarvaluelabelposition() {
  _impl_.tschchartseriesstackedbarvaluelabelposition_ = 0;
  _impl_._has_bits_[3] &= ~0x00000001u;
}
inline int32_t ChartSeriesStyleArchive::_internal_tschchartseriesstackedbarvaluelabelposition() const {
  return _impl_.tschchartseriesstackedbarvaluelabelposition_;
}
inline int32_t ChartSeriesStyleArchive::tschchartseriesstackedbarvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedbarvaluelabelposition)
  return _internal_tschchartseriesstackedbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesstackedbarvaluelabelposition(int32_t value) {
  _impl_._has_bits_[3] |= 0x00000001u;
  _impl_.tschchartseriesstackedbarvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedbarvaluelabelposition(int32_t value) {
  _internal_set_tschchartseriesstackedbarvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedbarvaluelabelposition)
}

// -------------------------------------------------------------------

// ChartSeriesNonStyleArchive

// optional float tschchartseriesbubbleadjustmentscale = 1;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleadjustmentscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleadjustmentscale() const {
  return _internal_has_tschchartseriesbubbleadjustmentscale();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleadjustmentscale() {
  _impl_.tschchartseriesbubbleadjustmentscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleadjustmentscale() const {
  return _impl_.tschchartseriesbubbleadjustmentscale_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesbubbleadjustmentscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleadjustmentscale)
  return _internal_tschchartseriesbubbleadjustmentscale();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleadjustmentscale(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.tschchartseriesbubbleadjustmentscale_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleadjustmentscale(float value) {
  _internal_set_tschchartseriesbubbleadjustmentscale(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleadjustmentscale)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  return _internal_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = tschchartseriesdefaulterrorbarcustomnegativedata;
  if (tschchartseriesdefaulterrorbarcustomnegativedata) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedata() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedata() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  if (tschchartseriesdefaulterrorbarcustomnegativedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedata));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustomnegativedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustomnegativedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = tschchartseriesdefaulterrorbarcustomnegativedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  return _internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedatascatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustomnegativedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustomnegativedatascatterx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustompositivedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedata() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustompositivedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = _impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  return _internal_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  _impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = tschchartseriesdefaulterrorbarcustompositivedata;
  if (tschchartseriesdefaulterrorbarcustompositivedata) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedata() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
  _impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedata() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
  _impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedata() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  if (tschchartseriesdefaulterrorbarcustompositivedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedata));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustompositivedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustompositivedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = tschchartseriesdefaulterrorbarcustompositivedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  return _internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = tschchartseriesdefaulterrorbarcustompositivedatascatterx;
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = p;
  }
  return _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedatascatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustompositivedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustompositivedatascatterx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = tschchartseriesdefaulterrorbarcustompositivedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
}

// optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarfixedvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarfixedvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvalue() {
  _impl_.tschchartseriesdefaulterrorbarfixedvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarfixedvalue() const {
  return _impl_.tschchartseriesdefaulterrorbarfixedvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvalue)
  return _internal_tschchartseriesdefaulterrorbarfixedvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarfixedvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.tschchartseriesdefaulterrorbarfixedvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarfixedvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvalue)
}

// optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvaluescatterx() {
  _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarfixedvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvaluescatterx)
}

// optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarpercentvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarpercentvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvalue() {
  _impl_.tschchartseriesdefaulterrorbarpercentvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarpercentvalue() const {
  return _impl_.tschchartseriesdefaulterrorbarpercentvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvalue)
  return _internal_tschchartseriesdefaulterrorbarpercentvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarpercentvalue(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.tschchartseriesdefaulterrorbarpercentvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarpercentvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvalue)
}

// optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvaluescatterx() {
  _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarpercentvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvaluescatterx)
}

// optional int32 tschchartseriesdefaulterrorbarsetting = 10;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarsetting() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsetting() const {
  return _internal_has_tschchartseriesdefaulterrorbarsetting();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsetting() {
  _impl_.tschchartseriesdefaulterrorbarsetting_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarsetting() const {
  return _impl_.tschchartseriesdefaulterrorbarsetting_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsetting() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsetting)
  return _internal_tschchartseriesdefaulterrorbarsetting();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarsetting(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.tschchartseriesdefaulterrorbarsetting_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsetting(int32_t value) {
  _internal_set_tschchartseriesdefaulterrorbarsetting(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsetting)
}

// optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarsettingscatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsettingscatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarsettingscatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsettingscatterx() {
  _impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarsettingscatterx() const {
  return _impl_.tschchartseriesdefaulterrorbarsettingscatterx_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsettingscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsettingscatterx)
  return _internal_tschchartseriesdefaulterrorbarsettingscatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarsettingscatterx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsettingscatterx(int32_t value) {
  _internal_set_tschchartseriesdefaulterrorbarsettingscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsettingscatterx)
}

// optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstddevvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarstddevvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvalue() {
  _impl_.tschchartseriesdefaulterrorbarstddevvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarstddevvalue() const {
  return _impl_.tschchartseriesdefaulterrorbarstddevvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvalue)
  return _internal_tschchartseriesdefaulterrorbarstddevvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarstddevvalue(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.tschchartseriesdefaulterrorbarstddevvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarstddevvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvalue)
}

// optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvaluescatterx() {
  _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarstddevvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvaluescatterx)
}

// optional int32 tschchartseriesdefaulterrorbartype = 14;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbartype() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartype() const {
  return _internal_has_tschchartseriesdefaulterrorbartype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartype() {
  _impl_.tschchartseriesdefaulterrorbartype_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbartype() const {
  return _impl_.tschchartseriesdefaulterrorbartype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartype)
  return _internal_tschchartseriesdefaulterrorbartype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbartype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.tschchartseriesdefaulterrorbartype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartype(int32_t value) {
  _internal_set_tschchartseriesdefaulterrorbartype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartype)
}

// optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbartypescatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartypescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbartypescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartypescatterx() {
  _impl_.tschchartseriesdefaulterrorbartypescatterx_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbartypescatterx() const {
  return _impl_.tschchartseriesdefaulterrorbartypescatterx_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartypescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartypescatterx)
  return _internal_tschchartseriesdefaulterrorbartypescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbartypescatterx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.tschchartseriesdefaulterrorbartypescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartypescatterx(int32_t value) {
  _internal_set_tschchartseriesdefaulterrorbartypescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartypescatterx)
}

// optional float tschchartseriespielabelexplosion = 16;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespielabelexplosion() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespielabelexplosion() const {
  return _internal_has_tschchartseriespielabelexplosion();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespielabelexplosion() {
  _impl_.tschchartseriespielabelexplosion_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriespielabelexplosion() const {
  return _impl_.tschchartseriespielabelexplosion_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriespielabelexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespielabelexplosion)
  return _internal_tschchartseriespielabelexplosion();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespielabelexplosion(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.tschchartseriespielabelexplosion_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespielabelexplosion(float value) {
  _internal_set_tschchartseriespielabelexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespielabelexplosion)
}

// optional int32 tschchartseriesbubblelinetype = 17;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblelinetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblelinetype() const {
  return _internal_has_tschchartseriesbubblelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblelinetype() {
  _impl_.tschchartseriesbubblelinetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblelinetype() const {
  return _impl_.tschchartseriesbubblelinetype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesbubblelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblelinetype)
  return _internal_tschchartseriesbubblelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblelinetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.tschchartseriesbubblelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblelinetype(int32_t value) {
  _internal_set_tschchartseriesbubblelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblelinetype)
}

// optional int32 tschchartserieslinelinetype = 18;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslinelinetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinelinetype() const {
  return _internal_has_tschchartserieslinelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinelinetype() {
  _impl_.tschchartserieslinelinetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartserieslinelinetype() const {
  return _impl_.tschchartserieslinelinetype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartserieslinelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinelinetype)
  return _internal_tschchartserieslinelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslinelinetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.tschchartserieslinelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinelinetype(int32_t value) {
  _internal_set_tschchartserieslinelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinelinetype)
}

// optional int32 tschchartseriesmixedlinelinetype = 19;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlinelinetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinelinetype() const {
  return _internal_has_tschchartseriesmixedlinelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinelinetype() {
  _impl_.tschchartseriesmixedlinelinetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlinelinetype() const {
  return _impl_.tschchartseriesmixedlinelinetype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesmixedlinelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinelinetype)
  return _internal_tschchartseriesmixedlinelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlinelinetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.tschchartseriesmixedlinelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinelinetype(int32_t value) {
  _internal_set_tschchartseriesmixedlinelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinelinetype)
}

// optional int32 tschchartseriesscatterlinetype = 20;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscatterlinetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscatterlinetype() const {
  return _internal_has_tschchartseriesscatterlinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscatterlinetype() {
  _impl_.tschchartseriesscatterlinetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesscatterlinetype() const {
  return _impl_.tschchartseriesscatterlinetype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesscatterlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterlinetype)
  return _internal_tschchartseriesscatterlinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscatterlinetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.tschchartseriesscatterlinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscatterlinetype(int32_t value) {
  _internal_set_tschchartseriesscatterlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterlinetype)
}

// optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 21;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultnumberformat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesdefaultnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformat() const {
  return _internal_has_tschchartseriesdefaultnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultnumberformat() const {
  const ::TSK::FormatStructArchive* p = _impl_.tschchartseriesdefaultnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  return _internal_tschchartseriesdefaultnumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultnumberformat(
    ::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaultnumberformat_);
  }
  _impl_.tschchartseriesdefaultnumberformat_ = tschchartseriesdefaultnumberformat;
  if (tschchartseriesdefaultnumberformat) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultnumberformat() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartseriesdefaultnumberformat_;
  _impl_.tschchartseriesdefaultnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaultnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartseriesdefaultnumberformat_;
  _impl_.tschchartseriesdefaultnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaultnumberformat() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.tschchartseriesdefaultnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesdefaultnumberformat_ = p;
  }
  return _impl_.tschchartseriesdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdefaultnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultnumberformat(::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesdefaultnumberformat_);
  }
  if (tschchartseriesdefaultnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultnumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultnumberformat, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.tschchartseriesdefaultnumberformat_ = tschchartseriesdefaultnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
}

// optional .TSK.FormatStructArchive tschchartseriespienumberformat = 22;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespienumberformat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriespienumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformat() const {
  return _internal_has_tschchartseriespienumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriespienumberformat() const {
  const ::TSK::FormatStructArchive* p = _impl_.tschchartseriespienumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriespienumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  return _internal_tschchartseriespienumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriespienumberformat(
    ::TSK::FormatStructArchive* tschchartseriespienumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespienumberformat_);
  }
  _impl_.tschchartseriespienumberformat_ = tschchartseriespienumberformat;
  if (tschchartseriespienumberformat) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriespienumberformat() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartseriespienumberformat_;
  _impl_.tschchartseriespienumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriespienumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartseriespienumberformat_;
  _impl_.tschchartseriespienumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriespienumberformat() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.tschchartseriespienumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.tschchartseriespienumberformat_ = p;
  }
  return _impl_.tschchartseriespienumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriespienumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriespienumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriespienumberformat(::TSK::FormatStructArchive* tschchartseriespienumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriespienumberformat_);
  }
  if (tschchartseriespienumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespienumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriespienumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespienumberformat, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.tschchartseriespienumberformat_ = tschchartseriespienumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
}

// optional int32 tschchartseriesdefaultnumberformattype = 23;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultnumberformattype() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformattype() const {
  return _internal_has_tschchartseriesdefaultnumberformattype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformattype() {
  _impl_.tschchartseriesdefaultnumberformattype_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultnumberformattype() const {
  return _impl_.tschchartseriesdefaultnumberformattype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformattype)
  return _internal_tschchartseriesdefaultnumberformattype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultnumberformattype(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.tschchartseriesdefaultnumberformattype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultnumberformattype(int32_t value) {
  _internal_set_tschchartseriesdefaultnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformattype)
}

// optional int32 tschchartseriespienumberformattype = 24;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespienumberformattype() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformattype() const {
  return _internal_has_tschchartseriespienumberformattype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformattype() {
  _impl_.tschchartseriespienumberformattype_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriespienumberformattype() const {
  return _impl_.tschchartseriespienumberformattype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriespienumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformattype)
  return _internal_tschchartseriespienumberformattype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespienumberformattype(int32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.tschchartseriespienumberformattype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespienumberformattype(int32_t value) {
  _internal_set_tschchartseriespienumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformattype)
}

// optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesstackedpercentnumberformat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tschchartseriesstackedpercentnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedpercentnumberformat() const {
  return _internal_has_tschchartseriesstackedpercentnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesstackedpercentnumberformat() const {
  const ::TSK::FormatStructArchive* p = _impl_.tschchartseriesstackedpercentnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesstackedpercentnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  return _internal_tschchartseriesstackedpercentnumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesstackedpercentnumberformat(
    ::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesstackedpercentnumberformat_);
  }
  _impl_.tschchartseriesstackedpercentnumberformat_ = tschchartseriesstackedpercentnumberformat;
  if (tschchartseriesstackedpercentnumberformat) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesstackedpercentnumberformat() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartseriesstackedpercentnumberformat_;
  _impl_.tschchartseriesstackedpercentnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesstackedpercentnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = _impl_.tschchartseriesstackedpercentnumberformat_;
  _impl_.tschchartseriesstackedpercentnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesstackedpercentnumberformat() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.tschchartseriesstackedpercentnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.tschchartseriesstackedpercentnumberformat_ = p;
  }
  return _impl_.tschchartseriesstackedpercentnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesstackedpercentnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesstackedpercentnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesstackedpercentnumberformat(::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tschchartseriesstackedpercentnumberformat_);
  }
  if (tschchartseriesstackedpercentnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstackedpercentnumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriesstackedpercentnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesstackedpercentnumberformat, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.tschchartseriesstackedpercentnumberformat_ = tschchartseriesstackedpercentnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
}

// optional int32 tschchartseriesdefaultseriestype = 26;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultseriestype() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultseriestype() const {
  return _internal_has_tschchartseriesdefaultseriestype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultseriestype() {
  _impl_.tschchartseriesdefaultseriestype_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultseriestype() const {
  return _impl_.tschchartseriesdefaultseriestype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaultseriestype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultseriestype)
  return _internal_tschchartseriesdefaultseriestype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultseriestype(int32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.tschchartseriesdefaultseriestype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultseriestype(int32_t value) {
  _internal_set_tschchartseriesdefaultseriestype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultseriestype)
}

// optional bool tschchartseriesdefaultshowerrorbar = 27;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowerrorbar() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbar() const {
  return _internal_has_tschchartseriesdefaultshowerrorbar();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbar() {
  _impl_.tschchartseriesdefaultshowerrorbar_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowerrorbar() const {
  return _impl_.tschchartseriesdefaultshowerrorbar_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbar() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbar)
  return _internal_tschchartseriesdefaultshowerrorbar();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowerrorbar(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.tschchartseriesdefaultshowerrorbar_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbar(bool value) {
  _internal_set_tschchartseriesdefaultshowerrorbar(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbar)
}

// optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowerrorbarscatterx() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbarscatterx() const {
  return _internal_has_tschchartseriesdefaultshowerrorbarscatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbarscatterx() {
  _impl_.tschchartseriesdefaultshowerrorbarscatterx_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowerrorbarscatterx() const {
  return _impl_.tschchartseriesdefaultshowerrorbarscatterx_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbarscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbarscatterx)
  return _internal_tschchartseriesdefaultshowerrorbarscatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowerrorbarscatterx(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.tschchartseriesdefaultshowerrorbarscatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbarscatterx(bool value) {
  _internal_set_tschchartseriesdefaultshowerrorbarscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbarscatterx)
}

// optional bool tschchartseriesscattershowline = 29;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowline() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowline() const {
  return _internal_has_tschchartseriesscattershowline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowline() {
  _impl_.tschchartseriesscattershowline_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowline() const {
  return _impl_.tschchartseriesscattershowline_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowline)
  return _internal_tschchartseriesscattershowline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowline(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.tschchartseriesscattershowline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowline(bool value) {
  _internal_set_tschchartseriesscattershowline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowline)
}

// optional bool tschchartseriesbubbleshownegativedata = 30;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshownegativedata() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshownegativedata() const {
  return _internal_has_tschchartseriesbubbleshownegativedata();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshownegativedata() {
  _impl_.tschchartseriesbubbleshownegativedata_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshownegativedata() const {
  return _impl_.tschchartseriesbubbleshownegativedata_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshownegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshownegativedata)
  return _internal_tschchartseriesbubbleshownegativedata();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshownegativedata(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.tschchartseriesbubbleshownegativedata_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshownegativedata(bool value) {
  _internal_set_tschchartseriesbubbleshownegativedata(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshownegativedata)
}

// optional bool tschchartseriespieshowserieslabels = 31;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespieshowserieslabels() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowserieslabels() const {
  return _internal_has_tschchartseriespieshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowserieslabels() {
  _impl_.tschchartseriespieshowserieslabels_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriespieshowserieslabels() const {
  return _impl_.tschchartseriespieshowserieslabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowserieslabels)
  return _internal_tschchartseriespieshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespieshowserieslabels(bool value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.tschchartseriespieshowserieslabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowserieslabels(bool value) {
  _internal_set_tschchartseriespieshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowserieslabels)
}

// optional bool tschchartseriesareashowsymbol = 32;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareashowsymbol() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowsymbol() const {
  return _internal_has_tschchartseriesareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowsymbol() {
  _impl_.tschchartseriesareashowsymbol_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesareashowsymbol() const {
  return _impl_.tschchartseriesareashowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowsymbol)
  return _internal_tschchartseriesareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareashowsymbol(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.tschchartseriesareashowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowsymbol(bool value) {
  _internal_set_tschchartseriesareashowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowsymbol)
}

// optional bool tschchartserieslineshowsymbol = 33;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslineshowsymbol() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowsymbol() const {
  return _internal_has_tschchartserieslineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowsymbol() {
  _impl_.tschchartserieslineshowsymbol_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartserieslineshowsymbol() const {
  return _impl_.tschchartserieslineshowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowsymbol)
  return _internal_tschchartserieslineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslineshowsymbol(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.tschchartserieslineshowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowsymbol(bool value) {
  _internal_set_tschchartserieslineshowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowsymbol)
}

// optional bool tschchartseriesmixedareashowsymbol = 34;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedareashowsymbol() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareashowsymbol() const {
  return _internal_has_tschchartseriesmixedareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareashowsymbol() {
  _impl_.tschchartseriesmixedareashowsymbol_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedareashowsymbol() const {
  return _impl_.tschchartseriesmixedareashowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedareashowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareashowsymbol)
  return _internal_tschchartseriesmixedareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedareashowsymbol(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.tschchartseriesmixedareashowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareashowsymbol(bool value) {
  _internal_set_tschchartseriesmixedareashowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareashowsymbol)
}

// optional bool tschchartseriesmixedlineshowsymbol = 35;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlineshowsymbol() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlineshowsymbol() const {
  return _internal_has_tschchartseriesmixedlineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlineshowsymbol() {
  _impl_.tschchartseriesmixedlineshowsymbol_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlineshowsymbol() const {
  return _impl_.tschchartseriesmixedlineshowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedlineshowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlineshowsymbol)
  return _internal_tschchartseriesmixedlineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlineshowsymbol(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.tschchartseriesmixedlineshowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlineshowsymbol(bool value) {
  _internal_set_tschchartseriesmixedlineshowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlineshowsymbol)
}

// optional bool tschchartseriesscattershowsymbol = 36;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowsymbol() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowsymbol() const {
  return _internal_has_tschchartseriesscattershowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowsymbol() {
  _impl_.tschchartseriesscattershowsymbol_ = false;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowsymbol() const {
  return _impl_.tschchartseriesscattershowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowsymbol)
  return _internal_tschchartseriesscattershowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowsymbol(bool value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.tschchartseriesscattershowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowsymbol(bool value) {
  _internal_set_tschchartseriesscattershowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowsymbol)
}

// optional bool tschchartseriesdefaultshowtrendline = 37;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowtrendline() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowtrendline() const {
  return _internal_has_tschchartseriesdefaultshowtrendline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowtrendline() {
  _impl_.tschchartseriesdefaultshowtrendline_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowtrendline() const {
  return _impl_.tschchartseriesdefaultshowtrendline_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowtrendline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowtrendline)
  return _internal_tschchartseriesdefaultshowtrendline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowtrendline(bool value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.tschchartseriesdefaultshowtrendline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowtrendline(bool value) {
  _internal_set_tschchartseriesdefaultshowtrendline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowtrendline)
}

// optional bool tschchartseriesareashowvaluelabels = 38;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareashowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowvaluelabels() const {
  return _internal_has_tschchartseriesareashowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowvaluelabels() {
  _impl_.tschchartseriesareashowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesareashowvaluelabels() const {
  return _impl_.tschchartseriesareashowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowvaluelabels)
  return _internal_tschchartseriesareashowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareashowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.tschchartseriesareashowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowvaluelabels(bool value) {
  _internal_set_tschchartseriesareashowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowvaluelabels)
}

// optional bool tschchartseriesbarshowvaluelabels = 39;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbarshowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbarshowvaluelabels() const {
  return _internal_has_tschchartseriesbarshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbarshowvaluelabels() {
  _impl_.tschchartseriesbarshowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbarshowvaluelabels() const {
  return _impl_.tschchartseriesbarshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbarshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarshowvaluelabels)
  return _internal_tschchartseriesbarshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbarshowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.tschchartseriesbarshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbarshowvaluelabels(bool value) {
  _internal_set_tschchartseriesbarshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarshowvaluelabels)
}

// optional bool tschchartseriesbubbleshowvaluelabels = 40;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowvaluelabels() const {
  return _internal_has_tschchartseriesbubbleshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowvaluelabels() {
  _impl_.tschchartseriesbubbleshowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshowvaluelabels() const {
  return _impl_.tschchartseriesbubbleshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowvaluelabels)
  return _internal_tschchartseriesbubbleshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.tschchartseriesbubbleshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowvaluelabels(bool value) {
  _internal_set_tschchartseriesbubbleshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowvaluelabels)
}

// optional bool tschchartseriesdefaultshowvaluelabels = 41;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowvaluelabels() const {
  return _internal_has_tschchartseriesdefaultshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowvaluelabels() {
  _impl_.tschchartseriesdefaultshowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowvaluelabels() const {
  return _impl_.tschchartseriesdefaultshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowvaluelabels)
  return _internal_tschchartseriesdefaultshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.tschchartseriesdefaultshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowvaluelabels(bool value) {
  _internal_set_tschchartseriesdefaultshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowvaluelabels)
}

// optional bool tschchartserieslineshowvaluelabels = 42;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslineshowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowvaluelabels() const {
  return _internal_has_tschchartserieslineshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowvaluelabels() {
  _impl_.tschchartserieslineshowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartserieslineshowvaluelabels() const {
  return _impl_.tschchartserieslineshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowvaluelabels)
  return _internal_tschchartserieslineshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslineshowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.tschchartserieslineshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowvaluelabels(bool value) {
  _internal_set_tschchartserieslineshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowvaluelabels)
}

// optional bool tschchartseriesmixedshowvaluelabels = 43;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedshowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedshowvaluelabels() const {
  return _internal_has_tschchartseriesmixedshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedshowvaluelabels() {
  _impl_.tschchartseriesmixedshowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedshowvaluelabels() const {
  return _impl_.tschchartseriesmixedshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedshowvaluelabels)
  return _internal_tschchartseriesmixedshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedshowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.tschchartseriesmixedshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedshowvaluelabels(bool value) {
  _internal_set_tschchartseriesmixedshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedshowvaluelabels)
}

// optional bool tschchartseriespieshowvaluelabels = 44;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespieshowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowvaluelabels() const {
  return _internal_has_tschchartseriespieshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowvaluelabels() {
  _impl_.tschchartseriespieshowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriespieshowvaluelabels() const {
  return _impl_.tschchartseriespieshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowvaluelabels)
  return _internal_tschchartseriespieshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespieshowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.tschchartseriespieshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowvaluelabels(bool value) {
  _internal_set_tschchartseriespieshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowvaluelabels)
}

// optional bool tschchartseriesscattershowvaluelabels = 45;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowvaluelabels() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowvaluelabels() const {
  return _internal_has_tschchartseriesscattershowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowvaluelabels() {
  _impl_.tschchartseriesscattershowvaluelabels_ = false;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowvaluelabels() const {
  return _impl_.tschchartseriesscattershowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowvaluelabels)
  return _internal_tschchartseriesscattershowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowvaluelabels(bool value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.tschchartseriesscattershowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowvaluelabels(bool value) {
  _internal_set_tschchartseriesscattershowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowvaluelabels)
}

// optional int32 tschchartseriesbubblesizedimension = 46;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblesizedimension() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblesizedimension() const {
  return _internal_has_tschchartseriesbubblesizedimension();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblesizedimension() {
  _impl_.tschchartseriesbubblesizedimension_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblesizedimension() const {
  return _impl_.tschchartseriesbubblesizedimension_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesbubblesizedimension() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblesizedimension)
  return _internal_tschchartseriesbubblesizedimension();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblesizedimension(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.tschchartseriesbubblesizedimension_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblesizedimension(int32_t value) {
  _internal_set_tschchartseriesbubblesizedimension(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblesizedimension)
}

// optional int32 tschchartseriesareasymboltype = 47;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareasymboltype() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareasymboltype() const {
  return _internal_has_tschchartseriesareasymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareasymboltype() {
  _impl_.tschchartseriesareasymboltype_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesareasymboltype() const {
  return _impl_.tschchartseriesareasymboltype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesareasymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareasymboltype)
  return _internal_tschchartseriesareasymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareasymboltype(int32_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.tschchartseriesareasymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareasymboltype(int32_t value) {
  _internal_set_tschchartseriesareasymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareasymboltype)
}

// optional int32 tschchartserieslinesymboltype = 48;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslinesymboltype() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinesymboltype() const {
  return _internal_has_tschchartserieslinesymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinesymboltype() {
  _impl_.tschchartserieslinesymboltype_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartserieslinesymboltype() const {
  return _impl_.tschchartserieslinesymboltype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartserieslinesymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinesymboltype)
  return _internal_tschchartserieslinesymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslinesymboltype(int32_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.tschchartserieslinesymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinesymboltype(int32_t value) {
  _internal_set_tschchartserieslinesymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinesymboltype)
}

// optional int32 tschchartseriesmixedareasymboltype = 49;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedareasymboltype() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareasymboltype() const {
  return _internal_has_tschchartseriesmixedareasymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareasymboltype() {
  _impl_.tschchartseriesmixedareasymboltype_ = 0;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedareasymboltype() const {
  return _impl_.tschchartseriesmixedareasymboltype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesmixedareasymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareasymboltype)
  return _internal_tschchartseriesmixedareasymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedareasymboltype(int32_t value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.tschchartseriesmixedareasymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareasymboltype(int32_t value) {
  _internal_set_tschchartseriesmixedareasymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareasymboltype)
}

// optional int32 tschchartseriesmixedlinesymboltype = 50;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlinesymboltype() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinesymboltype() const {
  return _internal_has_tschchartseriesmixedlinesymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinesymboltype() {
  _impl_.tschchartseriesmixedlinesymboltype_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlinesymboltype() const {
  return _impl_.tschchartseriesmixedlinesymboltype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesmixedlinesymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinesymboltype)
  return _internal_tschchartseriesmixedlinesymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlinesymboltype(int32_t value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.tschchartseriesmixedlinesymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinesymboltype(int32_t value) {
  _internal_set_tschchartseriesmixedlinesymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinesymboltype)
}

// optional int32 tschchartseriesscattersymboltype = 51;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattersymboltype() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattersymboltype() const {
  return _internal_has_tschchartseriesscattersymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattersymboltype() {
  _impl_.tschchartseriesscattersymboltype_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesscattersymboltype() const {
  return _impl_.tschchartseriesscattersymboltype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesscattersymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattersymboltype)
  return _internal_tschchartseriesscattersymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattersymboltype(int32_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.tschchartseriesscattersymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattersymboltype(int32_t value) {
  _internal_set_tschchartseriesscattersymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattersymboltype)
}

// optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationoffsetx() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsetx() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationoffsetx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsetx() {
  _impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineequationoffsetx() const {
  return _impl_.tschchartseriesdefaulttrendlineequationoffsetx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsetx)
  return _internal_tschchartseriesdefaulttrendlineequationoffsetx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationoffsetx(float value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsetx(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsetx)
}

// optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationoffsety() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsety() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationoffsety();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsety() {
  _impl_.tschchartseriesdefaulttrendlineequationoffsety_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineequationoffsety() const {
  return _impl_.tschchartseriesdefaulttrendlineequationoffsety_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsety)
  return _internal_tschchartseriesdefaulttrendlineequationoffsety();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationoffsety(float value) {
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.tschchartseriesdefaulttrendlineequationoffsety_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsety(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsety)
}

// optional string tschchartseriesdefaulttrendlinelabelstring = 54;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinelabelstring() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinelabelstring() const {
  return _internal_has_tschchartseriesdefaulttrendlinelabelstring();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinelabelstring() {
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinelabelstring() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  return _internal_tschchartseriesdefaulttrendlinelabelstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinelabelstring(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
}
inline std::string* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulttrendlinelabelstring() {
  std::string* _s = _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  return _s;
}
inline const std::string& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinelabelstring() const {
  return _impl_.tschchartseriesdefaulttrendlinelabelstring_.Get();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinelabelstring(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlinelabelstring() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tschchartseriesdefaulttrendlinelabelstring_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulttrendlinelabelstring() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  if (!_internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tschchartseriesdefaulttrendlinelabelstring_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartseriesdefaulttrendlinelabelstring_.IsDefault()) {
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulttrendlinelabelstring(std::string* tschchartseriesdefaulttrendlinelabelstring) {
  if (tschchartseriesdefaulttrendlinelabelstring != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.SetAllocated(tschchartseriesdefaulttrendlinelabelstring, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tschchartseriesdefaulttrendlinelabelstring_.IsDefault()) {
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
}

// optional int32 tschchartseriesdefaulttrendlineorder = 55;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineorder() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineorder() const {
  return _internal_has_tschchartseriesdefaulttrendlineorder();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineorder() {
  _impl_.tschchartseriesdefaulttrendlineorder_ = 0;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineorder() const {
  return _impl_.tschchartseriesdefaulttrendlineorder_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineorder() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineorder)
  return _internal_tschchartseriesdefaulttrendlineorder();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineorder(int32_t value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.tschchartseriesdefaulttrendlineorder_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineorder(int32_t value) {
  _internal_set_tschchartseriesdefaulttrendlineorder(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineorder)
}

// optional int32 tschchartseriesdefaulttrendlineperiod = 56;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineperiod() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineperiod() const {
  return _internal_has_tschchartseriesdefaulttrendlineperiod();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineperiod() {
  _impl_.tschchartseriesdefaulttrendlineperiod_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineperiod() const {
  return _impl_.tschchartseriesdefaulttrendlineperiod_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineperiod() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineperiod)
  return _internal_tschchartseriesdefaulttrendlineperiod();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineperiod(int32_t value) {
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.tschchartseriesdefaulttrendlineperiod_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineperiod(int32_t value) {
  _internal_set_tschchartseriesdefaulttrendlineperiod(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineperiod)
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsetx() {
  _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsetx)
  return _internal_tschchartseriesdefaulttrendlinersquaredoffsetx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value) {
  _impl_._has_bits_[1] |= 0x02000000u;
  _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsetx)
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredoffsety();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsety() {
  _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsety)
  return _internal_tschchartseriesdefaulttrendlinersquaredoffsety();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(float value) {
  _impl_._has_bits_[1] |= 0x04000000u;
  _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsety(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsety)
}

// optional bool tschchartseriesdefaulttrendlineshowequation = 59;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowequation() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowequation() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowequation();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowequation() {
  _impl_.tschchartseriesdefaulttrendlineshowequation_ = false;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowequation() const {
  return _impl_.tschchartseriesdefaulttrendlineshowequation_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowequation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowequation)
  return _internal_tschchartseriesdefaulttrendlineshowequation();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowequation(bool value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.tschchartseriesdefaulttrendlineshowequation_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowequation(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowequation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowequation)
}

// optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowlabel() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowlabel() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowlabel();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowlabel() {
  _impl_.tschchartseriesdefaulttrendlineshowlabel_ = false;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowlabel() const {
  return _impl_.tschchartseriesdefaulttrendlineshowlabel_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowlabel)
  return _internal_tschchartseriesdefaulttrendlineshowlabel();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowlabel(bool value) {
  _impl_._has_bits_[1] |= 0x20000000u;
  _impl_.tschchartseriesdefaulttrendlineshowlabel_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowlabel(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowlabel)
}

// optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowr2value() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowr2value() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowr2value();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowr2value() {
  _impl_.tschchartseriesdefaulttrendlineshowr2value_ = false;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowr2value() const {
  return _impl_.tschchartseriesdefaulttrendlineshowr2value_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowr2value() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowr2value)
  return _internal_tschchartseriesdefaulttrendlineshowr2value();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowr2value(bool value) {
  _impl_._has_bits_[1] |= 0x40000000u;
  _impl_.tschchartseriesdefaulttrendlineshowr2value_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowr2value(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowr2value(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowr2value)
}

// optional int32 tschchartseriesdefaulttrendlinetype = 62;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinetype() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinetype() const {
  return _internal_has_tschchartseriesdefaulttrendlinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinetype() {
  _impl_.tschchartseriesdefaulttrendlinetype_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinetype() const {
  return _impl_.tschchartseriesdefaulttrendlinetype_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinetype)
  return _internal_tschchartseriesdefaulttrendlinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinetype(int32_t value) {
  _impl_._has_bits_[1] |= 0x08000000u;
  _impl_.tschchartseriesdefaulttrendlinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinetype(int32_t value) {
  _internal_set_tschchartseriesdefaulttrendlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinetype)
}

// optional float tschchartseriespiewedgeexplosion = 63;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespiewedgeexplosion() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespiewedgeexplosion() const {
  return _internal_has_tschchartseriespiewedgeexplosion();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespiewedgeexplosion() {
  _impl_.tschchartseriespiewedgeexplosion_ = 0;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriespiewedgeexplosion() const {
  return _impl_.tschchartseriespiewedgeexplosion_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriespiewedgeexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespiewedgeexplosion)
  return _internal_tschchartseriespiewedgeexplosion();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespiewedgeexplosion(float value) {
  _impl_._has_bits_[1] |= 0x10000000u;
  _impl_.tschchartseriespiewedgeexplosion_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespiewedgeexplosion(float value) {
  _internal_set_tschchartseriespiewedgeexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespiewedgeexplosion)
}

// optional int32 tschchartseriesdefaultyaxisordinal = 64;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultyaxisordinal() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultyaxisordinal() const {
  return _internal_has_tschchartseriesdefaultyaxisordinal();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultyaxisordinal() {
  _impl_.tschchartseriesdefaultyaxisordinal_ = 0;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultyaxisordinal() const {
  return _impl_.tschchartseriesdefaultyaxisordinal_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesdefaultyaxisordinal() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultyaxisordinal)
  return _internal_tschchartseriesdefaultyaxisordinal();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultyaxisordinal(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000002u;
  _impl_.tschchartseriesdefaultyaxisordinal_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultyaxisordinal(int32_t value) {
  _internal_set_tschchartseriesdefaultyaxisordinal(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultyaxisordinal)
}

// optional bool tschchartseriesbubbleshowserieslabels = 65;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshowserieslabels() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowserieslabels() const {
  return _internal_has_tschchartseriesbubbleshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowserieslabels() {
  _impl_.tschchartseriesbubbleshowserieslabels_ = false;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshowserieslabels() const {
  return _impl_.tschchartseriesbubbleshowserieslabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowserieslabels)
  return _internal_tschchartseriesbubbleshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshowserieslabels(bool value) {
  _impl_._has_bits_[1] |= 0x80000000u;
  _impl_.tschchartseriesbubbleshowserieslabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowserieslabels(bool value) {
  _internal_set_tschchartseriesbubbleshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowserieslabels)
}

// optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblevaluelabelsaxis() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblevaluelabelsaxis() const {
  return _internal_has_tschchartseriesbubblevaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblevaluelabelsaxis() {
  _impl_.tschchartseriesbubblevaluelabelsaxis_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblevaluelabelsaxis() const {
  return _impl_.tschchartseriesbubblevaluelabelsaxis_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesbubblevaluelabelsaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblevaluelabelsaxis)
  return _internal_tschchartseriesbubblevaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblevaluelabelsaxis(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000004u;
  _impl_.tschchartseriesbubblevaluelabelsaxis_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblevaluelabelsaxis(int32_t value) {
  _internal_set_tschchartseriesbubblevaluelabelsaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblevaluelabelsaxis)
}

// optional bool tschchartseriesscattershowserieslabels = 67;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowserieslabels() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowserieslabels() const {
  return _internal_has_tschchartseriesscattershowserieslabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowserieslabels() {
  _impl_.tschchartseriesscattershowserieslabels_ = false;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowserieslabels() const {
  return _impl_.tschchartseriesscattershowserieslabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowserieslabels)
  return _internal_tschchartseriesscattershowserieslabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowserieslabels(bool value) {
  _impl_._has_bits_[2] |= 0x00000001u;
  _impl_.tschchartseriesscattershowserieslabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowserieslabels(bool value) {
  _internal_set_tschchartseriesscattershowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowserieslabels)
}

// optional int32 tschchartseriesscattervaluelabelsaxis = 68;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattervaluelabelsaxis() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattervaluelabelsaxis() const {
  return _internal_has_tschchartseriesscattervaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattervaluelabelsaxis() {
  _impl_.tschchartseriesscattervaluelabelsaxis_ = 0;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline int32_t ChartSeriesNonStyleArchive::_internal_tschchartseriesscattervaluelabelsaxis() const {
  return _impl_.tschchartseriesscattervaluelabelsaxis_;
}
inline int32_t ChartSeriesNonStyleArchive::tschchartseriesscattervaluelabelsaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattervaluelabelsaxis)
  return _internal_tschchartseriesscattervaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattervaluelabelsaxis(int32_t value) {
  _impl_._has_bits_[2] |= 0x00000008u;
  _impl_.tschchartseriesscattervaluelabelsaxis_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattervaluelabelsaxis(int32_t value) {
  _internal_set_tschchartseriesscattervaluelabelsaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattervaluelabelsaxis)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Generated
}  // namespace TSCH

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eGEN_2eproto
