// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.proto

#include "TSCHArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCH {
PROTOBUF_CONSTEXPR ChartDrawableArchive::ChartDrawableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ChartDrawableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartDrawableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartDrawableArchiveDefaultTypeInternal() {}
  union {
    ChartDrawableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartDrawableArchiveDefaultTypeInternal _ChartDrawableArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartArchive::ChartArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_axis_styles_)*/{}
  , /*decltype(_impl_.value_axis_nonstyles_)*/{}
  , /*decltype(_impl_.category_axis_styles_)*/{}
  , /*decltype(_impl_.category_axis_nonstyles_)*/{}
  , /*decltype(_impl_.series_theme_styles_)*/{}
  , /*decltype(_impl_.paragraph_styles_)*/{}
  , /*decltype(_impl_.legend_frame_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_.mediator_)*/nullptr
  , /*decltype(_impl_.chart_style_)*/nullptr
  , /*decltype(_impl_.chart_non_style_)*/nullptr
  , /*decltype(_impl_.legend_style_)*/nullptr
  , /*decltype(_impl_.legend_non_style_)*/nullptr
  , /*decltype(_impl_.series_private_styles_)*/nullptr
  , /*decltype(_impl_.series_non_styles_)*/nullptr
  , /*decltype(_impl_.chart_type_)*/0
  , /*decltype(_impl_.scatter_format_)*/0
  , /*decltype(_impl_.series_direction_)*/0
  , /*decltype(_impl_.contains_default_data_)*/false
  , /*decltype(_impl_.needs_calc_engine_deferred_import_action_)*/false
  , /*decltype(_impl_.multidataset_index_)*/0u} {}
struct ChartArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartArchiveDefaultTypeInternal() {}
  union {
    ChartArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartArchiveDefaultTypeInternal _ChartArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(
    ::_pbi::ConstantInitialized) {}
struct ChartPasteboardAdditionsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartPasteboardAdditionsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartPasteboardAdditionsArchiveDefaultTypeInternal() {}
  union {
    ChartPasteboardAdditionsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartPasteboardAdditionsArchiveDefaultTypeInternal _ChartPasteboardAdditionsArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive_GridRow_GridValue::ChartGridArchive_GridRow_GridValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.numeric_value_)*/0
  , /*decltype(_impl_.date_value_)*/0} {}
struct ChartGridArchive_GridRow_GridValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchive_GridRow_GridValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchive_GridRow_GridValueDefaultTypeInternal() {}
  union {
    ChartGridArchive_GridRow_GridValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchive_GridRow_GridValueDefaultTypeInternal _ChartGridArchive_GridRow_GridValue_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive_GridRow::ChartGridArchive_GridRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartGridArchive_GridRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchive_GridRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchive_GridRowDefaultTypeInternal() {}
  union {
    ChartGridArchive_GridRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchive_GridRowDefaultTypeInternal _ChartGridArchive_GridRow_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive::ChartGridArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_name_)*/{}
  , /*decltype(_impl_.column_name_)*/{}
  , /*decltype(_impl_.grid_row_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartGridArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchiveDefaultTypeInternal() {}
  union {
    ChartGridArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartMediatorArchive::ChartMediatorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_series_indexes_)*/{}
  , /*decltype(_impl_.remote_series_indexes_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct ChartMediatorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartMediatorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartMediatorArchiveDefaultTypeInternal() {}
  union {
    ChartMediatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartStylePreset::ChartStylePreset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_axis_styles_)*/{}
  , /*decltype(_impl_.category_axis_styles_)*/{}
  , /*decltype(_impl_.series_styles_)*/{}
  , /*decltype(_impl_.paragraph_styles_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chart_style_)*/nullptr
  , /*decltype(_impl_.legend_style_)*/nullptr} {}
struct ChartStylePresetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartStylePresetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartStylePresetDefaultTypeInternal() {}
  union {
    ChartStylePreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartStylePresetDefaultTypeInternal _ChartStylePreset_default_instance_;
PROTOBUF_CONSTEXPR ChartPresetsArchive::ChartPresetsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chart_presets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartPresetsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartPresetsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartPresetsArchiveDefaultTypeInternal() {}
  union {
    ChartPresetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartPresetsArchiveDefaultTypeInternal _ChartPresetsArchive_default_instance_;
PROTOBUF_CONSTEXPR PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_style_)*/nullptr
  , /*decltype(_impl_.chart_nonstyle_)*/nullptr
  , /*decltype(_impl_.legend_style_)*/nullptr
  , /*decltype(_impl_.legend_nonstyle_)*/nullptr
  , /*decltype(_impl_.value_axis_styles_)*/nullptr
  , /*decltype(_impl_.value_axis_nonstyles_)*/nullptr
  , /*decltype(_impl_.category_axis_styles_)*/nullptr
  , /*decltype(_impl_.category_axis_nonstyles_)*/nullptr
  , /*decltype(_impl_.series_theme_styles_)*/nullptr
  , /*decltype(_impl_.series_private_styles_)*/nullptr
  , /*decltype(_impl_.series_nonstyles_)*/nullptr
  , /*decltype(_impl_.paragraph_styles_)*/nullptr} {}
struct PropertyValueStorageContainerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyValueStorageContainerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyValueStorageContainerArchiveDefaultTypeInternal() {}
  union {
    PropertyValueStorageContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyValueStorageContainerArchiveDefaultTypeInternal _PropertyValueStorageContainerArchive_default_instance_;
PROTOBUF_CONSTEXPR StylePasteboardDataArchive::StylePasteboardDataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.style_network_)*/nullptr
  , /*decltype(_impl_.copied_from_entire_chart_)*/false} {}
struct StylePasteboardDataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StylePasteboardDataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StylePasteboardDataArchiveDefaultTypeInternal() {}
  union {
    StylePasteboardDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StylePasteboardDataArchiveDefaultTypeInternal _StylePasteboardDataArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ChartSelectionPathTypeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionPathTypeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionPathTypeArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionPathTypeArchiveDefaultTypeInternal _ChartSelectionPathTypeArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisIDArchive::ChartAxisIDArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_type_)*/0
  , /*decltype(_impl_.ordinal_)*/0u} {}
struct ChartAxisIDArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisIDArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisIDArchiveDefaultTypeInternal() {}
  union {
    ChartAxisIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisIDArchiveDefaultTypeInternal _ChartAxisIDArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_id_)*/nullptr
  , /*decltype(_impl_.number_)*/0u} {}
struct ChartSelectionPathArgumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionPathArgumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionPathArgumentArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathArgumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionPathArgumentArchiveDefaultTypeInternal _ChartSelectionPathArgumentArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionPathArchive::ChartSelectionPathArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.path_type_)*/nullptr
  , /*decltype(_impl_.sub_selection_)*/nullptr} {}
struct ChartSelectionPathArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionPathArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionPathArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionPathArchiveDefaultTypeInternal _ChartSelectionPathArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionArchive::ChartSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_.chart_)*/nullptr} {}
struct ChartSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartUIState::ChartUIState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_)*/nullptr
  , /*decltype(_impl_.cde_last_row_selected_)*/0
  , /*decltype(_impl_.cde_last_col_selected_)*/0
  , /*decltype(_impl_.cde_last_row_count_)*/0
  , /*decltype(_impl_.cde_last_col_count_)*/0} {}
struct ChartUIStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartUIStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartUIStateDefaultTypeInternal() {}
  union {
    ChartUIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartUIStateDefaultTypeInternal _ChartUIState_default_instance_;
PROTOBUF_CONSTEXPR ChartFormatStructExtensions::ChartFormatStructExtensions(
    ::_pbi::ConstantInitialized) {}
struct ChartFormatStructExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartFormatStructExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartFormatStructExtensionsDefaultTypeInternal() {}
  union {
    ChartFormatStructExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartFormatStructExtensionsDefaultTypeInternal _ChartFormatStructExtensions_default_instance_;
}  // namespace TSCH
static ::_pb::Metadata file_level_metadata_TSCHArchives_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSCHArchives_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCHArchives_2eproto = nullptr;

const uint32_t TableStruct_TSCHArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.legend_frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.contains_default_data_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.grid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.mediator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.chart_non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.legend_non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_non_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.multidataset_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.needs_calc_engine_deferred_import_action_),
  10,
  11,
  0,
  1,
  12,
  13,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  ~0u,
  15,
  14,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPasteboardAdditionsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_GridRow_GridValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_GridRow_GridValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_GridRow_GridValue, _impl_.numeric_value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_GridRow_GridValue, _impl_.date_value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_GridRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_GridRow, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_.row_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_.grid_row_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_.local_series_indexes_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_.remote_series_indexes_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.series_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.uuid_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetsArchive, _impl_.chart_presets_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.chart_nonstyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.legend_nonstyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.series_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.paragraph_styles_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_.style_network_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_.copied_from_entire_chart_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _impl_.path_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _impl_.path_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _impl_.axis_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _impl_.ordinal_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _impl_.axis_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_.path_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_.sub_selection_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_.arguments_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _impl_.chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _impl_.paths_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_row_selected_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_col_selected_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_row_count_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_col_count_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFormatStructExtensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::TSCH::ChartDrawableArchive)},
  { 8, 36, -1, sizeof(::TSCH::ChartArchive)},
  { 58, -1, -1, sizeof(::TSCH::ChartPasteboardAdditionsArchive)},
  { 64, 72, -1, sizeof(::TSCH::ChartGridArchive_GridRow_GridValue)},
  { 74, -1, -1, sizeof(::TSCH::ChartGridArchive_GridRow)},
  { 81, -1, -1, sizeof(::TSCH::ChartGridArchive)},
  { 90, 99, -1, sizeof(::TSCH::ChartMediatorArchive)},
  { 102, 115, -1, sizeof(::TSCH::ChartStylePreset)},
  { 122, -1, -1, sizeof(::TSCH::ChartPresetsArchive)},
  { 129, 147, -1, sizeof(::TSCH::PropertyValueStorageContainerArchive)},
  { 159, 168, -1, sizeof(::TSCH::StylePasteboardDataArchive)},
  { 171, 179, -1, sizeof(::TSCH::ChartSelectionPathTypeArchive)},
  { 181, 189, -1, sizeof(::TSCH::ChartAxisIDArchive)},
  { 191, 199, -1, sizeof(::TSCH::ChartSelectionPathArgumentArchive)},
  { 201, 210, -1, sizeof(::TSCH::ChartSelectionPathArchive)},
  { 213, 221, -1, sizeof(::TSCH::ChartSelectionArchive)},
  { 223, 234, -1, sizeof(::TSCH::ChartUIState)},
  { 239, -1, -1, sizeof(::TSCH::ChartFormatStructExtensions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCH::_ChartDrawableArchive_default_instance_._instance,
  &::TSCH::_ChartArchive_default_instance_._instance,
  &::TSCH::_ChartPasteboardAdditionsArchive_default_instance_._instance,
  &::TSCH::_ChartGridArchive_GridRow_GridValue_default_instance_._instance,
  &::TSCH::_ChartGridArchive_GridRow_default_instance_._instance,
  &::TSCH::_ChartGridArchive_default_instance_._instance,
  &::TSCH::_ChartMediatorArchive_default_instance_._instance,
  &::TSCH::_ChartStylePreset_default_instance_._instance,
  &::TSCH::_ChartPresetsArchive_default_instance_._instance,
  &::TSCH::_PropertyValueStorageContainerArchive_default_instance_._instance,
  &::TSCH::_StylePasteboardDataArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionPathTypeArchive_default_instance_._instance,
  &::TSCH::_ChartAxisIDArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionPathArgumentArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionPathArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionArchive_default_instance_._instance,
  &::TSCH::_ChartUIState_default_instance_._instance,
  &::TSCH::_ChartFormatStructExtensions_default_instance_._instance,
};

const char descriptor_table_protodef_TSCHArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSCHArchives.proto\022\004TSCH\032\021TSPMessages."
  "proto\032\021TSKArchives.proto\032\021TSDArchives.pr"
  "oto\032\021TSSArchives.proto\032\031TSCHArchives.Com"
  "mon.proto\032\026TSCHArchives.GEN.proto\032\024TSCH3"
  "DArchives.proto\032\030TSCHPreUFFArchives.prot"
  "o\"F\n\024ChartDrawableArchive\022#\n\005super\030\001 \001(\013"
  "2\024.TSD.DrawableArchive*\t\010\220N\020\200\200\200\200\002\"\207\010\n\014Ch"
  "artArchive\022#\n\nchart_type\030\001 \001(\0162\017.TSCH.Ch"
  "artType\022+\n\016scatter_format\030\002 \001(\0162\023.TSCH.S"
  "catterFormat\022\'\n\014legend_frame\030\003 \001(\0132\021.TSC"
  "H.RectArchive\022\036\n\006preset\030\004 \001(\0132\016.TSP.Refe"
  "rence\022/\n\020series_direction\030\005 \001(\0162\025.TSCH.S"
  "eriesDirection\022\035\n\025contains_default_data\030"
  "\006 \001(\010\022$\n\004grid\030\007 \001(\0132\026.TSCH.ChartGridArch"
  "ive\022 \n\010mediator\030\010 \001(\0132\016.TSP.Reference\022#\n"
  "\013chart_style\030\t \001(\0132\016.TSP.Reference\022\'\n\017ch"
  "art_non_style\030\n \001(\0132\016.TSP.Reference\022$\n\014l"
  "egend_style\030\013 \001(\0132\016.TSP.Reference\022(\n\020leg"
  "end_non_style\030\014 \001(\0132\016.TSP.Reference\022)\n\021v"
  "alue_axis_styles\030\r \003(\0132\016.TSP.Reference\022,"
  "\n\024value_axis_nonstyles\030\016 \003(\0132\016.TSP.Refer"
  "ence\022,\n\024category_axis_styles\030\017 \003(\0132\016.TSP"
  ".Reference\022/\n\027category_axis_nonstyles\030\020 "
  "\003(\0132\016.TSP.Reference\022+\n\023series_theme_styl"
  "es\030\021 \003(\0132\016.TSP.Reference\022@\n\025series_priva"
  "te_styles\030\022 \001(\0132!.TSCH.SparseReferenceAr"
  "rayArchive\022<\n\021series_non_styles\030\023 \001(\0132!."
  "TSCH.SparseReferenceArrayArchive\022(\n\020para"
  "graph_styles\030\024 \003(\0132\016.TSP.Reference\022\032\n\022mu"
  "ltidataset_index\030\025 \001(\r\0220\n(needs_calc_eng"
  "ine_deferred_import_action\030\026 \001(\010*\t\010\220N\020\200\200"
  "\200\200\0022>\n\005unity\022\032.TSCH.ChartDrawableArchive"
  "\030\220N \001(\0132\022.TSCH.ChartArchive\"\224\001\n\037ChartPas"
  "teboardAdditionsArchive28\n\033preset_index_"
  "for_pasteboard\022\022.TSCH.ChartArchive\030\220N \001("
  "\r27\n\032preset_uuid_for_pasteboard\022\022.TSCH.C"
  "hartArchive\030\221N \001(\014\"\347\001\n\020ChartGridArchive\022"
  "\020\n\010row_name\030\001 \003(\t\022\023\n\013column_name\030\002 \003(\t\0220"
  "\n\010grid_row\030\003 \003(\0132\036.TSCH.ChartGridArchive"
  ".GridRow\032z\n\007GridRow\0227\n\005value\030\001 \003(\0132(.TSC"
  "H.ChartGridArchive.GridRow.GridValue\0326\n\t"
  "GridValue\022\025\n\rnumeric_value\030\001 \001(\001\022\022\n\ndate"
  "_value\030\002 \001(\001\"q\n\024ChartMediatorArchive\022\034\n\004"
  "info\030\001 \001(\0132\016.TSP.Reference\022\034\n\024local_seri"
  "es_indexes\030\002 \003(\r\022\035\n\025remote_series_indexe"
  "s\030\003 \003(\r\"\225\002\n\020ChartStylePreset\022#\n\013chart_st"
  "yle\030\001 \001(\0132\016.TSP.Reference\022$\n\014legend_styl"
  "e\030\002 \001(\0132\016.TSP.Reference\022)\n\021value_axis_st"
  "yles\030\003 \003(\0132\016.TSP.Reference\022,\n\024category_a"
  "xis_styles\030\004 \003(\0132\016.TSP.Reference\022%\n\rseri"
  "es_styles\030\005 \003(\0132\016.TSP.Reference\022(\n\020parag"
  "raph_styles\030\006 \003(\0132\016.TSP.Reference\022\014\n\004uui"
  "d\030\007 \001(\014\"}\n\023ChartPresetsArchive\022%\n\rchart_"
  "presets\030\001 \003(\0132\016.TSP.Reference2\?\n\textensi"
  "on\022\021.TSS.ThemeArchive\030x \001(\0132\031.TSCH.Chart"
  "PresetsArchive\"\302\005\n$PropertyValueStorageC"
  "ontainerArchive\022#\n\013chart_style\030\001 \001(\0132\016.T"
  "SP.Reference\022&\n\016chart_nonstyle\030\002 \001(\0132\016.T"
  "SP.Reference\022$\n\014legend_style\030\003 \001(\0132\016.TSP"
  ".Reference\022\'\n\017legend_nonstyle\030\004 \001(\0132\016.TS"
  "P.Reference\022<\n\021value_axis_styles\030\005 \001(\0132!"
  ".TSCH.SparseReferenceArrayArchive\022\?\n\024val"
  "ue_axis_nonstyles\030\006 \001(\0132!.TSCH.SparseRef"
  "erenceArrayArchive\022\?\n\024category_axis_styl"
  "es\030\007 \001(\0132!.TSCH.SparseReferenceArrayArch"
  "ive\022B\n\027category_axis_nonstyles\030\010 \001(\0132!.T"
  "SCH.SparseReferenceArrayArchive\022>\n\023serie"
  "s_theme_styles\030\t \001(\0132!.TSCH.SparseRefere"
  "nceArrayArchive\022@\n\025series_private_styles"
  "\030\n \001(\0132!.TSCH.SparseReferenceArrayArchiv"
  "e\022;\n\020series_nonstyles\030\013 \001(\0132!.TSCH.Spars"
  "eReferenceArrayArchive\022;\n\020paragraph_styl"
  "es\030\014 \001(\0132!.TSCH.SparseReferenceArrayArch"
  "ive\"\243\001\n\032StylePasteboardDataArchive\022 \n\005su"
  "per\030\001 \001(\0132\021.TSS.StyleArchive\022A\n\rstyle_ne"
  "twork\030\002 \001(\0132*.TSCH.PropertyValueStorageC"
  "ontainerArchive\022 \n\030copied_from_entire_ch"
  "art\030\003 \001(\010\"E\n\035ChartSelectionPathTypeArchi"
  "ve\022\021\n\tpath_type\030\001 \001(\t\022\021\n\tpath_name\030\002 \001(\t"
  "\"H\n\022ChartAxisIDArchive\022!\n\taxis_type\030\001 \001("
  "\0162\016.TSCH.AxisType\022\017\n\007ordinal\030\002 \001(\r\"^\n!Ch"
  "artSelectionPathArgumentArchive\022\016\n\006numbe"
  "r\030\001 \001(\r\022)\n\007axis_id\030\002 \001(\0132\030.TSCH.ChartAxi"
  "sIDArchive\"\307\001\n\031ChartSelectionPathArchive"
  "\0226\n\tpath_type\030\001 \001(\0132#.TSCH.ChartSelectio"
  "nPathTypeArchive\0226\n\rsub_selection\030\002 \001(\0132"
  "\037.TSCH.ChartSelectionPathArchive\022:\n\targu"
  "ments\030\003 \003(\0132\'.TSCH.ChartSelectionPathArg"
  "umentArchive\"f\n\025ChartSelectionArchive\022\035\n"
  "\005chart\030\001 \001(\0132\016.TSP.Reference\022.\n\005paths\030\002 "
  "\003(\0132\037.TSCH.ChartSelectionPathArchive\"\243\001\n"
  "\014ChartUIState\022\035\n\005chart\030\001 \001(\0132\016.TSP.Refer"
  "ence\022\035\n\025cde_last_row_selected\030\002 \001(\005\022\035\n\025c"
  "de_last_col_selected\030\003 \001(\005\022\032\n\022cde_last_r"
  "ow_count\030\004 \001(\005\022\032\n\022cde_last_col_count\030\005 \001"
  "(\005\"s\n\033ChartFormatStructExtensions2)\n\006pre"
  "fix\022\030.TSK.FormatStructArchive\030\220N \001(\t2)\n\006"
  "suffix\022\030.TSK.FormatStructArchive\030\221N \001(\t:"
  "<\n\037scene3d_settings_constant_depth\022\022.TSC"
  "H.ChartArchive\030\222N \001(\010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCHArchives_2eproto_deps[8] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSCHArchives_2eGEN_2eproto,
  &::descriptor_table_TSCHPreUFFArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCHArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCHArchives_2eproto = {
    false, false, 3981, descriptor_table_protodef_TSCHArchives_2eproto,
    "TSCHArchives.proto",
    &descriptor_table_TSCHArchives_2eproto_once, descriptor_table_TSCHArchives_2eproto_deps, 8, 18,
    schemas, file_default_instances, TableStruct_TSCHArchives_2eproto::offsets,
    file_level_metadata_TSCHArchives_2eproto, file_level_enum_descriptors_TSCHArchives_2eproto,
    file_level_service_descriptors_TSCHArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCHArchives_2eproto_getter() {
  return &descriptor_table_TSCHArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCHArchives_2eproto(&descriptor_table_TSCHArchives_2eproto);
namespace TSCH {

// ===================================================================

class ChartDrawableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartDrawableArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableArchive& super(const ChartDrawableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSD::DrawableArchive&
ChartDrawableArchive::_Internal::super(const ChartDrawableArchive* msg) {
  return *msg->_impl_.super_;
}
void ChartDrawableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartDrawableArchive::ChartDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartDrawableArchive)
}
ChartDrawableArchive::ChartDrawableArchive(const ChartDrawableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartDrawableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartDrawableArchive)
}

inline void ChartDrawableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ChartDrawableArchive::~ChartDrawableArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartDrawableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartDrawableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ChartDrawableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartDrawableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartDrawableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartDrawableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartDrawableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartDrawableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // Extension range [10000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartDrawableArchive)
  return target;
}

size_t ChartDrawableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartDrawableArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.DrawableArchive super = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartDrawableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartDrawableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartDrawableArchive::GetClassData() const { return &_class_data_; }


void ChartDrawableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartDrawableArchive*>(&to_msg);
  auto& from = static_cast<const ChartDrawableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartDrawableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(
        from._internal_super());
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartDrawableArchive::CopyFrom(const ChartDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartDrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartDrawableArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ChartDrawableArchive::InternalSwap(ChartDrawableArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartDrawableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[0]);
}

// ===================================================================

class ChartArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartArchive>()._impl_._has_bits_);
  static void set_has_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCH::RectArchive& legend_frame(const ChartArchive* msg);
  static void set_has_legend_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset(const ChartArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_contains_default_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCH::ChartGridArchive& grid(const ChartArchive* msg);
  static void set_has_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& mediator(const ChartArchive* msg);
  static void set_has_mediator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& chart_style(const ChartArchive* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& chart_non_style(const ChartArchive* msg);
  static void set_has_chart_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& legend_style(const ChartArchive* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& legend_non_style(const ChartArchive* msg);
  static void set_has_legend_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& series_private_styles(const ChartArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& series_non_styles(const ChartArchive* msg);
  static void set_has_series_non_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_multidataset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_needs_calc_engine_deferred_import_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::TSCH::RectArchive&
ChartArchive::_Internal::legend_frame(const ChartArchive* msg) {
  return *msg->_impl_.legend_frame_;
}
const ::TSP::Reference&
ChartArchive::_Internal::preset(const ChartArchive* msg) {
  return *msg->_impl_.preset_;
}
const ::TSCH::ChartGridArchive&
ChartArchive::_Internal::grid(const ChartArchive* msg) {
  return *msg->_impl_.grid_;
}
const ::TSP::Reference&
ChartArchive::_Internal::mediator(const ChartArchive* msg) {
  return *msg->_impl_.mediator_;
}
const ::TSP::Reference&
ChartArchive::_Internal::chart_style(const ChartArchive* msg) {
  return *msg->_impl_.chart_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::chart_non_style(const ChartArchive* msg) {
  return *msg->_impl_.chart_non_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::legend_style(const ChartArchive* msg) {
  return *msg->_impl_.legend_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::legend_non_style(const ChartArchive* msg) {
  return *msg->_impl_.legend_non_style_;
}
const ::TSCH::SparseReferenceArrayArchive&
ChartArchive::_Internal::series_private_styles(const ChartArchive* msg) {
  return *msg->_impl_.series_private_styles_;
}
const ::TSCH::SparseReferenceArrayArchive&
ChartArchive::_Internal::series_non_styles(const ChartArchive* msg) {
  return *msg->_impl_.series_non_styles_;
}
void ChartArchive::clear_legend_frame() {
  if (_impl_.legend_frame_ != nullptr) _impl_.legend_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartArchive::clear_mediator() {
  if (_impl_.mediator_ != nullptr) _impl_.mediator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartArchive::clear_chart_style() {
  if (_impl_.chart_style_ != nullptr) _impl_.chart_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartArchive::clear_chart_non_style() {
  if (_impl_.chart_non_style_ != nullptr) _impl_.chart_non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartArchive::clear_legend_style() {
  if (_impl_.legend_style_ != nullptr) _impl_.legend_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartArchive::clear_legend_non_style() {
  if (_impl_.legend_non_style_ != nullptr) _impl_.legend_non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartArchive::clear_value_axis_styles() {
  _impl_.value_axis_styles_.Clear();
}
void ChartArchive::clear_value_axis_nonstyles() {
  _impl_.value_axis_nonstyles_.Clear();
}
void ChartArchive::clear_category_axis_styles() {
  _impl_.category_axis_styles_.Clear();
}
void ChartArchive::clear_category_axis_nonstyles() {
  _impl_.category_axis_nonstyles_.Clear();
}
void ChartArchive::clear_series_theme_styles() {
  _impl_.series_theme_styles_.Clear();
}
void ChartArchive::clear_series_private_styles() {
  if (_impl_.series_private_styles_ != nullptr) _impl_.series_private_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartArchive::clear_series_non_styles() {
  if (_impl_.series_non_styles_ != nullptr) _impl_.series_non_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartArchive::clear_paragraph_styles() {
  _impl_.paragraph_styles_.Clear();
}
ChartArchive::ChartArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartArchive)
}
ChartArchive::ChartArchive(const ChartArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){from._impl_.value_axis_styles_}
    , decltype(_impl_.value_axis_nonstyles_){from._impl_.value_axis_nonstyles_}
    , decltype(_impl_.category_axis_styles_){from._impl_.category_axis_styles_}
    , decltype(_impl_.category_axis_nonstyles_){from._impl_.category_axis_nonstyles_}
    , decltype(_impl_.series_theme_styles_){from._impl_.series_theme_styles_}
    , decltype(_impl_.paragraph_styles_){from._impl_.paragraph_styles_}
    , decltype(_impl_.legend_frame_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_non_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_non_style_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_non_styles_){nullptr}
    , decltype(_impl_.chart_type_){}
    , decltype(_impl_.scatter_format_){}
    , decltype(_impl_.series_direction_){}
    , decltype(_impl_.contains_default_data_){}
    , decltype(_impl_.needs_calc_engine_deferred_import_action_){}
    , decltype(_impl_.multidataset_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_legend_frame()) {
    _this->_impl_.legend_frame_ = new ::TSCH::RectArchive(*from._impl_.legend_frame_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::TSCH::ChartGridArchive(*from._impl_.grid_);
  }
  if (from._internal_has_mediator()) {
    _this->_impl_.mediator_ = new ::TSP::Reference(*from._impl_.mediator_);
  }
  if (from._internal_has_chart_style()) {
    _this->_impl_.chart_style_ = new ::TSP::Reference(*from._impl_.chart_style_);
  }
  if (from._internal_has_chart_non_style()) {
    _this->_impl_.chart_non_style_ = new ::TSP::Reference(*from._impl_.chart_non_style_);
  }
  if (from._internal_has_legend_style()) {
    _this->_impl_.legend_style_ = new ::TSP::Reference(*from._impl_.legend_style_);
  }
  if (from._internal_has_legend_non_style()) {
    _this->_impl_.legend_non_style_ = new ::TSP::Reference(*from._impl_.legend_non_style_);
  }
  if (from._internal_has_series_private_styles()) {
    _this->_impl_.series_private_styles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.series_private_styles_);
  }
  if (from._internal_has_series_non_styles()) {
    _this->_impl_.series_non_styles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.series_non_styles_);
  }
  ::memcpy(&_impl_.chart_type_, &from._impl_.chart_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.multidataset_index_) -
    reinterpret_cast<char*>(&_impl_.chart_type_)) + sizeof(_impl_.multidataset_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartArchive)
}

inline void ChartArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){arena}
    , decltype(_impl_.value_axis_nonstyles_){arena}
    , decltype(_impl_.category_axis_styles_){arena}
    , decltype(_impl_.category_axis_nonstyles_){arena}
    , decltype(_impl_.series_theme_styles_){arena}
    , decltype(_impl_.paragraph_styles_){arena}
    , decltype(_impl_.legend_frame_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_non_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_non_style_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_non_styles_){nullptr}
    , decltype(_impl_.chart_type_){0}
    , decltype(_impl_.scatter_format_){0}
    , decltype(_impl_.series_direction_){0}
    , decltype(_impl_.contains_default_data_){false}
    , decltype(_impl_.needs_calc_engine_deferred_import_action_){false}
    , decltype(_impl_.multidataset_index_){0u}
  };
}

ChartArchive::~ChartArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.value_axis_styles_.~RepeatedPtrField();
  _impl_.value_axis_nonstyles_.~RepeatedPtrField();
  _impl_.category_axis_styles_.~RepeatedPtrField();
  _impl_.category_axis_nonstyles_.~RepeatedPtrField();
  _impl_.series_theme_styles_.~RepeatedPtrField();
  _impl_.paragraph_styles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.legend_frame_;
  if (this != internal_default_instance()) delete _impl_.preset_;
  if (this != internal_default_instance()) delete _impl_.grid_;
  if (this != internal_default_instance()) delete _impl_.mediator_;
  if (this != internal_default_instance()) delete _impl_.chart_style_;
  if (this != internal_default_instance()) delete _impl_.chart_non_style_;
  if (this != internal_default_instance()) delete _impl_.legend_style_;
  if (this != internal_default_instance()) delete _impl_.legend_non_style_;
  if (this != internal_default_instance()) delete _impl_.series_private_styles_;
  if (this != internal_default_instance()) delete _impl_.series_non_styles_;
}

void ChartArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.value_axis_styles_.Clear();
  _impl_.value_axis_nonstyles_.Clear();
  _impl_.category_axis_styles_.Clear();
  _impl_.category_axis_nonstyles_.Clear();
  _impl_.series_theme_styles_.Clear();
  _impl_.paragraph_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.legend_frame_ != nullptr);
      _impl_.legend_frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.grid_ != nullptr);
      _impl_.grid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.mediator_ != nullptr);
      _impl_.mediator_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.chart_style_ != nullptr);
      _impl_.chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.chart_non_style_ != nullptr);
      _impl_.chart_non_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.legend_style_ != nullptr);
      _impl_.legend_style_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.legend_non_style_ != nullptr);
      _impl_.legend_non_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.series_private_styles_ != nullptr);
      _impl_.series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.series_non_styles_ != nullptr);
      _impl_.series_non_styles_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.chart_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.multidataset_index_) -
        reinterpret_cast<char*>(&_impl_.chart_type_)) + sizeof(_impl_.multidataset_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartType chart_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ScatterFormat scatter_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ScatterFormat_IsValid(val))) {
            _internal_set_scatter_format(static_cast<::TSCH::ScatterFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.RectArchive legend_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SeriesDirection series_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::SeriesDirection_IsValid(val))) {
            _internal_set_series_direction(static_cast<::TSCH::SeriesDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_default_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contains_default_data(&has_bits);
          _impl_.contains_default_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartGridArchive grid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference mediator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_non_style = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_non_style = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_nonstyles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_nonstyles = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_category_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_theme_styles = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_series_theme_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_non_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multidataset_index = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_multidataset_index(&has_bits);
          _impl_.multidataset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_calc_engine_deferred_import_action = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_needs_calc_engine_deferred_import_action(&has_bits);
          _impl_.needs_calc_engine_deferred_import_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartType chart_type = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chart_type(), target);
  }

  // optional .TSCH.ScatterFormat scatter_format = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scatter_format(), target);
  }

  // optional .TSCH.RectArchive legend_frame = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::legend_frame(this),
        _Internal::legend_frame(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference preset = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SeriesDirection series_direction = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_series_direction(), target);
  }

  // optional bool contains_default_data = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_default_data(), target);
  }

  // optional .TSCH.ChartGridArchive grid = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference mediator = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::mediator(this),
        _Internal::mediator(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference chart_style = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::chart_style(this),
        _Internal::chart_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference chart_non_style = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::chart_non_style(this),
        _Internal::chart_non_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_style = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::legend_style(this),
        _Internal::legend_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_non_style = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::legend_non_style(this),
        _Internal::legend_non_style(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_nonstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_nonstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_nonstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_nonstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_theme_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_series_theme_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::series_private_styles(this),
        _Internal::series_private_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::series_non_styles(this),
        _Internal::series_non_styles(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 multidataset_index = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_multidataset_index(), target);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_needs_calc_engine_deferred_import_action(), target);
  }

  // Extension range [10000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartArchive)
  return target;
}

size_t ChartArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 13;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->_impl_.value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  total_size += 1UL * this->_internal_value_axis_nonstyles_size();
  for (const auto& msg : this->_impl_.value_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->_impl_.category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  total_size += 2UL * this->_internal_category_axis_nonstyles_size();
  for (const auto& msg : this->_impl_.category_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  total_size += 2UL * this->_internal_series_theme_styles_size();
  for (const auto& msg : this->_impl_.series_theme_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  total_size += 2UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->_impl_.paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSCH.RectArchive legend_frame = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_frame_);
    }

    // optional .TSP.Reference preset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preset_);
    }

    // optional .TSCH.ChartGridArchive grid = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grid_);
    }

    // optional .TSP.Reference mediator = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mediator_);
    }

    // optional .TSP.Reference chart_style = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_style_);
    }

    // optional .TSP.Reference chart_non_style = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_non_style_);
    }

    // optional .TSP.Reference legend_style = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_style_);
    }

    // optional .TSP.Reference legend_non_style = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_non_style_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_private_styles_);
    }

    // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_non_styles_);
    }

    // optional .TSCH.ChartType chart_type = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chart_type());
    }

    // optional .TSCH.ScatterFormat scatter_format = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scatter_format());
    }

    // optional .TSCH.SeriesDirection series_direction = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_series_direction());
    }

    // optional bool contains_default_data = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool needs_calc_engine_deferred_import_action = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional uint32 multidataset_index = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_multidataset_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartArchive::GetClassData() const { return &_class_data_; }


void ChartArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartArchive*>(&to_msg);
  auto& from = static_cast<const ChartArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_axis_styles_.MergeFrom(from._impl_.value_axis_styles_);
  _this->_impl_.value_axis_nonstyles_.MergeFrom(from._impl_.value_axis_nonstyles_);
  _this->_impl_.category_axis_styles_.MergeFrom(from._impl_.category_axis_styles_);
  _this->_impl_.category_axis_nonstyles_.MergeFrom(from._impl_.category_axis_nonstyles_);
  _this->_impl_.series_theme_styles_.MergeFrom(from._impl_.series_theme_styles_);
  _this->_impl_.paragraph_styles_.MergeFrom(from._impl_.paragraph_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_legend_frame()->::TSCH::RectArchive::MergeFrom(
          from._internal_legend_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_grid()->::TSCH::ChartGridArchive::MergeFrom(
          from._internal_grid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mediator()->::TSP::Reference::MergeFrom(
          from._internal_mediator());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_chart_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_chart_non_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_non_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_legend_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_legend_non_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_non_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_series_private_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_series_non_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_series_non_styles());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.chart_type_ = from._impl_.chart_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.scatter_format_ = from._impl_.scatter_format_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.series_direction_ = from._impl_.series_direction_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.contains_default_data_ = from._impl_.contains_default_data_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.needs_calc_engine_deferred_import_action_ = from._impl_.needs_calc_engine_deferred_import_action_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.multidataset_index_ = from._impl_.multidataset_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartArchive::CopyFrom(const ChartArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_nonstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_nonstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.series_theme_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.paragraph_styles_))
    return false;
  if (_internal_has_legend_frame()) {
    if (!_impl_.legend_frame_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  if (_internal_has_mediator()) {
    if (!_impl_.mediator_->IsInitialized()) return false;
  }
  if (_internal_has_chart_style()) {
    if (!_impl_.chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_chart_non_style()) {
    if (!_impl_.chart_non_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!_impl_.legend_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_non_style()) {
    if (!_impl_.legend_non_style_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!_impl_.series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_non_styles()) {
    if (!_impl_.series_non_styles_->IsInitialized()) return false;
  }
  return true;
}

void ChartArchive::InternalSwap(ChartArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_axis_styles_.InternalSwap(&other->_impl_.value_axis_styles_);
  _impl_.value_axis_nonstyles_.InternalSwap(&other->_impl_.value_axis_nonstyles_);
  _impl_.category_axis_styles_.InternalSwap(&other->_impl_.category_axis_styles_);
  _impl_.category_axis_nonstyles_.InternalSwap(&other->_impl_.category_axis_nonstyles_);
  _impl_.series_theme_styles_.InternalSwap(&other->_impl_.series_theme_styles_);
  _impl_.paragraph_styles_.InternalSwap(&other->_impl_.paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartArchive, _impl_.multidataset_index_)
      + sizeof(ChartArchive::_impl_.multidataset_index_)
      - PROTOBUF_FIELD_OFFSET(ChartArchive, _impl_.legend_frame_)>(
          reinterpret_cast<char*>(&_impl_.legend_frame_),
          reinterpret_cast<char*>(&other->_impl_.legend_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[1]);
}

// ===================================================================

class ChartPasteboardAdditionsArchive::_Internal {
 public:
};

ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPasteboardAdditionsArchive)
}
ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(const ChartPasteboardAdditionsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartPasteboardAdditionsArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPasteboardAdditionsArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartPasteboardAdditionsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartPasteboardAdditionsArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartPasteboardAdditionsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[2]);
}

// ===================================================================

class ChartGridArchive_GridRow_GridValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGridArchive_GridRow_GridValue>()._impl_._has_bits_);
  static void set_has_numeric_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartGridArchive_GridRow_GridValue::ChartGridArchive_GridRow_GridValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive.GridRow.GridValue)
}
ChartGridArchive_GridRow_GridValue::ChartGridArchive_GridRow_GridValue(const ChartGridArchive_GridRow_GridValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive_GridRow_GridValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numeric_value_){}
    , decltype(_impl_.date_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.numeric_value_, &from._impl_.numeric_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.date_value_) -
    reinterpret_cast<char*>(&_impl_.numeric_value_)) + sizeof(_impl_.date_value_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive.GridRow.GridValue)
}

inline void ChartGridArchive_GridRow_GridValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numeric_value_){0}
    , decltype(_impl_.date_value_){0}
  };
}

ChartGridArchive_GridRow_GridValue::~ChartGridArchive_GridRow_GridValue() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive.GridRow.GridValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive_GridRow_GridValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChartGridArchive_GridRow_GridValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive_GridRow_GridValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive.GridRow.GridValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.numeric_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.date_value_) -
        reinterpret_cast<char*>(&_impl_.numeric_value_)) + sizeof(_impl_.date_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_GridRow_GridValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double numeric_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_numeric_value(&has_bits);
          _impl_.numeric_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double date_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_date_value(&has_bits);
          _impl_.date_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive_GridRow_GridValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive.GridRow.GridValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double numeric_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_numeric_value(), target);
  }

  // optional double date_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_date_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive.GridRow.GridValue)
  return target;
}

size_t ChartGridArchive_GridRow_GridValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive.GridRow.GridValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double numeric_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double date_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive_GridRow_GridValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive_GridRow_GridValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive_GridRow_GridValue::GetClassData() const { return &_class_data_; }


void ChartGridArchive_GridRow_GridValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive_GridRow_GridValue*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive_GridRow_GridValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive.GridRow.GridValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.numeric_value_ = from._impl_.numeric_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.date_value_ = from._impl_.date_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive_GridRow_GridValue::CopyFrom(const ChartGridArchive_GridRow_GridValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive.GridRow.GridValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_GridRow_GridValue::IsInitialized() const {
  return true;
}

void ChartGridArchive_GridRow_GridValue::InternalSwap(ChartGridArchive_GridRow_GridValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, _impl_.date_value_)
      + sizeof(ChartGridArchive_GridRow_GridValue::_impl_.date_value_)
      - PROTOBUF_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, _impl_.numeric_value_)>(
          reinterpret_cast<char*>(&_impl_.numeric_value_),
          reinterpret_cast<char*>(&other->_impl_.numeric_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_GridRow_GridValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[3]);
}

// ===================================================================

class ChartGridArchive_GridRow::_Internal {
 public:
};

ChartGridArchive_GridRow::ChartGridArchive_GridRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive.GridRow)
}
ChartGridArchive_GridRow::ChartGridArchive_GridRow(const ChartGridArchive_GridRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive_GridRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive.GridRow)
}

inline void ChartGridArchive_GridRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartGridArchive_GridRow::~ChartGridArchive_GridRow() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive.GridRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive_GridRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void ChartGridArchive_GridRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive_GridRow::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive.GridRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_GridRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive_GridRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive.GridRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive.GridRow)
  return target;
}

size_t ChartGridArchive_GridRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive.GridRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive_GridRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive_GridRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive_GridRow::GetClassData() const { return &_class_data_; }


void ChartGridArchive_GridRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive_GridRow*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive_GridRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive.GridRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive_GridRow::CopyFrom(const ChartGridArchive_GridRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive.GridRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_GridRow::IsInitialized() const {
  return true;
}

void ChartGridArchive_GridRow::InternalSwap(ChartGridArchive_GridRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_GridRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[4]);
}

// ===================================================================

class ChartGridArchive::_Internal {
 public:
};

ChartGridArchive::ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive)
}
ChartGridArchive::ChartGridArchive(const ChartGridArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_name_){from._impl_.row_name_}
    , decltype(_impl_.column_name_){from._impl_.column_name_}
    , decltype(_impl_.grid_row_){from._impl_.grid_row_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive)
}

inline void ChartGridArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_name_){arena}
    , decltype(_impl_.column_name_){arena}
    , decltype(_impl_.grid_row_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartGridArchive::~ChartGridArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_name_.~RepeatedPtrField();
  _impl_.column_name_.~RepeatedPtrField();
  _impl_.grid_row_.~RepeatedPtrField();
}

void ChartGridArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_name_.Clear();
  _impl_.column_name_.Clear();
  _impl_.grid_row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string row_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.ChartGridArchive.row_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.ChartGridArchive.column_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grid_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string row_name = 1;
  for (int i = 0, n = this->_internal_row_name_size(); i < n; i++) {
    const auto& s = this->_internal_row_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.row_name");
    target = stream->WriteString(1, s, target);
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.column_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grid_row_size()); i < n; i++) {
    const auto& repfield = this->_internal_grid_row(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive)
  return target;
}

size_t ChartGridArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string row_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.row_name_.size());
  for (int i = 0, n = _impl_.row_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.row_name_.Get(i));
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_name_.size());
  for (int i = 0, n = _impl_.column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_name_.Get(i));
  }

  // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
  total_size += 1UL * this->_internal_grid_row_size();
  for (const auto& msg : this->_impl_.grid_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive::GetClassData() const { return &_class_data_; }


void ChartGridArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_name_.MergeFrom(from._impl_.row_name_);
  _this->_impl_.column_name_.MergeFrom(from._impl_.column_name_);
  _this->_impl_.grid_row_.MergeFrom(from._impl_.grid_row_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive::CopyFrom(const ChartGridArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive::IsInitialized() const {
  return true;
}

void ChartGridArchive::InternalSwap(ChartGridArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.row_name_.InternalSwap(&other->_impl_.row_name_);
  _impl_.column_name_.InternalSwap(&other->_impl_.column_name_);
  _impl_.grid_row_.InternalSwap(&other->_impl_.grid_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[5]);
}

// ===================================================================

class ChartMediatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartMediatorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& info(const ChartMediatorArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartMediatorArchive::_Internal::info(const ChartMediatorArchive* msg) {
  return *msg->_impl_.info_;
}
void ChartMediatorArchive::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartMediatorArchive::ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartMediatorArchive)
}
ChartMediatorArchive::ChartMediatorArchive(const ChartMediatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartMediatorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_series_indexes_){from._impl_.local_series_indexes_}
    , decltype(_impl_.remote_series_indexes_){from._impl_.remote_series_indexes_}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartMediatorArchive)
}

inline void ChartMediatorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_series_indexes_){arena}
    , decltype(_impl_.remote_series_indexes_){arena}
    , decltype(_impl_.info_){nullptr}
  };
}

ChartMediatorArchive::~ChartMediatorArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartMediatorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartMediatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_series_indexes_.~RepeatedField();
  _impl_.remote_series_indexes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void ChartMediatorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartMediatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartMediatorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_series_indexes_.Clear();
  _impl_.remote_series_indexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMediatorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 local_series_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_local_series_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_local_series_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 remote_series_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remote_series_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_remote_series_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartMediatorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartMediatorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 local_series_indexes = 2;
  for (int i = 0, n = this->_internal_local_series_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_series_indexes(i), target);
  }

  // repeated uint32 remote_series_indexes = 3;
  for (int i = 0, n = this->_internal_remote_series_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remote_series_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartMediatorArchive)
  return target;
}

size_t ChartMediatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartMediatorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 local_series_indexes = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.local_series_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_local_series_indexes_size());
    total_size += data_size;
  }

  // repeated uint32 remote_series_indexes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.remote_series_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_remote_series_indexes_size());
    total_size += data_size;
  }

  // optional .TSP.Reference info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartMediatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartMediatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartMediatorArchive::GetClassData() const { return &_class_data_; }


void ChartMediatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartMediatorArchive*>(&to_msg);
  auto& from = static_cast<const ChartMediatorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartMediatorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_series_indexes_.MergeFrom(from._impl_.local_series_indexes_);
  _this->_impl_.remote_series_indexes_.MergeFrom(from._impl_.remote_series_indexes_);
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartMediatorArchive::CopyFrom(const ChartMediatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartMediatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorArchive::IsInitialized() const {
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorArchive::InternalSwap(ChartMediatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.local_series_indexes_.InternalSwap(&other->_impl_.local_series_indexes_);
  _impl_.remote_series_indexes_.InternalSwap(&other->_impl_.remote_series_indexes_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMediatorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[6]);
}

// ===================================================================

class ChartStylePreset::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStylePreset>()._impl_._has_bits_);
  static const ::TSP::Reference& chart_style(const ChartStylePreset* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& legend_style(const ChartStylePreset* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartStylePreset::_Internal::chart_style(const ChartStylePreset* msg) {
  return *msg->_impl_.chart_style_;
}
const ::TSP::Reference&
ChartStylePreset::_Internal::legend_style(const ChartStylePreset* msg) {
  return *msg->_impl_.legend_style_;
}
void ChartStylePreset::clear_chart_style() {
  if (_impl_.chart_style_ != nullptr) _impl_.chart_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartStylePreset::clear_legend_style() {
  if (_impl_.legend_style_ != nullptr) _impl_.legend_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartStylePreset::clear_value_axis_styles() {
  _impl_.value_axis_styles_.Clear();
}
void ChartStylePreset::clear_category_axis_styles() {
  _impl_.category_axis_styles_.Clear();
}
void ChartStylePreset::clear_series_styles() {
  _impl_.series_styles_.Clear();
}
void ChartStylePreset::clear_paragraph_styles() {
  _impl_.paragraph_styles_.Clear();
}
ChartStylePreset::ChartStylePreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartStylePreset)
}
ChartStylePreset::ChartStylePreset(const ChartStylePreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartStylePreset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){from._impl_.value_axis_styles_}
    , decltype(_impl_.category_axis_styles_){from._impl_.category_axis_styles_}
    , decltype(_impl_.series_styles_){from._impl_.series_styles_}
    , decltype(_impl_.paragraph_styles_){from._impl_.paragraph_styles_}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chart_style()) {
    _this->_impl_.chart_style_ = new ::TSP::Reference(*from._impl_.chart_style_);
  }
  if (from._internal_has_legend_style()) {
    _this->_impl_.legend_style_ = new ::TSP::Reference(*from._impl_.legend_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartStylePreset)
}

inline void ChartStylePreset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){arena}
    , decltype(_impl_.category_axis_styles_){arena}
    , decltype(_impl_.series_styles_){arena}
    , decltype(_impl_.paragraph_styles_){arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartStylePreset::~ChartStylePreset() {
  // @@protoc_insertion_point(destructor:TSCH.ChartStylePreset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartStylePreset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_axis_styles_.~RepeatedPtrField();
  _impl_.category_axis_styles_.~RepeatedPtrField();
  _impl_.series_styles_.~RepeatedPtrField();
  _impl_.paragraph_styles_.~RepeatedPtrField();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chart_style_;
  if (this != internal_default_instance()) delete _impl_.legend_style_;
}

void ChartStylePreset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartStylePreset::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartStylePreset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_axis_styles_.Clear();
  _impl_.category_axis_styles_.Clear();
  _impl_.series_styles_.Clear();
  _impl_.paragraph_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chart_style_ != nullptr);
      _impl_.chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.legend_style_ != nullptr);
      _impl_.legend_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStylePreset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartStylePreset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartStylePreset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart_style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart_style(this),
        _Internal::chart_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_style = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::legend_style(this),
        _Internal::legend_style(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference series_styles = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_series_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes uuid = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartStylePreset)
  return target;
}

size_t ChartStylePreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartStylePreset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 3;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->_impl_.value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->_impl_.category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_styles = 5;
  total_size += 1UL * this->_internal_series_styles_size();
  for (const auto& msg : this->_impl_.series_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  total_size += 1UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->_impl_.paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes uuid = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid());
    }

    // optional .TSP.Reference chart_style = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_style_);
    }

    // optional .TSP.Reference legend_style = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartStylePreset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartStylePreset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartStylePreset::GetClassData() const { return &_class_data_; }


void ChartStylePreset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartStylePreset*>(&to_msg);
  auto& from = static_cast<const ChartStylePreset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartStylePreset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_axis_styles_.MergeFrom(from._impl_.value_axis_styles_);
  _this->_impl_.category_axis_styles_.MergeFrom(from._impl_.category_axis_styles_);
  _this->_impl_.series_styles_.MergeFrom(from._impl_.series_styles_);
  _this->_impl_.paragraph_styles_.MergeFrom(from._impl_.paragraph_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chart_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_legend_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartStylePreset::CopyFrom(const ChartStylePreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartStylePreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStylePreset::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.series_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.paragraph_styles_))
    return false;
  if (_internal_has_chart_style()) {
    if (!_impl_.chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!_impl_.legend_style_->IsInitialized()) return false;
  }
  return true;
}

void ChartStylePreset::InternalSwap(ChartStylePreset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_axis_styles_.InternalSwap(&other->_impl_.value_axis_styles_);
  _impl_.category_axis_styles_.InternalSwap(&other->_impl_.category_axis_styles_);
  _impl_.series_styles_.InternalSwap(&other->_impl_.series_styles_);
  _impl_.paragraph_styles_.InternalSwap(&other->_impl_.paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStylePreset, _impl_.legend_style_)
      + sizeof(ChartStylePreset::_impl_.legend_style_)
      - PROTOBUF_FIELD_OFFSET(ChartStylePreset, _impl_.chart_style_)>(
          reinterpret_cast<char*>(&_impl_.chart_style_),
          reinterpret_cast<char*>(&other->_impl_.chart_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStylePreset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[7]);
}

// ===================================================================

class ChartPresetsArchive::_Internal {
 public:
};

void ChartPresetsArchive::clear_chart_presets() {
  _impl_.chart_presets_.Clear();
}
ChartPresetsArchive::ChartPresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPresetsArchive)
}
ChartPresetsArchive::ChartPresetsArchive(const ChartPresetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartPresetsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chart_presets_){from._impl_.chart_presets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPresetsArchive)
}

inline void ChartPresetsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chart_presets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartPresetsArchive::~ChartPresetsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartPresetsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartPresetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chart_presets_.~RepeatedPtrField();
}

void ChartPresetsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartPresetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartPresetsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chart_presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartPresetsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference chart_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartPresetsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartPresetsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference chart_presets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chart_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_chart_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartPresetsArchive)
  return target;
}

size_t ChartPresetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartPresetsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chart_presets = 1;
  total_size += 1UL * this->_internal_chart_presets_size();
  for (const auto& msg : this->_impl_.chart_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartPresetsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartPresetsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartPresetsArchive::GetClassData() const { return &_class_data_; }


void ChartPresetsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartPresetsArchive*>(&to_msg);
  auto& from = static_cast<const ChartPresetsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartPresetsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chart_presets_.MergeFrom(from._impl_.chart_presets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartPresetsArchive::CopyFrom(const ChartPresetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartPresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPresetsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chart_presets_))
    return false;
  return true;
}

void ChartPresetsArchive::InternalSwap(ChartPresetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chart_presets_.InternalSwap(&other->_impl_.chart_presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartPresetsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[8]);
}

// ===================================================================

class PropertyValueStorageContainerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyValueStorageContainerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& chart_style(const PropertyValueStorageContainerArchive* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& chart_nonstyle(const PropertyValueStorageContainerArchive* msg);
  static void set_has_chart_nonstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& legend_style(const PropertyValueStorageContainerArchive* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& legend_nonstyle(const PropertyValueStorageContainerArchive* msg);
  static void set_has_legend_nonstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& value_axis_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_value_axis_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& value_axis_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_value_axis_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& category_axis_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_category_axis_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& category_axis_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_category_axis_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& series_theme_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_theme_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& series_private_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& series_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::SparseReferenceArrayArchive& paragraph_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_paragraph_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::chart_style(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.chart_style_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::chart_nonstyle(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.chart_nonstyle_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::legend_style(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.legend_style_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::legend_nonstyle(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.legend_nonstyle_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::value_axis_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.value_axis_styles_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::value_axis_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.value_axis_nonstyles_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::category_axis_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.category_axis_styles_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::category_axis_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.category_axis_nonstyles_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::series_theme_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.series_theme_styles_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::series_private_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.series_private_styles_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::series_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.series_nonstyles_;
}
const ::TSCH::SparseReferenceArrayArchive&
PropertyValueStorageContainerArchive::_Internal::paragraph_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.paragraph_styles_;
}
void PropertyValueStorageContainerArchive::clear_chart_style() {
  if (_impl_.chart_style_ != nullptr) _impl_.chart_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PropertyValueStorageContainerArchive::clear_chart_nonstyle() {
  if (_impl_.chart_nonstyle_ != nullptr) _impl_.chart_nonstyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PropertyValueStorageContainerArchive::clear_legend_style() {
  if (_impl_.legend_style_ != nullptr) _impl_.legend_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PropertyValueStorageContainerArchive::clear_legend_nonstyle() {
  if (_impl_.legend_nonstyle_ != nullptr) _impl_.legend_nonstyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void PropertyValueStorageContainerArchive::clear_value_axis_styles() {
  if (_impl_.value_axis_styles_ != nullptr) _impl_.value_axis_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void PropertyValueStorageContainerArchive::clear_value_axis_nonstyles() {
  if (_impl_.value_axis_nonstyles_ != nullptr) _impl_.value_axis_nonstyles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void PropertyValueStorageContainerArchive::clear_category_axis_styles() {
  if (_impl_.category_axis_styles_ != nullptr) _impl_.category_axis_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void PropertyValueStorageContainerArchive::clear_category_axis_nonstyles() {
  if (_impl_.category_axis_nonstyles_ != nullptr) _impl_.category_axis_nonstyles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void PropertyValueStorageContainerArchive::clear_series_theme_styles() {
  if (_impl_.series_theme_styles_ != nullptr) _impl_.series_theme_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void PropertyValueStorageContainerArchive::clear_series_private_styles() {
  if (_impl_.series_private_styles_ != nullptr) _impl_.series_private_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void PropertyValueStorageContainerArchive::clear_series_nonstyles() {
  if (_impl_.series_nonstyles_ != nullptr) _impl_.series_nonstyles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void PropertyValueStorageContainerArchive::clear_paragraph_styles() {
  if (_impl_.paragraph_styles_ != nullptr) _impl_.paragraph_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PropertyValueStorageContainerArchive)
}
PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(const PropertyValueStorageContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyValueStorageContainerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_nonstyle_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_nonstyle_){nullptr}
    , decltype(_impl_.value_axis_styles_){nullptr}
    , decltype(_impl_.value_axis_nonstyles_){nullptr}
    , decltype(_impl_.category_axis_styles_){nullptr}
    , decltype(_impl_.category_axis_nonstyles_){nullptr}
    , decltype(_impl_.series_theme_styles_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_nonstyles_){nullptr}
    , decltype(_impl_.paragraph_styles_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart_style()) {
    _this->_impl_.chart_style_ = new ::TSP::Reference(*from._impl_.chart_style_);
  }
  if (from._internal_has_chart_nonstyle()) {
    _this->_impl_.chart_nonstyle_ = new ::TSP::Reference(*from._impl_.chart_nonstyle_);
  }
  if (from._internal_has_legend_style()) {
    _this->_impl_.legend_style_ = new ::TSP::Reference(*from._impl_.legend_style_);
  }
  if (from._internal_has_legend_nonstyle()) {
    _this->_impl_.legend_nonstyle_ = new ::TSP::Reference(*from._impl_.legend_nonstyle_);
  }
  if (from._internal_has_value_axis_styles()) {
    _this->_impl_.value_axis_styles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.value_axis_styles_);
  }
  if (from._internal_has_value_axis_nonstyles()) {
    _this->_impl_.value_axis_nonstyles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.value_axis_nonstyles_);
  }
  if (from._internal_has_category_axis_styles()) {
    _this->_impl_.category_axis_styles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.category_axis_styles_);
  }
  if (from._internal_has_category_axis_nonstyles()) {
    _this->_impl_.category_axis_nonstyles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.category_axis_nonstyles_);
  }
  if (from._internal_has_series_theme_styles()) {
    _this->_impl_.series_theme_styles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.series_theme_styles_);
  }
  if (from._internal_has_series_private_styles()) {
    _this->_impl_.series_private_styles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.series_private_styles_);
  }
  if (from._internal_has_series_nonstyles()) {
    _this->_impl_.series_nonstyles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.series_nonstyles_);
  }
  if (from._internal_has_paragraph_styles()) {
    _this->_impl_.paragraph_styles_ = new ::TSCH::SparseReferenceArrayArchive(*from._impl_.paragraph_styles_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PropertyValueStorageContainerArchive)
}

inline void PropertyValueStorageContainerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_nonstyle_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_nonstyle_){nullptr}
    , decltype(_impl_.value_axis_styles_){nullptr}
    , decltype(_impl_.value_axis_nonstyles_){nullptr}
    , decltype(_impl_.category_axis_styles_){nullptr}
    , decltype(_impl_.category_axis_nonstyles_){nullptr}
    , decltype(_impl_.series_theme_styles_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_nonstyles_){nullptr}
    , decltype(_impl_.paragraph_styles_){nullptr}
  };
}

PropertyValueStorageContainerArchive::~PropertyValueStorageContainerArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PropertyValueStorageContainerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyValueStorageContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chart_style_;
  if (this != internal_default_instance()) delete _impl_.chart_nonstyle_;
  if (this != internal_default_instance()) delete _impl_.legend_style_;
  if (this != internal_default_instance()) delete _impl_.legend_nonstyle_;
  if (this != internal_default_instance()) delete _impl_.value_axis_styles_;
  if (this != internal_default_instance()) delete _impl_.value_axis_nonstyles_;
  if (this != internal_default_instance()) delete _impl_.category_axis_styles_;
  if (this != internal_default_instance()) delete _impl_.category_axis_nonstyles_;
  if (this != internal_default_instance()) delete _impl_.series_theme_styles_;
  if (this != internal_default_instance()) delete _impl_.series_private_styles_;
  if (this != internal_default_instance()) delete _impl_.series_nonstyles_;
  if (this != internal_default_instance()) delete _impl_.paragraph_styles_;
}

void PropertyValueStorageContainerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyValueStorageContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PropertyValueStorageContainerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.chart_style_ != nullptr);
      _impl_.chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chart_nonstyle_ != nullptr);
      _impl_.chart_nonstyle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.legend_style_ != nullptr);
      _impl_.legend_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.legend_nonstyle_ != nullptr);
      _impl_.legend_nonstyle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.value_axis_styles_ != nullptr);
      _impl_.value_axis_styles_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.value_axis_nonstyles_ != nullptr);
      _impl_.value_axis_nonstyles_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.category_axis_styles_ != nullptr);
      _impl_.category_axis_styles_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.category_axis_nonstyles_ != nullptr);
      _impl_.category_axis_nonstyles_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.series_theme_styles_ != nullptr);
      _impl_.series_theme_styles_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.series_private_styles_ != nullptr);
      _impl_.series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.series_nonstyles_ != nullptr);
      _impl_.series_nonstyles_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.paragraph_styles_ != nullptr);
      _impl_.paragraph_styles_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyValueStorageContainerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_nonstyle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_nonstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_nonstyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_nonstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_axis_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_axis_nonstyles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_axis_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_axis_nonstyles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_theme_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_nonstyles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyValueStorageContainerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PropertyValueStorageContainerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart_style(this),
        _Internal::chart_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference chart_nonstyle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chart_nonstyle(this),
        _Internal::chart_nonstyle(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::legend_style(this),
        _Internal::legend_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_nonstyle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::legend_nonstyle(this),
        _Internal::legend_nonstyle(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::value_axis_styles(this),
        _Internal::value_axis_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::value_axis_nonstyles(this),
        _Internal::value_axis_nonstyles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::category_axis_styles(this),
        _Internal::category_axis_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::category_axis_nonstyles(this),
        _Internal::category_axis_nonstyles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::series_theme_styles(this),
        _Internal::series_theme_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::series_private_styles(this),
        _Internal::series_private_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::series_nonstyles(this),
        _Internal::series_nonstyles(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::paragraph_styles(this),
        _Internal::paragraph_styles(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PropertyValueStorageContainerArchive)
  return target;
}

size_t PropertyValueStorageContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PropertyValueStorageContainerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference chart_style = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_style_);
    }

    // optional .TSP.Reference chart_nonstyle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_nonstyle_);
    }

    // optional .TSP.Reference legend_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_style_);
    }

    // optional .TSP.Reference legend_nonstyle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_nonstyle_);
    }

    // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_axis_styles_);
    }

    // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_axis_nonstyles_);
    }

    // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_axis_styles_);
    }

    // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_axis_nonstyles_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_theme_styles_);
    }

    // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_private_styles_);
    }

    // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_nonstyles_);
    }

    // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paragraph_styles_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyValueStorageContainerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyValueStorageContainerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyValueStorageContainerArchive::GetClassData() const { return &_class_data_; }


void PropertyValueStorageContainerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyValueStorageContainerArchive*>(&to_msg);
  auto& from = static_cast<const PropertyValueStorageContainerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PropertyValueStorageContainerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chart_nonstyle()->::TSP::Reference::MergeFrom(
          from._internal_chart_nonstyle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_legend_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_legend_nonstyle()->::TSP::Reference::MergeFrom(
          from._internal_legend_nonstyle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_value_axis_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_value_axis_styles());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_value_axis_nonstyles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_value_axis_nonstyles());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_category_axis_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_category_axis_styles());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_category_axis_nonstyles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_category_axis_nonstyles());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_series_theme_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_series_theme_styles());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_series_private_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_series_nonstyles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_series_nonstyles());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_paragraph_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(
          from._internal_paragraph_styles());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyValueStorageContainerArchive::CopyFrom(const PropertyValueStorageContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PropertyValueStorageContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValueStorageContainerArchive::IsInitialized() const {
  if (_internal_has_chart_style()) {
    if (!_impl_.chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_chart_nonstyle()) {
    if (!_impl_.chart_nonstyle_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!_impl_.legend_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_nonstyle()) {
    if (!_impl_.legend_nonstyle_->IsInitialized()) return false;
  }
  if (_internal_has_value_axis_styles()) {
    if (!_impl_.value_axis_styles_->IsInitialized()) return false;
  }
  if (_internal_has_value_axis_nonstyles()) {
    if (!_impl_.value_axis_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_category_axis_styles()) {
    if (!_impl_.category_axis_styles_->IsInitialized()) return false;
  }
  if (_internal_has_category_axis_nonstyles()) {
    if (!_impl_.category_axis_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_series_theme_styles()) {
    if (!_impl_.series_theme_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!_impl_.series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_nonstyles()) {
    if (!_impl_.series_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_paragraph_styles()) {
    if (!_impl_.paragraph_styles_->IsInitialized()) return false;
  }
  return true;
}

void PropertyValueStorageContainerArchive::InternalSwap(PropertyValueStorageContainerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyValueStorageContainerArchive, _impl_.paragraph_styles_)
      + sizeof(PropertyValueStorageContainerArchive::_impl_.paragraph_styles_)
      - PROTOBUF_FIELD_OFFSET(PropertyValueStorageContainerArchive, _impl_.chart_style_)>(
          reinterpret_cast<char*>(&_impl_.chart_style_),
          reinterpret_cast<char*>(&other->_impl_.chart_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyValueStorageContainerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[9]);
}

// ===================================================================

class StylePasteboardDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StylePasteboardDataArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const StylePasteboardDataArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::PropertyValueStorageContainerArchive& style_network(const StylePasteboardDataArchive* msg);
  static void set_has_style_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_copied_from_entire_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSS::StyleArchive&
StylePasteboardDataArchive::_Internal::super(const StylePasteboardDataArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCH::PropertyValueStorageContainerArchive&
StylePasteboardDataArchive::_Internal::style_network(const StylePasteboardDataArchive* msg) {
  return *msg->_impl_.style_network_;
}
void StylePasteboardDataArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StylePasteboardDataArchive::StylePasteboardDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.StylePasteboardDataArchive)
}
StylePasteboardDataArchive::StylePasteboardDataArchive(const StylePasteboardDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StylePasteboardDataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.style_network_){nullptr}
    , decltype(_impl_.copied_from_entire_chart_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_style_network()) {
    _this->_impl_.style_network_ = new ::TSCH::PropertyValueStorageContainerArchive(*from._impl_.style_network_);
  }
  _this->_impl_.copied_from_entire_chart_ = from._impl_.copied_from_entire_chart_;
  // @@protoc_insertion_point(copy_constructor:TSCH.StylePasteboardDataArchive)
}

inline void StylePasteboardDataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.style_network_){nullptr}
    , decltype(_impl_.copied_from_entire_chart_){false}
  };
}

StylePasteboardDataArchive::~StylePasteboardDataArchive() {
  // @@protoc_insertion_point(destructor:TSCH.StylePasteboardDataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StylePasteboardDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.style_network_;
}

void StylePasteboardDataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StylePasteboardDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.StylePasteboardDataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.style_network_ != nullptr);
      _impl_.style_network_->Clear();
    }
  }
  _impl_.copied_from_entire_chart_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StylePasteboardDataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_network(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool copied_from_entire_chart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_copied_from_entire_chart(&has_bits);
          _impl_.copied_from_entire_chart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StylePasteboardDataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.StylePasteboardDataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::style_network(this),
        _Internal::style_network(this).GetCachedSize(), target, stream);
  }

  // optional bool copied_from_entire_chart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_copied_from_entire_chart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.StylePasteboardDataArchive)
  return target;
}

size_t StylePasteboardDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.StylePasteboardDataArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSS.StyleArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_network_);
    }

    // optional bool copied_from_entire_chart = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StylePasteboardDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StylePasteboardDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StylePasteboardDataArchive::GetClassData() const { return &_class_data_; }


void StylePasteboardDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StylePasteboardDataArchive*>(&to_msg);
  auto& from = static_cast<const StylePasteboardDataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.StylePasteboardDataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_style_network()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(
          from._internal_style_network());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.copied_from_entire_chart_ = from._impl_.copied_from_entire_chart_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StylePasteboardDataArchive::CopyFrom(const StylePasteboardDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.StylePasteboardDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylePasteboardDataArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_style_network()) {
    if (!_impl_.style_network_->IsInitialized()) return false;
  }
  return true;
}

void StylePasteboardDataArchive::InternalSwap(StylePasteboardDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StylePasteboardDataArchive, _impl_.copied_from_entire_chart_)
      + sizeof(StylePasteboardDataArchive::_impl_.copied_from_entire_chart_)
      - PROTOBUF_FIELD_OFFSET(StylePasteboardDataArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StylePasteboardDataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[10]);
}

// ===================================================================

class ChartSelectionPathTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathTypeArchive>()._impl_._has_bits_);
  static void set_has_path_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathTypeArchive)
}
ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(const ChartSelectionPathTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionPathTypeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_type_){}
    , decltype(_impl_.path_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path_type()) {
    _this->_impl_.path_type_.Set(from._internal_path_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path_name()) {
    _this->_impl_.path_name_.Set(from._internal_path_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathTypeArchive)
}

inline void ChartSelectionPathTypeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_type_){}
    , decltype(_impl_.path_name_){}
  };
  _impl_.path_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartSelectionPathTypeArchive::~ChartSelectionPathTypeArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathTypeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionPathTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_type_.Destroy();
  _impl_.path_name_.Destroy();
}

void ChartSelectionPathTypeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionPathTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathTypeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathTypeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartSelectionPathTypeArchive.path_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string path_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartSelectionPathTypeArchive.path_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionPathTypeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathTypeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_type().data(), static_cast<int>(this->_internal_path_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartSelectionPathTypeArchive.path_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path_type(), target);
  }

  // optional string path_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_name().data(), static_cast<int>(this->_internal_path_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartSelectionPathTypeArchive.path_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathTypeArchive)
  return target;
}

size_t ChartSelectionPathTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathTypeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_type());
    }

    // optional string path_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionPathTypeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionPathTypeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionPathTypeArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionPathTypeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionPathTypeArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionPathTypeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathTypeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path_type(from._internal_path_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path_name(from._internal_path_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionPathTypeArchive::CopyFrom(const ChartSelectionPathTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathTypeArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathTypeArchive::InternalSwap(ChartSelectionPathTypeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_type_, lhs_arena,
      &other->_impl_.path_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_name_, lhs_arena,
      &other->_impl_.path_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathTypeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[11]);
}

// ===================================================================

class ChartAxisIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisIDArchive>()._impl_._has_bits_);
  static void set_has_axis_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartAxisIDArchive::ChartAxisIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisIDArchive)
}
ChartAxisIDArchive::ChartAxisIDArchive(const ChartAxisIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisIDArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_type_){}
    , decltype(_impl_.ordinal_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.axis_type_, &from._impl_.axis_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ordinal_) -
    reinterpret_cast<char*>(&_impl_.axis_type_)) + sizeof(_impl_.ordinal_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisIDArchive)
}

inline void ChartAxisIDArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_type_){0}
    , decltype(_impl_.ordinal_){0u}
  };
}

ChartAxisIDArchive::~ChartAxisIDArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisIDArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChartAxisIDArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisIDArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.axis_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ordinal_) -
        reinterpret_cast<char*>(&_impl_.axis_type_)) + sizeof(_impl_.ordinal_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisIDArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.AxisType axis_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::AxisType_IsValid(val))) {
            _internal_set_axis_type(static_cast<::TSCH::AxisType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ordinal(&has_bits);
          _impl_.ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisIDArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisIDArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.AxisType axis_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_axis_type(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisIDArchive)
  return target;
}

size_t ChartAxisIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisIDArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.AxisType axis_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_axis_type());
    }

    // optional uint32 ordinal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisIDArchive::GetClassData() const { return &_class_data_; }


void ChartAxisIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisIDArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisIDArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisIDArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.axis_type_ = from._impl_.axis_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ordinal_ = from._impl_.ordinal_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisIDArchive::CopyFrom(const ChartAxisIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisIDArchive::IsInitialized() const {
  return true;
}

void ChartAxisIDArchive::InternalSwap(ChartAxisIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisIDArchive, _impl_.ordinal_)
      + sizeof(ChartAxisIDArchive::_impl_.ordinal_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisIDArchive, _impl_.axis_type_)>(
          reinterpret_cast<char*>(&_impl_.axis_type_),
          reinterpret_cast<char*>(&other->_impl_.axis_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisIDArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[12]);
}

// ===================================================================

class ChartSelectionPathArgumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathArgumentArchive>()._impl_._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartSelectionPathArgumentArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartSelectionPathArgumentArchive::_Internal::axis_id(const ChartSelectionPathArgumentArchive* msg) {
  return *msg->_impl_.axis_id_;
}
ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathArgumentArchive)
}
ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(const ChartSelectionPathArgumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionPathArgumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_id_){nullptr}
    , decltype(_impl_.number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    _this->_impl_.axis_id_ = new ::TSCH::ChartAxisIDArchive(*from._impl_.axis_id_);
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathArgumentArchive)
}

inline void ChartSelectionPathArgumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_id_){nullptr}
    , decltype(_impl_.number_){0u}
  };
}

ChartSelectionPathArgumentArchive::~ChartSelectionPathArgumentArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathArgumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionPathArgumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.axis_id_;
}

void ChartSelectionPathArgumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionPathArgumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathArgumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.axis_id_ != nullptr);
    _impl_.axis_id_->Clear();
  }
  _impl_.number_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathArgumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartAxisIDArchive axis_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionPathArgumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathArgumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::axis_id(this),
        _Internal::axis_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathArgumentArchive)
  return target;
}

size_t ChartSelectionPathArgumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathArgumentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.ChartAxisIDArchive axis_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.axis_id_);
    }

    // optional uint32 number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionPathArgumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionPathArgumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionPathArgumentArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionPathArgumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionPathArgumentArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionPathArgumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathArgumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(
          from._internal_axis_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_ = from._impl_.number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionPathArgumentArchive::CopyFrom(const ChartSelectionPathArgumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathArgumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArgumentArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathArgumentArchive::InternalSwap(ChartSelectionPathArgumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionPathArgumentArchive, _impl_.number_)
      + sizeof(ChartSelectionPathArgumentArchive::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionPathArgumentArchive, _impl_.axis_id_)>(
          reinterpret_cast<char*>(&_impl_.axis_id_),
          reinterpret_cast<char*>(&other->_impl_.axis_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathArgumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[13]);
}

// ===================================================================

class ChartSelectionPathArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartSelectionPathTypeArchive& path_type(const ChartSelectionPathArchive* msg);
  static void set_has_path_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::ChartSelectionPathArchive& sub_selection(const ChartSelectionPathArchive* msg);
  static void set_has_sub_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCH::ChartSelectionPathTypeArchive&
ChartSelectionPathArchive::_Internal::path_type(const ChartSelectionPathArchive* msg) {
  return *msg->_impl_.path_type_;
}
const ::TSCH::ChartSelectionPathArchive&
ChartSelectionPathArchive::_Internal::sub_selection(const ChartSelectionPathArchive* msg) {
  return *msg->_impl_.sub_selection_;
}
ChartSelectionPathArchive::ChartSelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathArchive)
}
ChartSelectionPathArchive::ChartSelectionPathArchive(const ChartSelectionPathArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionPathArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.path_type_){nullptr}
    , decltype(_impl_.sub_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_type()) {
    _this->_impl_.path_type_ = new ::TSCH::ChartSelectionPathTypeArchive(*from._impl_.path_type_);
  }
  if (from._internal_has_sub_selection()) {
    _this->_impl_.sub_selection_ = new ::TSCH::ChartSelectionPathArchive(*from._impl_.sub_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathArchive)
}

inline void ChartSelectionPathArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arguments_){arena}
    , decltype(_impl_.path_type_){nullptr}
    , decltype(_impl_.sub_selection_){nullptr}
  };
}

ChartSelectionPathArchive::~ChartSelectionPathArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionPathArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.path_type_;
  if (this != internal_default_instance()) delete _impl_.sub_selection_;
}

void ChartSelectionPathArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionPathArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.path_type_ != nullptr);
      _impl_.path_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sub_selection_ != nullptr);
      _impl_.sub_selection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionPathArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_type(this),
        _Internal::path_type(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sub_selection(this),
        _Internal::sub_selection(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathArchive)
  return target;
}

size_t ChartSelectionPathArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_type_);
    }

    // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sub_selection_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionPathArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionPathArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionPathArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionPathArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionPathArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionPathArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_path_type()->::TSCH::ChartSelectionPathTypeArchive::MergeFrom(
          from._internal_path_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sub_selection()->::TSCH::ChartSelectionPathArchive::MergeFrom(
          from._internal_sub_selection());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionPathArchive::CopyFrom(const ChartSelectionPathArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathArchive::InternalSwap(ChartSelectionPathArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionPathArchive, _impl_.sub_selection_)
      + sizeof(ChartSelectionPathArchive::_impl_.sub_selection_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionPathArchive, _impl_.path_type_)>(
          reinterpret_cast<char*>(&_impl_.path_type_),
          reinterpret_cast<char*>(&other->_impl_.path_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[14]);
}

// ===================================================================

class ChartSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& chart(const ChartSelectionArchive* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartSelectionArchive::_Internal::chart(const ChartSelectionArchive* msg) {
  return *msg->_impl_.chart_;
}
void ChartSelectionArchive::clear_chart() {
  if (_impl_.chart_ != nullptr) _impl_.chart_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartSelectionArchive::ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionArchive)
}
ChartSelectionArchive::ChartSelectionArchive(const ChartSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){from._impl_.paths_}
    , decltype(_impl_.chart_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart()) {
    _this->_impl_.chart_ = new ::TSP::Reference(*from._impl_.chart_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionArchive)
}

inline void ChartSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){arena}
    , decltype(_impl_.chart_){nullptr}
  };
}

ChartSelectionArchive::~ChartSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paths_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.chart_;
}

void ChartSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.chart_ != nullptr);
    _impl_.chart_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartSelectionPathArchive paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart(this),
        _Internal::chart(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionArchive)
  return target;
}

size_t ChartSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->_impl_.paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference chart = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chart_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  if (from._internal_has_chart()) {
    _this->_internal_mutable_chart()->::TSP::Reference::MergeFrom(
        from._internal_chart());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionArchive::CopyFrom(const ChartSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionArchive::IsInitialized() const {
  if (_internal_has_chart()) {
    if (!_impl_.chart_->IsInitialized()) return false;
  }
  return true;
}

void ChartSelectionArchive::InternalSwap(ChartSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
  swap(_impl_.chart_, other->_impl_.chart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[15]);
}

// ===================================================================

class ChartUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartUIState>()._impl_._has_bits_);
  static const ::TSP::Reference& chart(const ChartUIState* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cde_last_row_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cde_last_col_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cde_last_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cde_last_col_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
ChartUIState::_Internal::chart(const ChartUIState* msg) {
  return *msg->_impl_.chart_;
}
void ChartUIState::clear_chart() {
  if (_impl_.chart_ != nullptr) _impl_.chart_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartUIState::ChartUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartUIState)
}
ChartUIState::ChartUIState(const ChartUIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartUIState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.cde_last_row_selected_){}
    , decltype(_impl_.cde_last_col_selected_){}
    , decltype(_impl_.cde_last_row_count_){}
    , decltype(_impl_.cde_last_col_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart()) {
    _this->_impl_.chart_ = new ::TSP::Reference(*from._impl_.chart_);
  }
  ::memcpy(&_impl_.cde_last_row_selected_, &from._impl_.cde_last_row_selected_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cde_last_col_count_) -
    reinterpret_cast<char*>(&_impl_.cde_last_row_selected_)) + sizeof(_impl_.cde_last_col_count_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartUIState)
}

inline void ChartUIState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.cde_last_row_selected_){0}
    , decltype(_impl_.cde_last_col_selected_){0}
    , decltype(_impl_.cde_last_row_count_){0}
    , decltype(_impl_.cde_last_col_count_){0}
  };
}

ChartUIState::~ChartUIState() {
  // @@protoc_insertion_point(destructor:TSCH.ChartUIState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartUIState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chart_;
}

void ChartUIState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartUIState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.chart_ != nullptr);
    _impl_.chart_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.cde_last_row_selected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cde_last_col_count_) -
        reinterpret_cast<char*>(&_impl_.cde_last_row_selected_)) + sizeof(_impl_.cde_last_col_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartUIState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_row_selected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cde_last_row_selected(&has_bits);
          _impl_.cde_last_row_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_col_selected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cde_last_col_selected(&has_bits);
          _impl_.cde_last_col_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cde_last_row_count(&has_bits);
          _impl_.cde_last_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_col_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cde_last_col_count(&has_bits);
          _impl_.cde_last_col_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartUIState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartUIState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart(this),
        _Internal::chart(this).GetCachedSize(), target, stream);
  }

  // optional int32 cde_last_row_selected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cde_last_row_selected(), target);
  }

  // optional int32 cde_last_col_selected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_cde_last_col_selected(), target);
  }

  // optional int32 cde_last_row_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cde_last_row_count(), target);
  }

  // optional int32 cde_last_col_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cde_last_col_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartUIState)
  return target;
}

size_t ChartUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartUIState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSP.Reference chart = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_);
    }

    // optional int32 cde_last_row_selected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_row_selected());
    }

    // optional int32 cde_last_col_selected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_col_selected());
    }

    // optional int32 cde_last_row_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_row_count());
    }

    // optional int32 cde_last_col_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_col_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartUIState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartUIState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartUIState::GetClassData() const { return &_class_data_; }


void ChartUIState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartUIState*>(&to_msg);
  auto& from = static_cast<const ChartUIState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartUIState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart()->::TSP::Reference::MergeFrom(
          from._internal_chart());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cde_last_row_selected_ = from._impl_.cde_last_row_selected_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cde_last_col_selected_ = from._impl_.cde_last_col_selected_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cde_last_row_count_ = from._impl_.cde_last_row_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cde_last_col_count_ = from._impl_.cde_last_col_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartUIState::CopyFrom(const ChartUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartUIState::IsInitialized() const {
  if (_internal_has_chart()) {
    if (!_impl_.chart_->IsInitialized()) return false;
  }
  return true;
}

void ChartUIState::InternalSwap(ChartUIState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartUIState, _impl_.cde_last_col_count_)
      + sizeof(ChartUIState::_impl_.cde_last_col_count_)
      - PROTOBUF_FIELD_OFFSET(ChartUIState, _impl_.chart_)>(
          reinterpret_cast<char*>(&_impl_.chart_),
          reinterpret_cast<char*>(&other->_impl_.chart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartUIState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[16]);
}

// ===================================================================

class ChartFormatStructExtensions::_Internal {
 public:
};

ChartFormatStructExtensions::ChartFormatStructExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartFormatStructExtensions)
}
ChartFormatStructExtensions::ChartFormatStructExtensions(const ChartFormatStructExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartFormatStructExtensions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartFormatStructExtensions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartFormatStructExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartFormatStructExtensions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartFormatStructExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[17]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartArchive::kUnityFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartDrawableArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartArchive >, 11, false>
  ChartArchive::unity(kUnityFieldNumber, ::TSCH::ChartArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPasteboardAdditionsArchive::kPresetIndexForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  ChartPasteboardAdditionsArchive::preset_index_for_pasteboard(kPresetIndexForPasteboardFieldNumber, 0u, nullptr);
const std::string ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPasteboardAdditionsArchive::kPresetUuidForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  ChartPasteboardAdditionsArchive::preset_uuid_for_pasteboard(kPresetUuidForPasteboardFieldNumber, ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPresetsArchive::kExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetsArchive >, 11, false>
  ChartPresetsArchive::extension(kExtensionFieldNumber, ::TSCH::ChartPresetsArchive::default_instance(), nullptr);
const std::string ChartFormatStructExtensions_prefix_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartFormatStructExtensions::kPrefixFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  ChartFormatStructExtensions::prefix(kPrefixFieldNumber, ChartFormatStructExtensions_prefix_default, nullptr);
const std::string ChartFormatStructExtensions_suffix_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartFormatStructExtensions::kSuffixFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  ChartFormatStructExtensions::suffix(kSuffixFieldNumber, ChartFormatStructExtensions_suffix_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  scene3d_settings_constant_depth(kScene3DSettingsConstantDepthFieldNumber, false, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::ChartDrawableArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartDrawableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartDrawableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPasteboardAdditionsArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartPasteboardAdditionsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPasteboardAdditionsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive_GridRow_GridValue*
Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive_GridRow_GridValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive_GridRow_GridValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive_GridRow*
Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive_GridRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive_GridRow >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartMediatorArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartMediatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartMediatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartStylePreset*
Arena::CreateMaybeMessage< ::TSCH::ChartStylePreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartStylePreset >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPresetsArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartPresetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPresetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PropertyValueStorageContainerArchive*
Arena::CreateMaybeMessage< ::TSCH::PropertyValueStorageContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PropertyValueStorageContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::StylePasteboardDataArchive*
Arena::CreateMaybeMessage< ::TSCH::StylePasteboardDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::StylePasteboardDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathTypeArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisIDArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartAxisIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathArgumentArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathArgumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathArgumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartUIState*
Arena::CreateMaybeMessage< ::TSCH::ChartUIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartUIState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartFormatStructExtensions*
Arena::CreateMaybeMessage< ::TSCH::ChartFormatStructExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartFormatStructExtensions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
