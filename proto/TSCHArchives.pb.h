// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCHArchives.GEN.pb.h"
#include "TSCH3DArchives.pb.h"
#include "TSCHPreUFFArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCHArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCHArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHArchives_2eproto;
namespace TSCH {
class ChartArchive;
struct ChartArchiveDefaultTypeInternal;
extern ChartArchiveDefaultTypeInternal _ChartArchive_default_instance_;
class ChartAxisIDArchive;
struct ChartAxisIDArchiveDefaultTypeInternal;
extern ChartAxisIDArchiveDefaultTypeInternal _ChartAxisIDArchive_default_instance_;
class ChartDrawableArchive;
struct ChartDrawableArchiveDefaultTypeInternal;
extern ChartDrawableArchiveDefaultTypeInternal _ChartDrawableArchive_default_instance_;
class ChartFormatStructExtensions;
struct ChartFormatStructExtensionsDefaultTypeInternal;
extern ChartFormatStructExtensionsDefaultTypeInternal _ChartFormatStructExtensions_default_instance_;
class ChartGridArchive;
struct ChartGridArchiveDefaultTypeInternal;
extern ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
class ChartGridArchive_GridRow;
struct ChartGridArchive_GridRowDefaultTypeInternal;
extern ChartGridArchive_GridRowDefaultTypeInternal _ChartGridArchive_GridRow_default_instance_;
class ChartGridArchive_GridRow_GridValue;
struct ChartGridArchive_GridRow_GridValueDefaultTypeInternal;
extern ChartGridArchive_GridRow_GridValueDefaultTypeInternal _ChartGridArchive_GridRow_GridValue_default_instance_;
class ChartMediatorArchive;
struct ChartMediatorArchiveDefaultTypeInternal;
extern ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
class ChartPasteboardAdditionsArchive;
struct ChartPasteboardAdditionsArchiveDefaultTypeInternal;
extern ChartPasteboardAdditionsArchiveDefaultTypeInternal _ChartPasteboardAdditionsArchive_default_instance_;
class ChartPresetsArchive;
struct ChartPresetsArchiveDefaultTypeInternal;
extern ChartPresetsArchiveDefaultTypeInternal _ChartPresetsArchive_default_instance_;
class ChartSelectionArchive;
struct ChartSelectionArchiveDefaultTypeInternal;
extern ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
class ChartSelectionPathArchive;
struct ChartSelectionPathArchiveDefaultTypeInternal;
extern ChartSelectionPathArchiveDefaultTypeInternal _ChartSelectionPathArchive_default_instance_;
class ChartSelectionPathArgumentArchive;
struct ChartSelectionPathArgumentArchiveDefaultTypeInternal;
extern ChartSelectionPathArgumentArchiveDefaultTypeInternal _ChartSelectionPathArgumentArchive_default_instance_;
class ChartSelectionPathTypeArchive;
struct ChartSelectionPathTypeArchiveDefaultTypeInternal;
extern ChartSelectionPathTypeArchiveDefaultTypeInternal _ChartSelectionPathTypeArchive_default_instance_;
class ChartStylePreset;
struct ChartStylePresetDefaultTypeInternal;
extern ChartStylePresetDefaultTypeInternal _ChartStylePreset_default_instance_;
class ChartUIState;
struct ChartUIStateDefaultTypeInternal;
extern ChartUIStateDefaultTypeInternal _ChartUIState_default_instance_;
class PropertyValueStorageContainerArchive;
struct PropertyValueStorageContainerArchiveDefaultTypeInternal;
extern PropertyValueStorageContainerArchiveDefaultTypeInternal _PropertyValueStorageContainerArchive_default_instance_;
class StylePasteboardDataArchive;
struct StylePasteboardDataArchiveDefaultTypeInternal;
extern StylePasteboardDataArchiveDefaultTypeInternal _StylePasteboardDataArchive_default_instance_;
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::ChartArchive* Arena::CreateMaybeMessage<::TSCH::ChartArchive>(Arena*);
template<> ::TSCH::ChartAxisIDArchive* Arena::CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(Arena*);
template<> ::TSCH::ChartDrawableArchive* Arena::CreateMaybeMessage<::TSCH::ChartDrawableArchive>(Arena*);
template<> ::TSCH::ChartFormatStructExtensions* Arena::CreateMaybeMessage<::TSCH::ChartFormatStructExtensions>(Arena*);
template<> ::TSCH::ChartGridArchive* Arena::CreateMaybeMessage<::TSCH::ChartGridArchive>(Arena*);
template<> ::TSCH::ChartGridArchive_GridRow* Arena::CreateMaybeMessage<::TSCH::ChartGridArchive_GridRow>(Arena*);
template<> ::TSCH::ChartGridArchive_GridRow_GridValue* Arena::CreateMaybeMessage<::TSCH::ChartGridArchive_GridRow_GridValue>(Arena*);
template<> ::TSCH::ChartMediatorArchive* Arena::CreateMaybeMessage<::TSCH::ChartMediatorArchive>(Arena*);
template<> ::TSCH::ChartPasteboardAdditionsArchive* Arena::CreateMaybeMessage<::TSCH::ChartPasteboardAdditionsArchive>(Arena*);
template<> ::TSCH::ChartPresetsArchive* Arena::CreateMaybeMessage<::TSCH::ChartPresetsArchive>(Arena*);
template<> ::TSCH::ChartSelectionArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionArchive>(Arena*);
template<> ::TSCH::ChartSelectionPathArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionPathArchive>(Arena*);
template<> ::TSCH::ChartSelectionPathArgumentArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionPathArgumentArchive>(Arena*);
template<> ::TSCH::ChartSelectionPathTypeArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionPathTypeArchive>(Arena*);
template<> ::TSCH::ChartStylePreset* Arena::CreateMaybeMessage<::TSCH::ChartStylePreset>(Arena*);
template<> ::TSCH::ChartUIState* Arena::CreateMaybeMessage<::TSCH::ChartUIState>(Arena*);
template<> ::TSCH::PropertyValueStorageContainerArchive* Arena::CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(Arena*);
template<> ::TSCH::StylePasteboardDataArchive* Arena::CreateMaybeMessage<::TSCH::StylePasteboardDataArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {

// ===================================================================

class ChartDrawableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartDrawableArchive) */ {
 public:
  inline ChartDrawableArchive() : ChartDrawableArchive(nullptr) {}
  ~ChartDrawableArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartDrawableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartDrawableArchive(const ChartDrawableArchive& from);
  ChartDrawableArchive(ChartDrawableArchive&& from) noexcept
    : ChartDrawableArchive() {
    *this = ::std::move(from);
  }

  inline ChartDrawableArchive& operator=(const ChartDrawableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartDrawableArchive& operator=(ChartDrawableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartDrawableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartDrawableArchive* internal_default_instance() {
    return reinterpret_cast<const ChartDrawableArchive*>(
               &_ChartDrawableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChartDrawableArchive& a, ChartDrawableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartDrawableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartDrawableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartDrawableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartDrawableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartDrawableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartDrawableArchive& from) {
    ChartDrawableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartDrawableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartDrawableArchive";
  }
  protected:
  explicit ChartDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // optional .TSD.DrawableArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::DrawableArchive* release_super();
  ::TSD::DrawableArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableArchive* super);
  private:
  const ::TSD::DrawableArchive& _internal_super() const;
  ::TSD::DrawableArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableArchive* super);
  ::TSD::DrawableArchive* unsafe_arena_release_super();


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:TSCH.ChartDrawableArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::DrawableArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartArchive) */ {
 public:
  inline ChartArchive() : ChartArchive(nullptr) {}
  ~ChartArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartArchive(const ChartArchive& from);
  ChartArchive(ChartArchive&& from) noexcept
    : ChartArchive() {
    *this = ::std::move(from);
  }

  inline ChartArchive& operator=(const ChartArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartArchive& operator=(ChartArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartArchive* internal_default_instance() {
    return reinterpret_cast<const ChartArchive*>(
               &_ChartArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChartArchive& a, ChartArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartArchive& from) {
    ChartArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartArchive";
  }
  protected:
  explicit ChartArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueAxisStylesFieldNumber = 13,
    kValueAxisNonstylesFieldNumber = 14,
    kCategoryAxisStylesFieldNumber = 15,
    kCategoryAxisNonstylesFieldNumber = 16,
    kSeriesThemeStylesFieldNumber = 17,
    kParagraphStylesFieldNumber = 20,
    kLegendFrameFieldNumber = 3,
    kPresetFieldNumber = 4,
    kGridFieldNumber = 7,
    kMediatorFieldNumber = 8,
    kChartStyleFieldNumber = 9,
    kChartNonStyleFieldNumber = 10,
    kLegendStyleFieldNumber = 11,
    kLegendNonStyleFieldNumber = 12,
    kSeriesPrivateStylesFieldNumber = 18,
    kSeriesNonStylesFieldNumber = 19,
    kChartTypeFieldNumber = 1,
    kScatterFormatFieldNumber = 2,
    kSeriesDirectionFieldNumber = 5,
    kContainsDefaultDataFieldNumber = 6,
    kNeedsCalcEngineDeferredImportActionFieldNumber = 22,
    kMultidatasetIndexFieldNumber = 21,
  };
  // repeated .TSP.Reference value_axis_styles = 13;
  int value_axis_styles_size() const;
  private:
  int _internal_value_axis_styles_size() const;
  public:
  void clear_value_axis_styles();
  ::TSP::Reference* mutable_value_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_styles();
  private:
  const ::TSP::Reference& _internal_value_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_styles();
  public:
  const ::TSP::Reference& value_axis_styles(int index) const;
  ::TSP::Reference* add_value_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_styles() const;

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  int value_axis_nonstyles_size() const;
  private:
  int _internal_value_axis_nonstyles_size() const;
  public:
  void clear_value_axis_nonstyles();
  ::TSP::Reference* mutable_value_axis_nonstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_nonstyles();
  private:
  const ::TSP::Reference& _internal_value_axis_nonstyles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_nonstyles();
  public:
  const ::TSP::Reference& value_axis_nonstyles(int index) const;
  ::TSP::Reference* add_value_axis_nonstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_nonstyles() const;

  // repeated .TSP.Reference category_axis_styles = 15;
  int category_axis_styles_size() const;
  private:
  int _internal_category_axis_styles_size() const;
  public:
  void clear_category_axis_styles();
  ::TSP::Reference* mutable_category_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_styles();
  private:
  const ::TSP::Reference& _internal_category_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_styles();
  public:
  const ::TSP::Reference& category_axis_styles(int index) const;
  ::TSP::Reference* add_category_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_styles() const;

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  int category_axis_nonstyles_size() const;
  private:
  int _internal_category_axis_nonstyles_size() const;
  public:
  void clear_category_axis_nonstyles();
  ::TSP::Reference* mutable_category_axis_nonstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_nonstyles();
  private:
  const ::TSP::Reference& _internal_category_axis_nonstyles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_nonstyles();
  public:
  const ::TSP::Reference& category_axis_nonstyles(int index) const;
  ::TSP::Reference* add_category_axis_nonstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_nonstyles() const;

  // repeated .TSP.Reference series_theme_styles = 17;
  int series_theme_styles_size() const;
  private:
  int _internal_series_theme_styles_size() const;
  public:
  void clear_series_theme_styles();
  ::TSP::Reference* mutable_series_theme_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_theme_styles();
  private:
  const ::TSP::Reference& _internal_series_theme_styles(int index) const;
  ::TSP::Reference* _internal_add_series_theme_styles();
  public:
  const ::TSP::Reference& series_theme_styles(int index) const;
  ::TSP::Reference* add_series_theme_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      series_theme_styles() const;

  // repeated .TSP.Reference paragraph_styles = 20;
  int paragraph_styles_size() const;
  private:
  int _internal_paragraph_styles_size() const;
  public:
  void clear_paragraph_styles();
  ::TSP::Reference* mutable_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_paragraph_styles();
  public:
  const ::TSP::Reference& paragraph_styles(int index) const;
  ::TSP::Reference* add_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;

  // optional .TSCH.RectArchive legend_frame = 3;
  bool has_legend_frame() const;
  private:
  bool _internal_has_legend_frame() const;
  public:
  void clear_legend_frame();
  const ::TSCH::RectArchive& legend_frame() const;
  PROTOBUF_NODISCARD ::TSCH::RectArchive* release_legend_frame();
  ::TSCH::RectArchive* mutable_legend_frame();
  void set_allocated_legend_frame(::TSCH::RectArchive* legend_frame);
  private:
  const ::TSCH::RectArchive& _internal_legend_frame() const;
  ::TSCH::RectArchive* _internal_mutable_legend_frame();
  public:
  void unsafe_arena_set_allocated_legend_frame(
      ::TSCH::RectArchive* legend_frame);
  ::TSCH::RectArchive* unsafe_arena_release_legend_frame();

  // optional .TSP.Reference preset = 4;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional .TSCH.ChartGridArchive grid = 7;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::TSCH::ChartGridArchive& grid() const;
  PROTOBUF_NODISCARD ::TSCH::ChartGridArchive* release_grid();
  ::TSCH::ChartGridArchive* mutable_grid();
  void set_allocated_grid(::TSCH::ChartGridArchive* grid);
  private:
  const ::TSCH::ChartGridArchive& _internal_grid() const;
  ::TSCH::ChartGridArchive* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::TSCH::ChartGridArchive* grid);
  ::TSCH::ChartGridArchive* unsafe_arena_release_grid();

  // optional .TSP.Reference mediator = 8;
  bool has_mediator() const;
  private:
  bool _internal_has_mediator() const;
  public:
  void clear_mediator();
  const ::TSP::Reference& mediator() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_mediator();
  ::TSP::Reference* mutable_mediator();
  void set_allocated_mediator(::TSP::Reference* mediator);
  private:
  const ::TSP::Reference& _internal_mediator() const;
  ::TSP::Reference* _internal_mutable_mediator();
  public:
  void unsafe_arena_set_allocated_mediator(
      ::TSP::Reference* mediator);
  ::TSP::Reference* unsafe_arena_release_mediator();

  // optional .TSP.Reference chart_style = 9;
  bool has_chart_style() const;
  private:
  bool _internal_has_chart_style() const;
  public:
  void clear_chart_style();
  const ::TSP::Reference& chart_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_style();
  ::TSP::Reference* mutable_chart_style();
  void set_allocated_chart_style(::TSP::Reference* chart_style);
  private:
  const ::TSP::Reference& _internal_chart_style() const;
  ::TSP::Reference* _internal_mutable_chart_style();
  public:
  void unsafe_arena_set_allocated_chart_style(
      ::TSP::Reference* chart_style);
  ::TSP::Reference* unsafe_arena_release_chart_style();

  // optional .TSP.Reference chart_non_style = 10;
  bool has_chart_non_style() const;
  private:
  bool _internal_has_chart_non_style() const;
  public:
  void clear_chart_non_style();
  const ::TSP::Reference& chart_non_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_non_style();
  ::TSP::Reference* mutable_chart_non_style();
  void set_allocated_chart_non_style(::TSP::Reference* chart_non_style);
  private:
  const ::TSP::Reference& _internal_chart_non_style() const;
  ::TSP::Reference* _internal_mutable_chart_non_style();
  public:
  void unsafe_arena_set_allocated_chart_non_style(
      ::TSP::Reference* chart_non_style);
  ::TSP::Reference* unsafe_arena_release_chart_non_style();

  // optional .TSP.Reference legend_style = 11;
  bool has_legend_style() const;
  private:
  bool _internal_has_legend_style() const;
  public:
  void clear_legend_style();
  const ::TSP::Reference& legend_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_style();
  ::TSP::Reference* mutable_legend_style();
  void set_allocated_legend_style(::TSP::Reference* legend_style);
  private:
  const ::TSP::Reference& _internal_legend_style() const;
  ::TSP::Reference* _internal_mutable_legend_style();
  public:
  void unsafe_arena_set_allocated_legend_style(
      ::TSP::Reference* legend_style);
  ::TSP::Reference* unsafe_arena_release_legend_style();

  // optional .TSP.Reference legend_non_style = 12;
  bool has_legend_non_style() const;
  private:
  bool _internal_has_legend_non_style() const;
  public:
  void clear_legend_non_style();
  const ::TSP::Reference& legend_non_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_non_style();
  ::TSP::Reference* mutable_legend_non_style();
  void set_allocated_legend_non_style(::TSP::Reference* legend_non_style);
  private:
  const ::TSP::Reference& _internal_legend_non_style() const;
  ::TSP::Reference* _internal_mutable_legend_non_style();
  public:
  void unsafe_arena_set_allocated_legend_non_style(
      ::TSP::Reference* legend_non_style);
  ::TSP::Reference* unsafe_arena_release_legend_non_style();

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
  bool has_series_private_styles() const;
  private:
  bool _internal_has_series_private_styles() const;
  public:
  void clear_series_private_styles();
  const ::TSCH::SparseReferenceArrayArchive& series_private_styles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_series_private_styles();
  ::TSCH::SparseReferenceArrayArchive* mutable_series_private_styles();
  void set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_series_private_styles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_series_private_styles();
  public:
  void unsafe_arena_set_allocated_series_private_styles(
      ::TSCH::SparseReferenceArrayArchive* series_private_styles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_series_private_styles();

  // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
  bool has_series_non_styles() const;
  private:
  bool _internal_has_series_non_styles() const;
  public:
  void clear_series_non_styles();
  const ::TSCH::SparseReferenceArrayArchive& series_non_styles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_series_non_styles();
  ::TSCH::SparseReferenceArrayArchive* mutable_series_non_styles();
  void set_allocated_series_non_styles(::TSCH::SparseReferenceArrayArchive* series_non_styles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_series_non_styles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_series_non_styles();
  public:
  void unsafe_arena_set_allocated_series_non_styles(
      ::TSCH::SparseReferenceArrayArchive* series_non_styles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_series_non_styles();

  // optional .TSCH.ChartType chart_type = 1;
  bool has_chart_type() const;
  private:
  bool _internal_has_chart_type() const;
  public:
  void clear_chart_type();
  ::TSCH::ChartType chart_type() const;
  void set_chart_type(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_chart_type() const;
  void _internal_set_chart_type(::TSCH::ChartType value);
  public:

  // optional .TSCH.ScatterFormat scatter_format = 2;
  bool has_scatter_format() const;
  private:
  bool _internal_has_scatter_format() const;
  public:
  void clear_scatter_format();
  ::TSCH::ScatterFormat scatter_format() const;
  void set_scatter_format(::TSCH::ScatterFormat value);
  private:
  ::TSCH::ScatterFormat _internal_scatter_format() const;
  void _internal_set_scatter_format(::TSCH::ScatterFormat value);
  public:

  // optional .TSCH.SeriesDirection series_direction = 5;
  bool has_series_direction() const;
  private:
  bool _internal_has_series_direction() const;
  public:
  void clear_series_direction();
  ::TSCH::SeriesDirection series_direction() const;
  void set_series_direction(::TSCH::SeriesDirection value);
  private:
  ::TSCH::SeriesDirection _internal_series_direction() const;
  void _internal_set_series_direction(::TSCH::SeriesDirection value);
  public:

  // optional bool contains_default_data = 6;
  bool has_contains_default_data() const;
  private:
  bool _internal_has_contains_default_data() const;
  public:
  void clear_contains_default_data();
  bool contains_default_data() const;
  void set_contains_default_data(bool value);
  private:
  bool _internal_contains_default_data() const;
  void _internal_set_contains_default_data(bool value);
  public:

  // optional bool needs_calc_engine_deferred_import_action = 22;
  bool has_needs_calc_engine_deferred_import_action() const;
  private:
  bool _internal_has_needs_calc_engine_deferred_import_action() const;
  public:
  void clear_needs_calc_engine_deferred_import_action();
  bool needs_calc_engine_deferred_import_action() const;
  void set_needs_calc_engine_deferred_import_action(bool value);
  private:
  bool _internal_needs_calc_engine_deferred_import_action() const;
  void _internal_set_needs_calc_engine_deferred_import_action(bool value);
  public:

  // optional uint32 multidataset_index = 21;
  bool has_multidataset_index() const;
  private:
  bool _internal_has_multidataset_index() const;
  public:
  void clear_multidataset_index();
  uint32_t multidataset_index() const;
  void set_multidataset_index(uint32_t value);
  private:
  uint32_t _internal_multidataset_index() const;
  void _internal_set_multidataset_index(uint32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  static const int kUnityFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartDrawableArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartArchive >, 11, false >
    unity;
  // @@protoc_insertion_point(class_scope:TSCH.ChartArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_nonstyles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_nonstyles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > series_theme_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
    ::TSCH::RectArchive* legend_frame_;
    ::TSP::Reference* preset_;
    ::TSCH::ChartGridArchive* grid_;
    ::TSP::Reference* mediator_;
    ::TSP::Reference* chart_style_;
    ::TSP::Reference* chart_non_style_;
    ::TSP::Reference* legend_style_;
    ::TSP::Reference* legend_non_style_;
    ::TSCH::SparseReferenceArrayArchive* series_private_styles_;
    ::TSCH::SparseReferenceArrayArchive* series_non_styles_;
    int chart_type_;
    int scatter_format_;
    int series_direction_;
    bool contains_default_data_;
    bool needs_calc_engine_deferred_import_action_;
    uint32_t multidataset_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartPasteboardAdditionsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartPasteboardAdditionsArchive) */ {
 public:
  inline ChartPasteboardAdditionsArchive() : ChartPasteboardAdditionsArchive(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartPasteboardAdditionsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartPasteboardAdditionsArchive(const ChartPasteboardAdditionsArchive& from);
  ChartPasteboardAdditionsArchive(ChartPasteboardAdditionsArchive&& from) noexcept
    : ChartPasteboardAdditionsArchive() {
    *this = ::std::move(from);
  }

  inline ChartPasteboardAdditionsArchive& operator=(const ChartPasteboardAdditionsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartPasteboardAdditionsArchive& operator=(ChartPasteboardAdditionsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartPasteboardAdditionsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartPasteboardAdditionsArchive* internal_default_instance() {
    return reinterpret_cast<const ChartPasteboardAdditionsArchive*>(
               &_ChartPasteboardAdditionsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChartPasteboardAdditionsArchive& a, ChartPasteboardAdditionsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartPasteboardAdditionsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartPasteboardAdditionsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartPasteboardAdditionsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartPasteboardAdditionsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartPasteboardAdditionsArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartPasteboardAdditionsArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartPasteboardAdditionsArchive";
  }
  protected:
  explicit ChartPasteboardAdditionsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kPresetIndexForPasteboardFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
    preset_index_for_pasteboard;
  static const int kPresetUuidForPasteboardFieldNumber = 10001;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
    preset_uuid_for_pasteboard;
  // @@protoc_insertion_point(class_scope:TSCH.ChartPasteboardAdditionsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive_GridRow_GridValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGridArchive.GridRow.GridValue) */ {
 public:
  inline ChartGridArchive_GridRow_GridValue() : ChartGridArchive_GridRow_GridValue(nullptr) {}
  ~ChartGridArchive_GridRow_GridValue() override;
  explicit PROTOBUF_CONSTEXPR ChartGridArchive_GridRow_GridValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive_GridRow_GridValue(const ChartGridArchive_GridRow_GridValue& from);
  ChartGridArchive_GridRow_GridValue(ChartGridArchive_GridRow_GridValue&& from) noexcept
    : ChartGridArchive_GridRow_GridValue() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive_GridRow_GridValue& operator=(const ChartGridArchive_GridRow_GridValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive_GridRow_GridValue& operator=(ChartGridArchive_GridRow_GridValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive_GridRow_GridValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive_GridRow_GridValue* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive_GridRow_GridValue*>(
               &_ChartGridArchive_GridRow_GridValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChartGridArchive_GridRow_GridValue& a, ChartGridArchive_GridRow_GridValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive_GridRow_GridValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive_GridRow_GridValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGridArchive_GridRow_GridValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGridArchive_GridRow_GridValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGridArchive_GridRow_GridValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGridArchive_GridRow_GridValue& from) {
    ChartGridArchive_GridRow_GridValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive_GridRow_GridValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGridArchive.GridRow.GridValue";
  }
  protected:
  explicit ChartGridArchive_GridRow_GridValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumericValueFieldNumber = 1,
    kDateValueFieldNumber = 2,
  };
  // optional double numeric_value = 1;
  bool has_numeric_value() const;
  private:
  bool _internal_has_numeric_value() const;
  public:
  void clear_numeric_value();
  double numeric_value() const;
  void set_numeric_value(double value);
  private:
  double _internal_numeric_value() const;
  void _internal_set_numeric_value(double value);
  public:

  // optional double date_value = 2;
  bool has_date_value() const;
  private:
  bool _internal_has_date_value() const;
  public:
  void clear_date_value();
  double date_value() const;
  void set_date_value(double value);
  private:
  double _internal_date_value() const;
  void _internal_set_date_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.GridRow.GridValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double numeric_value_;
    double date_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive_GridRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGridArchive.GridRow) */ {
 public:
  inline ChartGridArchive_GridRow() : ChartGridArchive_GridRow(nullptr) {}
  ~ChartGridArchive_GridRow() override;
  explicit PROTOBUF_CONSTEXPR ChartGridArchive_GridRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive_GridRow(const ChartGridArchive_GridRow& from);
  ChartGridArchive_GridRow(ChartGridArchive_GridRow&& from) noexcept
    : ChartGridArchive_GridRow() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive_GridRow& operator=(const ChartGridArchive_GridRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive_GridRow& operator=(ChartGridArchive_GridRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive_GridRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive_GridRow* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive_GridRow*>(
               &_ChartGridArchive_GridRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChartGridArchive_GridRow& a, ChartGridArchive_GridRow& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive_GridRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive_GridRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGridArchive_GridRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGridArchive_GridRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGridArchive_GridRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGridArchive_GridRow& from) {
    ChartGridArchive_GridRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive_GridRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGridArchive.GridRow";
  }
  protected:
  explicit ChartGridArchive_GridRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_GridRow_GridValue GridValue;

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::TSCH::ChartGridArchive_GridRow_GridValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >*
      mutable_value();
  private:
  const ::TSCH::ChartGridArchive_GridRow_GridValue& _internal_value(int index) const;
  ::TSCH::ChartGridArchive_GridRow_GridValue* _internal_add_value();
  public:
  const ::TSCH::ChartGridArchive_GridRow_GridValue& value(int index) const;
  ::TSCH::ChartGridArchive_GridRow_GridValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >&
      value() const;

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.GridRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGridArchive) */ {
 public:
  inline ChartGridArchive() : ChartGridArchive(nullptr) {}
  ~ChartGridArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartGridArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive(const ChartGridArchive& from);
  ChartGridArchive(ChartGridArchive&& from) noexcept
    : ChartGridArchive() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive& operator=(const ChartGridArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive& operator=(ChartGridArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive*>(
               &_ChartGridArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChartGridArchive& a, ChartGridArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGridArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGridArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGridArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGridArchive& from) {
    ChartGridArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGridArchive";
  }
  protected:
  explicit ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_GridRow GridRow;

  // accessors -------------------------------------------------------

  enum : int {
    kRowNameFieldNumber = 1,
    kColumnNameFieldNumber = 2,
    kGridRowFieldNumber = 3,
  };
  // repeated string row_name = 1;
  int row_name_size() const;
  private:
  int _internal_row_name_size() const;
  public:
  void clear_row_name();
  const std::string& row_name(int index) const;
  std::string* mutable_row_name(int index);
  void set_row_name(int index, const std::string& value);
  void set_row_name(int index, std::string&& value);
  void set_row_name(int index, const char* value);
  void set_row_name(int index, const char* value, size_t size);
  std::string* add_row_name();
  void add_row_name(const std::string& value);
  void add_row_name(std::string&& value);
  void add_row_name(const char* value);
  void add_row_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_name();
  private:
  const std::string& _internal_row_name(int index) const;
  std::string* _internal_add_row_name();
  public:

  // repeated string column_name = 2;
  int column_name_size() const;
  private:
  int _internal_column_name_size() const;
  public:
  void clear_column_name();
  const std::string& column_name(int index) const;
  std::string* mutable_column_name(int index);
  void set_column_name(int index, const std::string& value);
  void set_column_name(int index, std::string&& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  std::string* add_column_name();
  void add_column_name(const std::string& value);
  void add_column_name(std::string&& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name();
  private:
  const std::string& _internal_column_name(int index) const;
  std::string* _internal_add_column_name();
  public:

  // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
  int grid_row_size() const;
  private:
  int _internal_grid_row_size() const;
  public:
  void clear_grid_row();
  ::TSCH::ChartGridArchive_GridRow* mutable_grid_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >*
      mutable_grid_row();
  private:
  const ::TSCH::ChartGridArchive_GridRow& _internal_grid_row(int index) const;
  ::TSCH::ChartGridArchive_GridRow* _internal_add_grid_row();
  public:
  const ::TSCH::ChartGridArchive_GridRow& grid_row(int index) const;
  ::TSCH::ChartGridArchive_GridRow* add_grid_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >&
      grid_row() const;

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow > grid_row_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartMediatorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartMediatorArchive) */ {
 public:
  inline ChartMediatorArchive() : ChartMediatorArchive(nullptr) {}
  ~ChartMediatorArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartMediatorArchive(const ChartMediatorArchive& from);
  ChartMediatorArchive(ChartMediatorArchive&& from) noexcept
    : ChartMediatorArchive() {
    *this = ::std::move(from);
  }

  inline ChartMediatorArchive& operator=(const ChartMediatorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartMediatorArchive& operator=(ChartMediatorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartMediatorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartMediatorArchive* internal_default_instance() {
    return reinterpret_cast<const ChartMediatorArchive*>(
               &_ChartMediatorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChartMediatorArchive& a, ChartMediatorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartMediatorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartMediatorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartMediatorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartMediatorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartMediatorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartMediatorArchive& from) {
    ChartMediatorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartMediatorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartMediatorArchive";
  }
  protected:
  explicit ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalSeriesIndexesFieldNumber = 2,
    kRemoteSeriesIndexesFieldNumber = 3,
    kInfoFieldNumber = 1,
  };
  // repeated uint32 local_series_indexes = 2;
  int local_series_indexes_size() const;
  private:
  int _internal_local_series_indexes_size() const;
  public:
  void clear_local_series_indexes();
  private:
  uint32_t _internal_local_series_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_local_series_indexes() const;
  void _internal_add_local_series_indexes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_local_series_indexes();
  public:
  uint32_t local_series_indexes(int index) const;
  void set_local_series_indexes(int index, uint32_t value);
  void add_local_series_indexes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      local_series_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_local_series_indexes();

  // repeated uint32 remote_series_indexes = 3;
  int remote_series_indexes_size() const;
  private:
  int _internal_remote_series_indexes_size() const;
  public:
  void clear_remote_series_indexes();
  private:
  uint32_t _internal_remote_series_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_remote_series_indexes() const;
  void _internal_add_remote_series_indexes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_remote_series_indexes();
  public:
  uint32_t remote_series_indexes(int index) const;
  void set_remote_series_indexes(int index, uint32_t value);
  void add_remote_series_indexes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      remote_series_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_remote_series_indexes();

  // optional .TSP.Reference info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:TSCH.ChartMediatorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > local_series_indexes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > remote_series_indexes_;
    ::TSP::Reference* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartStylePreset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartStylePreset) */ {
 public:
  inline ChartStylePreset() : ChartStylePreset(nullptr) {}
  ~ChartStylePreset() override;
  explicit PROTOBUF_CONSTEXPR ChartStylePreset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartStylePreset(const ChartStylePreset& from);
  ChartStylePreset(ChartStylePreset&& from) noexcept
    : ChartStylePreset() {
    *this = ::std::move(from);
  }

  inline ChartStylePreset& operator=(const ChartStylePreset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartStylePreset& operator=(ChartStylePreset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartStylePreset& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartStylePreset* internal_default_instance() {
    return reinterpret_cast<const ChartStylePreset*>(
               &_ChartStylePreset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChartStylePreset& a, ChartStylePreset& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartStylePreset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartStylePreset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartStylePreset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartStylePreset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartStylePreset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartStylePreset& from) {
    ChartStylePreset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartStylePreset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartStylePreset";
  }
  protected:
  explicit ChartStylePreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueAxisStylesFieldNumber = 3,
    kCategoryAxisStylesFieldNumber = 4,
    kSeriesStylesFieldNumber = 5,
    kParagraphStylesFieldNumber = 6,
    kUuidFieldNumber = 7,
    kChartStyleFieldNumber = 1,
    kLegendStyleFieldNumber = 2,
  };
  // repeated .TSP.Reference value_axis_styles = 3;
  int value_axis_styles_size() const;
  private:
  int _internal_value_axis_styles_size() const;
  public:
  void clear_value_axis_styles();
  ::TSP::Reference* mutable_value_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_styles();
  private:
  const ::TSP::Reference& _internal_value_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_styles();
  public:
  const ::TSP::Reference& value_axis_styles(int index) const;
  ::TSP::Reference* add_value_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_styles() const;

  // repeated .TSP.Reference category_axis_styles = 4;
  int category_axis_styles_size() const;
  private:
  int _internal_category_axis_styles_size() const;
  public:
  void clear_category_axis_styles();
  ::TSP::Reference* mutable_category_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_styles();
  private:
  const ::TSP::Reference& _internal_category_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_styles();
  public:
  const ::TSP::Reference& category_axis_styles(int index) const;
  ::TSP::Reference* add_category_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_styles() const;

  // repeated .TSP.Reference series_styles = 5;
  int series_styles_size() const;
  private:
  int _internal_series_styles_size() const;
  public:
  void clear_series_styles();
  ::TSP::Reference* mutable_series_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_styles();
  private:
  const ::TSP::Reference& _internal_series_styles(int index) const;
  ::TSP::Reference* _internal_add_series_styles();
  public:
  const ::TSP::Reference& series_styles(int index) const;
  ::TSP::Reference* add_series_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      series_styles() const;

  // repeated .TSP.Reference paragraph_styles = 6;
  int paragraph_styles_size() const;
  private:
  int _internal_paragraph_styles_size() const;
  public:
  void clear_paragraph_styles();
  ::TSP::Reference* mutable_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_paragraph_styles();
  public:
  const ::TSP::Reference& paragraph_styles(int index) const;
  ::TSP::Reference* add_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;

  // optional bytes uuid = 7;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .TSP.Reference chart_style = 1;
  bool has_chart_style() const;
  private:
  bool _internal_has_chart_style() const;
  public:
  void clear_chart_style();
  const ::TSP::Reference& chart_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_style();
  ::TSP::Reference* mutable_chart_style();
  void set_allocated_chart_style(::TSP::Reference* chart_style);
  private:
  const ::TSP::Reference& _internal_chart_style() const;
  ::TSP::Reference* _internal_mutable_chart_style();
  public:
  void unsafe_arena_set_allocated_chart_style(
      ::TSP::Reference* chart_style);
  ::TSP::Reference* unsafe_arena_release_chart_style();

  // optional .TSP.Reference legend_style = 2;
  bool has_legend_style() const;
  private:
  bool _internal_has_legend_style() const;
  public:
  void clear_legend_style();
  const ::TSP::Reference& legend_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_style();
  ::TSP::Reference* mutable_legend_style();
  void set_allocated_legend_style(::TSP::Reference* legend_style);
  private:
  const ::TSP::Reference& _internal_legend_style() const;
  ::TSP::Reference* _internal_mutable_legend_style();
  public:
  void unsafe_arena_set_allocated_legend_style(
      ::TSP::Reference* legend_style);
  ::TSP::Reference* unsafe_arena_release_legend_style();

  // @@protoc_insertion_point(class_scope:TSCH.ChartStylePreset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > series_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::TSP::Reference* chart_style_;
    ::TSP::Reference* legend_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartPresetsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartPresetsArchive) */ {
 public:
  inline ChartPresetsArchive() : ChartPresetsArchive(nullptr) {}
  ~ChartPresetsArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartPresetsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartPresetsArchive(const ChartPresetsArchive& from);
  ChartPresetsArchive(ChartPresetsArchive&& from) noexcept
    : ChartPresetsArchive() {
    *this = ::std::move(from);
  }

  inline ChartPresetsArchive& operator=(const ChartPresetsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartPresetsArchive& operator=(ChartPresetsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartPresetsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartPresetsArchive* internal_default_instance() {
    return reinterpret_cast<const ChartPresetsArchive*>(
               &_ChartPresetsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChartPresetsArchive& a, ChartPresetsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartPresetsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartPresetsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartPresetsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartPresetsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartPresetsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartPresetsArchive& from) {
    ChartPresetsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartPresetsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartPresetsArchive";
  }
  protected:
  explicit ChartPresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartPresetsFieldNumber = 1,
  };
  // repeated .TSP.Reference chart_presets = 1;
  int chart_presets_size() const;
  private:
  int _internal_chart_presets_size() const;
  public:
  void clear_chart_presets();
  ::TSP::Reference* mutable_chart_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chart_presets();
  private:
  const ::TSP::Reference& _internal_chart_presets(int index) const;
  ::TSP::Reference* _internal_add_chart_presets();
  public:
  const ::TSP::Reference& chart_presets(int index) const;
  ::TSP::Reference* add_chart_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chart_presets() const;

  static const int kExtensionFieldNumber = 120;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetsArchive >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:TSCH.ChartPresetsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chart_presets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class PropertyValueStorageContainerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PropertyValueStorageContainerArchive) */ {
 public:
  inline PropertyValueStorageContainerArchive() : PropertyValueStorageContainerArchive(nullptr) {}
  ~PropertyValueStorageContainerArchive() override;
  explicit PROTOBUF_CONSTEXPR PropertyValueStorageContainerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyValueStorageContainerArchive(const PropertyValueStorageContainerArchive& from);
  PropertyValueStorageContainerArchive(PropertyValueStorageContainerArchive&& from) noexcept
    : PropertyValueStorageContainerArchive() {
    *this = ::std::move(from);
  }

  inline PropertyValueStorageContainerArchive& operator=(const PropertyValueStorageContainerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyValueStorageContainerArchive& operator=(PropertyValueStorageContainerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyValueStorageContainerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyValueStorageContainerArchive* internal_default_instance() {
    return reinterpret_cast<const PropertyValueStorageContainerArchive*>(
               &_PropertyValueStorageContainerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PropertyValueStorageContainerArchive& a, PropertyValueStorageContainerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyValueStorageContainerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyValueStorageContainerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyValueStorageContainerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyValueStorageContainerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyValueStorageContainerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyValueStorageContainerArchive& from) {
    PropertyValueStorageContainerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyValueStorageContainerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PropertyValueStorageContainerArchive";
  }
  protected:
  explicit PropertyValueStorageContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartStyleFieldNumber = 1,
    kChartNonstyleFieldNumber = 2,
    kLegendStyleFieldNumber = 3,
    kLegendNonstyleFieldNumber = 4,
    kValueAxisStylesFieldNumber = 5,
    kValueAxisNonstylesFieldNumber = 6,
    kCategoryAxisStylesFieldNumber = 7,
    kCategoryAxisNonstylesFieldNumber = 8,
    kSeriesThemeStylesFieldNumber = 9,
    kSeriesPrivateStylesFieldNumber = 10,
    kSeriesNonstylesFieldNumber = 11,
    kParagraphStylesFieldNumber = 12,
  };
  // optional .TSP.Reference chart_style = 1;
  bool has_chart_style() const;
  private:
  bool _internal_has_chart_style() const;
  public:
  void clear_chart_style();
  const ::TSP::Reference& chart_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_style();
  ::TSP::Reference* mutable_chart_style();
  void set_allocated_chart_style(::TSP::Reference* chart_style);
  private:
  const ::TSP::Reference& _internal_chart_style() const;
  ::TSP::Reference* _internal_mutable_chart_style();
  public:
  void unsafe_arena_set_allocated_chart_style(
      ::TSP::Reference* chart_style);
  ::TSP::Reference* unsafe_arena_release_chart_style();

  // optional .TSP.Reference chart_nonstyle = 2;
  bool has_chart_nonstyle() const;
  private:
  bool _internal_has_chart_nonstyle() const;
  public:
  void clear_chart_nonstyle();
  const ::TSP::Reference& chart_nonstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_nonstyle();
  ::TSP::Reference* mutable_chart_nonstyle();
  void set_allocated_chart_nonstyle(::TSP::Reference* chart_nonstyle);
  private:
  const ::TSP::Reference& _internal_chart_nonstyle() const;
  ::TSP::Reference* _internal_mutable_chart_nonstyle();
  public:
  void unsafe_arena_set_allocated_chart_nonstyle(
      ::TSP::Reference* chart_nonstyle);
  ::TSP::Reference* unsafe_arena_release_chart_nonstyle();

  // optional .TSP.Reference legend_style = 3;
  bool has_legend_style() const;
  private:
  bool _internal_has_legend_style() const;
  public:
  void clear_legend_style();
  const ::TSP::Reference& legend_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_style();
  ::TSP::Reference* mutable_legend_style();
  void set_allocated_legend_style(::TSP::Reference* legend_style);
  private:
  const ::TSP::Reference& _internal_legend_style() const;
  ::TSP::Reference* _internal_mutable_legend_style();
  public:
  void unsafe_arena_set_allocated_legend_style(
      ::TSP::Reference* legend_style);
  ::TSP::Reference* unsafe_arena_release_legend_style();

  // optional .TSP.Reference legend_nonstyle = 4;
  bool has_legend_nonstyle() const;
  private:
  bool _internal_has_legend_nonstyle() const;
  public:
  void clear_legend_nonstyle();
  const ::TSP::Reference& legend_nonstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_nonstyle();
  ::TSP::Reference* mutable_legend_nonstyle();
  void set_allocated_legend_nonstyle(::TSP::Reference* legend_nonstyle);
  private:
  const ::TSP::Reference& _internal_legend_nonstyle() const;
  ::TSP::Reference* _internal_mutable_legend_nonstyle();
  public:
  void unsafe_arena_set_allocated_legend_nonstyle(
      ::TSP::Reference* legend_nonstyle);
  ::TSP::Reference* unsafe_arena_release_legend_nonstyle();

  // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
  bool has_value_axis_styles() const;
  private:
  bool _internal_has_value_axis_styles() const;
  public:
  void clear_value_axis_styles();
  const ::TSCH::SparseReferenceArrayArchive& value_axis_styles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_value_axis_styles();
  ::TSCH::SparseReferenceArrayArchive* mutable_value_axis_styles();
  void set_allocated_value_axis_styles(::TSCH::SparseReferenceArrayArchive* value_axis_styles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_value_axis_styles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_value_axis_styles();
  public:
  void unsafe_arena_set_allocated_value_axis_styles(
      ::TSCH::SparseReferenceArrayArchive* value_axis_styles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_value_axis_styles();

  // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
  bool has_value_axis_nonstyles() const;
  private:
  bool _internal_has_value_axis_nonstyles() const;
  public:
  void clear_value_axis_nonstyles();
  const ::TSCH::SparseReferenceArrayArchive& value_axis_nonstyles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_value_axis_nonstyles();
  ::TSCH::SparseReferenceArrayArchive* mutable_value_axis_nonstyles();
  void set_allocated_value_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_value_axis_nonstyles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_value_axis_nonstyles();
  public:
  void unsafe_arena_set_allocated_value_axis_nonstyles(
      ::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_value_axis_nonstyles();

  // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
  bool has_category_axis_styles() const;
  private:
  bool _internal_has_category_axis_styles() const;
  public:
  void clear_category_axis_styles();
  const ::TSCH::SparseReferenceArrayArchive& category_axis_styles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_category_axis_styles();
  ::TSCH::SparseReferenceArrayArchive* mutable_category_axis_styles();
  void set_allocated_category_axis_styles(::TSCH::SparseReferenceArrayArchive* category_axis_styles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_category_axis_styles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_category_axis_styles();
  public:
  void unsafe_arena_set_allocated_category_axis_styles(
      ::TSCH::SparseReferenceArrayArchive* category_axis_styles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_category_axis_styles();

  // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
  bool has_category_axis_nonstyles() const;
  private:
  bool _internal_has_category_axis_nonstyles() const;
  public:
  void clear_category_axis_nonstyles();
  const ::TSCH::SparseReferenceArrayArchive& category_axis_nonstyles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_category_axis_nonstyles();
  ::TSCH::SparseReferenceArrayArchive* mutable_category_axis_nonstyles();
  void set_allocated_category_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_category_axis_nonstyles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_category_axis_nonstyles();
  public:
  void unsafe_arena_set_allocated_category_axis_nonstyles(
      ::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_category_axis_nonstyles();

  // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
  bool has_series_theme_styles() const;
  private:
  bool _internal_has_series_theme_styles() const;
  public:
  void clear_series_theme_styles();
  const ::TSCH::SparseReferenceArrayArchive& series_theme_styles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_series_theme_styles();
  ::TSCH::SparseReferenceArrayArchive* mutable_series_theme_styles();
  void set_allocated_series_theme_styles(::TSCH::SparseReferenceArrayArchive* series_theme_styles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_series_theme_styles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_series_theme_styles();
  public:
  void unsafe_arena_set_allocated_series_theme_styles(
      ::TSCH::SparseReferenceArrayArchive* series_theme_styles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_series_theme_styles();

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
  bool has_series_private_styles() const;
  private:
  bool _internal_has_series_private_styles() const;
  public:
  void clear_series_private_styles();
  const ::TSCH::SparseReferenceArrayArchive& series_private_styles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_series_private_styles();
  ::TSCH::SparseReferenceArrayArchive* mutable_series_private_styles();
  void set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_series_private_styles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_series_private_styles();
  public:
  void unsafe_arena_set_allocated_series_private_styles(
      ::TSCH::SparseReferenceArrayArchive* series_private_styles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_series_private_styles();

  // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
  bool has_series_nonstyles() const;
  private:
  bool _internal_has_series_nonstyles() const;
  public:
  void clear_series_nonstyles();
  const ::TSCH::SparseReferenceArrayArchive& series_nonstyles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_series_nonstyles();
  ::TSCH::SparseReferenceArrayArchive* mutable_series_nonstyles();
  void set_allocated_series_nonstyles(::TSCH::SparseReferenceArrayArchive* series_nonstyles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_series_nonstyles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_series_nonstyles();
  public:
  void unsafe_arena_set_allocated_series_nonstyles(
      ::TSCH::SparseReferenceArrayArchive* series_nonstyles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_series_nonstyles();

  // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
  bool has_paragraph_styles() const;
  private:
  bool _internal_has_paragraph_styles() const;
  public:
  void clear_paragraph_styles();
  const ::TSCH::SparseReferenceArrayArchive& paragraph_styles() const;
  PROTOBUF_NODISCARD ::TSCH::SparseReferenceArrayArchive* release_paragraph_styles();
  ::TSCH::SparseReferenceArrayArchive* mutable_paragraph_styles();
  void set_allocated_paragraph_styles(::TSCH::SparseReferenceArrayArchive* paragraph_styles);
  private:
  const ::TSCH::SparseReferenceArrayArchive& _internal_paragraph_styles() const;
  ::TSCH::SparseReferenceArrayArchive* _internal_mutable_paragraph_styles();
  public:
  void unsafe_arena_set_allocated_paragraph_styles(
      ::TSCH::SparseReferenceArrayArchive* paragraph_styles);
  ::TSCH::SparseReferenceArrayArchive* unsafe_arena_release_paragraph_styles();

  // @@protoc_insertion_point(class_scope:TSCH.PropertyValueStorageContainerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* chart_style_;
    ::TSP::Reference* chart_nonstyle_;
    ::TSP::Reference* legend_style_;
    ::TSP::Reference* legend_nonstyle_;
    ::TSCH::SparseReferenceArrayArchive* value_axis_styles_;
    ::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles_;
    ::TSCH::SparseReferenceArrayArchive* category_axis_styles_;
    ::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles_;
    ::TSCH::SparseReferenceArrayArchive* series_theme_styles_;
    ::TSCH::SparseReferenceArrayArchive* series_private_styles_;
    ::TSCH::SparseReferenceArrayArchive* series_nonstyles_;
    ::TSCH::SparseReferenceArrayArchive* paragraph_styles_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class StylePasteboardDataArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.StylePasteboardDataArchive) */ {
 public:
  inline StylePasteboardDataArchive() : StylePasteboardDataArchive(nullptr) {}
  ~StylePasteboardDataArchive() override;
  explicit PROTOBUF_CONSTEXPR StylePasteboardDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StylePasteboardDataArchive(const StylePasteboardDataArchive& from);
  StylePasteboardDataArchive(StylePasteboardDataArchive&& from) noexcept
    : StylePasteboardDataArchive() {
    *this = ::std::move(from);
  }

  inline StylePasteboardDataArchive& operator=(const StylePasteboardDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StylePasteboardDataArchive& operator=(StylePasteboardDataArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StylePasteboardDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StylePasteboardDataArchive* internal_default_instance() {
    return reinterpret_cast<const StylePasteboardDataArchive*>(
               &_StylePasteboardDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StylePasteboardDataArchive& a, StylePasteboardDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StylePasteboardDataArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StylePasteboardDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StylePasteboardDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StylePasteboardDataArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StylePasteboardDataArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StylePasteboardDataArchive& from) {
    StylePasteboardDataArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StylePasteboardDataArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.StylePasteboardDataArchive";
  }
  protected:
  explicit StylePasteboardDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStyleNetworkFieldNumber = 2,
    kCopiedFromEntireChartFieldNumber = 3,
  };
  // optional .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  bool has_style_network() const;
  private:
  bool _internal_has_style_network() const;
  public:
  void clear_style_network();
  const ::TSCH::PropertyValueStorageContainerArchive& style_network() const;
  PROTOBUF_NODISCARD ::TSCH::PropertyValueStorageContainerArchive* release_style_network();
  ::TSCH::PropertyValueStorageContainerArchive* mutable_style_network();
  void set_allocated_style_network(::TSCH::PropertyValueStorageContainerArchive* style_network);
  private:
  const ::TSCH::PropertyValueStorageContainerArchive& _internal_style_network() const;
  ::TSCH::PropertyValueStorageContainerArchive* _internal_mutable_style_network();
  public:
  void unsafe_arena_set_allocated_style_network(
      ::TSCH::PropertyValueStorageContainerArchive* style_network);
  ::TSCH::PropertyValueStorageContainerArchive* unsafe_arena_release_style_network();

  // optional bool copied_from_entire_chart = 3;
  bool has_copied_from_entire_chart() const;
  private:
  bool _internal_has_copied_from_entire_chart() const;
  public:
  void clear_copied_from_entire_chart();
  bool copied_from_entire_chart() const;
  void set_copied_from_entire_chart(bool value);
  private:
  bool _internal_copied_from_entire_chart() const;
  void _internal_set_copied_from_entire_chart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.StylePasteboardDataArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::StyleArchive* super_;
    ::TSCH::PropertyValueStorageContainerArchive* style_network_;
    bool copied_from_entire_chart_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionPathTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionPathTypeArchive) */ {
 public:
  inline ChartSelectionPathTypeArchive() : ChartSelectionPathTypeArchive(nullptr) {}
  ~ChartSelectionPathTypeArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionPathTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionPathTypeArchive(const ChartSelectionPathTypeArchive& from);
  ChartSelectionPathTypeArchive(ChartSelectionPathTypeArchive&& from) noexcept
    : ChartSelectionPathTypeArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionPathTypeArchive& operator=(const ChartSelectionPathTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionPathTypeArchive& operator=(ChartSelectionPathTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionPathTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionPathTypeArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionPathTypeArchive*>(
               &_ChartSelectionPathTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChartSelectionPathTypeArchive& a, ChartSelectionPathTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionPathTypeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionPathTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionPathTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionPathTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionPathTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionPathTypeArchive& from) {
    ChartSelectionPathTypeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionPathTypeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionPathTypeArchive";
  }
  protected:
  explicit ChartSelectionPathTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathTypeFieldNumber = 1,
    kPathNameFieldNumber = 2,
  };
  // optional string path_type = 1;
  bool has_path_type() const;
  private:
  bool _internal_has_path_type() const;
  public:
  void clear_path_type();
  const std::string& path_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_type();
  PROTOBUF_NODISCARD std::string* release_path_type();
  void set_allocated_path_type(std::string* path_type);
  private:
  const std::string& _internal_path_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_type(const std::string& value);
  std::string* _internal_mutable_path_type();
  public:

  // optional string path_name = 2;
  bool has_path_name() const;
  private:
  bool _internal_has_path_name() const;
  public:
  void clear_path_name();
  const std::string& path_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_name();
  PROTOBUF_NODISCARD std::string* release_path_name();
  void set_allocated_path_name(std::string* path_name);
  private:
  const std::string& _internal_path_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_name(const std::string& value);
  std::string* _internal_mutable_path_name();
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathTypeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisIDArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartAxisIDArchive) */ {
 public:
  inline ChartAxisIDArchive() : ChartAxisIDArchive(nullptr) {}
  ~ChartAxisIDArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartAxisIDArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisIDArchive(const ChartAxisIDArchive& from);
  ChartAxisIDArchive(ChartAxisIDArchive&& from) noexcept
    : ChartAxisIDArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisIDArchive& operator=(const ChartAxisIDArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisIDArchive& operator=(ChartAxisIDArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisIDArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisIDArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisIDArchive*>(
               &_ChartAxisIDArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChartAxisIDArchive& a, ChartAxisIDArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisIDArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisIDArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartAxisIDArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartAxisIDArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisIDArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartAxisIDArchive& from) {
    ChartAxisIDArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisIDArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartAxisIDArchive";
  }
  protected:
  explicit ChartAxisIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisTypeFieldNumber = 1,
    kOrdinalFieldNumber = 2,
  };
  // optional .TSCH.AxisType axis_type = 1;
  bool has_axis_type() const;
  private:
  bool _internal_has_axis_type() const;
  public:
  void clear_axis_type();
  ::TSCH::AxisType axis_type() const;
  void set_axis_type(::TSCH::AxisType value);
  private:
  ::TSCH::AxisType _internal_axis_type() const;
  void _internal_set_axis_type(::TSCH::AxisType value);
  public:

  // optional uint32 ordinal = 2;
  bool has_ordinal() const;
  private:
  bool _internal_has_ordinal() const;
  public:
  void clear_ordinal();
  uint32_t ordinal() const;
  void set_ordinal(uint32_t value);
  private:
  uint32_t _internal_ordinal() const;
  void _internal_set_ordinal(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartAxisIDArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int axis_type_;
    uint32_t ordinal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionPathArgumentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionPathArgumentArchive) */ {
 public:
  inline ChartSelectionPathArgumentArchive() : ChartSelectionPathArgumentArchive(nullptr) {}
  ~ChartSelectionPathArgumentArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionPathArgumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionPathArgumentArchive(const ChartSelectionPathArgumentArchive& from);
  ChartSelectionPathArgumentArchive(ChartSelectionPathArgumentArchive&& from) noexcept
    : ChartSelectionPathArgumentArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionPathArgumentArchive& operator=(const ChartSelectionPathArgumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionPathArgumentArchive& operator=(ChartSelectionPathArgumentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionPathArgumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionPathArgumentArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionPathArgumentArchive*>(
               &_ChartSelectionPathArgumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ChartSelectionPathArgumentArchive& a, ChartSelectionPathArgumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionPathArgumentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionPathArgumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionPathArgumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionPathArgumentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionPathArgumentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionPathArgumentArchive& from) {
    ChartSelectionPathArgumentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionPathArgumentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionPathArgumentArchive";
  }
  protected:
  explicit ChartSelectionPathArgumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisIdFieldNumber = 2,
    kNumberFieldNumber = 1,
  };
  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  bool has_axis_id() const;
  private:
  bool _internal_has_axis_id() const;
  public:
  void clear_axis_id();
  const ::TSCH::ChartAxisIDArchive& axis_id() const;
  PROTOBUF_NODISCARD ::TSCH::ChartAxisIDArchive* release_axis_id();
  ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);
  private:
  const ::TSCH::ChartAxisIDArchive& _internal_axis_id() const;
  ::TSCH::ChartAxisIDArchive* _internal_mutable_axis_id();
  public:
  void unsafe_arena_set_allocated_axis_id(
      ::TSCH::ChartAxisIDArchive* axis_id);
  ::TSCH::ChartAxisIDArchive* unsafe_arena_release_axis_id();

  // optional uint32 number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathArgumentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartAxisIDArchive* axis_id_;
    uint32_t number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionPathArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionPathArchive) */ {
 public:
  inline ChartSelectionPathArchive() : ChartSelectionPathArchive(nullptr) {}
  ~ChartSelectionPathArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionPathArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionPathArchive(const ChartSelectionPathArchive& from);
  ChartSelectionPathArchive(ChartSelectionPathArchive&& from) noexcept
    : ChartSelectionPathArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionPathArchive& operator=(const ChartSelectionPathArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionPathArchive& operator=(ChartSelectionPathArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionPathArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionPathArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionPathArchive*>(
               &_ChartSelectionPathArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChartSelectionPathArchive& a, ChartSelectionPathArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionPathArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionPathArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionPathArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionPathArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionPathArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionPathArchive& from) {
    ChartSelectionPathArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionPathArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionPathArchive";
  }
  protected:
  explicit ChartSelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 3,
    kPathTypeFieldNumber = 1,
    kSubSelectionFieldNumber = 2,
  };
  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::TSCH::ChartSelectionPathArgumentArchive* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >*
      mutable_arguments();
  private:
  const ::TSCH::ChartSelectionPathArgumentArchive& _internal_arguments(int index) const;
  ::TSCH::ChartSelectionPathArgumentArchive* _internal_add_arguments();
  public:
  const ::TSCH::ChartSelectionPathArgumentArchive& arguments(int index) const;
  ::TSCH::ChartSelectionPathArgumentArchive* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >&
      arguments() const;

  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  bool has_path_type() const;
  private:
  bool _internal_has_path_type() const;
  public:
  void clear_path_type();
  const ::TSCH::ChartSelectionPathTypeArchive& path_type() const;
  PROTOBUF_NODISCARD ::TSCH::ChartSelectionPathTypeArchive* release_path_type();
  ::TSCH::ChartSelectionPathTypeArchive* mutable_path_type();
  void set_allocated_path_type(::TSCH::ChartSelectionPathTypeArchive* path_type);
  private:
  const ::TSCH::ChartSelectionPathTypeArchive& _internal_path_type() const;
  ::TSCH::ChartSelectionPathTypeArchive* _internal_mutable_path_type();
  public:
  void unsafe_arena_set_allocated_path_type(
      ::TSCH::ChartSelectionPathTypeArchive* path_type);
  ::TSCH::ChartSelectionPathTypeArchive* unsafe_arena_release_path_type();

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  bool has_sub_selection() const;
  private:
  bool _internal_has_sub_selection() const;
  public:
  void clear_sub_selection();
  const ::TSCH::ChartSelectionPathArchive& sub_selection() const;
  PROTOBUF_NODISCARD ::TSCH::ChartSelectionPathArchive* release_sub_selection();
  ::TSCH::ChartSelectionPathArchive* mutable_sub_selection();
  void set_allocated_sub_selection(::TSCH::ChartSelectionPathArchive* sub_selection);
  private:
  const ::TSCH::ChartSelectionPathArchive& _internal_sub_selection() const;
  ::TSCH::ChartSelectionPathArchive* _internal_mutable_sub_selection();
  public:
  void unsafe_arena_set_allocated_sub_selection(
      ::TSCH::ChartSelectionPathArchive* sub_selection);
  ::TSCH::ChartSelectionPathArchive* unsafe_arena_release_sub_selection();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive > arguments_;
    ::TSCH::ChartSelectionPathTypeArchive* path_type_;
    ::TSCH::ChartSelectionPathArchive* sub_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionArchive) */ {
 public:
  inline ChartSelectionArchive() : ChartSelectionArchive(nullptr) {}
  ~ChartSelectionArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionArchive(const ChartSelectionArchive& from);
  ChartSelectionArchive(ChartSelectionArchive&& from) noexcept
    : ChartSelectionArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionArchive& operator=(const ChartSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionArchive& operator=(ChartSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionArchive*>(
               &_ChartSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ChartSelectionArchive& a, ChartSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionArchive& from) {
    ChartSelectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionArchive";
  }
  protected:
  explicit ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kChartFieldNumber = 1,
  };
  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::TSCH::ChartSelectionPathArchive* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
      mutable_paths();
  private:
  const ::TSCH::ChartSelectionPathArchive& _internal_paths(int index) const;
  ::TSCH::ChartSelectionPathArchive* _internal_add_paths();
  public:
  const ::TSCH::ChartSelectionPathArchive& paths(int index) const;
  ::TSCH::ChartSelectionPathArchive* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
      paths() const;

  // optional .TSP.Reference chart = 1;
  bool has_chart() const;
  private:
  bool _internal_has_chart() const;
  public:
  void clear_chart();
  const ::TSP::Reference& chart() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart();
  ::TSP::Reference* mutable_chart();
  void set_allocated_chart(::TSP::Reference* chart);
  private:
  const ::TSP::Reference& _internal_chart() const;
  ::TSP::Reference* _internal_mutable_chart();
  public:
  void unsafe_arena_set_allocated_chart(
      ::TSP::Reference* chart);
  ::TSP::Reference* unsafe_arena_release_chart();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive > paths_;
    ::TSP::Reference* chart_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartUIState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartUIState) */ {
 public:
  inline ChartUIState() : ChartUIState(nullptr) {}
  ~ChartUIState() override;
  explicit PROTOBUF_CONSTEXPR ChartUIState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartUIState(const ChartUIState& from);
  ChartUIState(ChartUIState&& from) noexcept
    : ChartUIState() {
    *this = ::std::move(from);
  }

  inline ChartUIState& operator=(const ChartUIState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartUIState& operator=(ChartUIState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartUIState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartUIState* internal_default_instance() {
    return reinterpret_cast<const ChartUIState*>(
               &_ChartUIState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChartUIState& a, ChartUIState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartUIState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartUIState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartUIState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartUIState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartUIState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartUIState& from) {
    ChartUIState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartUIState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartUIState";
  }
  protected:
  explicit ChartUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartFieldNumber = 1,
    kCdeLastRowSelectedFieldNumber = 2,
    kCdeLastColSelectedFieldNumber = 3,
    kCdeLastRowCountFieldNumber = 4,
    kCdeLastColCountFieldNumber = 5,
  };
  // optional .TSP.Reference chart = 1;
  bool has_chart() const;
  private:
  bool _internal_has_chart() const;
  public:
  void clear_chart();
  const ::TSP::Reference& chart() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart();
  ::TSP::Reference* mutable_chart();
  void set_allocated_chart(::TSP::Reference* chart);
  private:
  const ::TSP::Reference& _internal_chart() const;
  ::TSP::Reference* _internal_mutable_chart();
  public:
  void unsafe_arena_set_allocated_chart(
      ::TSP::Reference* chart);
  ::TSP::Reference* unsafe_arena_release_chart();

  // optional int32 cde_last_row_selected = 2;
  bool has_cde_last_row_selected() const;
  private:
  bool _internal_has_cde_last_row_selected() const;
  public:
  void clear_cde_last_row_selected();
  int32_t cde_last_row_selected() const;
  void set_cde_last_row_selected(int32_t value);
  private:
  int32_t _internal_cde_last_row_selected() const;
  void _internal_set_cde_last_row_selected(int32_t value);
  public:

  // optional int32 cde_last_col_selected = 3;
  bool has_cde_last_col_selected() const;
  private:
  bool _internal_has_cde_last_col_selected() const;
  public:
  void clear_cde_last_col_selected();
  int32_t cde_last_col_selected() const;
  void set_cde_last_col_selected(int32_t value);
  private:
  int32_t _internal_cde_last_col_selected() const;
  void _internal_set_cde_last_col_selected(int32_t value);
  public:

  // optional int32 cde_last_row_count = 4;
  bool has_cde_last_row_count() const;
  private:
  bool _internal_has_cde_last_row_count() const;
  public:
  void clear_cde_last_row_count();
  int32_t cde_last_row_count() const;
  void set_cde_last_row_count(int32_t value);
  private:
  int32_t _internal_cde_last_row_count() const;
  void _internal_set_cde_last_row_count(int32_t value);
  public:

  // optional int32 cde_last_col_count = 5;
  bool has_cde_last_col_count() const;
  private:
  bool _internal_has_cde_last_col_count() const;
  public:
  void clear_cde_last_col_count();
  int32_t cde_last_col_count() const;
  void set_cde_last_col_count(int32_t value);
  private:
  int32_t _internal_cde_last_col_count() const;
  void _internal_set_cde_last_col_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartUIState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* chart_;
    int32_t cde_last_row_selected_;
    int32_t cde_last_col_selected_;
    int32_t cde_last_row_count_;
    int32_t cde_last_col_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartFormatStructExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartFormatStructExtensions) */ {
 public:
  inline ChartFormatStructExtensions() : ChartFormatStructExtensions(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartFormatStructExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartFormatStructExtensions(const ChartFormatStructExtensions& from);
  ChartFormatStructExtensions(ChartFormatStructExtensions&& from) noexcept
    : ChartFormatStructExtensions() {
    *this = ::std::move(from);
  }

  inline ChartFormatStructExtensions& operator=(const ChartFormatStructExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartFormatStructExtensions& operator=(ChartFormatStructExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartFormatStructExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartFormatStructExtensions* internal_default_instance() {
    return reinterpret_cast<const ChartFormatStructExtensions*>(
               &_ChartFormatStructExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChartFormatStructExtensions& a, ChartFormatStructExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartFormatStructExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartFormatStructExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartFormatStructExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartFormatStructExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartFormatStructExtensions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartFormatStructExtensions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartFormatStructExtensions";
  }
  protected:
  explicit ChartFormatStructExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kPrefixFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    prefix;
  static const int kSuffixFieldNumber = 10001;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    suffix;
  // @@protoc_insertion_point(class_scope:TSCH.ChartFormatStructExtensions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// ===================================================================

static const int kScene3DSettingsConstantDepthFieldNumber = 10002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  scene3d_settings_constant_depth;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartDrawableArchive

// optional .TSD.DrawableArchive super = 1;
inline bool ChartDrawableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ChartDrawableArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableArchive& ChartDrawableArchive::_internal_super() const {
  const ::TSD::DrawableArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableArchive&>(
      ::TSD::_DrawableArchive_default_instance_);
}
inline const ::TSD::DrawableArchive& ChartDrawableArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartDrawableArchive.super)
  return _internal_super();
}
inline void ChartDrawableArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartDrawableArchive.super)
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartDrawableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::mutable_super() {
  ::TSD::DrawableArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartDrawableArchive.super)
  return _msg;
}
inline void ChartDrawableArchive::set_allocated_super(::TSD::DrawableArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartDrawableArchive.super)
}

// -------------------------------------------------------------------

// ChartArchive

// optional .TSCH.ChartType chart_type = 1;
inline bool ChartArchive::_internal_has_chart_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartArchive::has_chart_type() const {
  return _internal_has_chart_type();
}
inline void ChartArchive::clear_chart_type() {
  _impl_.chart_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::TSCH::ChartType ChartArchive::_internal_chart_type() const {
  return static_cast< ::TSCH::ChartType >(_impl_.chart_type_);
}
inline ::TSCH::ChartType ChartArchive::chart_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.chart_type)
  return _internal_chart_type();
}
inline void ChartArchive::_internal_set_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.chart_type_ = value;
}
inline void ChartArchive::set_chart_type(::TSCH::ChartType value) {
  _internal_set_chart_type(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.chart_type)
}

// optional .TSCH.ScatterFormat scatter_format = 2;
inline bool ChartArchive::_internal_has_scatter_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartArchive::has_scatter_format() const {
  return _internal_has_scatter_format();
}
inline void ChartArchive::clear_scatter_format() {
  _impl_.scatter_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::TSCH::ScatterFormat ChartArchive::_internal_scatter_format() const {
  return static_cast< ::TSCH::ScatterFormat >(_impl_.scatter_format_);
}
inline ::TSCH::ScatterFormat ChartArchive::scatter_format() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.scatter_format)
  return _internal_scatter_format();
}
inline void ChartArchive::_internal_set_scatter_format(::TSCH::ScatterFormat value) {
  assert(::TSCH::ScatterFormat_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.scatter_format_ = value;
}
inline void ChartArchive::set_scatter_format(::TSCH::ScatterFormat value) {
  _internal_set_scatter_format(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.scatter_format)
}

// optional .TSCH.RectArchive legend_frame = 3;
inline bool ChartArchive::_internal_has_legend_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_frame_ != nullptr);
  return value;
}
inline bool ChartArchive::has_legend_frame() const {
  return _internal_has_legend_frame();
}
inline const ::TSCH::RectArchive& ChartArchive::_internal_legend_frame() const {
  const ::TSCH::RectArchive* p = _impl_.legend_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& ChartArchive::legend_frame() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.legend_frame)
  return _internal_legend_frame();
}
inline void ChartArchive::unsafe_arena_set_allocated_legend_frame(
    ::TSCH::RectArchive* legend_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_frame_);
  }
  _impl_.legend_frame_ = legend_frame;
  if (legend_frame) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.legend_frame)
}
inline ::TSCH::RectArchive* ChartArchive::release_legend_frame() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::RectArchive* temp = _impl_.legend_frame_;
  _impl_.legend_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* ChartArchive::unsafe_arena_release_legend_frame() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.legend_frame)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::RectArchive* temp = _impl_.legend_frame_;
  _impl_.legend_frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* ChartArchive::_internal_mutable_legend_frame() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.legend_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    _impl_.legend_frame_ = p;
  }
  return _impl_.legend_frame_;
}
inline ::TSCH::RectArchive* ChartArchive::mutable_legend_frame() {
  ::TSCH::RectArchive* _msg = _internal_mutable_legend_frame();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.legend_frame)
  return _msg;
}
inline void ChartArchive::set_allocated_legend_frame(::TSCH::RectArchive* legend_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_frame_);
  }
  if (legend_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_frame));
    if (message_arena != submessage_arena) {
      legend_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.legend_frame_ = legend_frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.legend_frame)
}

// optional .TSP.Reference preset = 4;
inline bool ChartArchive::_internal_has_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preset_ != nullptr);
  return value;
}
inline bool ChartArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& ChartArchive::_internal_preset() const {
  const ::TSP::Reference* p = _impl_.preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::preset() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.preset)
  return _internal_preset();
}
inline void ChartArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  _impl_.preset_ = preset;
  if (preset) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.preset)
}
inline ::TSP::Reference* ChartArchive::release_preset() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.preset)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_preset() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.preset_ = p;
  }
  return _impl_.preset_;
}
inline ::TSP::Reference* ChartArchive::mutable_preset() {
  ::TSP::Reference* _msg = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.preset)
  return _msg;
}
inline void ChartArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset));
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.preset)
}

// optional .TSCH.SeriesDirection series_direction = 5;
inline bool ChartArchive::_internal_has_series_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartArchive::has_series_direction() const {
  return _internal_has_series_direction();
}
inline void ChartArchive::clear_series_direction() {
  _impl_.series_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::TSCH::SeriesDirection ChartArchive::_internal_series_direction() const {
  return static_cast< ::TSCH::SeriesDirection >(_impl_.series_direction_);
}
inline ::TSCH::SeriesDirection ChartArchive::series_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_direction)
  return _internal_series_direction();
}
inline void ChartArchive::_internal_set_series_direction(::TSCH::SeriesDirection value) {
  assert(::TSCH::SeriesDirection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.series_direction_ = value;
}
inline void ChartArchive::set_series_direction(::TSCH::SeriesDirection value) {
  _internal_set_series_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.series_direction)
}

// optional bool contains_default_data = 6;
inline bool ChartArchive::_internal_has_contains_default_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartArchive::has_contains_default_data() const {
  return _internal_has_contains_default_data();
}
inline void ChartArchive::clear_contains_default_data() {
  _impl_.contains_default_data_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool ChartArchive::_internal_contains_default_data() const {
  return _impl_.contains_default_data_;
}
inline bool ChartArchive::contains_default_data() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.contains_default_data)
  return _internal_contains_default_data();
}
inline void ChartArchive::_internal_set_contains_default_data(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.contains_default_data_ = value;
}
inline void ChartArchive::set_contains_default_data(bool value) {
  _internal_set_contains_default_data(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.contains_default_data)
}

// optional .TSCH.ChartGridArchive grid = 7;
inline bool ChartArchive::_internal_has_grid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grid_ != nullptr);
  return value;
}
inline bool ChartArchive::has_grid() const {
  return _internal_has_grid();
}
inline void ChartArchive::clear_grid() {
  if (_impl_.grid_ != nullptr) _impl_.grid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::ChartGridArchive& ChartArchive::_internal_grid() const {
  const ::TSCH::ChartGridArchive* p = _impl_.grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartGridArchive&>(
      ::TSCH::_ChartGridArchive_default_instance_);
}
inline const ::TSCH::ChartGridArchive& ChartArchive::grid() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.grid)
  return _internal_grid();
}
inline void ChartArchive::unsafe_arena_set_allocated_grid(
    ::TSCH::ChartGridArchive* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grid_);
  }
  _impl_.grid_ = grid;
  if (grid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.grid)
}
inline ::TSCH::ChartGridArchive* ChartArchive::release_grid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartGridArchive* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartGridArchive* ChartArchive::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.grid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartGridArchive* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
  return temp;
}
inline ::TSCH::ChartGridArchive* ChartArchive::_internal_mutable_grid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartGridArchive>(GetArenaForAllocation());
    _impl_.grid_ = p;
  }
  return _impl_.grid_;
}
inline ::TSCH::ChartGridArchive* ChartArchive::mutable_grid() {
  ::TSCH::ChartGridArchive* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.grid)
  return _msg;
}
inline void ChartArchive::set_allocated_grid(::TSCH::ChartGridArchive* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.grid)
}

// optional .TSP.Reference mediator = 8;
inline bool ChartArchive::_internal_has_mediator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mediator_ != nullptr);
  return value;
}
inline bool ChartArchive::has_mediator() const {
  return _internal_has_mediator();
}
inline const ::TSP::Reference& ChartArchive::_internal_mediator() const {
  const ::TSP::Reference* p = _impl_.mediator_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::mediator() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.mediator)
  return _internal_mediator();
}
inline void ChartArchive::unsafe_arena_set_allocated_mediator(
    ::TSP::Reference* mediator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mediator_);
  }
  _impl_.mediator_ = mediator;
  if (mediator) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.mediator)
}
inline ::TSP::Reference* ChartArchive::release_mediator() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.mediator_;
  _impl_.mediator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_mediator() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.mediator)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.mediator_;
  _impl_.mediator_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_mediator() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.mediator_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.mediator_ = p;
  }
  return _impl_.mediator_;
}
inline ::TSP::Reference* ChartArchive::mutable_mediator() {
  ::TSP::Reference* _msg = _internal_mutable_mediator();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.mediator)
  return _msg;
}
inline void ChartArchive::set_allocated_mediator(::TSP::Reference* mediator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mediator_);
  }
  if (mediator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mediator));
    if (message_arena != submessage_arena) {
      mediator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mediator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.mediator_ = mediator;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.mediator)
}

// optional .TSP.Reference chart_style = 9;
inline bool ChartArchive::_internal_has_chart_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_chart_style() const {
  return _internal_has_chart_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_chart_style() const {
  const ::TSP::Reference* p = _impl_.chart_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::chart_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.chart_style)
  return _internal_chart_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_chart_style(
    ::TSP::Reference* chart_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  _impl_.chart_style_ = chart_style;
  if (chart_style) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.chart_style)
}
inline ::TSP::Reference* ChartArchive::release_chart_style() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_chart_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.chart_style)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_chart_style() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.chart_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_style_ = p;
  }
  return _impl_.chart_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_chart_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.chart_style)
  return _msg;
}
inline void ChartArchive::set_allocated_chart_style(::TSP::Reference* chart_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  if (chart_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style));
    if (message_arena != submessage_arena) {
      chart_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.chart_style_ = chart_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.chart_style)
}

// optional .TSP.Reference chart_non_style = 10;
inline bool ChartArchive::_internal_has_chart_non_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_non_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_chart_non_style() const {
  return _internal_has_chart_non_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_chart_non_style() const {
  const ::TSP::Reference* p = _impl_.chart_non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::chart_non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.chart_non_style)
  return _internal_chart_non_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_chart_non_style(
    ::TSP::Reference* chart_non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_non_style_);
  }
  _impl_.chart_non_style_ = chart_non_style;
  if (chart_non_style) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.chart_non_style)
}
inline ::TSP::Reference* ChartArchive::release_chart_non_style() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.chart_non_style_;
  _impl_.chart_non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_chart_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.chart_non_style)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.chart_non_style_;
  _impl_.chart_non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_chart_non_style() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.chart_non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_non_style_ = p;
  }
  return _impl_.chart_non_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_chart_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.chart_non_style)
  return _msg;
}
inline void ChartArchive::set_allocated_chart_non_style(::TSP::Reference* chart_non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_non_style_);
  }
  if (chart_non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_non_style));
    if (message_arena != submessage_arena) {
      chart_non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_non_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.chart_non_style_ = chart_non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.chart_non_style)
}

// optional .TSP.Reference legend_style = 11;
inline bool ChartArchive::_internal_has_legend_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_legend_style() const {
  return _internal_has_legend_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_legend_style() const {
  const ::TSP::Reference* p = _impl_.legend_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::legend_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.legend_style)
  return _internal_legend_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_legend_style(
    ::TSP::Reference* legend_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  _impl_.legend_style_ = legend_style;
  if (legend_style) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.legend_style)
}
inline ::TSP::Reference* ChartArchive::release_legend_style() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_legend_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.legend_style)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_legend_style() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.legend_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_style_ = p;
  }
  return _impl_.legend_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_legend_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.legend_style)
  return _msg;
}
inline void ChartArchive::set_allocated_legend_style(::TSP::Reference* legend_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  if (legend_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_style));
    if (message_arena != submessage_arena) {
      legend_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.legend_style_ = legend_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.legend_style)
}

// optional .TSP.Reference legend_non_style = 12;
inline bool ChartArchive::_internal_has_legend_non_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_non_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_legend_non_style() const {
  return _internal_has_legend_non_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_legend_non_style() const {
  const ::TSP::Reference* p = _impl_.legend_non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::legend_non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.legend_non_style)
  return _internal_legend_non_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_legend_non_style(
    ::TSP::Reference* legend_non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_non_style_);
  }
  _impl_.legend_non_style_ = legend_non_style;
  if (legend_non_style) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.legend_non_style)
}
inline ::TSP::Reference* ChartArchive::release_legend_non_style() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.legend_non_style_;
  _impl_.legend_non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_legend_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.legend_non_style)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.legend_non_style_;
  _impl_.legend_non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_legend_non_style() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.legend_non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_non_style_ = p;
  }
  return _impl_.legend_non_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_legend_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.legend_non_style)
  return _msg;
}
inline void ChartArchive::set_allocated_legend_non_style(::TSP::Reference* legend_non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_non_style_);
  }
  if (legend_non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_non_style));
    if (message_arena != submessage_arena) {
      legend_non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_non_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.legend_non_style_ = legend_non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.legend_non_style)
}

// repeated .TSP.Reference value_axis_styles = 13;
inline int ChartArchive::_internal_value_axis_styles_size() const {
  return _impl_.value_axis_styles_.size();
}
inline int ChartArchive::value_axis_styles_size() const {
  return _internal_value_axis_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_value_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.value_axis_styles)
  return _impl_.value_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_value_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.value_axis_styles)
  return &_impl_.value_axis_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_value_axis_styles(int index) const {
  return _impl_.value_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::value_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.value_axis_styles)
  return _internal_value_axis_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_value_axis_styles() {
  return _impl_.value_axis_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_value_axis_styles() {
  ::TSP::Reference* _add = _internal_add_value_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.value_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::value_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.value_axis_styles)
  return _impl_.value_axis_styles_;
}

// repeated .TSP.Reference value_axis_nonstyles = 14;
inline int ChartArchive::_internal_value_axis_nonstyles_size() const {
  return _impl_.value_axis_nonstyles_.size();
}
inline int ChartArchive::value_axis_nonstyles_size() const {
  return _internal_value_axis_nonstyles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_value_axis_nonstyles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.value_axis_nonstyles)
  return _impl_.value_axis_nonstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_value_axis_nonstyles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.value_axis_nonstyles)
  return &_impl_.value_axis_nonstyles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_value_axis_nonstyles(int index) const {
  return _impl_.value_axis_nonstyles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::value_axis_nonstyles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.value_axis_nonstyles)
  return _internal_value_axis_nonstyles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_value_axis_nonstyles() {
  return _impl_.value_axis_nonstyles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_value_axis_nonstyles() {
  ::TSP::Reference* _add = _internal_add_value_axis_nonstyles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.value_axis_nonstyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::value_axis_nonstyles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.value_axis_nonstyles)
  return _impl_.value_axis_nonstyles_;
}

// repeated .TSP.Reference category_axis_styles = 15;
inline int ChartArchive::_internal_category_axis_styles_size() const {
  return _impl_.category_axis_styles_.size();
}
inline int ChartArchive::category_axis_styles_size() const {
  return _internal_category_axis_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_category_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.category_axis_styles)
  return _impl_.category_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_category_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.category_axis_styles)
  return &_impl_.category_axis_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_category_axis_styles(int index) const {
  return _impl_.category_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::category_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.category_axis_styles)
  return _internal_category_axis_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_category_axis_styles() {
  return _impl_.category_axis_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_category_axis_styles() {
  ::TSP::Reference* _add = _internal_add_category_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.category_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::category_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.category_axis_styles)
  return _impl_.category_axis_styles_;
}

// repeated .TSP.Reference category_axis_nonstyles = 16;
inline int ChartArchive::_internal_category_axis_nonstyles_size() const {
  return _impl_.category_axis_nonstyles_.size();
}
inline int ChartArchive::category_axis_nonstyles_size() const {
  return _internal_category_axis_nonstyles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_category_axis_nonstyles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.category_axis_nonstyles)
  return _impl_.category_axis_nonstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_category_axis_nonstyles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.category_axis_nonstyles)
  return &_impl_.category_axis_nonstyles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_category_axis_nonstyles(int index) const {
  return _impl_.category_axis_nonstyles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::category_axis_nonstyles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.category_axis_nonstyles)
  return _internal_category_axis_nonstyles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_category_axis_nonstyles() {
  return _impl_.category_axis_nonstyles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_category_axis_nonstyles() {
  ::TSP::Reference* _add = _internal_add_category_axis_nonstyles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.category_axis_nonstyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::category_axis_nonstyles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.category_axis_nonstyles)
  return _impl_.category_axis_nonstyles_;
}

// repeated .TSP.Reference series_theme_styles = 17;
inline int ChartArchive::_internal_series_theme_styles_size() const {
  return _impl_.series_theme_styles_.size();
}
inline int ChartArchive::series_theme_styles_size() const {
  return _internal_series_theme_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_series_theme_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.series_theme_styles)
  return _impl_.series_theme_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_series_theme_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.series_theme_styles)
  return &_impl_.series_theme_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_series_theme_styles(int index) const {
  return _impl_.series_theme_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::series_theme_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_theme_styles)
  return _internal_series_theme_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_series_theme_styles() {
  return _impl_.series_theme_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_series_theme_styles() {
  ::TSP::Reference* _add = _internal_add_series_theme_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.series_theme_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::series_theme_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.series_theme_styles)
  return _impl_.series_theme_styles_;
}

// optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
inline bool ChartArchive::_internal_has_series_private_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_private_styles_ != nullptr);
  return value;
}
inline bool ChartArchive::has_series_private_styles() const {
  return _internal_has_series_private_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& ChartArchive::_internal_series_private_styles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.series_private_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& ChartArchive::series_private_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_private_styles)
  return _internal_series_private_styles();
}
inline void ChartArchive::unsafe_arena_set_allocated_series_private_styles(
    ::TSCH::SparseReferenceArrayArchive* series_private_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  _impl_.series_private_styles_ = series_private_styles;
  if (series_private_styles) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.series_private_styles)
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::release_series_private_styles() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::unsafe_arena_release_series_private_styles() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.series_private_styles)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::_internal_mutable_series_private_styles() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.series_private_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.series_private_styles_ = p;
  }
  return _impl_.series_private_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::mutable_series_private_styles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_series_private_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.series_private_styles)
  return _msg;
}
inline void ChartArchive::set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  if (series_private_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_private_styles));
    if (message_arena != submessage_arena) {
      series_private_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_private_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.series_private_styles_ = series_private_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.series_private_styles)
}

// optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
inline bool ChartArchive::_internal_has_series_non_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_non_styles_ != nullptr);
  return value;
}
inline bool ChartArchive::has_series_non_styles() const {
  return _internal_has_series_non_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& ChartArchive::_internal_series_non_styles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.series_non_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& ChartArchive::series_non_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_non_styles)
  return _internal_series_non_styles();
}
inline void ChartArchive::unsafe_arena_set_allocated_series_non_styles(
    ::TSCH::SparseReferenceArrayArchive* series_non_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_non_styles_);
  }
  _impl_.series_non_styles_ = series_non_styles;
  if (series_non_styles) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.series_non_styles)
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::release_series_non_styles() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_non_styles_;
  _impl_.series_non_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::unsafe_arena_release_series_non_styles() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.series_non_styles)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_non_styles_;
  _impl_.series_non_styles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::_internal_mutable_series_non_styles() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.series_non_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.series_non_styles_ = p;
  }
  return _impl_.series_non_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::mutable_series_non_styles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_series_non_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.series_non_styles)
  return _msg;
}
inline void ChartArchive::set_allocated_series_non_styles(::TSCH::SparseReferenceArrayArchive* series_non_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_non_styles_);
  }
  if (series_non_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_non_styles));
    if (message_arena != submessage_arena) {
      series_non_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_non_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.series_non_styles_ = series_non_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.series_non_styles)
}

// repeated .TSP.Reference paragraph_styles = 20;
inline int ChartArchive::_internal_paragraph_styles_size() const {
  return _impl_.paragraph_styles_.size();
}
inline int ChartArchive::paragraph_styles_size() const {
  return _internal_paragraph_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.paragraph_styles)
  return _impl_.paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.paragraph_styles)
  return &_impl_.paragraph_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_paragraph_styles(int index) const {
  return _impl_.paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.paragraph_styles)
  return _internal_paragraph_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_paragraph_styles() {
  return _impl_.paragraph_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_paragraph_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::paragraph_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.paragraph_styles)
  return _impl_.paragraph_styles_;
}

// optional uint32 multidataset_index = 21;
inline bool ChartArchive::_internal_has_multidataset_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartArchive::has_multidataset_index() const {
  return _internal_has_multidataset_index();
}
inline void ChartArchive::clear_multidataset_index() {
  _impl_.multidataset_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t ChartArchive::_internal_multidataset_index() const {
  return _impl_.multidataset_index_;
}
inline uint32_t ChartArchive::multidataset_index() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.multidataset_index)
  return _internal_multidataset_index();
}
inline void ChartArchive::_internal_set_multidataset_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.multidataset_index_ = value;
}
inline void ChartArchive::set_multidataset_index(uint32_t value) {
  _internal_set_multidataset_index(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.multidataset_index)
}

// optional bool needs_calc_engine_deferred_import_action = 22;
inline bool ChartArchive::_internal_has_needs_calc_engine_deferred_import_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartArchive::has_needs_calc_engine_deferred_import_action() const {
  return _internal_has_needs_calc_engine_deferred_import_action();
}
inline void ChartArchive::clear_needs_calc_engine_deferred_import_action() {
  _impl_.needs_calc_engine_deferred_import_action_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ChartArchive::_internal_needs_calc_engine_deferred_import_action() const {
  return _impl_.needs_calc_engine_deferred_import_action_;
}
inline bool ChartArchive::needs_calc_engine_deferred_import_action() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.needs_calc_engine_deferred_import_action)
  return _internal_needs_calc_engine_deferred_import_action();
}
inline void ChartArchive::_internal_set_needs_calc_engine_deferred_import_action(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.needs_calc_engine_deferred_import_action_ = value;
}
inline void ChartArchive::set_needs_calc_engine_deferred_import_action(bool value) {
  _internal_set_needs_calc_engine_deferred_import_action(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.needs_calc_engine_deferred_import_action)
}

// -------------------------------------------------------------------

// ChartPasteboardAdditionsArchive

// -------------------------------------------------------------------

// ChartGridArchive_GridRow_GridValue

// optional double numeric_value = 1;
inline bool ChartGridArchive_GridRow_GridValue::_internal_has_numeric_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartGridArchive_GridRow_GridValue::has_numeric_value() const {
  return _internal_has_numeric_value();
}
inline void ChartGridArchive_GridRow_GridValue::clear_numeric_value() {
  _impl_.numeric_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ChartGridArchive_GridRow_GridValue::_internal_numeric_value() const {
  return _impl_.numeric_value_;
}
inline double ChartGridArchive_GridRow_GridValue::numeric_value() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.GridRow.GridValue.numeric_value)
  return _internal_numeric_value();
}
inline void ChartGridArchive_GridRow_GridValue::_internal_set_numeric_value(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.numeric_value_ = value;
}
inline void ChartGridArchive_GridRow_GridValue::set_numeric_value(double value) {
  _internal_set_numeric_value(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.GridRow.GridValue.numeric_value)
}

// optional double date_value = 2;
inline bool ChartGridArchive_GridRow_GridValue::_internal_has_date_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartGridArchive_GridRow_GridValue::has_date_value() const {
  return _internal_has_date_value();
}
inline void ChartGridArchive_GridRow_GridValue::clear_date_value() {
  _impl_.date_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ChartGridArchive_GridRow_GridValue::_internal_date_value() const {
  return _impl_.date_value_;
}
inline double ChartGridArchive_GridRow_GridValue::date_value() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.GridRow.GridValue.date_value)
  return _internal_date_value();
}
inline void ChartGridArchive_GridRow_GridValue::_internal_set_date_value(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.date_value_ = value;
}
inline void ChartGridArchive_GridRow_GridValue::set_date_value(double value) {
  _internal_set_date_value(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.GridRow.GridValue.date_value)
}

// -------------------------------------------------------------------

// ChartGridArchive_GridRow

// repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
inline int ChartGridArchive_GridRow::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int ChartGridArchive_GridRow::value_size() const {
  return _internal_value_size();
}
inline void ChartGridArchive_GridRow::clear_value() {
  _impl_.value_.Clear();
}
inline ::TSCH::ChartGridArchive_GridRow_GridValue* ChartGridArchive_GridRow::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.GridRow.value)
  return _impl_.value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >*
ChartGridArchive_GridRow::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.GridRow.value)
  return &_impl_.value_;
}
inline const ::TSCH::ChartGridArchive_GridRow_GridValue& ChartGridArchive_GridRow::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const ::TSCH::ChartGridArchive_GridRow_GridValue& ChartGridArchive_GridRow::value(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.GridRow.value)
  return _internal_value(index);
}
inline ::TSCH::ChartGridArchive_GridRow_GridValue* ChartGridArchive_GridRow::_internal_add_value() {
  return _impl_.value_.Add();
}
inline ::TSCH::ChartGridArchive_GridRow_GridValue* ChartGridArchive_GridRow::add_value() {
  ::TSCH::ChartGridArchive_GridRow_GridValue* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.GridRow.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >&
ChartGridArchive_GridRow::value() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.GridRow.value)
  return _impl_.value_;
}

// -------------------------------------------------------------------

// ChartGridArchive

// repeated string row_name = 1;
inline int ChartGridArchive::_internal_row_name_size() const {
  return _impl_.row_name_.size();
}
inline int ChartGridArchive::row_name_size() const {
  return _internal_row_name_size();
}
inline void ChartGridArchive::clear_row_name() {
  _impl_.row_name_.Clear();
}
inline std::string* ChartGridArchive::add_row_name() {
  std::string* _s = _internal_add_row_name();
  // @@protoc_insertion_point(field_add_mutable:TSCH.ChartGridArchive.row_name)
  return _s;
}
inline const std::string& ChartGridArchive::_internal_row_name(int index) const {
  return _impl_.row_name_.Get(index);
}
inline const std::string& ChartGridArchive::row_name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.row_name)
  return _internal_row_name(index);
}
inline std::string* ChartGridArchive::mutable_row_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.row_name)
  return _impl_.row_name_.Mutable(index);
}
inline void ChartGridArchive::set_row_name(int index, const std::string& value) {
  _impl_.row_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::set_row_name(int index, std::string&& value) {
  _impl_.row_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::set_row_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::set_row_name(int index, const char* value, size_t size) {
  _impl_.row_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.ChartGridArchive.row_name)
}
inline std::string* ChartGridArchive::_internal_add_row_name() {
  return _impl_.row_name_.Add();
}
inline void ChartGridArchive::add_row_name(const std::string& value) {
  _impl_.row_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(std::string&& value) {
  _impl_.row_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(const char* value, size_t size) {
  _impl_.row_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.ChartGridArchive.row_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChartGridArchive::row_name() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.row_name)
  return _impl_.row_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChartGridArchive::mutable_row_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.row_name)
  return &_impl_.row_name_;
}

// repeated string column_name = 2;
inline int ChartGridArchive::_internal_column_name_size() const {
  return _impl_.column_name_.size();
}
inline int ChartGridArchive::column_name_size() const {
  return _internal_column_name_size();
}
inline void ChartGridArchive::clear_column_name() {
  _impl_.column_name_.Clear();
}
inline std::string* ChartGridArchive::add_column_name() {
  std::string* _s = _internal_add_column_name();
  // @@protoc_insertion_point(field_add_mutable:TSCH.ChartGridArchive.column_name)
  return _s;
}
inline const std::string& ChartGridArchive::_internal_column_name(int index) const {
  return _impl_.column_name_.Get(index);
}
inline const std::string& ChartGridArchive::column_name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.column_name)
  return _internal_column_name(index);
}
inline std::string* ChartGridArchive::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.column_name)
  return _impl_.column_name_.Mutable(index);
}
inline void ChartGridArchive::set_column_name(int index, const std::string& value) {
  _impl_.column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::set_column_name(int index, std::string&& value) {
  _impl_.column_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::set_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::set_column_name(int index, const char* value, size_t size) {
  _impl_.column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.ChartGridArchive.column_name)
}
inline std::string* ChartGridArchive::_internal_add_column_name() {
  return _impl_.column_name_.Add();
}
inline void ChartGridArchive::add_column_name(const std::string& value) {
  _impl_.column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(std::string&& value) {
  _impl_.column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(const char* value, size_t size) {
  _impl_.column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.ChartGridArchive.column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChartGridArchive::column_name() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.column_name)
  return _impl_.column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChartGridArchive::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.column_name)
  return &_impl_.column_name_;
}

// repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
inline int ChartGridArchive::_internal_grid_row_size() const {
  return _impl_.grid_row_.size();
}
inline int ChartGridArchive::grid_row_size() const {
  return _internal_grid_row_size();
}
inline void ChartGridArchive::clear_grid_row() {
  _impl_.grid_row_.Clear();
}
inline ::TSCH::ChartGridArchive_GridRow* ChartGridArchive::mutable_grid_row(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.grid_row)
  return _impl_.grid_row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >*
ChartGridArchive::mutable_grid_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.grid_row)
  return &_impl_.grid_row_;
}
inline const ::TSCH::ChartGridArchive_GridRow& ChartGridArchive::_internal_grid_row(int index) const {
  return _impl_.grid_row_.Get(index);
}
inline const ::TSCH::ChartGridArchive_GridRow& ChartGridArchive::grid_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.grid_row)
  return _internal_grid_row(index);
}
inline ::TSCH::ChartGridArchive_GridRow* ChartGridArchive::_internal_add_grid_row() {
  return _impl_.grid_row_.Add();
}
inline ::TSCH::ChartGridArchive_GridRow* ChartGridArchive::add_grid_row() {
  ::TSCH::ChartGridArchive_GridRow* _add = _internal_add_grid_row();
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.grid_row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >&
ChartGridArchive::grid_row() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.grid_row)
  return _impl_.grid_row_;
}

// -------------------------------------------------------------------

// ChartMediatorArchive

// optional .TSP.Reference info = 1;
inline bool ChartMediatorArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ChartMediatorArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ChartMediatorArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartMediatorArchive::info() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartMediatorArchive.info)
  return _internal_info();
}
inline void ChartMediatorArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartMediatorArchive.info)
}
inline ::TSP::Reference* ChartMediatorArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartMediatorArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.ChartMediatorArchive.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartMediatorArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* ChartMediatorArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartMediatorArchive.info)
  return _msg;
}
inline void ChartMediatorArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartMediatorArchive.info)
}

// repeated uint32 local_series_indexes = 2;
inline int ChartMediatorArchive::_internal_local_series_indexes_size() const {
  return _impl_.local_series_indexes_.size();
}
inline int ChartMediatorArchive::local_series_indexes_size() const {
  return _internal_local_series_indexes_size();
}
inline void ChartMediatorArchive::clear_local_series_indexes() {
  _impl_.local_series_indexes_.Clear();
}
inline uint32_t ChartMediatorArchive::_internal_local_series_indexes(int index) const {
  return _impl_.local_series_indexes_.Get(index);
}
inline uint32_t ChartMediatorArchive::local_series_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartMediatorArchive.local_series_indexes)
  return _internal_local_series_indexes(index);
}
inline void ChartMediatorArchive::set_local_series_indexes(int index, uint32_t value) {
  _impl_.local_series_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.ChartMediatorArchive.local_series_indexes)
}
inline void ChartMediatorArchive::_internal_add_local_series_indexes(uint32_t value) {
  _impl_.local_series_indexes_.Add(value);
}
inline void ChartMediatorArchive::add_local_series_indexes(uint32_t value) {
  _internal_add_local_series_indexes(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartMediatorArchive.local_series_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::_internal_local_series_indexes() const {
  return _impl_.local_series_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::local_series_indexes() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartMediatorArchive.local_series_indexes)
  return _internal_local_series_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::_internal_mutable_local_series_indexes() {
  return &_impl_.local_series_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::mutable_local_series_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartMediatorArchive.local_series_indexes)
  return _internal_mutable_local_series_indexes();
}

// repeated uint32 remote_series_indexes = 3;
inline int ChartMediatorArchive::_internal_remote_series_indexes_size() const {
  return _impl_.remote_series_indexes_.size();
}
inline int ChartMediatorArchive::remote_series_indexes_size() const {
  return _internal_remote_series_indexes_size();
}
inline void ChartMediatorArchive::clear_remote_series_indexes() {
  _impl_.remote_series_indexes_.Clear();
}
inline uint32_t ChartMediatorArchive::_internal_remote_series_indexes(int index) const {
  return _impl_.remote_series_indexes_.Get(index);
}
inline uint32_t ChartMediatorArchive::remote_series_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartMediatorArchive.remote_series_indexes)
  return _internal_remote_series_indexes(index);
}
inline void ChartMediatorArchive::set_remote_series_indexes(int index, uint32_t value) {
  _impl_.remote_series_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.ChartMediatorArchive.remote_series_indexes)
}
inline void ChartMediatorArchive::_internal_add_remote_series_indexes(uint32_t value) {
  _impl_.remote_series_indexes_.Add(value);
}
inline void ChartMediatorArchive::add_remote_series_indexes(uint32_t value) {
  _internal_add_remote_series_indexes(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartMediatorArchive.remote_series_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::_internal_remote_series_indexes() const {
  return _impl_.remote_series_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::remote_series_indexes() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartMediatorArchive.remote_series_indexes)
  return _internal_remote_series_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::_internal_mutable_remote_series_indexes() {
  return &_impl_.remote_series_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::mutable_remote_series_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartMediatorArchive.remote_series_indexes)
  return _internal_mutable_remote_series_indexes();
}

// -------------------------------------------------------------------

// ChartStylePreset

// optional .TSP.Reference chart_style = 1;
inline bool ChartStylePreset::_internal_has_chart_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_style_ != nullptr);
  return value;
}
inline bool ChartStylePreset::has_chart_style() const {
  return _internal_has_chart_style();
}
inline const ::TSP::Reference& ChartStylePreset::_internal_chart_style() const {
  const ::TSP::Reference* p = _impl_.chart_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartStylePreset::chart_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.chart_style)
  return _internal_chart_style();
}
inline void ChartStylePreset::unsafe_arena_set_allocated_chart_style(
    ::TSP::Reference* chart_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  _impl_.chart_style_ = chart_style;
  if (chart_style) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartStylePreset.chart_style)
}
inline ::TSP::Reference* ChartStylePreset::release_chart_style() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::unsafe_arena_release_chart_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartStylePreset.chart_style)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::_internal_mutable_chart_style() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chart_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_style_ = p;
  }
  return _impl_.chart_style_;
}
inline ::TSP::Reference* ChartStylePreset::mutable_chart_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.chart_style)
  return _msg;
}
inline void ChartStylePreset::set_allocated_chart_style(::TSP::Reference* chart_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  if (chart_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style));
    if (message_arena != submessage_arena) {
      chart_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chart_style_ = chart_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartStylePreset.chart_style)
}

// optional .TSP.Reference legend_style = 2;
inline bool ChartStylePreset::_internal_has_legend_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_style_ != nullptr);
  return value;
}
inline bool ChartStylePreset::has_legend_style() const {
  return _internal_has_legend_style();
}
inline const ::TSP::Reference& ChartStylePreset::_internal_legend_style() const {
  const ::TSP::Reference* p = _impl_.legend_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartStylePreset::legend_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.legend_style)
  return _internal_legend_style();
}
inline void ChartStylePreset::unsafe_arena_set_allocated_legend_style(
    ::TSP::Reference* legend_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  _impl_.legend_style_ = legend_style;
  if (legend_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartStylePreset.legend_style)
}
inline ::TSP::Reference* ChartStylePreset::release_legend_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::unsafe_arena_release_legend_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartStylePreset.legend_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::_internal_mutable_legend_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.legend_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_style_ = p;
  }
  return _impl_.legend_style_;
}
inline ::TSP::Reference* ChartStylePreset::mutable_legend_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.legend_style)
  return _msg;
}
inline void ChartStylePreset::set_allocated_legend_style(::TSP::Reference* legend_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  if (legend_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_style));
    if (message_arena != submessage_arena) {
      legend_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.legend_style_ = legend_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartStylePreset.legend_style)
}

// repeated .TSP.Reference value_axis_styles = 3;
inline int ChartStylePreset::_internal_value_axis_styles_size() const {
  return _impl_.value_axis_styles_.size();
}
inline int ChartStylePreset::value_axis_styles_size() const {
  return _internal_value_axis_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_value_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.value_axis_styles)
  return _impl_.value_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_value_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.value_axis_styles)
  return &_impl_.value_axis_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_value_axis_styles(int index) const {
  return _impl_.value_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::value_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.value_axis_styles)
  return _internal_value_axis_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_value_axis_styles() {
  return _impl_.value_axis_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_value_axis_styles() {
  ::TSP::Reference* _add = _internal_add_value_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.value_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::value_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.value_axis_styles)
  return _impl_.value_axis_styles_;
}

// repeated .TSP.Reference category_axis_styles = 4;
inline int ChartStylePreset::_internal_category_axis_styles_size() const {
  return _impl_.category_axis_styles_.size();
}
inline int ChartStylePreset::category_axis_styles_size() const {
  return _internal_category_axis_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_category_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.category_axis_styles)
  return _impl_.category_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_category_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.category_axis_styles)
  return &_impl_.category_axis_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_category_axis_styles(int index) const {
  return _impl_.category_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::category_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.category_axis_styles)
  return _internal_category_axis_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_category_axis_styles() {
  return _impl_.category_axis_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_category_axis_styles() {
  ::TSP::Reference* _add = _internal_add_category_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.category_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::category_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.category_axis_styles)
  return _impl_.category_axis_styles_;
}

// repeated .TSP.Reference series_styles = 5;
inline int ChartStylePreset::_internal_series_styles_size() const {
  return _impl_.series_styles_.size();
}
inline int ChartStylePreset::series_styles_size() const {
  return _internal_series_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_series_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.series_styles)
  return _impl_.series_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_series_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.series_styles)
  return &_impl_.series_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_series_styles(int index) const {
  return _impl_.series_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::series_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.series_styles)
  return _internal_series_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_series_styles() {
  return _impl_.series_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_series_styles() {
  ::TSP::Reference* _add = _internal_add_series_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.series_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::series_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.series_styles)
  return _impl_.series_styles_;
}

// repeated .TSP.Reference paragraph_styles = 6;
inline int ChartStylePreset::_internal_paragraph_styles_size() const {
  return _impl_.paragraph_styles_.size();
}
inline int ChartStylePreset::paragraph_styles_size() const {
  return _internal_paragraph_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.paragraph_styles)
  return _impl_.paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.paragraph_styles)
  return &_impl_.paragraph_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_paragraph_styles(int index) const {
  return _impl_.paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.paragraph_styles)
  return _internal_paragraph_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_paragraph_styles() {
  return _impl_.paragraph_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_paragraph_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::paragraph_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.paragraph_styles)
  return _impl_.paragraph_styles_;
}

// optional bytes uuid = 7;
inline bool ChartStylePreset::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartStylePreset::has_uuid() const {
  return _internal_has_uuid();
}
inline void ChartStylePreset::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartStylePreset::uuid() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartStylePreset::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartStylePreset.uuid)
}
inline std::string* ChartStylePreset::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.uuid)
  return _s;
}
inline const std::string& ChartStylePreset::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void ChartStylePreset::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartStylePreset::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartStylePreset::release_uuid() {
  // @@protoc_insertion_point(field_release:TSCH.ChartStylePreset.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartStylePreset::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartStylePreset.uuid)
}

// -------------------------------------------------------------------

// ChartPresetsArchive

// repeated .TSP.Reference chart_presets = 1;
inline int ChartPresetsArchive::_internal_chart_presets_size() const {
  return _impl_.chart_presets_.size();
}
inline int ChartPresetsArchive::chart_presets_size() const {
  return _internal_chart_presets_size();
}
inline ::TSP::Reference* ChartPresetsArchive::mutable_chart_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartPresetsArchive.chart_presets)
  return _impl_.chart_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartPresetsArchive::mutable_chart_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartPresetsArchive.chart_presets)
  return &_impl_.chart_presets_;
}
inline const ::TSP::Reference& ChartPresetsArchive::_internal_chart_presets(int index) const {
  return _impl_.chart_presets_.Get(index);
}
inline const ::TSP::Reference& ChartPresetsArchive::chart_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartPresetsArchive.chart_presets)
  return _internal_chart_presets(index);
}
inline ::TSP::Reference* ChartPresetsArchive::_internal_add_chart_presets() {
  return _impl_.chart_presets_.Add();
}
inline ::TSP::Reference* ChartPresetsArchive::add_chart_presets() {
  ::TSP::Reference* _add = _internal_add_chart_presets();
  // @@protoc_insertion_point(field_add:TSCH.ChartPresetsArchive.chart_presets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartPresetsArchive::chart_presets() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartPresetsArchive.chart_presets)
  return _impl_.chart_presets_;
}

// -------------------------------------------------------------------

// PropertyValueStorageContainerArchive

// optional .TSP.Reference chart_style = 1;
inline bool PropertyValueStorageContainerArchive::_internal_has_chart_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_style_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_chart_style() const {
  return _internal_has_chart_style();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_chart_style() const {
  const ::TSP::Reference* p = _impl_.chart_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::chart_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.chart_style)
  return _internal_chart_style();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_chart_style(
    ::TSP::Reference* chart_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  _impl_.chart_style_ = chart_style;
  if (chart_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_style)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_chart_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_chart_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.chart_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_chart_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_style_ = p;
  }
  return _impl_.chart_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_chart_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.chart_style)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_chart_style(::TSP::Reference* chart_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  if (chart_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style));
    if (message_arena != submessage_arena) {
      chart_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_style_ = chart_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_style)
}

// optional .TSP.Reference chart_nonstyle = 2;
inline bool PropertyValueStorageContainerArchive::_internal_has_chart_nonstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_nonstyle_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_chart_nonstyle() const {
  return _internal_has_chart_nonstyle();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_chart_nonstyle() const {
  const ::TSP::Reference* p = _impl_.chart_nonstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::chart_nonstyle() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
  return _internal_chart_nonstyle();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_chart_nonstyle(
    ::TSP::Reference* chart_nonstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_nonstyle_);
  }
  _impl_.chart_nonstyle_ = chart_nonstyle;
  if (chart_nonstyle) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_chart_nonstyle() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_nonstyle_;
  _impl_.chart_nonstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_chart_nonstyle() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_nonstyle_;
  _impl_.chart_nonstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_chart_nonstyle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chart_nonstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_nonstyle_ = p;
  }
  return _impl_.chart_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_chart_nonstyle() {
  ::TSP::Reference* _msg = _internal_mutable_chart_nonstyle();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_chart_nonstyle(::TSP::Reference* chart_nonstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_nonstyle_);
  }
  if (chart_nonstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_nonstyle));
    if (message_arena != submessage_arena) {
      chart_nonstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_nonstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chart_nonstyle_ = chart_nonstyle;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
}

// optional .TSP.Reference legend_style = 3;
inline bool PropertyValueStorageContainerArchive::_internal_has_legend_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_style_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_legend_style() const {
  return _internal_has_legend_style();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_legend_style() const {
  const ::TSP::Reference* p = _impl_.legend_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::legend_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.legend_style)
  return _internal_legend_style();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_legend_style(
    ::TSP::Reference* legend_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  _impl_.legend_style_ = legend_style;
  if (legend_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_style)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_legend_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_legend_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.legend_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_legend_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.legend_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_style_ = p;
  }
  return _impl_.legend_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_legend_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.legend_style)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_legend_style(::TSP::Reference* legend_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  if (legend_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_style));
    if (message_arena != submessage_arena) {
      legend_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.legend_style_ = legend_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_style)
}

// optional .TSP.Reference legend_nonstyle = 4;
inline bool PropertyValueStorageContainerArchive::_internal_has_legend_nonstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_nonstyle_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_legend_nonstyle() const {
  return _internal_has_legend_nonstyle();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_legend_nonstyle() const {
  const ::TSP::Reference* p = _impl_.legend_nonstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::legend_nonstyle() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
  return _internal_legend_nonstyle();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_legend_nonstyle(
    ::TSP::Reference* legend_nonstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_nonstyle_);
  }
  _impl_.legend_nonstyle_ = legend_nonstyle;
  if (legend_nonstyle) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_legend_nonstyle() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.legend_nonstyle_;
  _impl_.legend_nonstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_legend_nonstyle() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.legend_nonstyle_;
  _impl_.legend_nonstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_legend_nonstyle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.legend_nonstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_nonstyle_ = p;
  }
  return _impl_.legend_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_legend_nonstyle() {
  ::TSP::Reference* _msg = _internal_mutable_legend_nonstyle();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_legend_nonstyle(::TSP::Reference* legend_nonstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_nonstyle_);
  }
  if (legend_nonstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_nonstyle));
    if (message_arena != submessage_arena) {
      legend_nonstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_nonstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.legend_nonstyle_ = legend_nonstyle;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
}

// optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
inline bool PropertyValueStorageContainerArchive::_internal_has_value_axis_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_axis_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_value_axis_styles() const {
  return _internal_has_value_axis_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_value_axis_styles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.value_axis_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::value_axis_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
  return _internal_value_axis_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_value_axis_styles(
    ::TSCH::SparseReferenceArrayArchive* value_axis_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_styles_);
  }
  _impl_.value_axis_styles_ = value_axis_styles;
  if (value_axis_styles) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_value_axis_styles() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.value_axis_styles_;
  _impl_.value_axis_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_value_axis_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.value_axis_styles_;
  _impl_.value_axis_styles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_value_axis_styles() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.value_axis_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.value_axis_styles_ = p;
  }
  return _impl_.value_axis_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_value_axis_styles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_value_axis_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_value_axis_styles(::TSCH::SparseReferenceArrayArchive* value_axis_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_styles_);
  }
  if (value_axis_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_axis_styles));
    if (message_arena != submessage_arena) {
      value_axis_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_axis_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.value_axis_styles_ = value_axis_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
}

// optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
inline bool PropertyValueStorageContainerArchive::_internal_has_value_axis_nonstyles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_axis_nonstyles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_value_axis_nonstyles() const {
  return _internal_has_value_axis_nonstyles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_value_axis_nonstyles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.value_axis_nonstyles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::value_axis_nonstyles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
  return _internal_value_axis_nonstyles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_value_axis_nonstyles(
    ::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_nonstyles_);
  }
  _impl_.value_axis_nonstyles_ = value_axis_nonstyles;
  if (value_axis_nonstyles) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_value_axis_nonstyles() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.value_axis_nonstyles_;
  _impl_.value_axis_nonstyles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_value_axis_nonstyles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.value_axis_nonstyles_;
  _impl_.value_axis_nonstyles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_value_axis_nonstyles() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.value_axis_nonstyles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.value_axis_nonstyles_ = p;
  }
  return _impl_.value_axis_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_value_axis_nonstyles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_value_axis_nonstyles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_value_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_nonstyles_);
  }
  if (value_axis_nonstyles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_axis_nonstyles));
    if (message_arena != submessage_arena) {
      value_axis_nonstyles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_axis_nonstyles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.value_axis_nonstyles_ = value_axis_nonstyles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
}

// optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
inline bool PropertyValueStorageContainerArchive::_internal_has_category_axis_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.category_axis_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_category_axis_styles() const {
  return _internal_has_category_axis_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_category_axis_styles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.category_axis_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::category_axis_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
  return _internal_category_axis_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_category_axis_styles(
    ::TSCH::SparseReferenceArrayArchive* category_axis_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_styles_);
  }
  _impl_.category_axis_styles_ = category_axis_styles;
  if (category_axis_styles) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_category_axis_styles() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.category_axis_styles_;
  _impl_.category_axis_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_category_axis_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.category_axis_styles_;
  _impl_.category_axis_styles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_category_axis_styles() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.category_axis_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.category_axis_styles_ = p;
  }
  return _impl_.category_axis_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_category_axis_styles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_category_axis_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_category_axis_styles(::TSCH::SparseReferenceArrayArchive* category_axis_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_styles_);
  }
  if (category_axis_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_axis_styles));
    if (message_arena != submessage_arena) {
      category_axis_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_axis_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.category_axis_styles_ = category_axis_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
}

// optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
inline bool PropertyValueStorageContainerArchive::_internal_has_category_axis_nonstyles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.category_axis_nonstyles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_category_axis_nonstyles() const {
  return _internal_has_category_axis_nonstyles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_category_axis_nonstyles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.category_axis_nonstyles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::category_axis_nonstyles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
  return _internal_category_axis_nonstyles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_category_axis_nonstyles(
    ::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_nonstyles_);
  }
  _impl_.category_axis_nonstyles_ = category_axis_nonstyles;
  if (category_axis_nonstyles) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_category_axis_nonstyles() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.category_axis_nonstyles_;
  _impl_.category_axis_nonstyles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_category_axis_nonstyles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.category_axis_nonstyles_;
  _impl_.category_axis_nonstyles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_category_axis_nonstyles() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.category_axis_nonstyles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.category_axis_nonstyles_ = p;
  }
  return _impl_.category_axis_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_category_axis_nonstyles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_category_axis_nonstyles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_category_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_nonstyles_);
  }
  if (category_axis_nonstyles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_axis_nonstyles));
    if (message_arena != submessage_arena) {
      category_axis_nonstyles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_axis_nonstyles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.category_axis_nonstyles_ = category_axis_nonstyles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
}

// optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
inline bool PropertyValueStorageContainerArchive::_internal_has_series_theme_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_theme_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_series_theme_styles() const {
  return _internal_has_series_theme_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_series_theme_styles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.series_theme_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::series_theme_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
  return _internal_series_theme_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_series_theme_styles(
    ::TSCH::SparseReferenceArrayArchive* series_theme_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_theme_styles_);
  }
  _impl_.series_theme_styles_ = series_theme_styles;
  if (series_theme_styles) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_series_theme_styles() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_theme_styles_;
  _impl_.series_theme_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_series_theme_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_theme_styles_;
  _impl_.series_theme_styles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_series_theme_styles() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.series_theme_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.series_theme_styles_ = p;
  }
  return _impl_.series_theme_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_series_theme_styles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_series_theme_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_theme_styles(::TSCH::SparseReferenceArrayArchive* series_theme_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_theme_styles_);
  }
  if (series_theme_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_theme_styles));
    if (message_arena != submessage_arena) {
      series_theme_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_theme_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.series_theme_styles_ = series_theme_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
}

// optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
inline bool PropertyValueStorageContainerArchive::_internal_has_series_private_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_private_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_series_private_styles() const {
  return _internal_has_series_private_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_series_private_styles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.series_private_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::series_private_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
  return _internal_series_private_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_series_private_styles(
    ::TSCH::SparseReferenceArrayArchive* series_private_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  _impl_.series_private_styles_ = series_private_styles;
  if (series_private_styles) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_series_private_styles() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_series_private_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_series_private_styles() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.series_private_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.series_private_styles_ = p;
  }
  return _impl_.series_private_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_series_private_styles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_series_private_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  if (series_private_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_private_styles));
    if (message_arena != submessage_arena) {
      series_private_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_private_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.series_private_styles_ = series_private_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
}

// optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
inline bool PropertyValueStorageContainerArchive::_internal_has_series_nonstyles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_nonstyles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_series_nonstyles() const {
  return _internal_has_series_nonstyles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_series_nonstyles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.series_nonstyles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::series_nonstyles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
  return _internal_series_nonstyles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_series_nonstyles(
    ::TSCH::SparseReferenceArrayArchive* series_nonstyles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_nonstyles_);
  }
  _impl_.series_nonstyles_ = series_nonstyles;
  if (series_nonstyles) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_series_nonstyles() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_nonstyles_;
  _impl_.series_nonstyles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_series_nonstyles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.series_nonstyles_;
  _impl_.series_nonstyles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_series_nonstyles() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.series_nonstyles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.series_nonstyles_ = p;
  }
  return _impl_.series_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_series_nonstyles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_series_nonstyles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_nonstyles(::TSCH::SparseReferenceArrayArchive* series_nonstyles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_nonstyles_);
  }
  if (series_nonstyles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_nonstyles));
    if (message_arena != submessage_arena) {
      series_nonstyles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_nonstyles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.series_nonstyles_ = series_nonstyles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
}

// optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
inline bool PropertyValueStorageContainerArchive::_internal_has_paragraph_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paragraph_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_paragraph_styles() const {
  return _internal_has_paragraph_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::_internal_paragraph_styles() const {
  const ::TSCH::SparseReferenceArrayArchive* p = _impl_.paragraph_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::SparseReferenceArrayArchive&>(
      ::TSCH::_SparseReferenceArrayArchive_default_instance_);
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::paragraph_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
  return _internal_paragraph_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_paragraph_styles(
    ::TSCH::SparseReferenceArrayArchive* paragraph_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.paragraph_styles_);
  }
  _impl_.paragraph_styles_ = paragraph_styles;
  if (paragraph_styles) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_paragraph_styles() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.paragraph_styles_;
  _impl_.paragraph_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::unsafe_arena_release_paragraph_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSCH::SparseReferenceArrayArchive* temp = _impl_.paragraph_styles_;
  _impl_.paragraph_styles_ = nullptr;
  return temp;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::_internal_mutable_paragraph_styles() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.paragraph_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::SparseReferenceArrayArchive>(GetArenaForAllocation());
    _impl_.paragraph_styles_ = p;
  }
  return _impl_.paragraph_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_paragraph_styles() {
  ::TSCH::SparseReferenceArrayArchive* _msg = _internal_mutable_paragraph_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_paragraph_styles(::TSCH::SparseReferenceArrayArchive* paragraph_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.paragraph_styles_);
  }
  if (paragraph_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_styles));
    if (message_arena != submessage_arena) {
      paragraph_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paragraph_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.paragraph_styles_ = paragraph_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
}

// -------------------------------------------------------------------

// StylePasteboardDataArchive

// optional .TSS.StyleArchive super = 1;
inline bool StylePasteboardDataArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool StylePasteboardDataArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& StylePasteboardDataArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& StylePasteboardDataArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.StylePasteboardDataArchive.super)
  return _internal_super();
}
inline void StylePasteboardDataArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StylePasteboardDataArchive.super)
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.StylePasteboardDataArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::mutable_super() {
  ::TSS::StyleArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.StylePasteboardDataArchive.super)
  return _msg;
}
inline void StylePasteboardDataArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StylePasteboardDataArchive.super)
}

// optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
inline bool StylePasteboardDataArchive::_internal_has_style_network() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_network_ != nullptr);
  return value;
}
inline bool StylePasteboardDataArchive::has_style_network() const {
  return _internal_has_style_network();
}
inline void StylePasteboardDataArchive::clear_style_network() {
  if (_impl_.style_network_ != nullptr) _impl_.style_network_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::PropertyValueStorageContainerArchive& StylePasteboardDataArchive::_internal_style_network() const {
  const ::TSCH::PropertyValueStorageContainerArchive* p = _impl_.style_network_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PropertyValueStorageContainerArchive&>(
      ::TSCH::_PropertyValueStorageContainerArchive_default_instance_);
}
inline const ::TSCH::PropertyValueStorageContainerArchive& StylePasteboardDataArchive::style_network() const {
  // @@protoc_insertion_point(field_get:TSCH.StylePasteboardDataArchive.style_network)
  return _internal_style_network();
}
inline void StylePasteboardDataArchive::unsafe_arena_set_allocated_style_network(
    ::TSCH::PropertyValueStorageContainerArchive* style_network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_network_);
  }
  _impl_.style_network_ = style_network;
  if (style_network) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StylePasteboardDataArchive.style_network)
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::release_style_network() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = _impl_.style_network_;
  _impl_.style_network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::unsafe_arena_release_style_network() {
  // @@protoc_insertion_point(field_release:TSCH.StylePasteboardDataArchive.style_network)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = _impl_.style_network_;
  _impl_.style_network_ = nullptr;
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::_internal_mutable_style_network() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.style_network_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(GetArenaForAllocation());
    _impl_.style_network_ = p;
  }
  return _impl_.style_network_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::mutable_style_network() {
  ::TSCH::PropertyValueStorageContainerArchive* _msg = _internal_mutable_style_network();
  // @@protoc_insertion_point(field_mutable:TSCH.StylePasteboardDataArchive.style_network)
  return _msg;
}
inline void StylePasteboardDataArchive::set_allocated_style_network(::TSCH::PropertyValueStorageContainerArchive* style_network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.style_network_;
  }
  if (style_network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(style_network);
    if (message_arena != submessage_arena) {
      style_network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_network, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.style_network_ = style_network;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StylePasteboardDataArchive.style_network)
}

// optional bool copied_from_entire_chart = 3;
inline bool StylePasteboardDataArchive::_internal_has_copied_from_entire_chart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StylePasteboardDataArchive::has_copied_from_entire_chart() const {
  return _internal_has_copied_from_entire_chart();
}
inline void StylePasteboardDataArchive::clear_copied_from_entire_chart() {
  _impl_.copied_from_entire_chart_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool StylePasteboardDataArchive::_internal_copied_from_entire_chart() const {
  return _impl_.copied_from_entire_chart_;
}
inline bool StylePasteboardDataArchive::copied_from_entire_chart() const {
  // @@protoc_insertion_point(field_get:TSCH.StylePasteboardDataArchive.copied_from_entire_chart)
  return _internal_copied_from_entire_chart();
}
inline void StylePasteboardDataArchive::_internal_set_copied_from_entire_chart(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.copied_from_entire_chart_ = value;
}
inline void StylePasteboardDataArchive::set_copied_from_entire_chart(bool value) {
  _internal_set_copied_from_entire_chart(value);
  // @@protoc_insertion_point(field_set:TSCH.StylePasteboardDataArchive.copied_from_entire_chart)
}

// -------------------------------------------------------------------

// ChartSelectionPathTypeArchive

// optional string path_type = 1;
inline bool ChartSelectionPathTypeArchive::_internal_has_path_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSelectionPathTypeArchive::has_path_type() const {
  return _internal_has_path_type();
}
inline void ChartSelectionPathTypeArchive::clear_path_type() {
  _impl_.path_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartSelectionPathTypeArchive::path_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathTypeArchive.path_type)
  return _internal_path_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartSelectionPathTypeArchive::set_path_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartSelectionPathTypeArchive.path_type)
}
inline std::string* ChartSelectionPathTypeArchive::mutable_path_type() {
  std::string* _s = _internal_mutable_path_type();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathTypeArchive.path_type)
  return _s;
}
inline const std::string& ChartSelectionPathTypeArchive::_internal_path_type() const {
  return _impl_.path_type_.Get();
}
inline void ChartSelectionPathTypeArchive::_internal_set_path_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::_internal_mutable_path_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::release_path_type() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathTypeArchive.path_type)
  if (!_internal_has_path_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_type_.IsDefault()) {
    _impl_.path_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartSelectionPathTypeArchive::set_allocated_path_type(std::string* path_type) {
  if (path_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_type_.SetAllocated(path_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_type_.IsDefault()) {
    _impl_.path_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathTypeArchive.path_type)
}

// optional string path_name = 2;
inline bool ChartSelectionPathTypeArchive::_internal_has_path_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSelectionPathTypeArchive::has_path_name() const {
  return _internal_has_path_name();
}
inline void ChartSelectionPathTypeArchive::clear_path_name() {
  _impl_.path_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartSelectionPathTypeArchive::path_name() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathTypeArchive.path_name)
  return _internal_path_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartSelectionPathTypeArchive::set_path_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartSelectionPathTypeArchive.path_name)
}
inline std::string* ChartSelectionPathTypeArchive::mutable_path_name() {
  std::string* _s = _internal_mutable_path_name();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathTypeArchive.path_name)
  return _s;
}
inline const std::string& ChartSelectionPathTypeArchive::_internal_path_name() const {
  return _impl_.path_name_.Get();
}
inline void ChartSelectionPathTypeArchive::_internal_set_path_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::_internal_mutable_path_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::release_path_name() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathTypeArchive.path_name)
  if (!_internal_has_path_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_name_.IsDefault()) {
    _impl_.path_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartSelectionPathTypeArchive::set_allocated_path_name(std::string* path_name) {
  if (path_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_name_.SetAllocated(path_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_name_.IsDefault()) {
    _impl_.path_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathTypeArchive.path_name)
}

// -------------------------------------------------------------------

// ChartAxisIDArchive

// optional .TSCH.AxisType axis_type = 1;
inline bool ChartAxisIDArchive::_internal_has_axis_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisIDArchive::has_axis_type() const {
  return _internal_has_axis_type();
}
inline void ChartAxisIDArchive::clear_axis_type() {
  _impl_.axis_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::TSCH::AxisType ChartAxisIDArchive::_internal_axis_type() const {
  return static_cast< ::TSCH::AxisType >(_impl_.axis_type_);
}
inline ::TSCH::AxisType ChartAxisIDArchive::axis_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisIDArchive.axis_type)
  return _internal_axis_type();
}
inline void ChartAxisIDArchive::_internal_set_axis_type(::TSCH::AxisType value) {
  assert(::TSCH::AxisType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_type_ = value;
}
inline void ChartAxisIDArchive::set_axis_type(::TSCH::AxisType value) {
  _internal_set_axis_type(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartAxisIDArchive.axis_type)
}

// optional uint32 ordinal = 2;
inline bool ChartAxisIDArchive::_internal_has_ordinal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisIDArchive::has_ordinal() const {
  return _internal_has_ordinal();
}
inline void ChartAxisIDArchive::clear_ordinal() {
  _impl_.ordinal_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChartAxisIDArchive::_internal_ordinal() const {
  return _impl_.ordinal_;
}
inline uint32_t ChartAxisIDArchive::ordinal() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisIDArchive.ordinal)
  return _internal_ordinal();
}
inline void ChartAxisIDArchive::_internal_set_ordinal(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ordinal_ = value;
}
inline void ChartAxisIDArchive::set_ordinal(uint32_t value) {
  _internal_set_ordinal(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartAxisIDArchive.ordinal)
}

// -------------------------------------------------------------------

// ChartSelectionPathArgumentArchive

// optional uint32 number = 1;
inline bool ChartSelectionPathArgumentArchive::_internal_has_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSelectionPathArgumentArchive::has_number() const {
  return _internal_has_number();
}
inline void ChartSelectionPathArgumentArchive::clear_number() {
  _impl_.number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChartSelectionPathArgumentArchive::_internal_number() const {
  return _impl_.number_;
}
inline uint32_t ChartSelectionPathArgumentArchive::number() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArgumentArchive.number)
  return _internal_number();
}
inline void ChartSelectionPathArgumentArchive::_internal_set_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.number_ = value;
}
inline void ChartSelectionPathArgumentArchive::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartSelectionPathArgumentArchive.number)
}

// optional .TSCH.ChartAxisIDArchive axis_id = 2;
inline bool ChartSelectionPathArgumentArchive::_internal_has_axis_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.axis_id_ != nullptr);
  return value;
}
inline bool ChartSelectionPathArgumentArchive::has_axis_id() const {
  return _internal_has_axis_id();
}
inline void ChartSelectionPathArgumentArchive::clear_axis_id() {
  if (_impl_.axis_id_ != nullptr) _impl_.axis_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartAxisIDArchive& ChartSelectionPathArgumentArchive::_internal_axis_id() const {
  const ::TSCH::ChartAxisIDArchive* p = _impl_.axis_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartAxisIDArchive&>(
      ::TSCH::_ChartAxisIDArchive_default_instance_);
}
inline const ::TSCH::ChartAxisIDArchive& ChartSelectionPathArgumentArchive::axis_id() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArgumentArchive.axis_id)
  return _internal_axis_id();
}
inline void ChartSelectionPathArgumentArchive::unsafe_arena_set_allocated_axis_id(
    ::TSCH::ChartAxisIDArchive* axis_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.axis_id_);
  }
  _impl_.axis_id_ = axis_id;
  if (axis_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionPathArgumentArchive.axis_id)
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::release_axis_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::unsafe_arena_release_axis_id() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathArgumentArchive.axis_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::_internal_mutable_axis_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(GetArenaForAllocation());
    _impl_.axis_id_ = p;
  }
  return _impl_.axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::mutable_axis_id() {
  ::TSCH::ChartAxisIDArchive* _msg = _internal_mutable_axis_id();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArgumentArchive.axis_id)
  return _msg;
}
inline void ChartSelectionPathArgumentArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.axis_id_;
  }
  if (axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(axis_id);
    if (message_arena != submessage_arena) {
      axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.axis_id_ = axis_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathArgumentArchive.axis_id)
}

// -------------------------------------------------------------------

// ChartSelectionPathArchive

// optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
inline bool ChartSelectionPathArchive::_internal_has_path_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.path_type_ != nullptr);
  return value;
}
inline bool ChartSelectionPathArchive::has_path_type() const {
  return _internal_has_path_type();
}
inline void ChartSelectionPathArchive::clear_path_type() {
  if (_impl_.path_type_ != nullptr) _impl_.path_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartSelectionPathTypeArchive& ChartSelectionPathArchive::_internal_path_type() const {
  const ::TSCH::ChartSelectionPathTypeArchive* p = _impl_.path_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartSelectionPathTypeArchive&>(
      ::TSCH::_ChartSelectionPathTypeArchive_default_instance_);
}
inline const ::TSCH::ChartSelectionPathTypeArchive& ChartSelectionPathArchive::path_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArchive.path_type)
  return _internal_path_type();
}
inline void ChartSelectionPathArchive::unsafe_arena_set_allocated_path_type(
    ::TSCH::ChartSelectionPathTypeArchive* path_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path_type_);
  }
  _impl_.path_type_ = path_type;
  if (path_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionPathArchive.path_type)
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::release_path_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSelectionPathTypeArchive* temp = _impl_.path_type_;
  _impl_.path_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::unsafe_arena_release_path_type() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathArchive.path_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSelectionPathTypeArchive* temp = _impl_.path_type_;
  _impl_.path_type_ = nullptr;
  return temp;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::_internal_mutable_path_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.path_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartSelectionPathTypeArchive>(GetArenaForAllocation());
    _impl_.path_type_ = p;
  }
  return _impl_.path_type_;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::mutable_path_type() {
  ::TSCH::ChartSelectionPathTypeArchive* _msg = _internal_mutable_path_type();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArchive.path_type)
  return _msg;
}
inline void ChartSelectionPathArchive::set_allocated_path_type(::TSCH::ChartSelectionPathTypeArchive* path_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path_type_;
  }
  if (path_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path_type);
    if (message_arena != submessage_arena) {
      path_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_type_ = path_type;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathArchive.path_type)
}

// optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
inline bool ChartSelectionPathArchive::_internal_has_sub_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sub_selection_ != nullptr);
  return value;
}
inline bool ChartSelectionPathArchive::has_sub_selection() const {
  return _internal_has_sub_selection();
}
inline void ChartSelectionPathArchive::clear_sub_selection() {
  if (_impl_.sub_selection_ != nullptr) _impl_.sub_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionPathArchive::_internal_sub_selection() const {
  const ::TSCH::ChartSelectionPathArchive* p = _impl_.sub_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartSelectionPathArchive&>(
      ::TSCH::_ChartSelectionPathArchive_default_instance_);
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionPathArchive::sub_selection() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArchive.sub_selection)
  return _internal_sub_selection();
}
inline void ChartSelectionPathArchive::unsafe_arena_set_allocated_sub_selection(
    ::TSCH::ChartSelectionPathArchive* sub_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sub_selection_);
  }
  _impl_.sub_selection_ = sub_selection;
  if (sub_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionPathArchive.sub_selection)
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::release_sub_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartSelectionPathArchive* temp = _impl_.sub_selection_;
  _impl_.sub_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::unsafe_arena_release_sub_selection() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathArchive.sub_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartSelectionPathArchive* temp = _impl_.sub_selection_;
  _impl_.sub_selection_ = nullptr;
  return temp;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::_internal_mutable_sub_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sub_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartSelectionPathArchive>(GetArenaForAllocation());
    _impl_.sub_selection_ = p;
  }
  return _impl_.sub_selection_;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::mutable_sub_selection() {
  ::TSCH::ChartSelectionPathArchive* _msg = _internal_mutable_sub_selection();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArchive.sub_selection)
  return _msg;
}
inline void ChartSelectionPathArchive::set_allocated_sub_selection(::TSCH::ChartSelectionPathArchive* sub_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sub_selection_;
  }
  if (sub_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sub_selection);
    if (message_arena != submessage_arena) {
      sub_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sub_selection_ = sub_selection;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathArchive.sub_selection)
}

// repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
inline int ChartSelectionPathArchive::_internal_arguments_size() const {
  return _impl_.arguments_.size();
}
inline int ChartSelectionPathArchive::arguments_size() const {
  return _internal_arguments_size();
}
inline void ChartSelectionPathArchive::clear_arguments() {
  _impl_.arguments_.Clear();
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArchive.arguments)
  return _impl_.arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >*
ChartSelectionPathArchive::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartSelectionPathArchive.arguments)
  return &_impl_.arguments_;
}
inline const ::TSCH::ChartSelectionPathArgumentArchive& ChartSelectionPathArchive::_internal_arguments(int index) const {
  return _impl_.arguments_.Get(index);
}
inline const ::TSCH::ChartSelectionPathArgumentArchive& ChartSelectionPathArchive::arguments(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArchive.arguments)
  return _internal_arguments(index);
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::_internal_add_arguments() {
  return _impl_.arguments_.Add();
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::add_arguments() {
  ::TSCH::ChartSelectionPathArgumentArchive* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:TSCH.ChartSelectionPathArchive.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >&
ChartSelectionPathArchive::arguments() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartSelectionPathArchive.arguments)
  return _impl_.arguments_;
}

// -------------------------------------------------------------------

// ChartSelectionArchive

// optional .TSP.Reference chart = 1;
inline bool ChartSelectionArchive::_internal_has_chart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_ != nullptr);
  return value;
}
inline bool ChartSelectionArchive::has_chart() const {
  return _internal_has_chart();
}
inline const ::TSP::Reference& ChartSelectionArchive::_internal_chart() const {
  const ::TSP::Reference* p = _impl_.chart_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartSelectionArchive::chart() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionArchive.chart)
  return _internal_chart();
}
inline void ChartSelectionArchive::unsafe_arena_set_allocated_chart(
    ::TSP::Reference* chart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  _impl_.chart_ = chart;
  if (chart) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionArchive.chart)
}
inline ::TSP::Reference* ChartSelectionArchive::release_chart() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartSelectionArchive::unsafe_arena_release_chart() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionArchive.chart)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartSelectionArchive::_internal_mutable_chart() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_ = p;
  }
  return _impl_.chart_;
}
inline ::TSP::Reference* ChartSelectionArchive::mutable_chart() {
  ::TSP::Reference* _msg = _internal_mutable_chart();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionArchive.chart)
  return _msg;
}
inline void ChartSelectionArchive::set_allocated_chart(::TSP::Reference* chart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  if (chart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart));
    if (message_arena != submessage_arena) {
      chart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionArchive.chart)
}

// repeated .TSCH.ChartSelectionPathArchive paths = 2;
inline int ChartSelectionArchive::_internal_paths_size() const {
  return _impl_.paths_.size();
}
inline int ChartSelectionArchive::paths_size() const {
  return _internal_paths_size();
}
inline void ChartSelectionArchive::clear_paths() {
  _impl_.paths_.Clear();
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionArchive.paths)
  return _impl_.paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
ChartSelectionArchive::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartSelectionArchive.paths)
  return &_impl_.paths_;
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionArchive::_internal_paths(int index) const {
  return _impl_.paths_.Get(index);
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionArchive::paths(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionArchive.paths)
  return _internal_paths(index);
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::_internal_add_paths() {
  return _impl_.paths_.Add();
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::add_paths() {
  ::TSCH::ChartSelectionPathArchive* _add = _internal_add_paths();
  // @@protoc_insertion_point(field_add:TSCH.ChartSelectionArchive.paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
ChartSelectionArchive::paths() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartSelectionArchive.paths)
  return _impl_.paths_;
}

// -------------------------------------------------------------------

// ChartUIState

// optional .TSP.Reference chart = 1;
inline bool ChartUIState::_internal_has_chart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_ != nullptr);
  return value;
}
inline bool ChartUIState::has_chart() const {
  return _internal_has_chart();
}
inline const ::TSP::Reference& ChartUIState::_internal_chart() const {
  const ::TSP::Reference* p = _impl_.chart_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartUIState::chart() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.chart)
  return _internal_chart();
}
inline void ChartUIState::unsafe_arena_set_allocated_chart(
    ::TSP::Reference* chart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  _impl_.chart_ = chart;
  if (chart) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartUIState.chart)
}
inline ::TSP::Reference* ChartUIState::release_chart() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartUIState::unsafe_arena_release_chart() {
  // @@protoc_insertion_point(field_release:TSCH.ChartUIState.chart)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartUIState::_internal_mutable_chart() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_ = p;
  }
  return _impl_.chart_;
}
inline ::TSP::Reference* ChartUIState::mutable_chart() {
  ::TSP::Reference* _msg = _internal_mutable_chart();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartUIState.chart)
  return _msg;
}
inline void ChartUIState::set_allocated_chart(::TSP::Reference* chart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  if (chart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart));
    if (message_arena != submessage_arena) {
      chart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartUIState.chart)
}

// optional int32 cde_last_row_selected = 2;
inline bool ChartUIState::_internal_has_cde_last_row_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_row_selected() const {
  return _internal_has_cde_last_row_selected();
}
inline void ChartUIState::clear_cde_last_row_selected() {
  _impl_.cde_last_row_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChartUIState::_internal_cde_last_row_selected() const {
  return _impl_.cde_last_row_selected_;
}
inline int32_t ChartUIState::cde_last_row_selected() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_row_selected)
  return _internal_cde_last_row_selected();
}
inline void ChartUIState::_internal_set_cde_last_row_selected(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cde_last_row_selected_ = value;
}
inline void ChartUIState::set_cde_last_row_selected(int32_t value) {
  _internal_set_cde_last_row_selected(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_row_selected)
}

// optional int32 cde_last_col_selected = 3;
inline bool ChartUIState::_internal_has_cde_last_col_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_col_selected() const {
  return _internal_has_cde_last_col_selected();
}
inline void ChartUIState::clear_cde_last_col_selected() {
  _impl_.cde_last_col_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ChartUIState::_internal_cde_last_col_selected() const {
  return _impl_.cde_last_col_selected_;
}
inline int32_t ChartUIState::cde_last_col_selected() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_col_selected)
  return _internal_cde_last_col_selected();
}
inline void ChartUIState::_internal_set_cde_last_col_selected(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cde_last_col_selected_ = value;
}
inline void ChartUIState::set_cde_last_col_selected(int32_t value) {
  _internal_set_cde_last_col_selected(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_col_selected)
}

// optional int32 cde_last_row_count = 4;
inline bool ChartUIState::_internal_has_cde_last_row_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_row_count() const {
  return _internal_has_cde_last_row_count();
}
inline void ChartUIState::clear_cde_last_row_count() {
  _impl_.cde_last_row_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ChartUIState::_internal_cde_last_row_count() const {
  return _impl_.cde_last_row_count_;
}
inline int32_t ChartUIState::cde_last_row_count() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_row_count)
  return _internal_cde_last_row_count();
}
inline void ChartUIState::_internal_set_cde_last_row_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cde_last_row_count_ = value;
}
inline void ChartUIState::set_cde_last_row_count(int32_t value) {
  _internal_set_cde_last_row_count(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_row_count)
}

// optional int32 cde_last_col_count = 5;
inline bool ChartUIState::_internal_has_cde_last_col_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_col_count() const {
  return _internal_has_cde_last_col_count();
}
inline void ChartUIState::clear_cde_last_col_count() {
  _impl_.cde_last_col_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ChartUIState::_internal_cde_last_col_count() const {
  return _impl_.cde_last_col_count_;
}
inline int32_t ChartUIState::cde_last_col_count() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_col_count)
  return _internal_cde_last_col_count();
}
inline void ChartUIState::_internal_set_cde_last_col_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cde_last_col_count_ = value;
}
inline void ChartUIState::set_cde_last_col_count(int32_t value) {
  _internal_set_cde_last_col_count(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_col_count)
}

// -------------------------------------------------------------------

// ChartFormatStructExtensions

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eproto
