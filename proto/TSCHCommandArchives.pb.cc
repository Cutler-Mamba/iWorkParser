// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHCommandArchives.proto

#include "TSCHCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCH {
PROTOBUF_CONSTEXPR CommandSetChartTypeArchive::CommandSetChartTypeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_geometry_command_)*/nullptr
  , /*decltype(_impl_.anchor_attachment_command_)*/nullptr
  , /*decltype(_impl_.original_legend_rect_)*/nullptr
  , /*decltype(_impl_.oldcharttype_)*/0
  , /*decltype(_impl_.newcharttype_)*/0} {}
struct CommandSetChartTypeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetChartTypeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetChartTypeArchiveDefaultTypeInternal() {}
  union {
    CommandSetChartTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetChartTypeArchiveDefaultTypeInternal _CommandSetChartTypeArchive_default_instance_;
PROTOBUF_CONSTEXPR PropertyMutationUndoTupleArchive::PropertyMutationUndoTupleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_info_)*/nullptr
  , /*decltype(_impl_.old_style_)*/nullptr
  , /*decltype(_impl_.new_style_)*/nullptr
  , /*decltype(_impl_.old_non_style_)*/nullptr
  , /*decltype(_impl_.new_non_style_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.style_owner_type_)*/1} {}
struct PropertyMutationUndoTupleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyMutationUndoTupleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyMutationUndoTupleArchiveDefaultTypeInternal() {}
  union {
    PropertyMutationUndoTupleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyMutationUndoTupleArchiveDefaultTypeInternal _PropertyMutationUndoTupleArchive_default_instance_;
PROTOBUF_CONSTEXPR StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_info_)*/nullptr
  , /*decltype(_impl_.old_value_)*/nullptr
  , /*decltype(_impl_.new_value_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.swap_type_)*/1} {}
struct StyleSwapUndoTupleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleSwapUndoTupleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleSwapUndoTupleArchiveDefaultTypeInternal() {}
  union {
    StyleSwapUndoTupleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleSwapUndoTupleArchiveDefaultTypeInternal _StyleSwapUndoTupleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandStyleSwapArchive::CommandStyleSwapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undo_tuples_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandStyleSwapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandStyleSwapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandStyleSwapArchiveDefaultTypeInternal() {}
  union {
    CommandStyleSwapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandStyleSwapArchiveDefaultTypeInternal _CommandStyleSwapArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetSeriesNameArchive::CommandSetSeriesNameArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.oldname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.seriesindex_)*/0u} {}
struct CommandSetSeriesNameArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetSeriesNameArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetSeriesNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetSeriesNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetSeriesNameArchiveDefaultTypeInternal _CommandSetSeriesNameArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetCategoryNameArchive::CommandSetCategoryNameArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.oldname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.categoryindex_)*/0u
  , /*decltype(_impl_.ismultidataindex_)*/false} {}
struct CommandSetCategoryNameArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetCategoryNameArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetCategoryNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetCategoryNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetCategoryNameArchiveDefaultTypeInternal _CommandSetCategoryNameArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandAddGridRowsArchive::CommandAddGridRowsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.location_)*/0u
  , /*decltype(_impl_.length_)*/0u} {}
struct CommandAddGridRowsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandAddGridRowsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandAddGridRowsArchiveDefaultTypeInternal() {}
  union {
    CommandAddGridRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandAddGridRowsArchiveDefaultTypeInternal _CommandAddGridRowsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandAddGridColumnsArchive::CommandAddGridColumnsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.location_)*/0u
  , /*decltype(_impl_.length_)*/0u} {}
struct CommandAddGridColumnsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandAddGridColumnsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandAddGridColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandAddGridColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandAddGridColumnsArchiveDefaultTypeInternal _CommandAddGridColumnsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMoveGridRowsArchive::CommandMoveGridRowsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.location_)*/0u
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.afterrow_)*/0} {}
struct CommandMoveGridRowsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMoveGridRowsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMoveGridRowsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveGridRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMoveGridRowsArchiveDefaultTypeInternal _CommandMoveGridRowsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.location_)*/0u
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.aftercolumn_)*/0} {}
struct CommandMoveGridColumnsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMoveGridColumnsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMoveGridColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveGridColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMoveGridColumnsArchiveDefaultTypeInternal _CommandMoveGridColumnsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDeleteGridRowsArchive_ValueRow::CommandDeleteGridRowsArchive_ValueRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandDeleteGridRowsArchive_ValueRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDeleteGridRowsArchive_ValueRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDeleteGridRowsArchive_ValueRowDefaultTypeInternal() {}
  union {
    CommandDeleteGridRowsArchive_ValueRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDeleteGridRowsArchive_ValueRowDefaultTypeInternal _CommandDeleteGridRowsArchive_ValueRow_default_instance_;
PROTOBUF_CONSTEXPR CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.value_row_)*/{}
  , /*decltype(_impl_.column_names_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.location_)*/0u
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.removed_all_rows_)*/false} {}
struct CommandDeleteGridRowsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDeleteGridRowsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDeleteGridRowsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteGridRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDeleteGridRowsArchiveDefaultTypeInternal _CommandDeleteGridRowsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDeleteGridColumnsArchive_ValueRow::CommandDeleteGridColumnsArchive_ValueRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandDeleteGridColumnsArchive_ValueRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDeleteGridColumnsArchive_ValueRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDeleteGridColumnsArchive_ValueRowDefaultTypeInternal() {}
  union {
    CommandDeleteGridColumnsArchive_ValueRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDeleteGridColumnsArchive_ValueRowDefaultTypeInternal _CommandDeleteGridColumnsArchive_ValueRow_default_instance_;
PROTOBUF_CONSTEXPR CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.value_row_)*/{}
  , /*decltype(_impl_.row_names_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.location_)*/0u
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.removed_all_columns_)*/false} {}
struct CommandDeleteGridColumnsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDeleteGridColumnsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDeleteGridColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteGridColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDeleteGridColumnsArchiveDefaultTypeInternal _CommandDeleteGridColumnsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetPreviewLocArchive::CommandSetPreviewLocArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_loc_)*/nullptr
  , /*decltype(_impl_.new_loc_)*/nullptr} {}
struct CommandSetPreviewLocArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetPreviewLocArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetPreviewLocArchiveDefaultTypeInternal() {}
  union {
    CommandSetPreviewLocArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetPreviewLocArchiveDefaultTypeInternal _CommandSetPreviewLocArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetGridValueArchive::CommandSetGridValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rowindex_)*/0u
  , /*decltype(_impl_.columnindex_)*/0u
  , /*decltype(_impl_.oldvalue_)*/0
  , /*decltype(_impl_.newvalue_)*/0} {}
struct CommandSetGridValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetGridValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetGridValueArchiveDefaultTypeInternal() {}
  union {
    CommandSetGridValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetGridValueArchiveDefaultTypeInternal _CommandSetGridValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetGridDirectionArchive::CommandSetGridDirectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_direction_)*/0u
  , /*decltype(_impl_.new_direction_)*/0u} {}
struct CommandSetGridDirectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetGridDirectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetGridDirectionArchiveDefaultTypeInternal() {}
  union {
    CommandSetGridDirectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetGridDirectionArchiveDefaultTypeInternal _CommandSetGridDirectionArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.seriesindex_)*/0u
  , /*decltype(_impl_.oldtype_)*/0u
  , /*decltype(_impl_.newtype_)*/0u} {}
struct CommandSetSeriesTypeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetSeriesTypeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetSeriesTypeArchiveDefaultTypeInternal() {}
  union {
    CommandSetSeriesTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetSeriesTypeArchiveDefaultTypeInternal _CommandSetSeriesTypeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetScatterFormatArchive::CommandSetScatterFormatArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.oldformat_)*/0u
  , /*decltype(_impl_.newformat_)*/0u} {}
struct CommandSetScatterFormatArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetScatterFormatArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetScatterFormatArchiveDefaultTypeInternal() {}
  union {
    CommandSetScatterFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetScatterFormatArchiveDefaultTypeInternal _CommandSetScatterFormatArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.oldindex_)*/0u
  , /*decltype(_impl_.newindex_)*/0u} {}
struct CommandSetMultiDataSetIndexArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetMultiDataSetIndexArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetMultiDataSetIndexArchiveDefaultTypeInternal() {}
  union {
    CommandSetMultiDataSetIndexArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetMultiDataSetIndexArchiveDefaultTypeInternal _CommandSetMultiDataSetIndexArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetLegendFrameArchive::CommandSetLegendFrameArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_legend_frame_)*/nullptr
  , /*decltype(_impl_.new_legend_frame_)*/nullptr} {}
struct CommandSetLegendFrameArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetLegendFrameArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetLegendFrameArchiveDefaultTypeInternal() {}
  union {
    CommandSetLegendFrameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetLegendFrameArchiveDefaultTypeInternal _CommandSetLegendFrameArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_geometry_command_)*/nullptr
  , /*decltype(_impl_.style_mutation_command_)*/nullptr
  , /*decltype(_impl_.anchor_attachment_command_)*/nullptr} {}
struct CommandSetPieWedgeExplosionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetPieWedgeExplosionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetPieWedgeExplosionDefaultTypeInternal() {}
  union {
    CommandSetPieWedgeExplosion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetPieWedgeExplosionDefaultTypeInternal _CommandSetPieWedgeExplosion_default_instance_;
PROTOBUF_CONSTEXPR SynchronousCommandArchive::SynchronousCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.command_)*/nullptr} {}
struct SynchronousCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SynchronousCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SynchronousCommandArchiveDefaultTypeInternal() {}
  union {
    SynchronousCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SynchronousCommandArchiveDefaultTypeInternal _SynchronousCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandReplaceAllArchive::CommandReplaceAllArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr} {}
struct CommandReplaceAllArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReplaceAllArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReplaceAllArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceAllArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReplaceAllArchiveDefaultTypeInternal _CommandReplaceAllArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandChartApplyTheme::CommandChartApplyTheme(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.swap_command_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr} {}
struct CommandChartApplyThemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChartApplyThemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChartApplyThemeDefaultTypeInternal() {}
  union {
    CommandChartApplyTheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChartApplyThemeDefaultTypeInternal _CommandChartApplyTheme_default_instance_;
PROTOBUF_CONSTEXPR CommandChartApplyPreset::CommandChartApplyPreset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.swap_command_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.behavior_)*/1} {}
struct CommandChartApplyPresetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChartApplyPresetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChartApplyPresetDefaultTypeInternal() {}
  union {
    CommandChartApplyPreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChartApplyPresetDefaultTypeInternal _CommandChartApplyPreset_default_instance_;
PROTOBUF_CONSTEXPR CommandCleanupGeometryArchive::CommandCleanupGeometryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_geometry_command_)*/nullptr
  , /*decltype(_impl_.anchor_attachment_command_)*/nullptr
  , /*decltype(_impl_.original_legend_rect_)*/nullptr} {}
struct CommandCleanupGeometryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCleanupGeometryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCleanupGeometryArchiveDefaultTypeInternal() {}
  union {
    CommandCleanupGeometryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCleanupGeometryArchiveDefaultTypeInternal _CommandCleanupGeometryArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartCommandArchive::ChartCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.original_dirty_state_)*/false} {}
struct ChartCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartCommandArchiveDefaultTypeInternal() {}
  union {
    ChartCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartCommandArchiveDefaultTypeInternal _ChartCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandReplaceGridValuesArchive_ValueRow::CommandReplaceGridValuesArchive_ValueRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandReplaceGridValuesArchive_ValueRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReplaceGridValuesArchive_ValueRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReplaceGridValuesArchive_ValueRowDefaultTypeInternal() {}
  union {
    CommandReplaceGridValuesArchive_ValueRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReplaceGridValuesArchive_ValueRowDefaultTypeInternal _CommandReplaceGridValuesArchive_ValueRow_default_instance_;
PROTOBUF_CONSTEXPR CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_data_rows_)*/{}
  , /*decltype(_impl_.new_data_rows_)*/{}
  , /*decltype(_impl_.old_row_names_)*/{}
  , /*decltype(_impl_.new_row_names_)*/{}
  , /*decltype(_impl_.old_col_names_)*/{}
  , /*decltype(_impl_.new_col_names_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rowindex_)*/0u
  , /*decltype(_impl_.columnindex_)*/0u
  , /*decltype(_impl_.rows_to_add_)*/0u
  , /*decltype(_impl_.cols_to_add_)*/0u} {}
struct CommandReplaceGridValuesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReplaceGridValuesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReplaceGridValuesArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceGridValuesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReplaceGridValuesArchiveDefaultTypeInternal _CommandReplaceGridValuesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.style_)*/nullptr} {}
struct CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal() {}
  union {
    CommandReplaceThemePresetArchive_StyleAndIdentifierPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal _CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_;
PROTOBUF_CONSTEXPR CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifiers_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.old_preset_)*/nullptr
  , /*decltype(_impl_.new_preset_)*/nullptr
  , /*decltype(_impl_.old_preset_index_)*/uint64_t{0u}} {}
struct CommandReplaceThemePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReplaceThemePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReplaceThemePresetArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceThemePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReplaceThemePresetArchiveDefaultTypeInternal _CommandReplaceThemePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandInvalidateWPCaches::CommandInvalidateWPCaches(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandInvalidateWPCachesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandInvalidateWPCachesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandInvalidateWPCachesDefaultTypeInternal() {}
  union {
    CommandInvalidateWPCaches _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandInvalidateWPCachesDefaultTypeInternal _CommandInvalidateWPCaches_default_instance_;
}  // namespace TSCH
static ::_pb::Metadata file_level_metadata_TSCHCommandArchives_2eproto[33];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSCHCommandArchives_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCHCommandArchives_2eproto = nullptr;

const uint32_t TableStruct_TSCHCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _impl_.oldcharttype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _impl_.newcharttype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _impl_.info_geometry_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _impl_.anchor_attachment_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetChartTypeArchive, _impl_.original_legend_rect_),
  0,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_.chart_info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_.style_owner_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_.old_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_.new_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_.old_non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyMutationUndoTupleArchive, _impl_.new_non_style_),
  0,
  6,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _impl_.chart_info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _impl_.swap_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _impl_.old_value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StyleSwapUndoTupleArchive, _impl_.new_value_),
  0,
  4,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandStyleSwapArchive, _impl_.undo_tuples_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _impl_.seriesindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _impl_.oldname_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesNameArchive, _impl_.newname_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _impl_.categoryindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _impl_.oldname_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _impl_.newname_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetCategoryNameArchive, _impl_.ismultidataindex_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridRowsArchive, _impl_.name_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandAddGridColumnsArchive, _impl_.name_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridRowsArchive, _impl_.afterrow_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandMoveGridColumnsArchive, _impl_.aftercolumn_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive_ValueRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive_ValueRow, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_.names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_.value_row_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_.removed_all_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridRowsArchive, _impl_.column_names_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive_ValueRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive_ValueRow, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_.names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_.value_row_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_.removed_all_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandDeleteGridColumnsArchive, _impl_.row_names_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPreviewLocArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPreviewLocArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPreviewLocArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPreviewLocArchive, _impl_.old_loc_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPreviewLocArchive, _impl_.new_loc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _impl_.rowindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _impl_.columnindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _impl_.oldvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridValueArchive, _impl_.newvalue_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, _impl_.old_direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetGridDirectionArchive, _impl_.new_direction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _impl_.seriesindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _impl_.oldtype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetSeriesTypeArchive, _impl_.newtype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, _impl_.oldformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetScatterFormatArchive, _impl_.newformat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, _impl_.oldindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetMultiDataSetIndexArchive, _impl_.newindex_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, _impl_.old_legend_frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetLegendFrameArchive, _impl_.new_legend_frame_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _impl_.info_geometry_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _impl_.style_mutation_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandSetPieWedgeExplosion, _impl_.anchor_attachment_command_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::SynchronousCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::SynchronousCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::SynchronousCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::SynchronousCommandArchive, _impl_.command_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceAllArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceAllArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceAllArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceAllArchive, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceAllArchive, _impl_.commands_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _impl_.swap_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyTheme, _impl_.preset_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _impl_.swap_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandChartApplyPreset, _impl_.behavior_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _impl_.info_geometry_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _impl_.anchor_attachment_command_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandCleanupGeometryArchive, _impl_.original_legend_rect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCommandArchive, _impl_.original_dirty_state_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive_ValueRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive_ValueRow, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.rowindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.columnindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.old_data_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.new_data_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.old_row_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.new_row_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.old_col_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.new_col_names_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.rows_to_add_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceGridValuesArchive, _impl_.cols_to_add_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair, _impl_.identifier_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _impl_.old_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _impl_.new_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _impl_.identifiers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandReplaceThemePresetArchive, _impl_.old_preset_index_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInvalidateWPCaches, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInvalidateWPCaches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CommandInvalidateWPCaches, _impl_.super_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::TSCH::CommandSetChartTypeArchive)},
  { 18, 31, -1, sizeof(::TSCH::PropertyMutationUndoTupleArchive)},
  { 38, 49, -1, sizeof(::TSCH::StyleSwapUndoTupleArchive)},
  { 54, 62, -1, sizeof(::TSCH::CommandStyleSwapArchive)},
  { 64, 74, -1, sizeof(::TSCH::CommandSetSeriesNameArchive)},
  { 78, 89, -1, sizeof(::TSCH::CommandSetCategoryNameArchive)},
  { 94, 104, -1, sizeof(::TSCH::CommandAddGridRowsArchive)},
  { 108, 118, -1, sizeof(::TSCH::CommandAddGridColumnsArchive)},
  { 122, 132, -1, sizeof(::TSCH::CommandMoveGridRowsArchive)},
  { 136, 146, -1, sizeof(::TSCH::CommandMoveGridColumnsArchive)},
  { 150, -1, -1, sizeof(::TSCH::CommandDeleteGridRowsArchive_ValueRow)},
  { 157, 170, -1, sizeof(::TSCH::CommandDeleteGridRowsArchive)},
  { 177, -1, -1, sizeof(::TSCH::CommandDeleteGridColumnsArchive_ValueRow)},
  { 184, 197, -1, sizeof(::TSCH::CommandDeleteGridColumnsArchive)},
  { 204, 213, -1, sizeof(::TSCH::CommandSetPreviewLocArchive)},
  { 216, 227, -1, sizeof(::TSCH::CommandSetGridValueArchive)},
  { 232, 241, -1, sizeof(::TSCH::CommandSetGridDirectionArchive)},
  { 244, 254, -1, sizeof(::TSCH::CommandSetSeriesTypeArchive)},
  { 258, 267, -1, sizeof(::TSCH::CommandSetScatterFormatArchive)},
  { 270, 279, -1, sizeof(::TSCH::CommandSetMultiDataSetIndexArchive)},
  { 282, 291, -1, sizeof(::TSCH::CommandSetLegendFrameArchive)},
  { 294, 304, -1, sizeof(::TSCH::CommandSetPieWedgeExplosion)},
  { 308, 316, -1, sizeof(::TSCH::SynchronousCommandArchive)},
  { 318, 327, -1, sizeof(::TSCH::CommandReplaceAllArchive)},
  { 330, 340, -1, sizeof(::TSCH::CommandChartApplyTheme)},
  { 344, 354, -1, sizeof(::TSCH::CommandChartApplyPreset)},
  { 358, 368, -1, sizeof(::TSCH::CommandCleanupGeometryArchive)},
  { 372, 381, -1, sizeof(::TSCH::ChartCommandArchive)},
  { 384, -1, -1, sizeof(::TSCH::CommandReplaceGridValuesArchive_ValueRow)},
  { 391, 408, -1, sizeof(::TSCH::CommandReplaceGridValuesArchive)},
  { 419, 427, -1, sizeof(::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair)},
  { 429, 441, -1, sizeof(::TSCH::CommandReplaceThemePresetArchive)},
  { 447, 454, -1, sizeof(::TSCH::CommandInvalidateWPCaches)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCH::_CommandSetChartTypeArchive_default_instance_._instance,
  &::TSCH::_PropertyMutationUndoTupleArchive_default_instance_._instance,
  &::TSCH::_StyleSwapUndoTupleArchive_default_instance_._instance,
  &::TSCH::_CommandStyleSwapArchive_default_instance_._instance,
  &::TSCH::_CommandSetSeriesNameArchive_default_instance_._instance,
  &::TSCH::_CommandSetCategoryNameArchive_default_instance_._instance,
  &::TSCH::_CommandAddGridRowsArchive_default_instance_._instance,
  &::TSCH::_CommandAddGridColumnsArchive_default_instance_._instance,
  &::TSCH::_CommandMoveGridRowsArchive_default_instance_._instance,
  &::TSCH::_CommandMoveGridColumnsArchive_default_instance_._instance,
  &::TSCH::_CommandDeleteGridRowsArchive_ValueRow_default_instance_._instance,
  &::TSCH::_CommandDeleteGridRowsArchive_default_instance_._instance,
  &::TSCH::_CommandDeleteGridColumnsArchive_ValueRow_default_instance_._instance,
  &::TSCH::_CommandDeleteGridColumnsArchive_default_instance_._instance,
  &::TSCH::_CommandSetPreviewLocArchive_default_instance_._instance,
  &::TSCH::_CommandSetGridValueArchive_default_instance_._instance,
  &::TSCH::_CommandSetGridDirectionArchive_default_instance_._instance,
  &::TSCH::_CommandSetSeriesTypeArchive_default_instance_._instance,
  &::TSCH::_CommandSetScatterFormatArchive_default_instance_._instance,
  &::TSCH::_CommandSetMultiDataSetIndexArchive_default_instance_._instance,
  &::TSCH::_CommandSetLegendFrameArchive_default_instance_._instance,
  &::TSCH::_CommandSetPieWedgeExplosion_default_instance_._instance,
  &::TSCH::_SynchronousCommandArchive_default_instance_._instance,
  &::TSCH::_CommandReplaceAllArchive_default_instance_._instance,
  &::TSCH::_CommandChartApplyTheme_default_instance_._instance,
  &::TSCH::_CommandChartApplyPreset_default_instance_._instance,
  &::TSCH::_CommandCleanupGeometryArchive_default_instance_._instance,
  &::TSCH::_ChartCommandArchive_default_instance_._instance,
  &::TSCH::_CommandReplaceGridValuesArchive_ValueRow_default_instance_._instance,
  &::TSCH::_CommandReplaceGridValuesArchive_default_instance_._instance,
  &::TSCH::_CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_._instance,
  &::TSCH::_CommandReplaceThemePresetArchive_default_instance_._instance,
  &::TSCH::_CommandInvalidateWPCaches_default_instance_._instance,
};

const char descriptor_table_protodef_TSCHCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031TSCHCommandArchives.proto\022\004TSCH\032\021TSPMe"
  "ssages.proto\032\021TSKArchives.proto\032\021TSSArch"
  "ives.proto\032\021TSDArchives.proto\032\031TSCHArchi"
  "ves.Common.proto\032\026TSCHArchives.GEN.proto"
  "\032\024TSCH3DArchives.proto\032\022TSCHArchives.pro"
  "to\"\247\002\n\032CommandSetChartTypeArchive\022(\n\005sup"
  "er\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022%\n\014o"
  "ldChartType\030\002 \002(\0162\017.TSCH.ChartType\022%\n\014ne"
  "wChartType\030\003 \002(\0162\017.TSCH.ChartType\022-\n\025inf"
  "o_geometry_command\030\005 \001(\0132\016.TSP.Reference"
  "\0221\n\031anchor_attachment_command\030\006 \001(\0132\016.TS"
  "P.Reference\022/\n\024original_legend_rect\030\007 \001("
  "\0132\021.TSCH.RectArchive\"\231\002\n PropertyMutatio"
  "nUndoTupleArchive\022\"\n\nchart_info\030\001 \001(\0132\016."
  "TSP.Reference\022.\n\020style_owner_type\030\002 \001(\0162"
  "\024.TSCH.StyleOwnerType\022\r\n\005index\030\003 \001(\r\022!\n\t"
  "old_style\030\004 \001(\0132\016.TSP.Reference\022!\n\tnew_s"
  "tyle\030\005 \001(\0132\016.TSP.Reference\022%\n\rold_non_st"
  "yle\030\006 \001(\0132\016.TSP.Reference\022%\n\rnew_non_sty"
  "le\030\007 \001(\0132\016.TSP.Reference\"\274\001\n\031StyleSwapUn"
  "doTupleArchive\022\"\n\nchart_info\030\001 \001(\0132\016.TSP"
  ".Reference\022&\n\tswap_type\030\002 \001(\0162\023.TSCH.Sty"
  "leSwapType\022\r\n\005index\030\003 \001(\r\022!\n\told_value\030\004"
  " \001(\0132\016.TSP.Reference\022!\n\tnew_value\030\005 \001(\0132"
  "\016.TSP.Reference\"y\n\027CommandStyleSwapArchi"
  "ve\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArc"
  "hive\0224\n\013undo_tuples\030\002 \003(\0132\037.TSCH.StyleSw"
  "apUndoTupleArchive\"~\n\033CommandSetSeriesNa"
  "meArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCom"
  "mandArchive\022\023\n\013seriesIndex\030\002 \002(\r\022\017\n\007oldN"
  "ame\030\003 \002(\t\022\017\n\007newName\030\004 \002(\t\"\234\001\n\035CommandSe"
  "tCategoryNameArchive\022(\n\005super\030\001 \002(\0132\031.TS"
  "CH.ChartCommandArchive\022\025\n\rcategoryIndex\030"
  "\002 \002(\r\022\017\n\007oldName\030\003 \002(\t\022\017\n\007newName\030\004 \002(\t\022"
  "\030\n\020isMultiDataIndex\030\005 \001(\010\"u\n\031CommandAddG"
  "ridRowsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Cha"
  "rtCommandArchive\022\020\n\010location\030\002 \002(\r\022\016\n\006le"
  "ngth\030\003 \001(\r\022\014\n\004name\030\004 \003(\t\"x\n\034CommandAddGr"
  "idColumnsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
  "hartCommandArchive\022\020\n\010location\030\002 \002(\r\022\016\n\006"
  "length\030\003 \001(\r\022\014\n\004name\030\004 \003(\t\"z\n\032CommandMov"
  "eGridRowsArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
  "hartCommandArchive\022\020\n\010location\030\002 \002(\r\022\016\n\006"
  "length\030\003 \002(\r\022\020\n\010afterrow\030\004 \002(\005\"\200\001\n\035Comma"
  "ndMoveGridColumnsArchive\022(\n\005super\030\001 \002(\0132"
  "\031.TSCH.ChartCommandArchive\022\020\n\010location\030\002"
  " \002(\r\022\016\n\006length\030\003 \002(\r\022\023\n\013aftercolumn\030\004 \002("
  "\005\"\204\002\n\034CommandDeleteGridRowsArchive\022(\n\005su"
  "per\030\001 \002(\0132\031.TSCH.ChartCommandArchive\022\020\n\010"
  "location\030\002 \002(\r\022\016\n\006length\030\003 \002(\r\022\r\n\005names\030"
  "\004 \003(\t\022>\n\tvalue_row\030\006 \003(\0132+.TSCH.CommandD"
  "eleteGridRowsArchive.ValueRow\022\030\n\020removed"
  "_all_rows\030\007 \001(\010\022\024\n\014column_names\030\010 \003(\t\032\031\n"
  "\010ValueRow\022\r\n\005value\030\005 \003(\001\"\212\002\n\037CommandDele"
  "teGridColumnsArchive\022(\n\005super\030\001 \002(\0132\031.TS"
  "CH.ChartCommandArchive\022\020\n\010location\030\002 \002(\r"
  "\022\016\n\006length\030\003 \002(\r\022\r\n\005names\030\004 \003(\t\022A\n\tvalue"
  "_row\030\006 \003(\0132..TSCH.CommandDeleteGridColum"
  "nsArchive.ValueRow\022\033\n\023removed_all_column"
  "s\030\007 \001(\010\022\021\n\trow_names\030\010 \003(\t\032\031\n\010ValueRow\022\r"
  "\n\005value\030\005 \003(\001\"\201\001\n\033CommandSetPreviewLocAr"
  "chive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommand"
  "Archive\022\033\n\007old_loc\030\002 \002(\0132\n.TSP.Point\022\033\n\007"
  "new_loc\030\003 \002(\0132\n.TSP.Point\"\221\001\n\032CommandSet"
  "GridValueArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.C"
  "hartCommandArchive\022\020\n\010rowindex\030\002 \002(\r\022\023\n\013"
  "columnindex\030\003 \002(\r\022\020\n\010oldvalue\030\004 \002(\001\022\020\n\010n"
  "ewvalue\030\005 \002(\001\"x\n\036CommandSetGridDirection"
  "Archive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComma"
  "ndArchive\022\025\n\rold_direction\030\002 \002(\r\022\025\n\rnew_"
  "direction\030\003 \002(\r\"~\n\033CommandSetSeriesTypeA"
  "rchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComman"
  "dArchive\022\023\n\013seriesindex\030\002 \002(\r\022\017\n\007oldtype"
  "\030\003 \002(\r\022\017\n\007newtype\030\004 \002(\r\"p\n\036CommandSetSca"
  "tterFormatArchive\022(\n\005super\030\001 \002(\0132\031.TSCH."
  "ChartCommandArchive\022\021\n\toldformat\030\003 \002(\r\022\021"
  "\n\tnewformat\030\004 \002(\r\"r\n\"CommandSetMultiData"
  "SetIndexArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Ch"
  "artCommandArchive\022\020\n\010oldindex\030\002 \002(\r\022\020\n\010n"
  "ewindex\030\003 \002(\r\"\242\001\n\034CommandSetLegendFrameA"
  "rchive\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComman"
  "dArchive\022+\n\020old_legend_frame\030\002 \002(\0132\021.TSC"
  "H.RectArchive\022+\n\020new_legend_frame\030\003 \002(\0132"
  "\021.TSCH.RectArchive\"\331\001\n\033CommandSetPieWedg"
  "eExplosion\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartCo"
  "mmandArchive\022-\n\025info_geometry_command\030\002 "
  "\001(\0132\016.TSP.Reference\022.\n\026style_mutation_co"
  "mmand\030\003 \001(\0132\016.TSP.Reference\0221\n\031anchor_at"
  "tachment_command\030\004 \001(\0132\016.TSP.Reference\"`"
  "\n\031SynchronousCommandArchive\022\"\n\005super\030\001 \002"
  "(\0132\023.TSK.CommandArchive\022\037\n\007command\030\002 \002(\013"
  "2\016.TSP.Reference\"\215\001\n\030CommandReplaceAllAr"
  "chive\0221\n\005super\030\001 \002(\0132\".TSK.ReplaceAllChi"
  "ldCommandArchive\022\034\n\004info\030\002 \002(\0132\016.TSP.Ref"
  "erence\022 \n\010commands\030\003 \003(\0132\016.TSP.Reference"
  "\"\257\001\n\026CommandChartApplyTheme\0221\n\005super\030\001 \002"
  "(\0132\".TSS.ApplyThemeChildCommandArchive\022\034"
  "\n\004info\030\002 \002(\0132\016.TSP.Reference\022$\n\014swap_com"
  "mand\030\003 \001(\0132\016.TSP.Reference\022\036\n\006preset\030\004 \001"
  "(\0132\016.TSP.Reference\"\310\001\n\027CommandChartApply"
  "Preset\022(\n\005super\030\001 \002(\0132\031.TSCH.ChartComman"
  "dArchive\022$\n\014swap_command\030\002 \001(\0132\016.TSP.Ref"
  "erence\022\036\n\006preset\030\003 \001(\0132\016.TSP.Reference\022="
  "\n\010behavior\030\004 \001(\0162\031.TSCH.ApplyPresetBehav"
  "ior:\020remove_overrides\"\334\001\n\035CommandCleanup"
  "GeometryArchive\022(\n\005super\030\001 \002(\0132\031.TSCH.Ch"
  "artCommandArchive\022-\n\025info_geometry_comma"
  "nd\030\002 \001(\0132\016.TSP.Reference\0221\n\031anchor_attac"
  "hment_command\030\003 \001(\0132\016.TSP.Reference\022/\n\024o"
  "riginal_legend_rect\030\004 \001(\0132\021.TSCH.RectArc"
  "hive\"u\n\023ChartCommandArchive\022\"\n\005super\030\001 \002"
  "(\0132\023.TSK.CommandArchive\022\034\n\004info\030\002 \002(\0132\016."
  "TSP.Reference\022\034\n\024original_dirty_state\030\003 "
  "\001(\010\"\241\003\n\037CommandReplaceGridValuesArchive\022"
  "(\n\005super\030\001 \002(\0132\031.TSCH.ChartCommandArchiv"
  "e\022\020\n\010rowindex\030\002 \002(\r\022\023\n\013columnindex\030\003 \002(\r"
  "\022E\n\rold_data_rows\030\004 \003(\0132..TSCH.CommandRe"
  "placeGridValuesArchive.ValueRow\022E\n\rnew_d"
  "ata_rows\030\005 \003(\0132..TSCH.CommandReplaceGrid"
  "ValuesArchive.ValueRow\022\025\n\rold_row_names\030"
  "\006 \003(\t\022\025\n\rnew_row_names\030\007 \003(\t\022\025\n\rold_col_"
  "names\030\010 \003(\t\022\025\n\rnew_col_names\030\t \003(\t\022\023\n\013ro"
  "ws_to_add\030\n \001(\r\022\023\n\013cols_to_add\030\013 \001(\r\032\031\n\010"
  "ValueRow\022\r\n\005value\030\001 \003(\001\"\350\002\n CommandRepla"
  "ceThemePresetArchive\022\"\n\005super\030\001 \002(\0132\023.TS"
  "K.CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Re"
  "ference\022\"\n\nold_preset\030\003 \001(\0132\016.TSP.Refere"
  "nce\022\"\n\nnew_preset\030\004 \001(\0132\016.TSP.Reference\022"
  "R\n\013identifiers\030\005 \003(\0132=.TSCH.CommandRepla"
  "ceThemePresetArchive.StyleAndIdentifierP"
  "air\022\030\n\020old_preset_index\030\006 \001(\004\032K\n\026StyleAn"
  "dIdentifierPair\022\035\n\005style\030\001 \002(\0132\016.TSP.Ref"
  "erence\022\022\n\nidentifier\030\002 \002(\t\"\?\n\031CommandInv"
  "alidateWPCaches\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
  "mandArchive*T\n\016StyleOwnerType\022\016\n\nchart_i"
  "nfo\020\001\022\020\n\014legend_model\020\002\022\016\n\nchart_axis\020\003\022"
  "\020\n\014chart_series\020\004*\240\002\n\rStyleSwapType\022\017\n\013c"
  "hart_style\020\001\022\023\n\017chart_non_style\020\002\022\020\n\014leg"
  "end_style\020\003\022\024\n\020legend_non_style\020\004\022\024\n\020val"
  "ue_axis_style\020\005\022\030\n\024value_axis_non_style\020"
  "\006\022\027\n\023category_axis_style\020\007\022\033\n\027category_a"
  "xis_non_style\020\010\022\026\n\022series_theme_style\020\t\022"
  "\030\n\024series_private_style\020\n\022\024\n\020series_non_"
  "style\020\013\022\023\n\017paragraph_style\020\014*\\\n\023ApplyPre"
  "setBehavior\022\024\n\020remove_overrides\020\001\022\026\n\022pre"
  "serve_overrides\020\002\022\027\n\023preserve_appearance"
  "\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCHCommandArchives_2eproto_deps[8] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSCHArchives_2eGEN_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCHCommandArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCHCommandArchives_2eproto = {
    false, false, 5842, descriptor_table_protodef_TSCHCommandArchives_2eproto,
    "TSCHCommandArchives.proto",
    &descriptor_table_TSCHCommandArchives_2eproto_once, descriptor_table_TSCHCommandArchives_2eproto_deps, 8, 33,
    schemas, file_default_instances, TableStruct_TSCHCommandArchives_2eproto::offsets,
    file_level_metadata_TSCHCommandArchives_2eproto, file_level_enum_descriptors_TSCHCommandArchives_2eproto,
    file_level_service_descriptors_TSCHCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCHCommandArchives_2eproto_getter() {
  return &descriptor_table_TSCHCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCHCommandArchives_2eproto(&descriptor_table_TSCHCommandArchives_2eproto);
namespace TSCH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleOwnerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCHCommandArchives_2eproto);
  return file_level_enum_descriptors_TSCHCommandArchives_2eproto[0];
}
bool StyleOwnerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleSwapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCHCommandArchives_2eproto);
  return file_level_enum_descriptors_TSCHCommandArchives_2eproto[1];
}
bool StyleSwapType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplyPresetBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCHCommandArchives_2eproto);
  return file_level_enum_descriptors_TSCHCommandArchives_2eproto[2];
}
bool ApplyPresetBehavior_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CommandSetChartTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetChartTypeArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetChartTypeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldcharttype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_newcharttype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& info_geometry_command(const CommandSetChartTypeArchive* msg);
  static void set_has_info_geometry_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& anchor_attachment_command(const CommandSetChartTypeArchive* msg);
  static void set_has_anchor_attachment_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::RectArchive& original_legend_rect(const CommandSetChartTypeArchive* msg);
  static void set_has_original_legend_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000031) ^ 0x00000031) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetChartTypeArchive::_Internal::super(const CommandSetChartTypeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetChartTypeArchive::_Internal::info_geometry_command(const CommandSetChartTypeArchive* msg) {
  return *msg->_impl_.info_geometry_command_;
}
const ::TSP::Reference&
CommandSetChartTypeArchive::_Internal::anchor_attachment_command(const CommandSetChartTypeArchive* msg) {
  return *msg->_impl_.anchor_attachment_command_;
}
const ::TSCH::RectArchive&
CommandSetChartTypeArchive::_Internal::original_legend_rect(const CommandSetChartTypeArchive* msg) {
  return *msg->_impl_.original_legend_rect_;
}
void CommandSetChartTypeArchive::clear_info_geometry_command() {
  if (_impl_.info_geometry_command_ != nullptr) _impl_.info_geometry_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetChartTypeArchive::clear_anchor_attachment_command() {
  if (_impl_.anchor_attachment_command_ != nullptr) _impl_.anchor_attachment_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetChartTypeArchive::clear_original_legend_rect() {
  if (_impl_.original_legend_rect_ != nullptr) _impl_.original_legend_rect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSetChartTypeArchive::CommandSetChartTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetChartTypeArchive)
}
CommandSetChartTypeArchive::CommandSetChartTypeArchive(const CommandSetChartTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetChartTypeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_geometry_command_){nullptr}
    , decltype(_impl_.anchor_attachment_command_){nullptr}
    , decltype(_impl_.original_legend_rect_){nullptr}
    , decltype(_impl_.oldcharttype_){}
    , decltype(_impl_.newcharttype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info_geometry_command()) {
    _this->_impl_.info_geometry_command_ = new ::TSP::Reference(*from._impl_.info_geometry_command_);
  }
  if (from._internal_has_anchor_attachment_command()) {
    _this->_impl_.anchor_attachment_command_ = new ::TSP::Reference(*from._impl_.anchor_attachment_command_);
  }
  if (from._internal_has_original_legend_rect()) {
    _this->_impl_.original_legend_rect_ = new ::TSCH::RectArchive(*from._impl_.original_legend_rect_);
  }
  ::memcpy(&_impl_.oldcharttype_, &from._impl_.oldcharttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newcharttype_) -
    reinterpret_cast<char*>(&_impl_.oldcharttype_)) + sizeof(_impl_.newcharttype_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetChartTypeArchive)
}

inline void CommandSetChartTypeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_geometry_command_){nullptr}
    , decltype(_impl_.anchor_attachment_command_){nullptr}
    , decltype(_impl_.original_legend_rect_){nullptr}
    , decltype(_impl_.oldcharttype_){0}
    , decltype(_impl_.newcharttype_){0}
  };
}

CommandSetChartTypeArchive::~CommandSetChartTypeArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetChartTypeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetChartTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_geometry_command_;
  if (this != internal_default_instance()) delete _impl_.anchor_attachment_command_;
  if (this != internal_default_instance()) delete _impl_.original_legend_rect_;
}

void CommandSetChartTypeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetChartTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetChartTypeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_geometry_command_ != nullptr);
      _impl_.info_geometry_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.anchor_attachment_command_ != nullptr);
      _impl_.anchor_attachment_command_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.original_legend_rect_ != nullptr);
      _impl_.original_legend_rect_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.oldcharttype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.newcharttype_) -
        reinterpret_cast<char*>(&_impl_.oldcharttype_)) + sizeof(_impl_.newcharttype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetChartTypeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.ChartType oldChartType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_oldcharttype(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.ChartType newChartType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_newcharttype(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference info_geometry_command = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_geometry_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference anchor_attachment_command = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_attachment_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.RectArchive original_legend_rect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_legend_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetChartTypeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetChartTypeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.ChartType oldChartType = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_oldcharttype(), target);
  }

  // required .TSCH.ChartType newChartType = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_newcharttype(), target);
  }

  // optional .TSP.Reference info_geometry_command = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::info_geometry_command(this),
        _Internal::info_geometry_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference anchor_attachment_command = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::anchor_attachment_command(this),
        _Internal::anchor_attachment_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.RectArchive original_legend_rect = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::original_legend_rect(this),
        _Internal::original_legend_rect(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetChartTypeArchive)
  return target;
}

size_t CommandSetChartTypeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetChartTypeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_oldcharttype()) {
    // required .TSCH.ChartType oldChartType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_oldcharttype());
  }

  if (_internal_has_newcharttype()) {
    // required .TSCH.ChartType newChartType = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_newcharttype());
  }

  return total_size;
}
size_t CommandSetChartTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetChartTypeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000031) ^ 0x00000031) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSCH.ChartType oldChartType = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_oldcharttype());

    // required .TSCH.ChartType newChartType = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_newcharttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference info_geometry_command = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_geometry_command_);
    }

    // optional .TSP.Reference anchor_attachment_command = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anchor_attachment_command_);
    }

    // optional .TSCH.RectArchive original_legend_rect = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.original_legend_rect_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetChartTypeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetChartTypeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetChartTypeArchive::GetClassData() const { return &_class_data_; }


void CommandSetChartTypeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetChartTypeArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetChartTypeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetChartTypeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info_geometry_command()->::TSP::Reference::MergeFrom(
          from._internal_info_geometry_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_anchor_attachment_command()->::TSP::Reference::MergeFrom(
          from._internal_anchor_attachment_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_original_legend_rect()->::TSCH::RectArchive::MergeFrom(
          from._internal_original_legend_rect());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.oldcharttype_ = from._impl_.oldcharttype_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.newcharttype_ = from._impl_.newcharttype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetChartTypeArchive::CopyFrom(const CommandSetChartTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetChartTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetChartTypeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info_geometry_command()) {
    if (!_impl_.info_geometry_command_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_attachment_command()) {
    if (!_impl_.anchor_attachment_command_->IsInitialized()) return false;
  }
  if (_internal_has_original_legend_rect()) {
    if (!_impl_.original_legend_rect_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetChartTypeArchive::InternalSwap(CommandSetChartTypeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetChartTypeArchive, _impl_.newcharttype_)
      + sizeof(CommandSetChartTypeArchive::_impl_.newcharttype_)
      - PROTOBUF_FIELD_OFFSET(CommandSetChartTypeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetChartTypeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[0]);
}

// ===================================================================

class PropertyMutationUndoTupleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyMutationUndoTupleArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& chart_info(const PropertyMutationUndoTupleArchive* msg);
  static void set_has_chart_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_owner_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& old_style(const PropertyMutationUndoTupleArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_style(const PropertyMutationUndoTupleArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_non_style(const PropertyMutationUndoTupleArchive* msg);
  static void set_has_old_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& new_non_style(const PropertyMutationUndoTupleArchive* msg);
  static void set_has_new_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
PropertyMutationUndoTupleArchive::_Internal::chart_info(const PropertyMutationUndoTupleArchive* msg) {
  return *msg->_impl_.chart_info_;
}
const ::TSP::Reference&
PropertyMutationUndoTupleArchive::_Internal::old_style(const PropertyMutationUndoTupleArchive* msg) {
  return *msg->_impl_.old_style_;
}
const ::TSP::Reference&
PropertyMutationUndoTupleArchive::_Internal::new_style(const PropertyMutationUndoTupleArchive* msg) {
  return *msg->_impl_.new_style_;
}
const ::TSP::Reference&
PropertyMutationUndoTupleArchive::_Internal::old_non_style(const PropertyMutationUndoTupleArchive* msg) {
  return *msg->_impl_.old_non_style_;
}
const ::TSP::Reference&
PropertyMutationUndoTupleArchive::_Internal::new_non_style(const PropertyMutationUndoTupleArchive* msg) {
  return *msg->_impl_.new_non_style_;
}
void PropertyMutationUndoTupleArchive::clear_chart_info() {
  if (_impl_.chart_info_ != nullptr) _impl_.chart_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PropertyMutationUndoTupleArchive::clear_old_style() {
  if (_impl_.old_style_ != nullptr) _impl_.old_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PropertyMutationUndoTupleArchive::clear_new_style() {
  if (_impl_.new_style_ != nullptr) _impl_.new_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PropertyMutationUndoTupleArchive::clear_old_non_style() {
  if (_impl_.old_non_style_ != nullptr) _impl_.old_non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void PropertyMutationUndoTupleArchive::clear_new_non_style() {
  if (_impl_.new_non_style_ != nullptr) _impl_.new_non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
PropertyMutationUndoTupleArchive::PropertyMutationUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PropertyMutationUndoTupleArchive)
}
PropertyMutationUndoTupleArchive::PropertyMutationUndoTupleArchive(const PropertyMutationUndoTupleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyMutationUndoTupleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_info_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.old_non_style_){nullptr}
    , decltype(_impl_.new_non_style_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.style_owner_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart_info()) {
    _this->_impl_.chart_info_ = new ::TSP::Reference(*from._impl_.chart_info_);
  }
  if (from._internal_has_old_style()) {
    _this->_impl_.old_style_ = new ::TSP::Reference(*from._impl_.old_style_);
  }
  if (from._internal_has_new_style()) {
    _this->_impl_.new_style_ = new ::TSP::Reference(*from._impl_.new_style_);
  }
  if (from._internal_has_old_non_style()) {
    _this->_impl_.old_non_style_ = new ::TSP::Reference(*from._impl_.old_non_style_);
  }
  if (from._internal_has_new_non_style()) {
    _this->_impl_.new_non_style_ = new ::TSP::Reference(*from._impl_.new_non_style_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_owner_type_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.style_owner_type_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PropertyMutationUndoTupleArchive)
}

inline void PropertyMutationUndoTupleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_info_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.old_non_style_){nullptr}
    , decltype(_impl_.new_non_style_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.style_owner_type_){1}
  };
}

PropertyMutationUndoTupleArchive::~PropertyMutationUndoTupleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PropertyMutationUndoTupleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyMutationUndoTupleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chart_info_;
  if (this != internal_default_instance()) delete _impl_.old_style_;
  if (this != internal_default_instance()) delete _impl_.new_style_;
  if (this != internal_default_instance()) delete _impl_.old_non_style_;
  if (this != internal_default_instance()) delete _impl_.new_non_style_;
}

void PropertyMutationUndoTupleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyMutationUndoTupleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PropertyMutationUndoTupleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.chart_info_ != nullptr);
      _impl_.chart_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_style_ != nullptr);
      _impl_.old_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_style_ != nullptr);
      _impl_.new_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_non_style_ != nullptr);
      _impl_.old_non_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.new_non_style_ != nullptr);
      _impl_.new_non_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    _impl_.index_ = 0u;
    _impl_.style_owner_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyMutationUndoTupleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.StyleOwnerType style_owner_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::StyleOwnerType_IsValid(val))) {
            _internal_set_style_owner_type(static_cast<::TSCH::StyleOwnerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_non_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_non_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyMutationUndoTupleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PropertyMutationUndoTupleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart_info(this),
        _Internal::chart_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.StyleOwnerType style_owner_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_style_owner_type(), target);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // optional .TSP.Reference old_style = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_style(this),
        _Internal::old_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_style = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_style(this),
        _Internal::new_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_non_style = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::old_non_style(this),
        _Internal::old_non_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_non_style = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::new_non_style(this),
        _Internal::new_non_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PropertyMutationUndoTupleArchive)
  return target;
}

size_t PropertyMutationUndoTupleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PropertyMutationUndoTupleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Reference chart_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_info_);
    }

    // optional .TSP.Reference old_style = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_style_);
    }

    // optional .TSP.Reference new_style = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_style_);
    }

    // optional .TSP.Reference old_non_style = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_non_style_);
    }

    // optional .TSP.Reference new_non_style = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_non_style_);
    }

    // optional uint32 index = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional .TSCH.StyleOwnerType style_owner_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_style_owner_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyMutationUndoTupleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyMutationUndoTupleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyMutationUndoTupleArchive::GetClassData() const { return &_class_data_; }


void PropertyMutationUndoTupleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyMutationUndoTupleArchive*>(&to_msg);
  auto& from = static_cast<const PropertyMutationUndoTupleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PropertyMutationUndoTupleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart_info()->::TSP::Reference::MergeFrom(
          from._internal_chart_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_style()->::TSP::Reference::MergeFrom(
          from._internal_old_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_style()->::TSP::Reference::MergeFrom(
          from._internal_new_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_non_style()->::TSP::Reference::MergeFrom(
          from._internal_old_non_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_new_non_style()->::TSP::Reference::MergeFrom(
          from._internal_new_non_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.style_owner_type_ = from._impl_.style_owner_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyMutationUndoTupleArchive::CopyFrom(const PropertyMutationUndoTupleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PropertyMutationUndoTupleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyMutationUndoTupleArchive::IsInitialized() const {
  if (_internal_has_chart_info()) {
    if (!_impl_.chart_info_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!_impl_.old_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!_impl_.new_style_->IsInitialized()) return false;
  }
  if (_internal_has_old_non_style()) {
    if (!_impl_.old_non_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_non_style()) {
    if (!_impl_.new_non_style_->IsInitialized()) return false;
  }
  return true;
}

void PropertyMutationUndoTupleArchive::InternalSwap(PropertyMutationUndoTupleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyMutationUndoTupleArchive, _impl_.index_)
      + sizeof(PropertyMutationUndoTupleArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(PropertyMutationUndoTupleArchive, _impl_.chart_info_)>(
          reinterpret_cast<char*>(&_impl_.chart_info_),
          reinterpret_cast<char*>(&other->_impl_.chart_info_));
  swap(_impl_.style_owner_type_, other->_impl_.style_owner_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyMutationUndoTupleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[1]);
}

// ===================================================================

class StyleSwapUndoTupleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleSwapUndoTupleArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& chart_info(const StyleSwapUndoTupleArchive* msg);
  static void set_has_chart_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_swap_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& old_value(const StyleSwapUndoTupleArchive* msg);
  static void set_has_old_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_value(const StyleSwapUndoTupleArchive* msg);
  static void set_has_new_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
StyleSwapUndoTupleArchive::_Internal::chart_info(const StyleSwapUndoTupleArchive* msg) {
  return *msg->_impl_.chart_info_;
}
const ::TSP::Reference&
StyleSwapUndoTupleArchive::_Internal::old_value(const StyleSwapUndoTupleArchive* msg) {
  return *msg->_impl_.old_value_;
}
const ::TSP::Reference&
StyleSwapUndoTupleArchive::_Internal::new_value(const StyleSwapUndoTupleArchive* msg) {
  return *msg->_impl_.new_value_;
}
void StyleSwapUndoTupleArchive::clear_chart_info() {
  if (_impl_.chart_info_ != nullptr) _impl_.chart_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StyleSwapUndoTupleArchive::clear_old_value() {
  if (_impl_.old_value_ != nullptr) _impl_.old_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void StyleSwapUndoTupleArchive::clear_new_value() {
  if (_impl_.new_value_ != nullptr) _impl_.new_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.StyleSwapUndoTupleArchive)
}
StyleSwapUndoTupleArchive::StyleSwapUndoTupleArchive(const StyleSwapUndoTupleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyleSwapUndoTupleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_info_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.swap_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart_info()) {
    _this->_impl_.chart_info_ = new ::TSP::Reference(*from._impl_.chart_info_);
  }
  if (from._internal_has_old_value()) {
    _this->_impl_.old_value_ = new ::TSP::Reference(*from._impl_.old_value_);
  }
  if (from._internal_has_new_value()) {
    _this->_impl_.new_value_ = new ::TSP::Reference(*from._impl_.new_value_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.swap_type_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.swap_type_));
  // @@protoc_insertion_point(copy_constructor:TSCH.StyleSwapUndoTupleArchive)
}

inline void StyleSwapUndoTupleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_info_){nullptr}
    , decltype(_impl_.old_value_){nullptr}
    , decltype(_impl_.new_value_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.swap_type_){1}
  };
}

StyleSwapUndoTupleArchive::~StyleSwapUndoTupleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.StyleSwapUndoTupleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyleSwapUndoTupleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chart_info_;
  if (this != internal_default_instance()) delete _impl_.old_value_;
  if (this != internal_default_instance()) delete _impl_.new_value_;
}

void StyleSwapUndoTupleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyleSwapUndoTupleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.StyleSwapUndoTupleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.chart_info_ != nullptr);
      _impl_.chart_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_value_ != nullptr);
      _impl_.old_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_value_ != nullptr);
      _impl_.new_value_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    _impl_.index_ = 0u;
    _impl_.swap_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleSwapUndoTupleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.StyleSwapType swap_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::StyleSwapType_IsValid(val))) {
            _internal_set_swap_type(static_cast<::TSCH::StyleSwapType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleSwapUndoTupleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.StyleSwapUndoTupleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart_info(this),
        _Internal::chart_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.StyleSwapType swap_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_swap_type(), target);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // optional .TSP.Reference old_value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_value(this),
        _Internal::old_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_value = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_value(this),
        _Internal::new_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.StyleSwapUndoTupleArchive)
  return target;
}

size_t StyleSwapUndoTupleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.StyleSwapUndoTupleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSP.Reference chart_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_info_);
    }

    // optional .TSP.Reference old_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_value_);
    }

    // optional .TSP.Reference new_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_value_);
    }

    // optional uint32 index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional .TSCH.StyleSwapType swap_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_swap_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleSwapUndoTupleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyleSwapUndoTupleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleSwapUndoTupleArchive::GetClassData() const { return &_class_data_; }


void StyleSwapUndoTupleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyleSwapUndoTupleArchive*>(&to_msg);
  auto& from = static_cast<const StyleSwapUndoTupleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.StyleSwapUndoTupleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart_info()->::TSP::Reference::MergeFrom(
          from._internal_chart_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_value()->::TSP::Reference::MergeFrom(
          from._internal_old_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_value()->::TSP::Reference::MergeFrom(
          from._internal_new_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.swap_type_ = from._impl_.swap_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleSwapUndoTupleArchive::CopyFrom(const StyleSwapUndoTupleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.StyleSwapUndoTupleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleSwapUndoTupleArchive::IsInitialized() const {
  if (_internal_has_chart_info()) {
    if (!_impl_.chart_info_->IsInitialized()) return false;
  }
  if (_internal_has_old_value()) {
    if (!_impl_.old_value_->IsInitialized()) return false;
  }
  if (_internal_has_new_value()) {
    if (!_impl_.new_value_->IsInitialized()) return false;
  }
  return true;
}

void StyleSwapUndoTupleArchive::InternalSwap(StyleSwapUndoTupleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleSwapUndoTupleArchive, _impl_.index_)
      + sizeof(StyleSwapUndoTupleArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(StyleSwapUndoTupleArchive, _impl_.chart_info_)>(
          reinterpret_cast<char*>(&_impl_.chart_info_),
          reinterpret_cast<char*>(&other->_impl_.chart_info_));
  swap(_impl_.swap_type_, other->_impl_.swap_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleSwapUndoTupleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandStyleSwapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStyleSwapArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandStyleSwapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandStyleSwapArchive::_Internal::super(const CommandStyleSwapArchive* msg) {
  return *msg->_impl_.super_;
}
CommandStyleSwapArchive::CommandStyleSwapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandStyleSwapArchive)
}
CommandStyleSwapArchive::CommandStyleSwapArchive(const CommandStyleSwapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandStyleSwapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_tuples_){from._impl_.undo_tuples_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandStyleSwapArchive)
}

inline void CommandStyleSwapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_tuples_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandStyleSwapArchive::~CommandStyleSwapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandStyleSwapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandStyleSwapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.undo_tuples_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandStyleSwapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandStyleSwapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandStyleSwapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.undo_tuples_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStyleSwapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_tuples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandStyleSwapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandStyleSwapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_tuples_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_tuples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandStyleSwapArchive)
  return target;
}

size_t CommandStyleSwapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandStyleSwapArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  total_size += 1UL * this->_internal_undo_tuples_size();
  for (const auto& msg : this->_impl_.undo_tuples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandStyleSwapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandStyleSwapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandStyleSwapArchive::GetClassData() const { return &_class_data_; }


void CommandStyleSwapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandStyleSwapArchive*>(&to_msg);
  auto& from = static_cast<const CommandStyleSwapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandStyleSwapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.undo_tuples_.MergeFrom(from._impl_.undo_tuples_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandStyleSwapArchive::CopyFrom(const CommandStyleSwapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandStyleSwapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleSwapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_tuples_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandStyleSwapArchive::InternalSwap(CommandStyleSwapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.undo_tuples_.InternalSwap(&other->_impl_.undo_tuples_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStyleSwapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandSetSeriesNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSeriesNameArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetSeriesNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seriesindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetSeriesNameArchive::_Internal::super(const CommandSetSeriesNameArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetSeriesNameArchive::CommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetSeriesNameArchive)
}
CommandSetSeriesNameArchive::CommandSetSeriesNameArchive(const CommandSetSeriesNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetSeriesNameArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.seriesindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oldname()) {
    _this->_impl_.oldname_.Set(from._internal_oldname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newname()) {
    _this->_impl_.newname_.Set(from._internal_newname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  _this->_impl_.seriesindex_ = from._impl_.seriesindex_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetSeriesNameArchive)
}

inline void CommandSetSeriesNameArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.seriesindex_){0u}
  };
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetSeriesNameArchive::~CommandSetSeriesNameArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetSeriesNameArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetSeriesNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oldname_.Destroy();
  _impl_.newname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetSeriesNameArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetSeriesNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetSeriesNameArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.oldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.newname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.seriesindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSeriesNameArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 seriesIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seriesindex(&has_bits);
          _impl_.seriesindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string oldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oldname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.CommandSetSeriesNameArchive.oldName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string newName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_newname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.CommandSetSeriesNameArchive.newName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetSeriesNameArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetSeriesNameArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 seriesIndex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seriesindex(), target);
  }

  // required string oldName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetSeriesNameArchive.oldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldname(), target);
  }

  // required string newName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetSeriesNameArchive.newName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetSeriesNameArchive)
  return target;
}

size_t CommandSetSeriesNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetSeriesNameArchive)
  size_t total_size = 0;

  if (_internal_has_oldname()) {
    // required string oldName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  if (_internal_has_newname()) {
    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_seriesindex()) {
    // required uint32 seriesIndex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seriesindex());
  }

  return total_size;
}
size_t CommandSetSeriesNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetSeriesNameArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string oldName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());

    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());

    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 seriesIndex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seriesindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetSeriesNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetSeriesNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetSeriesNameArchive::GetClassData() const { return &_class_data_; }


void CommandSetSeriesNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetSeriesNameArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetSeriesNameArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetSeriesNameArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_oldname(from._internal_oldname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_newname(from._internal_newname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seriesindex_ = from._impl_.seriesindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetSeriesNameArchive::CopyFrom(const CommandSetSeriesNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetSeriesNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSeriesNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSeriesNameArchive::InternalSwap(CommandSetSeriesNameArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldname_, lhs_arena,
      &other->_impl_.oldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newname_, lhs_arena,
      &other->_impl_.newname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSeriesNameArchive, _impl_.seriesindex_)
      + sizeof(CommandSetSeriesNameArchive::_impl_.seriesindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSeriesNameArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSeriesNameArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandSetCategoryNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetCategoryNameArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetCategoryNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_categoryindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ismultidataindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetCategoryNameArchive::_Internal::super(const CommandSetCategoryNameArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetCategoryNameArchive::CommandSetCategoryNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetCategoryNameArchive)
}
CommandSetCategoryNameArchive::CommandSetCategoryNameArchive(const CommandSetCategoryNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetCategoryNameArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.categoryindex_){}
    , decltype(_impl_.ismultidataindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oldname()) {
    _this->_impl_.oldname_.Set(from._internal_oldname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newname()) {
    _this->_impl_.newname_.Set(from._internal_newname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.categoryindex_, &from._impl_.categoryindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ismultidataindex_) -
    reinterpret_cast<char*>(&_impl_.categoryindex_)) + sizeof(_impl_.ismultidataindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetCategoryNameArchive)
}

inline void CommandSetCategoryNameArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldname_){}
    , decltype(_impl_.newname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.categoryindex_){0u}
    , decltype(_impl_.ismultidataindex_){false}
  };
  _impl_.oldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetCategoryNameArchive::~CommandSetCategoryNameArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetCategoryNameArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetCategoryNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oldname_.Destroy();
  _impl_.newname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetCategoryNameArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetCategoryNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetCategoryNameArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.oldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.newname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.categoryindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ismultidataindex_) -
        reinterpret_cast<char*>(&_impl_.categoryindex_)) + sizeof(_impl_.ismultidataindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetCategoryNameArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 categoryIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_categoryindex(&has_bits);
          _impl_.categoryindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string oldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oldname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.CommandSetCategoryNameArchive.oldName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string newName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_newname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.CommandSetCategoryNameArchive.newName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool isMultiDataIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ismultidataindex(&has_bits);
          _impl_.ismultidataindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetCategoryNameArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetCategoryNameArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 categoryIndex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_categoryindex(), target);
  }

  // required string oldName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldname().data(), static_cast<int>(this->_internal_oldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetCategoryNameArchive.oldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldname(), target);
  }

  // required string newName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandSetCategoryNameArchive.newName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newname(), target);
  }

  // optional bool isMultiDataIndex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_ismultidataindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetCategoryNameArchive)
  return target;
}

size_t CommandSetCategoryNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetCategoryNameArchive)
  size_t total_size = 0;

  if (_internal_has_oldname()) {
    // required string oldName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());
  }

  if (_internal_has_newname()) {
    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_categoryindex()) {
    // required uint32 categoryIndex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_categoryindex());
  }

  return total_size;
}
size_t CommandSetCategoryNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetCategoryNameArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string oldName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldname());

    // required string newName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());

    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 categoryIndex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_categoryindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isMultiDataIndex = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetCategoryNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetCategoryNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetCategoryNameArchive::GetClassData() const { return &_class_data_; }


void CommandSetCategoryNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetCategoryNameArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetCategoryNameArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetCategoryNameArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_oldname(from._internal_oldname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_newname(from._internal_newname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.categoryindex_ = from._impl_.categoryindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ismultidataindex_ = from._impl_.ismultidataindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetCategoryNameArchive::CopyFrom(const CommandSetCategoryNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetCategoryNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetCategoryNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetCategoryNameArchive::InternalSwap(CommandSetCategoryNameArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldname_, lhs_arena,
      &other->_impl_.oldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newname_, lhs_arena,
      &other->_impl_.newname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetCategoryNameArchive, _impl_.ismultidataindex_)
      + sizeof(CommandSetCategoryNameArchive::_impl_.ismultidataindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSetCategoryNameArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetCategoryNameArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandAddGridRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAddGridRowsArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandAddGridRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandAddGridRowsArchive::_Internal::super(const CommandAddGridRowsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandAddGridRowsArchive::CommandAddGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandAddGridRowsArchive)
}
CommandAddGridRowsArchive::CommandAddGridRowsArchive(const CommandAddGridRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandAddGridRowsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){from._impl_.name_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){}
    , decltype(_impl_.length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.location_, &from._impl_.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandAddGridRowsArchive)
}

inline void CommandAddGridRowsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){0u}
    , decltype(_impl_.length_){0u}
  };
}

CommandAddGridRowsArchive::~CommandAddGridRowsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandAddGridRowsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandAddGridRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandAddGridRowsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandAddGridRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandAddGridRowsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.length_) -
        reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAddGridRowsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_location(&has_bits);
          _impl_.location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandAddGridRowsArchive.name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandAddGridRowsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandAddGridRowsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_location(), target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated string name = 4;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandAddGridRowsArchive.name");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandAddGridRowsArchive)
  return target;
}

size_t CommandAddGridRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandAddGridRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_location()) {
    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());
  }

  return total_size;
}
size_t CommandAddGridRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandAddGridRowsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.name_.size());
  for (int i = 0, n = _impl_.name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.name_.Get(i));
  }

  // optional uint32 length = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandAddGridRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandAddGridRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandAddGridRowsArchive::GetClassData() const { return &_class_data_; }


void CommandAddGridRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandAddGridRowsArchive*>(&to_msg);
  auto& from = static_cast<const CommandAddGridRowsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandAddGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_.MergeFrom(from._impl_.name_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.location_ = from._impl_.location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandAddGridRowsArchive::CopyFrom(const CommandAddGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandAddGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddGridRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandAddGridRowsArchive::InternalSwap(CommandAddGridRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_.InternalSwap(&other->_impl_.name_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAddGridRowsArchive, _impl_.length_)
      + sizeof(CommandAddGridRowsArchive::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(CommandAddGridRowsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAddGridRowsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandAddGridColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAddGridColumnsArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandAddGridColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandAddGridColumnsArchive::_Internal::super(const CommandAddGridColumnsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandAddGridColumnsArchive::CommandAddGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandAddGridColumnsArchive)
}
CommandAddGridColumnsArchive::CommandAddGridColumnsArchive(const CommandAddGridColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandAddGridColumnsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){from._impl_.name_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){}
    , decltype(_impl_.length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.location_, &from._impl_.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandAddGridColumnsArchive)
}

inline void CommandAddGridColumnsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){0u}
    , decltype(_impl_.length_){0u}
  };
}

CommandAddGridColumnsArchive::~CommandAddGridColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandAddGridColumnsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandAddGridColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandAddGridColumnsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandAddGridColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandAddGridColumnsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.length_) -
        reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAddGridColumnsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_location(&has_bits);
          _impl_.location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandAddGridColumnsArchive.name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandAddGridColumnsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandAddGridColumnsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_location(), target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated string name = 4;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandAddGridColumnsArchive.name");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandAddGridColumnsArchive)
  return target;
}

size_t CommandAddGridColumnsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandAddGridColumnsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_location()) {
    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());
  }

  return total_size;
}
size_t CommandAddGridColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandAddGridColumnsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.name_.size());
  for (int i = 0, n = _impl_.name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.name_.Get(i));
  }

  // optional uint32 length = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandAddGridColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandAddGridColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandAddGridColumnsArchive::GetClassData() const { return &_class_data_; }


void CommandAddGridColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandAddGridColumnsArchive*>(&to_msg);
  auto& from = static_cast<const CommandAddGridColumnsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandAddGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_.MergeFrom(from._impl_.name_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.location_ = from._impl_.location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandAddGridColumnsArchive::CopyFrom(const CommandAddGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandAddGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddGridColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandAddGridColumnsArchive::InternalSwap(CommandAddGridColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_.InternalSwap(&other->_impl_.name_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAddGridColumnsArchive, _impl_.length_)
      + sizeof(CommandAddGridColumnsArchive::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(CommandAddGridColumnsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAddGridColumnsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandMoveGridRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveGridRowsArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandMoveGridRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_afterrow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandMoveGridRowsArchive::_Internal::super(const CommandMoveGridRowsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandMoveGridRowsArchive::CommandMoveGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMoveGridRowsArchive)
}
CommandMoveGridRowsArchive::CommandMoveGridRowsArchive(const CommandMoveGridRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMoveGridRowsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.afterrow_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.location_, &from._impl_.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.afterrow_) -
    reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.afterrow_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMoveGridRowsArchive)
}

inline void CommandMoveGridRowsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){0u}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.afterrow_){0}
  };
}

CommandMoveGridRowsArchive::~CommandMoveGridRowsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMoveGridRowsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMoveGridRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandMoveGridRowsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMoveGridRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMoveGridRowsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.afterrow_) -
        reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.afterrow_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveGridRowsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_location(&has_bits);
          _impl_.location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 afterrow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_afterrow(&has_bits);
          _impl_.afterrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMoveGridRowsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMoveGridRowsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_location(), target);
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // required int32 afterrow = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_afterrow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMoveGridRowsArchive)
  return target;
}

size_t CommandMoveGridRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandMoveGridRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_location()) {
    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());
  }

  if (_internal_has_length()) {
    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  if (_internal_has_afterrow()) {
    // required int32 afterrow = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_afterrow());
  }

  return total_size;
}
size_t CommandMoveGridRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMoveGridRowsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());

    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());

    // required int32 afterrow = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_afterrow());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveGridRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMoveGridRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveGridRowsArchive::GetClassData() const { return &_class_data_; }


void CommandMoveGridRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMoveGridRowsArchive*>(&to_msg);
  auto& from = static_cast<const CommandMoveGridRowsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMoveGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.location_ = from._impl_.location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.afterrow_ = from._impl_.afterrow_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveGridRowsArchive::CopyFrom(const CommandMoveGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMoveGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveGridRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveGridRowsArchive::InternalSwap(CommandMoveGridRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveGridRowsArchive, _impl_.afterrow_)
      + sizeof(CommandMoveGridRowsArchive::_impl_.afterrow_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveGridRowsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveGridRowsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandMoveGridColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveGridColumnsArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandMoveGridColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aftercolumn(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandMoveGridColumnsArchive::_Internal::super(const CommandMoveGridColumnsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandMoveGridColumnsArchive)
}
CommandMoveGridColumnsArchive::CommandMoveGridColumnsArchive(const CommandMoveGridColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMoveGridColumnsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.aftercolumn_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.location_, &from._impl_.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aftercolumn_) -
    reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.aftercolumn_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandMoveGridColumnsArchive)
}

inline void CommandMoveGridColumnsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){0u}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.aftercolumn_){0}
  };
}

CommandMoveGridColumnsArchive::~CommandMoveGridColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandMoveGridColumnsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMoveGridColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandMoveGridColumnsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMoveGridColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandMoveGridColumnsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.aftercolumn_) -
        reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.aftercolumn_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveGridColumnsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_location(&has_bits);
          _impl_.location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 aftercolumn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_aftercolumn(&has_bits);
          _impl_.aftercolumn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMoveGridColumnsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandMoveGridColumnsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_location(), target);
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // required int32 aftercolumn = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_aftercolumn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandMoveGridColumnsArchive)
  return target;
}

size_t CommandMoveGridColumnsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandMoveGridColumnsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_location()) {
    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());
  }

  if (_internal_has_length()) {
    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  if (_internal_has_aftercolumn()) {
    // required int32 aftercolumn = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aftercolumn());
  }

  return total_size;
}
size_t CommandMoveGridColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandMoveGridColumnsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());

    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());

    // required int32 aftercolumn = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aftercolumn());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveGridColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMoveGridColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveGridColumnsArchive::GetClassData() const { return &_class_data_; }


void CommandMoveGridColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMoveGridColumnsArchive*>(&to_msg);
  auto& from = static_cast<const CommandMoveGridColumnsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandMoveGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.location_ = from._impl_.location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.aftercolumn_ = from._impl_.aftercolumn_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveGridColumnsArchive::CopyFrom(const CommandMoveGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandMoveGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveGridColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveGridColumnsArchive::InternalSwap(CommandMoveGridColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveGridColumnsArchive, _impl_.aftercolumn_)
      + sizeof(CommandMoveGridColumnsArchive::_impl_.aftercolumn_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveGridColumnsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveGridColumnsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandDeleteGridRowsArchive_ValueRow::_Internal {
 public:
};

CommandDeleteGridRowsArchive_ValueRow::CommandDeleteGridRowsArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandDeleteGridRowsArchive.ValueRow)
}
CommandDeleteGridRowsArchive_ValueRow::CommandDeleteGridRowsArchive_ValueRow(const CommandDeleteGridRowsArchive_ValueRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDeleteGridRowsArchive_ValueRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandDeleteGridRowsArchive.ValueRow)
}

inline void CommandDeleteGridRowsArchive_ValueRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommandDeleteGridRowsArchive_ValueRow::~CommandDeleteGridRowsArchive_ValueRow() {
  // @@protoc_insertion_point(destructor:TSCH.CommandDeleteGridRowsArchive.ValueRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDeleteGridRowsArchive_ValueRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void CommandDeleteGridRowsArchive_ValueRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDeleteGridRowsArchive_ValueRow::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandDeleteGridRowsArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteGridRowsArchive_ValueRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDeleteGridRowsArchive_ValueRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandDeleteGridRowsArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 5;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandDeleteGridRowsArchive.ValueRow)
  return target;
}

size_t CommandDeleteGridRowsArchive_ValueRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandDeleteGridRowsArchive.ValueRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteGridRowsArchive_ValueRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDeleteGridRowsArchive_ValueRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteGridRowsArchive_ValueRow::GetClassData() const { return &_class_data_; }


void CommandDeleteGridRowsArchive_ValueRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDeleteGridRowsArchive_ValueRow*>(&to_msg);
  auto& from = static_cast<const CommandDeleteGridRowsArchive_ValueRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandDeleteGridRowsArchive.ValueRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteGridRowsArchive_ValueRow::CopyFrom(const CommandDeleteGridRowsArchive_ValueRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandDeleteGridRowsArchive.ValueRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridRowsArchive_ValueRow::IsInitialized() const {
  return true;
}

void CommandDeleteGridRowsArchive_ValueRow::InternalSwap(CommandDeleteGridRowsArchive_ValueRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteGridRowsArchive_ValueRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandDeleteGridRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteGridRowsArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandDeleteGridRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_removed_all_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandDeleteGridRowsArchive::_Internal::super(const CommandDeleteGridRowsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandDeleteGridRowsArchive)
}
CommandDeleteGridRowsArchive::CommandDeleteGridRowsArchive(const CommandDeleteGridRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDeleteGridRowsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.value_row_){from._impl_.value_row_}
    , decltype(_impl_.column_names_){from._impl_.column_names_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.removed_all_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.location_, &from._impl_.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.removed_all_rows_) -
    reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.removed_all_rows_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandDeleteGridRowsArchive)
}

inline void CommandDeleteGridRowsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){arena}
    , decltype(_impl_.value_row_){arena}
    , decltype(_impl_.column_names_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){0u}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.removed_all_rows_){false}
  };
}

CommandDeleteGridRowsArchive::~CommandDeleteGridRowsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandDeleteGridRowsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDeleteGridRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  _impl_.value_row_.~RepeatedPtrField();
  _impl_.column_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandDeleteGridRowsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDeleteGridRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandDeleteGridRowsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _impl_.value_row_.Clear();
  _impl_.column_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.removed_all_rows_) -
        reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.removed_all_rows_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteGridRowsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_location(&has_bits);
          _impl_.location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandDeleteGridRowsArchive.names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool removed_all_rows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_removed_all_rows(&has_bits);
          _impl_.removed_all_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandDeleteGridRowsArchive.column_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDeleteGridRowsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandDeleteGridRowsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_location(), target);
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated string names = 4;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridRowsArchive.names");
    target = stream->WriteString(4, s, target);
  }

  // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_row_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_row(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool removed_all_rows = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_removed_all_rows(), target);
  }

  // repeated string column_names = 8;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridRowsArchive.column_names");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandDeleteGridRowsArchive)
  return target;
}

size_t CommandDeleteGridRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandDeleteGridRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_location()) {
    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());
  }

  if (_internal_has_length()) {
    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return total_size;
}
size_t CommandDeleteGridRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandDeleteGridRowsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());

    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
  total_size += 1UL * this->_internal_value_row_size();
  for (const auto& msg : this->_impl_.value_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string column_names = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_names_.size());
  for (int i = 0, n = _impl_.column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_names_.Get(i));
  }

  // optional bool removed_all_rows = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteGridRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDeleteGridRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteGridRowsArchive::GetClassData() const { return &_class_data_; }


void CommandDeleteGridRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDeleteGridRowsArchive*>(&to_msg);
  auto& from = static_cast<const CommandDeleteGridRowsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandDeleteGridRowsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_impl_.value_row_.MergeFrom(from._impl_.value_row_);
  _this->_impl_.column_names_.MergeFrom(from._impl_.column_names_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.location_ = from._impl_.location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.removed_all_rows_ = from._impl_.removed_all_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteGridRowsArchive::CopyFrom(const CommandDeleteGridRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandDeleteGridRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteGridRowsArchive::InternalSwap(CommandDeleteGridRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  _impl_.value_row_.InternalSwap(&other->_impl_.value_row_);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteGridRowsArchive, _impl_.removed_all_rows_)
      + sizeof(CommandDeleteGridRowsArchive::_impl_.removed_all_rows_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteGridRowsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteGridRowsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandDeleteGridColumnsArchive_ValueRow::_Internal {
 public:
};

CommandDeleteGridColumnsArchive_ValueRow::CommandDeleteGridColumnsArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
}
CommandDeleteGridColumnsArchive_ValueRow::CommandDeleteGridColumnsArchive_ValueRow(const CommandDeleteGridColumnsArchive_ValueRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDeleteGridColumnsArchive_ValueRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
}

inline void CommandDeleteGridColumnsArchive_ValueRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommandDeleteGridColumnsArchive_ValueRow::~CommandDeleteGridColumnsArchive_ValueRow() {
  // @@protoc_insertion_point(destructor:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDeleteGridColumnsArchive_ValueRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void CommandDeleteGridColumnsArchive_ValueRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDeleteGridColumnsArchive_ValueRow::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteGridColumnsArchive_ValueRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDeleteGridColumnsArchive_ValueRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 5;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
  return target;
}

size_t CommandDeleteGridColumnsArchive_ValueRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteGridColumnsArchive_ValueRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDeleteGridColumnsArchive_ValueRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteGridColumnsArchive_ValueRow::GetClassData() const { return &_class_data_; }


void CommandDeleteGridColumnsArchive_ValueRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDeleteGridColumnsArchive_ValueRow*>(&to_msg);
  auto& from = static_cast<const CommandDeleteGridColumnsArchive_ValueRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteGridColumnsArchive_ValueRow::CopyFrom(const CommandDeleteGridColumnsArchive_ValueRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridColumnsArchive_ValueRow::IsInitialized() const {
  return true;
}

void CommandDeleteGridColumnsArchive_ValueRow::InternalSwap(CommandDeleteGridColumnsArchive_ValueRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteGridColumnsArchive_ValueRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandDeleteGridColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteGridColumnsArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandDeleteGridColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_removed_all_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandDeleteGridColumnsArchive::_Internal::super(const CommandDeleteGridColumnsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandDeleteGridColumnsArchive)
}
CommandDeleteGridColumnsArchive::CommandDeleteGridColumnsArchive(const CommandDeleteGridColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDeleteGridColumnsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.value_row_){from._impl_.value_row_}
    , decltype(_impl_.row_names_){from._impl_.row_names_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.removed_all_columns_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.location_, &from._impl_.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.removed_all_columns_) -
    reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.removed_all_columns_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandDeleteGridColumnsArchive)
}

inline void CommandDeleteGridColumnsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){arena}
    , decltype(_impl_.value_row_){arena}
    , decltype(_impl_.row_names_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.location_){0u}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.removed_all_columns_){false}
  };
}

CommandDeleteGridColumnsArchive::~CommandDeleteGridColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandDeleteGridColumnsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDeleteGridColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  _impl_.value_row_.~RepeatedPtrField();
  _impl_.row_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandDeleteGridColumnsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDeleteGridColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandDeleteGridColumnsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _impl_.value_row_.Clear();
  _impl_.row_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.removed_all_columns_) -
        reinterpret_cast<char*>(&_impl_.location_)) + sizeof(_impl_.removed_all_columns_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteGridColumnsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_location(&has_bits);
          _impl_.location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandDeleteGridColumnsArchive.names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool removed_all_columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_removed_all_columns(&has_bits);
          _impl_.removed_all_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string row_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandDeleteGridColumnsArchive.row_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDeleteGridColumnsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandDeleteGridColumnsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_location(), target);
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated string names = 4;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridColumnsArchive.names");
    target = stream->WriteString(4, s, target);
  }

  // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_row_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_row(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool removed_all_columns = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_removed_all_columns(), target);
  }

  // repeated string row_names = 8;
  for (int i = 0, n = this->_internal_row_names_size(); i < n; i++) {
    const auto& s = this->_internal_row_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandDeleteGridColumnsArchive.row_names");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandDeleteGridColumnsArchive)
  return target;
}

size_t CommandDeleteGridColumnsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandDeleteGridColumnsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_location()) {
    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());
  }

  if (_internal_has_length()) {
    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return total_size;
}
size_t CommandDeleteGridColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandDeleteGridColumnsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 location = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_location());

    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
  total_size += 1UL * this->_internal_value_row_size();
  for (const auto& msg : this->_impl_.value_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string row_names = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.row_names_.size());
  for (int i = 0, n = _impl_.row_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.row_names_.Get(i));
  }

  // optional bool removed_all_columns = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteGridColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDeleteGridColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteGridColumnsArchive::GetClassData() const { return &_class_data_; }


void CommandDeleteGridColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDeleteGridColumnsArchive*>(&to_msg);
  auto& from = static_cast<const CommandDeleteGridColumnsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandDeleteGridColumnsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_impl_.value_row_.MergeFrom(from._impl_.value_row_);
  _this->_impl_.row_names_.MergeFrom(from._impl_.row_names_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.location_ = from._impl_.location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.removed_all_columns_ = from._impl_.removed_all_columns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteGridColumnsArchive::CopyFrom(const CommandDeleteGridColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandDeleteGridColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteGridColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteGridColumnsArchive::InternalSwap(CommandDeleteGridColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  _impl_.value_row_.InternalSwap(&other->_impl_.value_row_);
  _impl_.row_names_.InternalSwap(&other->_impl_.row_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteGridColumnsArchive, _impl_.removed_all_columns_)
      + sizeof(CommandDeleteGridColumnsArchive::_impl_.removed_all_columns_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteGridColumnsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteGridColumnsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[13]);
}

// ===================================================================

class CommandSetPreviewLocArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPreviewLocArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetPreviewLocArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& old_loc(const CommandSetPreviewLocArchive* msg);
  static void set_has_old_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Point& new_loc(const CommandSetPreviewLocArchive* msg);
  static void set_has_new_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetPreviewLocArchive::_Internal::super(const CommandSetPreviewLocArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Point&
CommandSetPreviewLocArchive::_Internal::old_loc(const CommandSetPreviewLocArchive* msg) {
  return *msg->_impl_.old_loc_;
}
const ::TSP::Point&
CommandSetPreviewLocArchive::_Internal::new_loc(const CommandSetPreviewLocArchive* msg) {
  return *msg->_impl_.new_loc_;
}
void CommandSetPreviewLocArchive::clear_old_loc() {
  if (_impl_.old_loc_ != nullptr) _impl_.old_loc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetPreviewLocArchive::clear_new_loc() {
  if (_impl_.new_loc_ != nullptr) _impl_.new_loc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetPreviewLocArchive::CommandSetPreviewLocArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetPreviewLocArchive)
}
CommandSetPreviewLocArchive::CommandSetPreviewLocArchive(const CommandSetPreviewLocArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetPreviewLocArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_loc_){nullptr}
    , decltype(_impl_.new_loc_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_loc()) {
    _this->_impl_.old_loc_ = new ::TSP::Point(*from._impl_.old_loc_);
  }
  if (from._internal_has_new_loc()) {
    _this->_impl_.new_loc_ = new ::TSP::Point(*from._impl_.new_loc_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetPreviewLocArchive)
}

inline void CommandSetPreviewLocArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_loc_){nullptr}
    , decltype(_impl_.new_loc_){nullptr}
  };
}

CommandSetPreviewLocArchive::~CommandSetPreviewLocArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetPreviewLocArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetPreviewLocArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_loc_;
  if (this != internal_default_instance()) delete _impl_.new_loc_;
}

void CommandSetPreviewLocArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetPreviewLocArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetPreviewLocArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_loc_ != nullptr);
      _impl_.old_loc_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_loc_ != nullptr);
      _impl_.new_loc_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPreviewLocArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Point old_loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Point new_loc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetPreviewLocArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetPreviewLocArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Point old_loc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_loc(this),
        _Internal::old_loc(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Point new_loc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_loc(this),
        _Internal::new_loc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetPreviewLocArchive)
  return target;
}

size_t CommandSetPreviewLocArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetPreviewLocArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_old_loc()) {
    // required .TSP.Point old_loc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_loc_);
  }

  if (_internal_has_new_loc()) {
    // required .TSP.Point new_loc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_loc_);
  }

  return total_size;
}
size_t CommandSetPreviewLocArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetPreviewLocArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Point old_loc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_loc_);

    // required .TSP.Point new_loc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_loc_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetPreviewLocArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetPreviewLocArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetPreviewLocArchive::GetClassData() const { return &_class_data_; }


void CommandSetPreviewLocArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetPreviewLocArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetPreviewLocArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetPreviewLocArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_loc()->::TSP::Point::MergeFrom(
          from._internal_old_loc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_loc()->::TSP::Point::MergeFrom(
          from._internal_new_loc());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetPreviewLocArchive::CopyFrom(const CommandSetPreviewLocArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetPreviewLocArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPreviewLocArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_loc()) {
    if (!_impl_.old_loc_->IsInitialized()) return false;
  }
  if (_internal_has_new_loc()) {
    if (!_impl_.new_loc_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPreviewLocArchive::InternalSwap(CommandSetPreviewLocArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPreviewLocArchive, _impl_.new_loc_)
      + sizeof(CommandSetPreviewLocArchive::_impl_.new_loc_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPreviewLocArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPreviewLocArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandSetGridValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetGridValueArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetGridValueArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rowindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_columnindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oldvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_newvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetGridValueArchive::_Internal::super(const CommandSetGridValueArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetGridValueArchive::CommandSetGridValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetGridValueArchive)
}
CommandSetGridValueArchive::CommandSetGridValueArchive(const CommandSetGridValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetGridValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rowindex_){}
    , decltype(_impl_.columnindex_){}
    , decltype(_impl_.oldvalue_){}
    , decltype(_impl_.newvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.rowindex_, &from._impl_.rowindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newvalue_) -
    reinterpret_cast<char*>(&_impl_.rowindex_)) + sizeof(_impl_.newvalue_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetGridValueArchive)
}

inline void CommandSetGridValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rowindex_){0u}
    , decltype(_impl_.columnindex_){0u}
    , decltype(_impl_.oldvalue_){0}
    , decltype(_impl_.newvalue_){0}
  };
}

CommandSetGridValueArchive::~CommandSetGridValueArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetGridValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetGridValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetGridValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetGridValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetGridValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.rowindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.newvalue_) -
        reinterpret_cast<char*>(&_impl_.rowindex_)) + sizeof(_impl_.newvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetGridValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 rowindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rowindex(&has_bits);
          _impl_.rowindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 columnindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_columnindex(&has_bits);
          _impl_.columnindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double oldvalue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_oldvalue(&has_bits);
          _impl_.oldvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double newvalue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_newvalue(&has_bits);
          _impl_.newvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetGridValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetGridValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 rowindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rowindex(), target);
  }

  // required uint32 columnindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_columnindex(), target);
  }

  // required double oldvalue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_oldvalue(), target);
  }

  // required double newvalue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_newvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetGridValueArchive)
  return target;
}

size_t CommandSetGridValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetGridValueArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rowindex()) {
    // required uint32 rowindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rowindex());
  }

  if (_internal_has_columnindex()) {
    // required uint32 columnindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_columnindex());
  }

  if (_internal_has_oldvalue()) {
    // required double oldvalue = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_newvalue()) {
    // required double newvalue = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CommandSetGridValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetGridValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 rowindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rowindex());

    // required uint32 columnindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_columnindex());

    // required double oldvalue = 4;
    total_size += 1 + 8;

    // required double newvalue = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetGridValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetGridValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetGridValueArchive::GetClassData() const { return &_class_data_; }


void CommandSetGridValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetGridValueArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetGridValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetGridValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rowindex_ = from._impl_.rowindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.columnindex_ = from._impl_.columnindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.oldvalue_ = from._impl_.oldvalue_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.newvalue_ = from._impl_.newvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetGridValueArchive::CopyFrom(const CommandSetGridValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetGridValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetGridValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetGridValueArchive::InternalSwap(CommandSetGridValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetGridValueArchive, _impl_.newvalue_)
      + sizeof(CommandSetGridValueArchive::_impl_.newvalue_)
      - PROTOBUF_FIELD_OFFSET(CommandSetGridValueArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetGridValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[15]);
}

// ===================================================================

class CommandSetGridDirectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetGridDirectionArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetGridDirectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetGridDirectionArchive::_Internal::super(const CommandSetGridDirectionArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetGridDirectionArchive::CommandSetGridDirectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetGridDirectionArchive)
}
CommandSetGridDirectionArchive::CommandSetGridDirectionArchive(const CommandSetGridDirectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetGridDirectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_direction_){}
    , decltype(_impl_.new_direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.old_direction_, &from._impl_.old_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_direction_) -
    reinterpret_cast<char*>(&_impl_.old_direction_)) + sizeof(_impl_.new_direction_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetGridDirectionArchive)
}

inline void CommandSetGridDirectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_direction_){0u}
    , decltype(_impl_.new_direction_){0u}
  };
}

CommandSetGridDirectionArchive::~CommandSetGridDirectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetGridDirectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetGridDirectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetGridDirectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetGridDirectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetGridDirectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.old_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_direction_) -
        reinterpret_cast<char*>(&_impl_.old_direction_)) + sizeof(_impl_.new_direction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetGridDirectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 old_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_old_direction(&has_bits);
          _impl_.old_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 new_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_direction(&has_bits);
          _impl_.new_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetGridDirectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetGridDirectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 old_direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_old_direction(), target);
  }

  // required uint32 new_direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetGridDirectionArchive)
  return target;
}

size_t CommandSetGridDirectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetGridDirectionArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_old_direction()) {
    // required uint32 old_direction = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_direction());
  }

  if (_internal_has_new_direction()) {
    // required uint32 new_direction = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_direction());
  }

  return total_size;
}
size_t CommandSetGridDirectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetGridDirectionArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 old_direction = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_direction());

    // required uint32 new_direction = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetGridDirectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetGridDirectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetGridDirectionArchive::GetClassData() const { return &_class_data_; }


void CommandSetGridDirectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetGridDirectionArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetGridDirectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetGridDirectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.old_direction_ = from._impl_.old_direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.new_direction_ = from._impl_.new_direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetGridDirectionArchive::CopyFrom(const CommandSetGridDirectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetGridDirectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetGridDirectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetGridDirectionArchive::InternalSwap(CommandSetGridDirectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetGridDirectionArchive, _impl_.new_direction_)
      + sizeof(CommandSetGridDirectionArchive::_impl_.new_direction_)
      - PROTOBUF_FIELD_OFFSET(CommandSetGridDirectionArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetGridDirectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandSetSeriesTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSeriesTypeArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetSeriesTypeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seriesindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_oldtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_newtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetSeriesTypeArchive::_Internal::super(const CommandSetSeriesTypeArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetSeriesTypeArchive)
}
CommandSetSeriesTypeArchive::CommandSetSeriesTypeArchive(const CommandSetSeriesTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetSeriesTypeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.seriesindex_){}
    , decltype(_impl_.oldtype_){}
    , decltype(_impl_.newtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.seriesindex_, &from._impl_.seriesindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newtype_) -
    reinterpret_cast<char*>(&_impl_.seriesindex_)) + sizeof(_impl_.newtype_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetSeriesTypeArchive)
}

inline void CommandSetSeriesTypeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.seriesindex_){0u}
    , decltype(_impl_.oldtype_){0u}
    , decltype(_impl_.newtype_){0u}
  };
}

CommandSetSeriesTypeArchive::~CommandSetSeriesTypeArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetSeriesTypeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetSeriesTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetSeriesTypeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetSeriesTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetSeriesTypeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.seriesindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.newtype_) -
        reinterpret_cast<char*>(&_impl_.seriesindex_)) + sizeof(_impl_.newtype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSeriesTypeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 seriesindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seriesindex(&has_bits);
          _impl_.seriesindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 oldtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_oldtype(&has_bits);
          _impl_.oldtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 newtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_newtype(&has_bits);
          _impl_.newtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetSeriesTypeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetSeriesTypeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 seriesindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seriesindex(), target);
  }

  // required uint32 oldtype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oldtype(), target);
  }

  // required uint32 newtype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_newtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetSeriesTypeArchive)
  return target;
}

size_t CommandSetSeriesTypeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetSeriesTypeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_seriesindex()) {
    // required uint32 seriesindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seriesindex());
  }

  if (_internal_has_oldtype()) {
    // required uint32 oldtype = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldtype());
  }

  if (_internal_has_newtype()) {
    // required uint32 newtype = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newtype());
  }

  return total_size;
}
size_t CommandSetSeriesTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetSeriesTypeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 seriesindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seriesindex());

    // required uint32 oldtype = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldtype());

    // required uint32 newtype = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetSeriesTypeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetSeriesTypeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetSeriesTypeArchive::GetClassData() const { return &_class_data_; }


void CommandSetSeriesTypeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetSeriesTypeArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetSeriesTypeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetSeriesTypeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.seriesindex_ = from._impl_.seriesindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.oldtype_ = from._impl_.oldtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.newtype_ = from._impl_.newtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetSeriesTypeArchive::CopyFrom(const CommandSetSeriesTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetSeriesTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSeriesTypeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSeriesTypeArchive::InternalSwap(CommandSetSeriesTypeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSeriesTypeArchive, _impl_.newtype_)
      + sizeof(CommandSetSeriesTypeArchive::_impl_.newtype_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSeriesTypeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSeriesTypeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandSetScatterFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetScatterFormatArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetScatterFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_newformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetScatterFormatArchive::_Internal::super(const CommandSetScatterFormatArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetScatterFormatArchive::CommandSetScatterFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetScatterFormatArchive)
}
CommandSetScatterFormatArchive::CommandSetScatterFormatArchive(const CommandSetScatterFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetScatterFormatArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.oldformat_){}
    , decltype(_impl_.newformat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.oldformat_, &from._impl_.oldformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newformat_) -
    reinterpret_cast<char*>(&_impl_.oldformat_)) + sizeof(_impl_.newformat_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetScatterFormatArchive)
}

inline void CommandSetScatterFormatArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.oldformat_){0u}
    , decltype(_impl_.newformat_){0u}
  };
}

CommandSetScatterFormatArchive::~CommandSetScatterFormatArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetScatterFormatArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetScatterFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetScatterFormatArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetScatterFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetScatterFormatArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.oldformat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.newformat_) -
        reinterpret_cast<char*>(&_impl_.oldformat_)) + sizeof(_impl_.newformat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetScatterFormatArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 oldformat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_oldformat(&has_bits);
          _impl_.oldformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 newformat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_newformat(&has_bits);
          _impl_.newformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetScatterFormatArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetScatterFormatArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 oldformat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oldformat(), target);
  }

  // required uint32 newformat = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_newformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetScatterFormatArchive)
  return target;
}

size_t CommandSetScatterFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetScatterFormatArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_oldformat()) {
    // required uint32 oldformat = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldformat());
  }

  if (_internal_has_newformat()) {
    // required uint32 newformat = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newformat());
  }

  return total_size;
}
size_t CommandSetScatterFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetScatterFormatArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 oldformat = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldformat());

    // required uint32 newformat = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newformat());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetScatterFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetScatterFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetScatterFormatArchive::GetClassData() const { return &_class_data_; }


void CommandSetScatterFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetScatterFormatArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetScatterFormatArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetScatterFormatArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.oldformat_ = from._impl_.oldformat_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.newformat_ = from._impl_.newformat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetScatterFormatArchive::CopyFrom(const CommandSetScatterFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetScatterFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetScatterFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetScatterFormatArchive::InternalSwap(CommandSetScatterFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetScatterFormatArchive, _impl_.newformat_)
      + sizeof(CommandSetScatterFormatArchive::_impl_.newformat_)
      - PROTOBUF_FIELD_OFFSET(CommandSetScatterFormatArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetScatterFormatArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandSetMultiDataSetIndexArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetMultiDataSetIndexArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetMultiDataSetIndexArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_newindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetMultiDataSetIndexArchive::_Internal::super(const CommandSetMultiDataSetIndexArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetMultiDataSetIndexArchive)
}
CommandSetMultiDataSetIndexArchive::CommandSetMultiDataSetIndexArchive(const CommandSetMultiDataSetIndexArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetMultiDataSetIndexArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.oldindex_){}
    , decltype(_impl_.newindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.oldindex_, &from._impl_.oldindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newindex_) -
    reinterpret_cast<char*>(&_impl_.oldindex_)) + sizeof(_impl_.newindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetMultiDataSetIndexArchive)
}

inline void CommandSetMultiDataSetIndexArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.oldindex_){0u}
    , decltype(_impl_.newindex_){0u}
  };
}

CommandSetMultiDataSetIndexArchive::~CommandSetMultiDataSetIndexArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetMultiDataSetIndexArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetMultiDataSetIndexArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetMultiDataSetIndexArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetMultiDataSetIndexArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetMultiDataSetIndexArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.oldindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.newindex_) -
        reinterpret_cast<char*>(&_impl_.oldindex_)) + sizeof(_impl_.newindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetMultiDataSetIndexArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 oldindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_oldindex(&has_bits);
          _impl_.oldindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 newindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_newindex(&has_bits);
          _impl_.newindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetMultiDataSetIndexArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetMultiDataSetIndexArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 oldindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_oldindex(), target);
  }

  // required uint32 newindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_newindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetMultiDataSetIndexArchive)
  return target;
}

size_t CommandSetMultiDataSetIndexArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetMultiDataSetIndexArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_oldindex()) {
    // required uint32 oldindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldindex());
  }

  if (_internal_has_newindex()) {
    // required uint32 newindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newindex());
  }

  return total_size;
}
size_t CommandSetMultiDataSetIndexArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetMultiDataSetIndexArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 oldindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldindex());

    // required uint32 newindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_newindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetMultiDataSetIndexArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetMultiDataSetIndexArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetMultiDataSetIndexArchive::GetClassData() const { return &_class_data_; }


void CommandSetMultiDataSetIndexArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetMultiDataSetIndexArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetMultiDataSetIndexArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetMultiDataSetIndexArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.oldindex_ = from._impl_.oldindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.newindex_ = from._impl_.newindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetMultiDataSetIndexArchive::CopyFrom(const CommandSetMultiDataSetIndexArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetMultiDataSetIndexArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultiDataSetIndexArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultiDataSetIndexArchive::InternalSwap(CommandSetMultiDataSetIndexArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, _impl_.newindex_)
      + sizeof(CommandSetMultiDataSetIndexArchive::_impl_.newindex_)
      - PROTOBUF_FIELD_OFFSET(CommandSetMultiDataSetIndexArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetMultiDataSetIndexArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandSetLegendFrameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetLegendFrameArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetLegendFrameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::RectArchive& old_legend_frame(const CommandSetLegendFrameArchive* msg);
  static void set_has_old_legend_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::RectArchive& new_legend_frame(const CommandSetLegendFrameArchive* msg);
  static void set_has_new_legend_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetLegendFrameArchive::_Internal::super(const CommandSetLegendFrameArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCH::RectArchive&
CommandSetLegendFrameArchive::_Internal::old_legend_frame(const CommandSetLegendFrameArchive* msg) {
  return *msg->_impl_.old_legend_frame_;
}
const ::TSCH::RectArchive&
CommandSetLegendFrameArchive::_Internal::new_legend_frame(const CommandSetLegendFrameArchive* msg) {
  return *msg->_impl_.new_legend_frame_;
}
void CommandSetLegendFrameArchive::clear_old_legend_frame() {
  if (_impl_.old_legend_frame_ != nullptr) _impl_.old_legend_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetLegendFrameArchive::clear_new_legend_frame() {
  if (_impl_.new_legend_frame_ != nullptr) _impl_.new_legend_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetLegendFrameArchive::CommandSetLegendFrameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetLegendFrameArchive)
}
CommandSetLegendFrameArchive::CommandSetLegendFrameArchive(const CommandSetLegendFrameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetLegendFrameArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_legend_frame_){nullptr}
    , decltype(_impl_.new_legend_frame_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_legend_frame()) {
    _this->_impl_.old_legend_frame_ = new ::TSCH::RectArchive(*from._impl_.old_legend_frame_);
  }
  if (from._internal_has_new_legend_frame()) {
    _this->_impl_.new_legend_frame_ = new ::TSCH::RectArchive(*from._impl_.new_legend_frame_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetLegendFrameArchive)
}

inline void CommandSetLegendFrameArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_legend_frame_){nullptr}
    , decltype(_impl_.new_legend_frame_){nullptr}
  };
}

CommandSetLegendFrameArchive::~CommandSetLegendFrameArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetLegendFrameArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetLegendFrameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_legend_frame_;
  if (this != internal_default_instance()) delete _impl_.new_legend_frame_;
}

void CommandSetLegendFrameArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetLegendFrameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetLegendFrameArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_legend_frame_ != nullptr);
      _impl_.old_legend_frame_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_legend_frame_ != nullptr);
      _impl_.new_legend_frame_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetLegendFrameArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.RectArchive old_legend_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_legend_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.RectArchive new_legend_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_legend_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetLegendFrameArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetLegendFrameArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.RectArchive old_legend_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_legend_frame(this),
        _Internal::old_legend_frame(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.RectArchive new_legend_frame = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_legend_frame(this),
        _Internal::new_legend_frame(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetLegendFrameArchive)
  return target;
}

size_t CommandSetLegendFrameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandSetLegendFrameArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_old_legend_frame()) {
    // required .TSCH.RectArchive old_legend_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_legend_frame_);
  }

  if (_internal_has_new_legend_frame()) {
    // required .TSCH.RectArchive new_legend_frame = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_legend_frame_);
  }

  return total_size;
}
size_t CommandSetLegendFrameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetLegendFrameArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSCH.RectArchive old_legend_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_legend_frame_);

    // required .TSCH.RectArchive new_legend_frame = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_legend_frame_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetLegendFrameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetLegendFrameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetLegendFrameArchive::GetClassData() const { return &_class_data_; }


void CommandSetLegendFrameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetLegendFrameArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetLegendFrameArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetLegendFrameArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_legend_frame()->::TSCH::RectArchive::MergeFrom(
          from._internal_old_legend_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_legend_frame()->::TSCH::RectArchive::MergeFrom(
          from._internal_new_legend_frame());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetLegendFrameArchive::CopyFrom(const CommandSetLegendFrameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetLegendFrameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetLegendFrameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_legend_frame()) {
    if (!_impl_.old_legend_frame_->IsInitialized()) return false;
  }
  if (_internal_has_new_legend_frame()) {
    if (!_impl_.new_legend_frame_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetLegendFrameArchive::InternalSwap(CommandSetLegendFrameArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetLegendFrameArchive, _impl_.new_legend_frame_)
      + sizeof(CommandSetLegendFrameArchive::_impl_.new_legend_frame_)
      - PROTOBUF_FIELD_OFFSET(CommandSetLegendFrameArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetLegendFrameArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandSetPieWedgeExplosion::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPieWedgeExplosion>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandSetPieWedgeExplosion* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info_geometry_command(const CommandSetPieWedgeExplosion* msg);
  static void set_has_info_geometry_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style_mutation_command(const CommandSetPieWedgeExplosion* msg);
  static void set_has_style_mutation_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& anchor_attachment_command(const CommandSetPieWedgeExplosion* msg);
  static void set_has_anchor_attachment_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandSetPieWedgeExplosion::_Internal::super(const CommandSetPieWedgeExplosion* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetPieWedgeExplosion::_Internal::info_geometry_command(const CommandSetPieWedgeExplosion* msg) {
  return *msg->_impl_.info_geometry_command_;
}
const ::TSP::Reference&
CommandSetPieWedgeExplosion::_Internal::style_mutation_command(const CommandSetPieWedgeExplosion* msg) {
  return *msg->_impl_.style_mutation_command_;
}
const ::TSP::Reference&
CommandSetPieWedgeExplosion::_Internal::anchor_attachment_command(const CommandSetPieWedgeExplosion* msg) {
  return *msg->_impl_.anchor_attachment_command_;
}
void CommandSetPieWedgeExplosion::clear_info_geometry_command() {
  if (_impl_.info_geometry_command_ != nullptr) _impl_.info_geometry_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetPieWedgeExplosion::clear_style_mutation_command() {
  if (_impl_.style_mutation_command_ != nullptr) _impl_.style_mutation_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetPieWedgeExplosion::clear_anchor_attachment_command() {
  if (_impl_.anchor_attachment_command_ != nullptr) _impl_.anchor_attachment_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandSetPieWedgeExplosion)
}
CommandSetPieWedgeExplosion::CommandSetPieWedgeExplosion(const CommandSetPieWedgeExplosion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetPieWedgeExplosion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_geometry_command_){nullptr}
    , decltype(_impl_.style_mutation_command_){nullptr}
    , decltype(_impl_.anchor_attachment_command_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info_geometry_command()) {
    _this->_impl_.info_geometry_command_ = new ::TSP::Reference(*from._impl_.info_geometry_command_);
  }
  if (from._internal_has_style_mutation_command()) {
    _this->_impl_.style_mutation_command_ = new ::TSP::Reference(*from._impl_.style_mutation_command_);
  }
  if (from._internal_has_anchor_attachment_command()) {
    _this->_impl_.anchor_attachment_command_ = new ::TSP::Reference(*from._impl_.anchor_attachment_command_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandSetPieWedgeExplosion)
}

inline void CommandSetPieWedgeExplosion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_geometry_command_){nullptr}
    , decltype(_impl_.style_mutation_command_){nullptr}
    , decltype(_impl_.anchor_attachment_command_){nullptr}
  };
}

CommandSetPieWedgeExplosion::~CommandSetPieWedgeExplosion() {
  // @@protoc_insertion_point(destructor:TSCH.CommandSetPieWedgeExplosion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetPieWedgeExplosion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_geometry_command_;
  if (this != internal_default_instance()) delete _impl_.style_mutation_command_;
  if (this != internal_default_instance()) delete _impl_.anchor_attachment_command_;
}

void CommandSetPieWedgeExplosion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetPieWedgeExplosion::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandSetPieWedgeExplosion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_geometry_command_ != nullptr);
      _impl_.info_geometry_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.style_mutation_command_ != nullptr);
      _impl_.style_mutation_command_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.anchor_attachment_command_ != nullptr);
      _impl_.anchor_attachment_command_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPieWedgeExplosion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference info_geometry_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_geometry_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style_mutation_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_mutation_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference anchor_attachment_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_attachment_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetPieWedgeExplosion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandSetPieWedgeExplosion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference info_geometry_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info_geometry_command(this),
        _Internal::info_geometry_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference style_mutation_command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::style_mutation_command(this),
        _Internal::style_mutation_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference anchor_attachment_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::anchor_attachment_command(this),
        _Internal::anchor_attachment_command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandSetPieWedgeExplosion)
  return target;
}

size_t CommandSetPieWedgeExplosion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandSetPieWedgeExplosion)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference info_geometry_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_geometry_command_);
    }

    // optional .TSP.Reference style_mutation_command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_mutation_command_);
    }

    // optional .TSP.Reference anchor_attachment_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anchor_attachment_command_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetPieWedgeExplosion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetPieWedgeExplosion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetPieWedgeExplosion::GetClassData() const { return &_class_data_; }


void CommandSetPieWedgeExplosion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetPieWedgeExplosion*>(&to_msg);
  auto& from = static_cast<const CommandSetPieWedgeExplosion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandSetPieWedgeExplosion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info_geometry_command()->::TSP::Reference::MergeFrom(
          from._internal_info_geometry_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_style_mutation_command()->::TSP::Reference::MergeFrom(
          from._internal_style_mutation_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_anchor_attachment_command()->::TSP::Reference::MergeFrom(
          from._internal_anchor_attachment_command());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetPieWedgeExplosion::CopyFrom(const CommandSetPieWedgeExplosion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandSetPieWedgeExplosion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPieWedgeExplosion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info_geometry_command()) {
    if (!_impl_.info_geometry_command_->IsInitialized()) return false;
  }
  if (_internal_has_style_mutation_command()) {
    if (!_impl_.style_mutation_command_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_attachment_command()) {
    if (!_impl_.anchor_attachment_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPieWedgeExplosion::InternalSwap(CommandSetPieWedgeExplosion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPieWedgeExplosion, _impl_.anchor_attachment_command_)
      + sizeof(CommandSetPieWedgeExplosion::_impl_.anchor_attachment_command_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPieWedgeExplosion, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPieWedgeExplosion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[21]);
}

// ===================================================================

class SynchronousCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SynchronousCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const SynchronousCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& command(const SynchronousCommandArchive* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
SynchronousCommandArchive::_Internal::super(const SynchronousCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
SynchronousCommandArchive::_Internal::command(const SynchronousCommandArchive* msg) {
  return *msg->_impl_.command_;
}
void SynchronousCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SynchronousCommandArchive::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SynchronousCommandArchive::SynchronousCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.SynchronousCommandArchive)
}
SynchronousCommandArchive::SynchronousCommandArchive(const SynchronousCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SynchronousCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.command_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::TSP::Reference(*from._impl_.command_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.SynchronousCommandArchive)
}

inline void SynchronousCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.command_){nullptr}
  };
}

SynchronousCommandArchive::~SynchronousCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCH.SynchronousCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SynchronousCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.command_;
}

void SynchronousCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SynchronousCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.SynchronousCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SynchronousCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SynchronousCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.SynchronousCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.SynchronousCommandArchive)
  return target;
}

size_t SynchronousCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.SynchronousCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_command()) {
    // required .TSP.Reference command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_);
  }

  return total_size;
}
size_t SynchronousCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.SynchronousCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.command_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SynchronousCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SynchronousCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SynchronousCommandArchive::GetClassData() const { return &_class_data_; }


void SynchronousCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SynchronousCommandArchive*>(&to_msg);
  auto& from = static_cast<const SynchronousCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.SynchronousCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_command()->::TSP::Reference::MergeFrom(
          from._internal_command());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SynchronousCommandArchive::CopyFrom(const SynchronousCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.SynchronousCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchronousCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  return true;
}

void SynchronousCommandArchive::InternalSwap(SynchronousCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SynchronousCommandArchive, _impl_.command_)
      + sizeof(SynchronousCommandArchive::_impl_.command_)
      - PROTOBUF_FIELD_OFFSET(SynchronousCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SynchronousCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandReplaceAllArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceAllArchive>()._impl_._has_bits_);
  static const ::TSK::ReplaceAllChildCommandArchive& super(const CommandReplaceAllArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const CommandReplaceAllArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::ReplaceAllChildCommandArchive&
CommandReplaceAllArchive::_Internal::super(const CommandReplaceAllArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandReplaceAllArchive::_Internal::info(const CommandReplaceAllArchive* msg) {
  return *msg->_impl_.info_;
}
void CommandReplaceAllArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandReplaceAllArchive::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandReplaceAllArchive::clear_commands() {
  _impl_.commands_.Clear();
}
CommandReplaceAllArchive::CommandReplaceAllArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceAllArchive)
}
CommandReplaceAllArchive::CommandReplaceAllArchive(const CommandReplaceAllArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReplaceAllArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){from._impl_.commands_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::ReplaceAllChildCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceAllArchive)
}

inline void CommandReplaceAllArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}
  };
}

CommandReplaceAllArchive::~CommandReplaceAllArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceAllArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReplaceAllArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void CommandReplaceAllArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReplaceAllArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceAllArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceAllArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.ReplaceAllChildCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReplaceAllArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceAllArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.ReplaceAllChildCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference commands = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceAllArchive)
  return target;
}

size_t CommandReplaceAllArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandReplaceAllArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.ReplaceAllChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_info()) {
    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t CommandReplaceAllArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceAllArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.ReplaceAllChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 3;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->_impl_.commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceAllArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReplaceAllArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceAllArchive::GetClassData() const { return &_class_data_; }


void CommandReplaceAllArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReplaceAllArchive*>(&to_msg);
  auto& from = static_cast<const CommandReplaceAllArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceAllArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::ReplaceAllChildCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceAllArchive::CopyFrom(const CommandReplaceAllArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceAllArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceAllArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceAllArchive::InternalSwap(CommandReplaceAllArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceAllArchive, _impl_.info_)
      + sizeof(CommandReplaceAllArchive::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceAllArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceAllArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandChartApplyTheme::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartApplyTheme>()._impl_._has_bits_);
  static const ::TSS::ApplyThemeChildCommandArchive& super(const CommandChartApplyTheme* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const CommandChartApplyTheme* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& swap_command(const CommandChartApplyTheme* msg);
  static void set_has_swap_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& preset(const CommandChartApplyTheme* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSS::ApplyThemeChildCommandArchive&
CommandChartApplyTheme::_Internal::super(const CommandChartApplyTheme* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandChartApplyTheme::_Internal::info(const CommandChartApplyTheme* msg) {
  return *msg->_impl_.info_;
}
const ::TSP::Reference&
CommandChartApplyTheme::_Internal::swap_command(const CommandChartApplyTheme* msg) {
  return *msg->_impl_.swap_command_;
}
const ::TSP::Reference&
CommandChartApplyTheme::_Internal::preset(const CommandChartApplyTheme* msg) {
  return *msg->_impl_.preset_;
}
void CommandChartApplyTheme::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandChartApplyTheme::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandChartApplyTheme::clear_swap_command() {
  if (_impl_.swap_command_ != nullptr) _impl_.swap_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandChartApplyTheme::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandChartApplyTheme::CommandChartApplyTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandChartApplyTheme)
}
CommandChartApplyTheme::CommandChartApplyTheme(const CommandChartApplyTheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChartApplyTheme* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.swap_command_){nullptr}
    , decltype(_impl_.preset_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::ApplyThemeChildCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  if (from._internal_has_swap_command()) {
    _this->_impl_.swap_command_ = new ::TSP::Reference(*from._impl_.swap_command_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandChartApplyTheme)
}

inline void CommandChartApplyTheme::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.swap_command_){nullptr}
    , decltype(_impl_.preset_){nullptr}
  };
}

CommandChartApplyTheme::~CommandChartApplyTheme() {
  // @@protoc_insertion_point(destructor:TSCH.CommandChartApplyTheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChartApplyTheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.swap_command_;
  if (this != internal_default_instance()) delete _impl_.preset_;
}

void CommandChartApplyTheme::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChartApplyTheme::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandChartApplyTheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.swap_command_ != nullptr);
      _impl_.swap_command_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartApplyTheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference swap_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_swap_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChartApplyTheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandChartApplyTheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference swap_command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::swap_command(this),
        _Internal::swap_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference preset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandChartApplyTheme)
  return target;
}

size_t CommandChartApplyTheme::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandChartApplyTheme)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_info()) {
    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t CommandChartApplyTheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandChartApplyTheme)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Reference swap_command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.swap_command_);
    }

    // optional .TSP.Reference preset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preset_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChartApplyTheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChartApplyTheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChartApplyTheme::GetClassData() const { return &_class_data_; }


void CommandChartApplyTheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChartApplyTheme*>(&to_msg);
  auto& from = static_cast<const CommandChartApplyTheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandChartApplyTheme)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_swap_command()->::TSP::Reference::MergeFrom(
          from._internal_swap_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChartApplyTheme::CopyFrom(const CommandChartApplyTheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandChartApplyTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartApplyTheme::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  if (_internal_has_swap_command()) {
    if (!_impl_.swap_command_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartApplyTheme::InternalSwap(CommandChartApplyTheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartApplyTheme, _impl_.preset_)
      + sizeof(CommandChartApplyTheme::_impl_.preset_)
      - PROTOBUF_FIELD_OFFSET(CommandChartApplyTheme, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartApplyTheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandChartApplyPreset::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChartApplyPreset>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandChartApplyPreset* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& swap_command(const CommandChartApplyPreset* msg);
  static void set_has_swap_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& preset(const CommandChartApplyPreset* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandChartApplyPreset::_Internal::super(const CommandChartApplyPreset* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandChartApplyPreset::_Internal::swap_command(const CommandChartApplyPreset* msg) {
  return *msg->_impl_.swap_command_;
}
const ::TSP::Reference&
CommandChartApplyPreset::_Internal::preset(const CommandChartApplyPreset* msg) {
  return *msg->_impl_.preset_;
}
void CommandChartApplyPreset::clear_swap_command() {
  if (_impl_.swap_command_ != nullptr) _impl_.swap_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandChartApplyPreset::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandChartApplyPreset::CommandChartApplyPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandChartApplyPreset)
}
CommandChartApplyPreset::CommandChartApplyPreset(const CommandChartApplyPreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChartApplyPreset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.swap_command_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.behavior_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_swap_command()) {
    _this->_impl_.swap_command_ = new ::TSP::Reference(*from._impl_.swap_command_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  _this->_impl_.behavior_ = from._impl_.behavior_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandChartApplyPreset)
}

inline void CommandChartApplyPreset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.swap_command_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.behavior_){1}
  };
}

CommandChartApplyPreset::~CommandChartApplyPreset() {
  // @@protoc_insertion_point(destructor:TSCH.CommandChartApplyPreset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChartApplyPreset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.swap_command_;
  if (this != internal_default_instance()) delete _impl_.preset_;
}

void CommandChartApplyPreset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChartApplyPreset::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandChartApplyPreset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.swap_command_ != nullptr);
      _impl_.swap_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
    _impl_.behavior_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChartApplyPreset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference swap_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_swap_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ApplyPresetBehavior_IsValid(val))) {
            _internal_set_behavior(static_cast<::TSCH::ApplyPresetBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChartApplyPreset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandChartApplyPreset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference swap_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::swap_command(this),
        _Internal::swap_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference preset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandChartApplyPreset)
  return target;
}

size_t CommandChartApplyPreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandChartApplyPreset)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference swap_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.swap_command_);
    }

    // optional .TSP.Reference preset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preset_);
    }

    // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_behavior());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChartApplyPreset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChartApplyPreset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChartApplyPreset::GetClassData() const { return &_class_data_; }


void CommandChartApplyPreset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChartApplyPreset*>(&to_msg);
  auto& from = static_cast<const CommandChartApplyPreset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandChartApplyPreset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_swap_command()->::TSP::Reference::MergeFrom(
          from._internal_swap_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.behavior_ = from._impl_.behavior_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChartApplyPreset::CopyFrom(const CommandChartApplyPreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandChartApplyPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChartApplyPreset::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_swap_command()) {
    if (!_impl_.swap_command_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  return true;
}

void CommandChartApplyPreset::InternalSwap(CommandChartApplyPreset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChartApplyPreset, _impl_.preset_)
      + sizeof(CommandChartApplyPreset::_impl_.preset_)
      - PROTOBUF_FIELD_OFFSET(CommandChartApplyPreset, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.behavior_, other->_impl_.behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChartApplyPreset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandCleanupGeometryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCleanupGeometryArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandCleanupGeometryArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info_geometry_command(const CommandCleanupGeometryArchive* msg);
  static void set_has_info_geometry_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& anchor_attachment_command(const CommandCleanupGeometryArchive* msg);
  static void set_has_anchor_attachment_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::RectArchive& original_legend_rect(const CommandCleanupGeometryArchive* msg);
  static void set_has_original_legend_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandCleanupGeometryArchive::_Internal::super(const CommandCleanupGeometryArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandCleanupGeometryArchive::_Internal::info_geometry_command(const CommandCleanupGeometryArchive* msg) {
  return *msg->_impl_.info_geometry_command_;
}
const ::TSP::Reference&
CommandCleanupGeometryArchive::_Internal::anchor_attachment_command(const CommandCleanupGeometryArchive* msg) {
  return *msg->_impl_.anchor_attachment_command_;
}
const ::TSCH::RectArchive&
CommandCleanupGeometryArchive::_Internal::original_legend_rect(const CommandCleanupGeometryArchive* msg) {
  return *msg->_impl_.original_legend_rect_;
}
void CommandCleanupGeometryArchive::clear_info_geometry_command() {
  if (_impl_.info_geometry_command_ != nullptr) _impl_.info_geometry_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandCleanupGeometryArchive::clear_anchor_attachment_command() {
  if (_impl_.anchor_attachment_command_ != nullptr) _impl_.anchor_attachment_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandCleanupGeometryArchive::clear_original_legend_rect() {
  if (_impl_.original_legend_rect_ != nullptr) _impl_.original_legend_rect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandCleanupGeometryArchive::CommandCleanupGeometryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandCleanupGeometryArchive)
}
CommandCleanupGeometryArchive::CommandCleanupGeometryArchive(const CommandCleanupGeometryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCleanupGeometryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_geometry_command_){nullptr}
    , decltype(_impl_.anchor_attachment_command_){nullptr}
    , decltype(_impl_.original_legend_rect_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info_geometry_command()) {
    _this->_impl_.info_geometry_command_ = new ::TSP::Reference(*from._impl_.info_geometry_command_);
  }
  if (from._internal_has_anchor_attachment_command()) {
    _this->_impl_.anchor_attachment_command_ = new ::TSP::Reference(*from._impl_.anchor_attachment_command_);
  }
  if (from._internal_has_original_legend_rect()) {
    _this->_impl_.original_legend_rect_ = new ::TSCH::RectArchive(*from._impl_.original_legend_rect_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandCleanupGeometryArchive)
}

inline void CommandCleanupGeometryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_geometry_command_){nullptr}
    , decltype(_impl_.anchor_attachment_command_){nullptr}
    , decltype(_impl_.original_legend_rect_){nullptr}
  };
}

CommandCleanupGeometryArchive::~CommandCleanupGeometryArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandCleanupGeometryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCleanupGeometryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_geometry_command_;
  if (this != internal_default_instance()) delete _impl_.anchor_attachment_command_;
  if (this != internal_default_instance()) delete _impl_.original_legend_rect_;
}

void CommandCleanupGeometryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCleanupGeometryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandCleanupGeometryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_geometry_command_ != nullptr);
      _impl_.info_geometry_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.anchor_attachment_command_ != nullptr);
      _impl_.anchor_attachment_command_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.original_legend_rect_ != nullptr);
      _impl_.original_legend_rect_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCleanupGeometryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference info_geometry_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_geometry_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference anchor_attachment_command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_attachment_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.RectArchive original_legend_rect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_legend_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCleanupGeometryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandCleanupGeometryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference info_geometry_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info_geometry_command(this),
        _Internal::info_geometry_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference anchor_attachment_command = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::anchor_attachment_command(this),
        _Internal::anchor_attachment_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.RectArchive original_legend_rect = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::original_legend_rect(this),
        _Internal::original_legend_rect(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandCleanupGeometryArchive)
  return target;
}

size_t CommandCleanupGeometryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandCleanupGeometryArchive)
  size_t total_size = 0;

  // required .TSCH.ChartCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference info_geometry_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_geometry_command_);
    }

    // optional .TSP.Reference anchor_attachment_command = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anchor_attachment_command_);
    }

    // optional .TSCH.RectArchive original_legend_rect = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.original_legend_rect_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCleanupGeometryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCleanupGeometryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCleanupGeometryArchive::GetClassData() const { return &_class_data_; }


void CommandCleanupGeometryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCleanupGeometryArchive*>(&to_msg);
  auto& from = static_cast<const CommandCleanupGeometryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandCleanupGeometryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info_geometry_command()->::TSP::Reference::MergeFrom(
          from._internal_info_geometry_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_anchor_attachment_command()->::TSP::Reference::MergeFrom(
          from._internal_anchor_attachment_command());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_original_legend_rect()->::TSCH::RectArchive::MergeFrom(
          from._internal_original_legend_rect());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCleanupGeometryArchive::CopyFrom(const CommandCleanupGeometryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandCleanupGeometryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCleanupGeometryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info_geometry_command()) {
    if (!_impl_.info_geometry_command_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_attachment_command()) {
    if (!_impl_.anchor_attachment_command_->IsInitialized()) return false;
  }
  if (_internal_has_original_legend_rect()) {
    if (!_impl_.original_legend_rect_->IsInitialized()) return false;
  }
  return true;
}

void CommandCleanupGeometryArchive::InternalSwap(CommandCleanupGeometryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCleanupGeometryArchive, _impl_.original_legend_rect_)
      + sizeof(CommandCleanupGeometryArchive::_impl_.original_legend_rect_)
      - PROTOBUF_FIELD_OFFSET(CommandCleanupGeometryArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCleanupGeometryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[26]);
}

// ===================================================================

class ChartCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ChartCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const ChartCommandArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_dirty_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
ChartCommandArchive::_Internal::super(const ChartCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ChartCommandArchive::_Internal::info(const ChartCommandArchive* msg) {
  return *msg->_impl_.info_;
}
void ChartCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartCommandArchive::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChartCommandArchive::ChartCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartCommandArchive)
}
ChartCommandArchive::ChartCommandArchive(const ChartCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.original_dirty_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  _this->_impl_.original_dirty_state_ = from._impl_.original_dirty_state_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartCommandArchive)
}

inline void ChartCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.original_dirty_state_){false}
  };
}

ChartCommandArchive::~ChartCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void ChartCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_.original_dirty_state_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool original_dirty_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_original_dirty_state(&has_bits);
          _impl_.original_dirty_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // optional bool original_dirty_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_original_dirty_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartCommandArchive)
  return target;
}

size_t ChartCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.ChartCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_info()) {
    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t ChartCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool original_dirty_state = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartCommandArchive::GetClassData() const { return &_class_data_; }


void ChartCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartCommandArchive*>(&to_msg);
  auto& from = static_cast<const ChartCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.original_dirty_state_ = from._impl_.original_dirty_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartCommandArchive::CopyFrom(const ChartCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void ChartCommandArchive::InternalSwap(ChartCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartCommandArchive, _impl_.original_dirty_state_)
      + sizeof(ChartCommandArchive::_impl_.original_dirty_state_)
      - PROTOBUF_FIELD_OFFSET(ChartCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandReplaceGridValuesArchive_ValueRow::_Internal {
 public:
};

CommandReplaceGridValuesArchive_ValueRow::CommandReplaceGridValuesArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceGridValuesArchive.ValueRow)
}
CommandReplaceGridValuesArchive_ValueRow::CommandReplaceGridValuesArchive_ValueRow(const CommandReplaceGridValuesArchive_ValueRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReplaceGridValuesArchive_ValueRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceGridValuesArchive.ValueRow)
}

inline void CommandReplaceGridValuesArchive_ValueRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommandReplaceGridValuesArchive_ValueRow::~CommandReplaceGridValuesArchive_ValueRow() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceGridValuesArchive.ValueRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReplaceGridValuesArchive_ValueRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void CommandReplaceGridValuesArchive_ValueRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReplaceGridValuesArchive_ValueRow::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceGridValuesArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceGridValuesArchive_ValueRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReplaceGridValuesArchive_ValueRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceGridValuesArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceGridValuesArchive.ValueRow)
  return target;
}

size_t CommandReplaceGridValuesArchive_ValueRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceGridValuesArchive.ValueRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceGridValuesArchive_ValueRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReplaceGridValuesArchive_ValueRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceGridValuesArchive_ValueRow::GetClassData() const { return &_class_data_; }


void CommandReplaceGridValuesArchive_ValueRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReplaceGridValuesArchive_ValueRow*>(&to_msg);
  auto& from = static_cast<const CommandReplaceGridValuesArchive_ValueRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceGridValuesArchive.ValueRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceGridValuesArchive_ValueRow::CopyFrom(const CommandReplaceGridValuesArchive_ValueRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceGridValuesArchive.ValueRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceGridValuesArchive_ValueRow::IsInitialized() const {
  return true;
}

void CommandReplaceGridValuesArchive_ValueRow::InternalSwap(CommandReplaceGridValuesArchive_ValueRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceGridValuesArchive_ValueRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandReplaceGridValuesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceGridValuesArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartCommandArchive& super(const CommandReplaceGridValuesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rowindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_columnindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rows_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cols_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCH::ChartCommandArchive&
CommandReplaceGridValuesArchive::_Internal::super(const CommandReplaceGridValuesArchive* msg) {
  return *msg->_impl_.super_;
}
CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceGridValuesArchive)
}
CommandReplaceGridValuesArchive::CommandReplaceGridValuesArchive(const CommandReplaceGridValuesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReplaceGridValuesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_data_rows_){from._impl_.old_data_rows_}
    , decltype(_impl_.new_data_rows_){from._impl_.new_data_rows_}
    , decltype(_impl_.old_row_names_){from._impl_.old_row_names_}
    , decltype(_impl_.new_row_names_){from._impl_.new_row_names_}
    , decltype(_impl_.old_col_names_){from._impl_.old_col_names_}
    , decltype(_impl_.new_col_names_){from._impl_.new_col_names_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rowindex_){}
    , decltype(_impl_.columnindex_){}
    , decltype(_impl_.rows_to_add_){}
    , decltype(_impl_.cols_to_add_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::ChartCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.rowindex_, &from._impl_.rowindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cols_to_add_) -
    reinterpret_cast<char*>(&_impl_.rowindex_)) + sizeof(_impl_.cols_to_add_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceGridValuesArchive)
}

inline void CommandReplaceGridValuesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_data_rows_){arena}
    , decltype(_impl_.new_data_rows_){arena}
    , decltype(_impl_.old_row_names_){arena}
    , decltype(_impl_.new_row_names_){arena}
    , decltype(_impl_.old_col_names_){arena}
    , decltype(_impl_.new_col_names_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rowindex_){0u}
    , decltype(_impl_.columnindex_){0u}
    , decltype(_impl_.rows_to_add_){0u}
    , decltype(_impl_.cols_to_add_){0u}
  };
}

CommandReplaceGridValuesArchive::~CommandReplaceGridValuesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceGridValuesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReplaceGridValuesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_data_rows_.~RepeatedPtrField();
  _impl_.new_data_rows_.~RepeatedPtrField();
  _impl_.old_row_names_.~RepeatedPtrField();
  _impl_.new_row_names_.~RepeatedPtrField();
  _impl_.old_col_names_.~RepeatedPtrField();
  _impl_.new_col_names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandReplaceGridValuesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReplaceGridValuesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceGridValuesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_data_rows_.Clear();
  _impl_.new_data_rows_.Clear();
  _impl_.old_row_names_.Clear();
  _impl_.new_row_names_.Clear();
  _impl_.old_col_names_.Clear();
  _impl_.new_col_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.rowindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cols_to_add_) -
        reinterpret_cast<char*>(&_impl_.rowindex_)) + sizeof(_impl_.cols_to_add_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceGridValuesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 rowindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rowindex(&has_bits);
          _impl_.rowindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 columnindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_columnindex(&has_bits);
          _impl_.columnindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_data_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_data_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string old_row_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_old_row_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.old_row_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string new_row_names = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_new_row_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.new_row_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string old_col_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_old_col_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.old_col_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string new_col_names = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_new_col_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.CommandReplaceGridValuesArchive.new_col_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rows_to_add = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_rows_to_add(&has_bits);
          _impl_.rows_to_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cols_to_add = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cols_to_add(&has_bits);
          _impl_.cols_to_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReplaceGridValuesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceGridValuesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 rowindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rowindex(), target);
  }

  // required uint32 columnindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_columnindex(), target);
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_data_rows_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_data_rows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_data_rows_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_data_rows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string old_row_names = 6;
  for (int i = 0, n = this->_internal_old_row_names_size(); i < n; i++) {
    const auto& s = this->_internal_old_row_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.old_row_names");
    target = stream->WriteString(6, s, target);
  }

  // repeated string new_row_names = 7;
  for (int i = 0, n = this->_internal_new_row_names_size(); i < n; i++) {
    const auto& s = this->_internal_new_row_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.new_row_names");
    target = stream->WriteString(7, s, target);
  }

  // repeated string old_col_names = 8;
  for (int i = 0, n = this->_internal_old_col_names_size(); i < n; i++) {
    const auto& s = this->_internal_old_col_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.old_col_names");
    target = stream->WriteString(8, s, target);
  }

  // repeated string new_col_names = 9;
  for (int i = 0, n = this->_internal_new_col_names_size(); i < n; i++) {
    const auto& s = this->_internal_new_col_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceGridValuesArchive.new_col_names");
    target = stream->WriteString(9, s, target);
  }

  // optional uint32 rows_to_add = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rows_to_add(), target);
  }

  // optional uint32 cols_to_add = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cols_to_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceGridValuesArchive)
  return target;
}

size_t CommandReplaceGridValuesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandReplaceGridValuesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rowindex()) {
    // required uint32 rowindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rowindex());
  }

  if (_internal_has_columnindex()) {
    // required uint32 columnindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_columnindex());
  }

  return total_size;
}
size_t CommandReplaceGridValuesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceGridValuesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCH.ChartCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 rowindex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rowindex());

    // required uint32 columnindex = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_columnindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
  total_size += 1UL * this->_internal_old_data_rows_size();
  for (const auto& msg : this->_impl_.old_data_rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
  total_size += 1UL * this->_internal_new_data_rows_size();
  for (const auto& msg : this->_impl_.new_data_rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string old_row_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.old_row_names_.size());
  for (int i = 0, n = _impl_.old_row_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.old_row_names_.Get(i));
  }

  // repeated string new_row_names = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.new_row_names_.size());
  for (int i = 0, n = _impl_.new_row_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.new_row_names_.Get(i));
  }

  // repeated string old_col_names = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.old_col_names_.size());
  for (int i = 0, n = _impl_.old_col_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.old_col_names_.Get(i));
  }

  // repeated string new_col_names = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.new_col_names_.size());
  for (int i = 0, n = _impl_.new_col_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.new_col_names_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 rows_to_add = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rows_to_add());
    }

    // optional uint32 cols_to_add = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cols_to_add());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceGridValuesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReplaceGridValuesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceGridValuesArchive::GetClassData() const { return &_class_data_; }


void CommandReplaceGridValuesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReplaceGridValuesArchive*>(&to_msg);
  auto& from = static_cast<const CommandReplaceGridValuesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceGridValuesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.old_data_rows_.MergeFrom(from._impl_.old_data_rows_);
  _this->_impl_.new_data_rows_.MergeFrom(from._impl_.new_data_rows_);
  _this->_impl_.old_row_names_.MergeFrom(from._impl_.old_row_names_);
  _this->_impl_.new_row_names_.MergeFrom(from._impl_.new_row_names_);
  _this->_impl_.old_col_names_.MergeFrom(from._impl_.old_col_names_);
  _this->_impl_.new_col_names_.MergeFrom(from._impl_.new_col_names_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::ChartCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rowindex_ = from._impl_.rowindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.columnindex_ = from._impl_.columnindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rows_to_add_ = from._impl_.rows_to_add_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cols_to_add_ = from._impl_.cols_to_add_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceGridValuesArchive::CopyFrom(const CommandReplaceGridValuesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceGridValuesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceGridValuesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceGridValuesArchive::InternalSwap(CommandReplaceGridValuesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.old_data_rows_.InternalSwap(&other->_impl_.old_data_rows_);
  _impl_.new_data_rows_.InternalSwap(&other->_impl_.new_data_rows_);
  _impl_.old_row_names_.InternalSwap(&other->_impl_.old_row_names_);
  _impl_.new_row_names_.InternalSwap(&other->_impl_.new_row_names_);
  _impl_.old_col_names_.InternalSwap(&other->_impl_.old_col_names_);
  _impl_.new_col_names_.InternalSwap(&other->_impl_.new_col_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceGridValuesArchive, _impl_.cols_to_add_)
      + sizeof(CommandReplaceGridValuesArchive::_impl_.cols_to_add_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceGridValuesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceGridValuesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[29]);
}

// ===================================================================

class CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceThemePresetArchive_StyleAndIdentifierPair>()._impl_._has_bits_);
  static const ::TSP::Reference& style(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_Internal::style(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* msg) {
  return *msg->_impl_.style_;
}
void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_style() {
  if (_impl_.style_ != nullptr) _impl_.style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
}
CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CommandReplaceThemePresetArchive_StyleAndIdentifierPair(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    _this->_impl_.style_ = new ::TSP::Reference(*from._impl_.style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
}

inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.style_){nullptr}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandReplaceThemePresetArchive_StyleAndIdentifierPair::~CommandReplaceThemePresetArchive_StyleAndIdentifierPair() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.style_;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.style_ != nullptr);
      _impl_.style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  // required string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  return target;
}

size_t CommandReplaceThemePresetArchive_StyleAndIdentifierPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_style()) {
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);
  }

  return total_size;
}
size_t CommandReplaceThemePresetArchive_StyleAndIdentifierPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceThemePresetArchive_StyleAndIdentifierPair::GetClassData() const { return &_class_data_; }


void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReplaceThemePresetArchive_StyleAndIdentifierPair*>(&to_msg);
  auto& from = static_cast<const CommandReplaceThemePresetArchive_StyleAndIdentifierPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_style()->::TSP::Reference::MergeFrom(
          from._internal_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::CopyFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_style()) {
    if (!_impl_.style_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::InternalSwap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  swap(_impl_.style_, other->_impl_.style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceThemePresetArchive_StyleAndIdentifierPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[30]);
}

// ===================================================================

class CommandReplaceThemePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceThemePresetArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandReplaceThemePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandReplaceThemePresetArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_preset(const CommandReplaceThemePresetArchive* msg);
  static void set_has_old_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& new_preset(const CommandReplaceThemePresetArchive* msg);
  static void set_has_new_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandReplaceThemePresetArchive::_Internal::super(const CommandReplaceThemePresetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandReplaceThemePresetArchive::_Internal::theme(const CommandReplaceThemePresetArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
CommandReplaceThemePresetArchive::_Internal::old_preset(const CommandReplaceThemePresetArchive* msg) {
  return *msg->_impl_.old_preset_;
}
const ::TSP::Reference&
CommandReplaceThemePresetArchive::_Internal::new_preset(const CommandReplaceThemePresetArchive* msg) {
  return *msg->_impl_.new_preset_;
}
void CommandReplaceThemePresetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandReplaceThemePresetArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandReplaceThemePresetArchive::clear_old_preset() {
  if (_impl_.old_preset_ != nullptr) _impl_.old_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandReplaceThemePresetArchive::clear_new_preset() {
  if (_impl_.new_preset_ != nullptr) _impl_.new_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandReplaceThemePresetArchive)
}
CommandReplaceThemePresetArchive::CommandReplaceThemePresetArchive(const CommandReplaceThemePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReplaceThemePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifiers_){from._impl_.identifiers_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_preset_){nullptr}
    , decltype(_impl_.new_preset_){nullptr}
    , decltype(_impl_.old_preset_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_old_preset()) {
    _this->_impl_.old_preset_ = new ::TSP::Reference(*from._impl_.old_preset_);
  }
  if (from._internal_has_new_preset()) {
    _this->_impl_.new_preset_ = new ::TSP::Reference(*from._impl_.new_preset_);
  }
  _this->_impl_.old_preset_index_ = from._impl_.old_preset_index_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandReplaceThemePresetArchive)
}

inline void CommandReplaceThemePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifiers_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_preset_){nullptr}
    , decltype(_impl_.new_preset_){nullptr}
    , decltype(_impl_.old_preset_index_){uint64_t{0u}}
  };
}

CommandReplaceThemePresetArchive::~CommandReplaceThemePresetArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CommandReplaceThemePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReplaceThemePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifiers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.old_preset_;
  if (this != internal_default_instance()) delete _impl_.new_preset_;
}

void CommandReplaceThemePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReplaceThemePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandReplaceThemePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifiers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_preset_ != nullptr);
      _impl_.old_preset_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_preset_ != nullptr);
      _impl_.new_preset_->Clear();
    }
  }
  _impl_.old_preset_index_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceThemePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 old_preset_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_old_preset_index(&has_bits);
          _impl_.old_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReplaceThemePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandReplaceThemePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_preset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_preset(this),
        _Internal::old_preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_preset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_preset(this),
        _Internal::new_preset(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 old_preset_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_old_preset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandReplaceThemePresetArchive)
  return target;
}

size_t CommandReplaceThemePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.CommandReplaceThemePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  return total_size;
}
size_t CommandReplaceThemePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandReplaceThemePresetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  total_size += 1UL * this->_internal_identifiers_size();
  for (const auto& msg : this->_impl_.identifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference old_preset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_preset_);
    }

    // optional .TSP.Reference new_preset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_preset_);
    }

    // optional uint64 old_preset_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_preset_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceThemePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReplaceThemePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceThemePresetArchive::GetClassData() const { return &_class_data_; }


void CommandReplaceThemePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReplaceThemePresetArchive*>(&to_msg);
  auto& from = static_cast<const CommandReplaceThemePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandReplaceThemePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.identifiers_.MergeFrom(from._impl_.identifiers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_preset()->::TSP::Reference::MergeFrom(
          from._internal_old_preset());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_preset()->::TSP::Reference::MergeFrom(
          from._internal_new_preset());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.old_preset_index_ = from._impl_.old_preset_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceThemePresetArchive::CopyFrom(const CommandReplaceThemePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandReplaceThemePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceThemePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifiers_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_old_preset()) {
    if (!_impl_.old_preset_->IsInitialized()) return false;
  }
  if (_internal_has_new_preset()) {
    if (!_impl_.new_preset_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceThemePresetArchive::InternalSwap(CommandReplaceThemePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.identifiers_.InternalSwap(&other->_impl_.identifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceThemePresetArchive, _impl_.old_preset_index_)
      + sizeof(CommandReplaceThemePresetArchive::_impl_.old_preset_index_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceThemePresetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceThemePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[31]);
}

// ===================================================================

class CommandInvalidateWPCaches::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInvalidateWPCaches>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandInvalidateWPCaches* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandInvalidateWPCaches::_Internal::super(const CommandInvalidateWPCaches* msg) {
  return *msg->_impl_.super_;
}
void CommandInvalidateWPCaches::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandInvalidateWPCaches::CommandInvalidateWPCaches(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CommandInvalidateWPCaches)
}
CommandInvalidateWPCaches::CommandInvalidateWPCaches(const CommandInvalidateWPCaches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandInvalidateWPCaches* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.CommandInvalidateWPCaches)
}

inline void CommandInvalidateWPCaches::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandInvalidateWPCaches::~CommandInvalidateWPCaches() {
  // @@protoc_insertion_point(destructor:TSCH.CommandInvalidateWPCaches)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandInvalidateWPCaches::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandInvalidateWPCaches::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandInvalidateWPCaches::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CommandInvalidateWPCaches)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInvalidateWPCaches::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandInvalidateWPCaches::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CommandInvalidateWPCaches)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CommandInvalidateWPCaches)
  return target;
}

size_t CommandInvalidateWPCaches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CommandInvalidateWPCaches)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInvalidateWPCaches::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandInvalidateWPCaches::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInvalidateWPCaches::GetClassData() const { return &_class_data_; }


void CommandInvalidateWPCaches::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandInvalidateWPCaches*>(&to_msg);
  auto& from = static_cast<const CommandInvalidateWPCaches&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CommandInvalidateWPCaches)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInvalidateWPCaches::CopyFrom(const CommandInvalidateWPCaches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CommandInvalidateWPCaches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInvalidateWPCaches::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandInvalidateWPCaches::InternalSwap(CommandInvalidateWPCaches* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInvalidateWPCaches::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHCommandArchives_2eproto_getter, &descriptor_table_TSCHCommandArchives_2eproto_once,
      file_level_metadata_TSCHCommandArchives_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetChartTypeArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetChartTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetChartTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PropertyMutationUndoTupleArchive*
Arena::CreateMaybeMessage< ::TSCH::PropertyMutationUndoTupleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PropertyMutationUndoTupleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::StyleSwapUndoTupleArchive*
Arena::CreateMaybeMessage< ::TSCH::StyleSwapUndoTupleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::StyleSwapUndoTupleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandStyleSwapArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandStyleSwapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandStyleSwapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetSeriesNameArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetSeriesNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetSeriesNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetCategoryNameArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetCategoryNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetCategoryNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandAddGridRowsArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandAddGridRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandAddGridRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandAddGridColumnsArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandAddGridColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandAddGridColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMoveGridRowsArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandMoveGridRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMoveGridRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandMoveGridColumnsArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandMoveGridColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandMoveGridColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandDeleteGridRowsArchive_ValueRow*
Arena::CreateMaybeMessage< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandDeleteGridRowsArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandDeleteGridRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandDeleteGridRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandDeleteGridColumnsArchive_ValueRow*
Arena::CreateMaybeMessage< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandDeleteGridColumnsArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandDeleteGridColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandDeleteGridColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetPreviewLocArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetPreviewLocArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetPreviewLocArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetGridValueArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetGridValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetGridValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetGridDirectionArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetGridDirectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetGridDirectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetSeriesTypeArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetSeriesTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetSeriesTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetScatterFormatArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetScatterFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetScatterFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetMultiDataSetIndexArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetMultiDataSetIndexArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetMultiDataSetIndexArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetLegendFrameArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandSetLegendFrameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetLegendFrameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandSetPieWedgeExplosion*
Arena::CreateMaybeMessage< ::TSCH::CommandSetPieWedgeExplosion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandSetPieWedgeExplosion >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::SynchronousCommandArchive*
Arena::CreateMaybeMessage< ::TSCH::SynchronousCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::SynchronousCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceAllArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandReplaceAllArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceAllArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandChartApplyTheme*
Arena::CreateMaybeMessage< ::TSCH::CommandChartApplyTheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandChartApplyTheme >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandChartApplyPreset*
Arena::CreateMaybeMessage< ::TSCH::CommandChartApplyPreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandChartApplyPreset >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandCleanupGeometryArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandCleanupGeometryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandCleanupGeometryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartCommandArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceGridValuesArchive_ValueRow*
Arena::CreateMaybeMessage< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceGridValuesArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandReplaceGridValuesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceGridValuesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair*
Arena::CreateMaybeMessage< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandReplaceThemePresetArchive*
Arena::CreateMaybeMessage< ::TSCH::CommandReplaceThemePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandReplaceThemePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CommandInvalidateWPCaches*
Arena::CreateMaybeMessage< ::TSCH::CommandInvalidateWPCaches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CommandInvalidateWPCaches >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
