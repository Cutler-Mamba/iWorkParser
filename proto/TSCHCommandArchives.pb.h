// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCHCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCHCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCHArchives.GEN.pb.h"
#include "TSCH3DArchives.pb.h"
#include "TSCHArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCHCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCHCommandArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHCommandArchives_2eproto;
namespace TSCH {
class ChartCommandArchive;
struct ChartCommandArchiveDefaultTypeInternal;
extern ChartCommandArchiveDefaultTypeInternal _ChartCommandArchive_default_instance_;
class CommandAddGridColumnsArchive;
struct CommandAddGridColumnsArchiveDefaultTypeInternal;
extern CommandAddGridColumnsArchiveDefaultTypeInternal _CommandAddGridColumnsArchive_default_instance_;
class CommandAddGridRowsArchive;
struct CommandAddGridRowsArchiveDefaultTypeInternal;
extern CommandAddGridRowsArchiveDefaultTypeInternal _CommandAddGridRowsArchive_default_instance_;
class CommandChartApplyPreset;
struct CommandChartApplyPresetDefaultTypeInternal;
extern CommandChartApplyPresetDefaultTypeInternal _CommandChartApplyPreset_default_instance_;
class CommandChartApplyTheme;
struct CommandChartApplyThemeDefaultTypeInternal;
extern CommandChartApplyThemeDefaultTypeInternal _CommandChartApplyTheme_default_instance_;
class CommandCleanupGeometryArchive;
struct CommandCleanupGeometryArchiveDefaultTypeInternal;
extern CommandCleanupGeometryArchiveDefaultTypeInternal _CommandCleanupGeometryArchive_default_instance_;
class CommandDeleteGridColumnsArchive;
struct CommandDeleteGridColumnsArchiveDefaultTypeInternal;
extern CommandDeleteGridColumnsArchiveDefaultTypeInternal _CommandDeleteGridColumnsArchive_default_instance_;
class CommandDeleteGridColumnsArchive_ValueRow;
struct CommandDeleteGridColumnsArchive_ValueRowDefaultTypeInternal;
extern CommandDeleteGridColumnsArchive_ValueRowDefaultTypeInternal _CommandDeleteGridColumnsArchive_ValueRow_default_instance_;
class CommandDeleteGridRowsArchive;
struct CommandDeleteGridRowsArchiveDefaultTypeInternal;
extern CommandDeleteGridRowsArchiveDefaultTypeInternal _CommandDeleteGridRowsArchive_default_instance_;
class CommandDeleteGridRowsArchive_ValueRow;
struct CommandDeleteGridRowsArchive_ValueRowDefaultTypeInternal;
extern CommandDeleteGridRowsArchive_ValueRowDefaultTypeInternal _CommandDeleteGridRowsArchive_ValueRow_default_instance_;
class CommandInvalidateWPCaches;
struct CommandInvalidateWPCachesDefaultTypeInternal;
extern CommandInvalidateWPCachesDefaultTypeInternal _CommandInvalidateWPCaches_default_instance_;
class CommandMoveGridColumnsArchive;
struct CommandMoveGridColumnsArchiveDefaultTypeInternal;
extern CommandMoveGridColumnsArchiveDefaultTypeInternal _CommandMoveGridColumnsArchive_default_instance_;
class CommandMoveGridRowsArchive;
struct CommandMoveGridRowsArchiveDefaultTypeInternal;
extern CommandMoveGridRowsArchiveDefaultTypeInternal _CommandMoveGridRowsArchive_default_instance_;
class CommandReplaceAllArchive;
struct CommandReplaceAllArchiveDefaultTypeInternal;
extern CommandReplaceAllArchiveDefaultTypeInternal _CommandReplaceAllArchive_default_instance_;
class CommandReplaceGridValuesArchive;
struct CommandReplaceGridValuesArchiveDefaultTypeInternal;
extern CommandReplaceGridValuesArchiveDefaultTypeInternal _CommandReplaceGridValuesArchive_default_instance_;
class CommandReplaceGridValuesArchive_ValueRow;
struct CommandReplaceGridValuesArchive_ValueRowDefaultTypeInternal;
extern CommandReplaceGridValuesArchive_ValueRowDefaultTypeInternal _CommandReplaceGridValuesArchive_ValueRow_default_instance_;
class CommandReplaceThemePresetArchive;
struct CommandReplaceThemePresetArchiveDefaultTypeInternal;
extern CommandReplaceThemePresetArchiveDefaultTypeInternal _CommandReplaceThemePresetArchive_default_instance_;
class CommandReplaceThemePresetArchive_StyleAndIdentifierPair;
struct CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal;
extern CommandReplaceThemePresetArchive_StyleAndIdentifierPairDefaultTypeInternal _CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_;
class CommandSetCategoryNameArchive;
struct CommandSetCategoryNameArchiveDefaultTypeInternal;
extern CommandSetCategoryNameArchiveDefaultTypeInternal _CommandSetCategoryNameArchive_default_instance_;
class CommandSetChartTypeArchive;
struct CommandSetChartTypeArchiveDefaultTypeInternal;
extern CommandSetChartTypeArchiveDefaultTypeInternal _CommandSetChartTypeArchive_default_instance_;
class CommandSetGridDirectionArchive;
struct CommandSetGridDirectionArchiveDefaultTypeInternal;
extern CommandSetGridDirectionArchiveDefaultTypeInternal _CommandSetGridDirectionArchive_default_instance_;
class CommandSetGridValueArchive;
struct CommandSetGridValueArchiveDefaultTypeInternal;
extern CommandSetGridValueArchiveDefaultTypeInternal _CommandSetGridValueArchive_default_instance_;
class CommandSetLegendFrameArchive;
struct CommandSetLegendFrameArchiveDefaultTypeInternal;
extern CommandSetLegendFrameArchiveDefaultTypeInternal _CommandSetLegendFrameArchive_default_instance_;
class CommandSetMultiDataSetIndexArchive;
struct CommandSetMultiDataSetIndexArchiveDefaultTypeInternal;
extern CommandSetMultiDataSetIndexArchiveDefaultTypeInternal _CommandSetMultiDataSetIndexArchive_default_instance_;
class CommandSetPieWedgeExplosion;
struct CommandSetPieWedgeExplosionDefaultTypeInternal;
extern CommandSetPieWedgeExplosionDefaultTypeInternal _CommandSetPieWedgeExplosion_default_instance_;
class CommandSetPreviewLocArchive;
struct CommandSetPreviewLocArchiveDefaultTypeInternal;
extern CommandSetPreviewLocArchiveDefaultTypeInternal _CommandSetPreviewLocArchive_default_instance_;
class CommandSetScatterFormatArchive;
struct CommandSetScatterFormatArchiveDefaultTypeInternal;
extern CommandSetScatterFormatArchiveDefaultTypeInternal _CommandSetScatterFormatArchive_default_instance_;
class CommandSetSeriesNameArchive;
struct CommandSetSeriesNameArchiveDefaultTypeInternal;
extern CommandSetSeriesNameArchiveDefaultTypeInternal _CommandSetSeriesNameArchive_default_instance_;
class CommandSetSeriesTypeArchive;
struct CommandSetSeriesTypeArchiveDefaultTypeInternal;
extern CommandSetSeriesTypeArchiveDefaultTypeInternal _CommandSetSeriesTypeArchive_default_instance_;
class CommandStyleSwapArchive;
struct CommandStyleSwapArchiveDefaultTypeInternal;
extern CommandStyleSwapArchiveDefaultTypeInternal _CommandStyleSwapArchive_default_instance_;
class PropertyMutationUndoTupleArchive;
struct PropertyMutationUndoTupleArchiveDefaultTypeInternal;
extern PropertyMutationUndoTupleArchiveDefaultTypeInternal _PropertyMutationUndoTupleArchive_default_instance_;
class StyleSwapUndoTupleArchive;
struct StyleSwapUndoTupleArchiveDefaultTypeInternal;
extern StyleSwapUndoTupleArchiveDefaultTypeInternal _StyleSwapUndoTupleArchive_default_instance_;
class SynchronousCommandArchive;
struct SynchronousCommandArchiveDefaultTypeInternal;
extern SynchronousCommandArchiveDefaultTypeInternal _SynchronousCommandArchive_default_instance_;
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::ChartCommandArchive* Arena::CreateMaybeMessage<::TSCH::ChartCommandArchive>(Arena*);
template<> ::TSCH::CommandAddGridColumnsArchive* Arena::CreateMaybeMessage<::TSCH::CommandAddGridColumnsArchive>(Arena*);
template<> ::TSCH::CommandAddGridRowsArchive* Arena::CreateMaybeMessage<::TSCH::CommandAddGridRowsArchive>(Arena*);
template<> ::TSCH::CommandChartApplyPreset* Arena::CreateMaybeMessage<::TSCH::CommandChartApplyPreset>(Arena*);
template<> ::TSCH::CommandChartApplyTheme* Arena::CreateMaybeMessage<::TSCH::CommandChartApplyTheme>(Arena*);
template<> ::TSCH::CommandCleanupGeometryArchive* Arena::CreateMaybeMessage<::TSCH::CommandCleanupGeometryArchive>(Arena*);
template<> ::TSCH::CommandDeleteGridColumnsArchive* Arena::CreateMaybeMessage<::TSCH::CommandDeleteGridColumnsArchive>(Arena*);
template<> ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* Arena::CreateMaybeMessage<::TSCH::CommandDeleteGridColumnsArchive_ValueRow>(Arena*);
template<> ::TSCH::CommandDeleteGridRowsArchive* Arena::CreateMaybeMessage<::TSCH::CommandDeleteGridRowsArchive>(Arena*);
template<> ::TSCH::CommandDeleteGridRowsArchive_ValueRow* Arena::CreateMaybeMessage<::TSCH::CommandDeleteGridRowsArchive_ValueRow>(Arena*);
template<> ::TSCH::CommandInvalidateWPCaches* Arena::CreateMaybeMessage<::TSCH::CommandInvalidateWPCaches>(Arena*);
template<> ::TSCH::CommandMoveGridColumnsArchive* Arena::CreateMaybeMessage<::TSCH::CommandMoveGridColumnsArchive>(Arena*);
template<> ::TSCH::CommandMoveGridRowsArchive* Arena::CreateMaybeMessage<::TSCH::CommandMoveGridRowsArchive>(Arena*);
template<> ::TSCH::CommandReplaceAllArchive* Arena::CreateMaybeMessage<::TSCH::CommandReplaceAllArchive>(Arena*);
template<> ::TSCH::CommandReplaceGridValuesArchive* Arena::CreateMaybeMessage<::TSCH::CommandReplaceGridValuesArchive>(Arena*);
template<> ::TSCH::CommandReplaceGridValuesArchive_ValueRow* Arena::CreateMaybeMessage<::TSCH::CommandReplaceGridValuesArchive_ValueRow>(Arena*);
template<> ::TSCH::CommandReplaceThemePresetArchive* Arena::CreateMaybeMessage<::TSCH::CommandReplaceThemePresetArchive>(Arena*);
template<> ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* Arena::CreateMaybeMessage<::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair>(Arena*);
template<> ::TSCH::CommandSetCategoryNameArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetCategoryNameArchive>(Arena*);
template<> ::TSCH::CommandSetChartTypeArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetChartTypeArchive>(Arena*);
template<> ::TSCH::CommandSetGridDirectionArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetGridDirectionArchive>(Arena*);
template<> ::TSCH::CommandSetGridValueArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetGridValueArchive>(Arena*);
template<> ::TSCH::CommandSetLegendFrameArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetLegendFrameArchive>(Arena*);
template<> ::TSCH::CommandSetMultiDataSetIndexArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetMultiDataSetIndexArchive>(Arena*);
template<> ::TSCH::CommandSetPieWedgeExplosion* Arena::CreateMaybeMessage<::TSCH::CommandSetPieWedgeExplosion>(Arena*);
template<> ::TSCH::CommandSetPreviewLocArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetPreviewLocArchive>(Arena*);
template<> ::TSCH::CommandSetScatterFormatArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetScatterFormatArchive>(Arena*);
template<> ::TSCH::CommandSetSeriesNameArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetSeriesNameArchive>(Arena*);
template<> ::TSCH::CommandSetSeriesTypeArchive* Arena::CreateMaybeMessage<::TSCH::CommandSetSeriesTypeArchive>(Arena*);
template<> ::TSCH::CommandStyleSwapArchive* Arena::CreateMaybeMessage<::TSCH::CommandStyleSwapArchive>(Arena*);
template<> ::TSCH::PropertyMutationUndoTupleArchive* Arena::CreateMaybeMessage<::TSCH::PropertyMutationUndoTupleArchive>(Arena*);
template<> ::TSCH::StyleSwapUndoTupleArchive* Arena::CreateMaybeMessage<::TSCH::StyleSwapUndoTupleArchive>(Arena*);
template<> ::TSCH::SynchronousCommandArchive* Arena::CreateMaybeMessage<::TSCH::SynchronousCommandArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {

enum StyleOwnerType : int {
  chart_info = 1,
  legend_model = 2,
  chart_axis = 3,
  chart_series = 4
};
bool StyleOwnerType_IsValid(int value);
constexpr StyleOwnerType StyleOwnerType_MIN = chart_info;
constexpr StyleOwnerType StyleOwnerType_MAX = chart_series;
constexpr int StyleOwnerType_ARRAYSIZE = StyleOwnerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleOwnerType_descriptor();
template<typename T>
inline const std::string& StyleOwnerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StyleOwnerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StyleOwnerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StyleOwnerType_descriptor(), enum_t_value);
}
inline bool StyleOwnerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StyleOwnerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StyleOwnerType>(
    StyleOwnerType_descriptor(), name, value);
}
enum StyleSwapType : int {
  chart_style = 1,
  chart_non_style = 2,
  legend_style = 3,
  legend_non_style = 4,
  value_axis_style = 5,
  value_axis_non_style = 6,
  category_axis_style = 7,
  category_axis_non_style = 8,
  series_theme_style = 9,
  series_private_style = 10,
  series_non_style = 11,
  paragraph_style = 12
};
bool StyleSwapType_IsValid(int value);
constexpr StyleSwapType StyleSwapType_MIN = chart_style;
constexpr StyleSwapType StyleSwapType_MAX = paragraph_style;
constexpr int StyleSwapType_ARRAYSIZE = StyleSwapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleSwapType_descriptor();
template<typename T>
inline const std::string& StyleSwapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StyleSwapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StyleSwapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StyleSwapType_descriptor(), enum_t_value);
}
inline bool StyleSwapType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StyleSwapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StyleSwapType>(
    StyleSwapType_descriptor(), name, value);
}
enum ApplyPresetBehavior : int {
  remove_overrides = 1,
  preserve_overrides = 2,
  preserve_appearance = 3
};
bool ApplyPresetBehavior_IsValid(int value);
constexpr ApplyPresetBehavior ApplyPresetBehavior_MIN = remove_overrides;
constexpr ApplyPresetBehavior ApplyPresetBehavior_MAX = preserve_appearance;
constexpr int ApplyPresetBehavior_ARRAYSIZE = ApplyPresetBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApplyPresetBehavior_descriptor();
template<typename T>
inline const std::string& ApplyPresetBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApplyPresetBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApplyPresetBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApplyPresetBehavior_descriptor(), enum_t_value);
}
inline bool ApplyPresetBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApplyPresetBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApplyPresetBehavior>(
    ApplyPresetBehavior_descriptor(), name, value);
}
// ===================================================================

class CommandSetChartTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetChartTypeArchive) */ {
 public:
  inline CommandSetChartTypeArchive() : CommandSetChartTypeArchive(nullptr) {}
  ~CommandSetChartTypeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetChartTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetChartTypeArchive(const CommandSetChartTypeArchive& from);
  CommandSetChartTypeArchive(CommandSetChartTypeArchive&& from) noexcept
    : CommandSetChartTypeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetChartTypeArchive& operator=(const CommandSetChartTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetChartTypeArchive& operator=(CommandSetChartTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetChartTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetChartTypeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetChartTypeArchive*>(
               &_CommandSetChartTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandSetChartTypeArchive& a, CommandSetChartTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetChartTypeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetChartTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetChartTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetChartTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetChartTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetChartTypeArchive& from) {
    CommandSetChartTypeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetChartTypeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetChartTypeArchive";
  }
  protected:
  explicit CommandSetChartTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoGeometryCommandFieldNumber = 5,
    kAnchorAttachmentCommandFieldNumber = 6,
    kOriginalLegendRectFieldNumber = 7,
    kOldChartTypeFieldNumber = 2,
    kNewChartTypeFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info_geometry_command = 5;
  bool has_info_geometry_command() const;
  private:
  bool _internal_has_info_geometry_command() const;
  public:
  void clear_info_geometry_command();
  const ::TSP::Reference& info_geometry_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info_geometry_command();
  ::TSP::Reference* mutable_info_geometry_command();
  void set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command);
  private:
  const ::TSP::Reference& _internal_info_geometry_command() const;
  ::TSP::Reference* _internal_mutable_info_geometry_command();
  public:
  void unsafe_arena_set_allocated_info_geometry_command(
      ::TSP::Reference* info_geometry_command);
  ::TSP::Reference* unsafe_arena_release_info_geometry_command();

  // optional .TSP.Reference anchor_attachment_command = 6;
  bool has_anchor_attachment_command() const;
  private:
  bool _internal_has_anchor_attachment_command() const;
  public:
  void clear_anchor_attachment_command();
  const ::TSP::Reference& anchor_attachment_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_anchor_attachment_command();
  ::TSP::Reference* mutable_anchor_attachment_command();
  void set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command);
  private:
  const ::TSP::Reference& _internal_anchor_attachment_command() const;
  ::TSP::Reference* _internal_mutable_anchor_attachment_command();
  public:
  void unsafe_arena_set_allocated_anchor_attachment_command(
      ::TSP::Reference* anchor_attachment_command);
  ::TSP::Reference* unsafe_arena_release_anchor_attachment_command();

  // optional .TSCH.RectArchive original_legend_rect = 7;
  bool has_original_legend_rect() const;
  private:
  bool _internal_has_original_legend_rect() const;
  public:
  void clear_original_legend_rect();
  const ::TSCH::RectArchive& original_legend_rect() const;
  PROTOBUF_NODISCARD ::TSCH::RectArchive* release_original_legend_rect();
  ::TSCH::RectArchive* mutable_original_legend_rect();
  void set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect);
  private:
  const ::TSCH::RectArchive& _internal_original_legend_rect() const;
  ::TSCH::RectArchive* _internal_mutable_original_legend_rect();
  public:
  void unsafe_arena_set_allocated_original_legend_rect(
      ::TSCH::RectArchive* original_legend_rect);
  ::TSCH::RectArchive* unsafe_arena_release_original_legend_rect();

  // required .TSCH.ChartType oldChartType = 2;
  bool has_oldcharttype() const;
  private:
  bool _internal_has_oldcharttype() const;
  public:
  void clear_oldcharttype();
  ::TSCH::ChartType oldcharttype() const;
  void set_oldcharttype(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_oldcharttype() const;
  void _internal_set_oldcharttype(::TSCH::ChartType value);
  public:

  // required .TSCH.ChartType newChartType = 3;
  bool has_newcharttype() const;
  private:
  bool _internal_has_newcharttype() const;
  public:
  void clear_newcharttype();
  ::TSCH::ChartType newcharttype() const;
  void set_newcharttype(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_newcharttype() const;
  void _internal_set_newcharttype(::TSCH::ChartType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetChartTypeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSP::Reference* info_geometry_command_;
    ::TSP::Reference* anchor_attachment_command_;
    ::TSCH::RectArchive* original_legend_rect_;
    int oldcharttype_;
    int newcharttype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PropertyMutationUndoTupleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PropertyMutationUndoTupleArchive) */ {
 public:
  inline PropertyMutationUndoTupleArchive() : PropertyMutationUndoTupleArchive(nullptr) {}
  ~PropertyMutationUndoTupleArchive() override;
  explicit PROTOBUF_CONSTEXPR PropertyMutationUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyMutationUndoTupleArchive(const PropertyMutationUndoTupleArchive& from);
  PropertyMutationUndoTupleArchive(PropertyMutationUndoTupleArchive&& from) noexcept
    : PropertyMutationUndoTupleArchive() {
    *this = ::std::move(from);
  }

  inline PropertyMutationUndoTupleArchive& operator=(const PropertyMutationUndoTupleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyMutationUndoTupleArchive& operator=(PropertyMutationUndoTupleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyMutationUndoTupleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyMutationUndoTupleArchive* internal_default_instance() {
    return reinterpret_cast<const PropertyMutationUndoTupleArchive*>(
               &_PropertyMutationUndoTupleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PropertyMutationUndoTupleArchive& a, PropertyMutationUndoTupleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyMutationUndoTupleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyMutationUndoTupleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyMutationUndoTupleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyMutationUndoTupleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyMutationUndoTupleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyMutationUndoTupleArchive& from) {
    PropertyMutationUndoTupleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyMutationUndoTupleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PropertyMutationUndoTupleArchive";
  }
  protected:
  explicit PropertyMutationUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartInfoFieldNumber = 1,
    kOldStyleFieldNumber = 4,
    kNewStyleFieldNumber = 5,
    kOldNonStyleFieldNumber = 6,
    kNewNonStyleFieldNumber = 7,
    kIndexFieldNumber = 3,
    kStyleOwnerTypeFieldNumber = 2,
  };
  // optional .TSP.Reference chart_info = 1;
  bool has_chart_info() const;
  private:
  bool _internal_has_chart_info() const;
  public:
  void clear_chart_info();
  const ::TSP::Reference& chart_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_info();
  ::TSP::Reference* mutable_chart_info();
  void set_allocated_chart_info(::TSP::Reference* chart_info);
  private:
  const ::TSP::Reference& _internal_chart_info() const;
  ::TSP::Reference* _internal_mutable_chart_info();
  public:
  void unsafe_arena_set_allocated_chart_info(
      ::TSP::Reference* chart_info);
  ::TSP::Reference* unsafe_arena_release_chart_info();

  // optional .TSP.Reference old_style = 4;
  bool has_old_style() const;
  private:
  bool _internal_has_old_style() const;
  public:
  void clear_old_style();
  const ::TSP::Reference& old_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_style();
  ::TSP::Reference* mutable_old_style();
  void set_allocated_old_style(::TSP::Reference* old_style);
  private:
  const ::TSP::Reference& _internal_old_style() const;
  ::TSP::Reference* _internal_mutable_old_style();
  public:
  void unsafe_arena_set_allocated_old_style(
      ::TSP::Reference* old_style);
  ::TSP::Reference* unsafe_arena_release_old_style();

  // optional .TSP.Reference new_style = 5;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSP::Reference& new_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_style();
  ::TSP::Reference* mutable_new_style();
  void set_allocated_new_style(::TSP::Reference* new_style);
  private:
  const ::TSP::Reference& _internal_new_style() const;
  ::TSP::Reference* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSP::Reference* new_style);
  ::TSP::Reference* unsafe_arena_release_new_style();

  // optional .TSP.Reference old_non_style = 6;
  bool has_old_non_style() const;
  private:
  bool _internal_has_old_non_style() const;
  public:
  void clear_old_non_style();
  const ::TSP::Reference& old_non_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_non_style();
  ::TSP::Reference* mutable_old_non_style();
  void set_allocated_old_non_style(::TSP::Reference* old_non_style);
  private:
  const ::TSP::Reference& _internal_old_non_style() const;
  ::TSP::Reference* _internal_mutable_old_non_style();
  public:
  void unsafe_arena_set_allocated_old_non_style(
      ::TSP::Reference* old_non_style);
  ::TSP::Reference* unsafe_arena_release_old_non_style();

  // optional .TSP.Reference new_non_style = 7;
  bool has_new_non_style() const;
  private:
  bool _internal_has_new_non_style() const;
  public:
  void clear_new_non_style();
  const ::TSP::Reference& new_non_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_non_style();
  ::TSP::Reference* mutable_new_non_style();
  void set_allocated_new_non_style(::TSP::Reference* new_non_style);
  private:
  const ::TSP::Reference& _internal_new_non_style() const;
  ::TSP::Reference* _internal_mutable_new_non_style();
  public:
  void unsafe_arena_set_allocated_new_non_style(
      ::TSP::Reference* new_non_style);
  ::TSP::Reference* unsafe_arena_release_new_non_style();

  // optional uint32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional .TSCH.StyleOwnerType style_owner_type = 2;
  bool has_style_owner_type() const;
  private:
  bool _internal_has_style_owner_type() const;
  public:
  void clear_style_owner_type();
  ::TSCH::StyleOwnerType style_owner_type() const;
  void set_style_owner_type(::TSCH::StyleOwnerType value);
  private:
  ::TSCH::StyleOwnerType _internal_style_owner_type() const;
  void _internal_set_style_owner_type(::TSCH::StyleOwnerType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.PropertyMutationUndoTupleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* chart_info_;
    ::TSP::Reference* old_style_;
    ::TSP::Reference* new_style_;
    ::TSP::Reference* old_non_style_;
    ::TSP::Reference* new_non_style_;
    uint32_t index_;
    int style_owner_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleSwapUndoTupleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.StyleSwapUndoTupleArchive) */ {
 public:
  inline StyleSwapUndoTupleArchive() : StyleSwapUndoTupleArchive(nullptr) {}
  ~StyleSwapUndoTupleArchive() override;
  explicit PROTOBUF_CONSTEXPR StyleSwapUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleSwapUndoTupleArchive(const StyleSwapUndoTupleArchive& from);
  StyleSwapUndoTupleArchive(StyleSwapUndoTupleArchive&& from) noexcept
    : StyleSwapUndoTupleArchive() {
    *this = ::std::move(from);
  }

  inline StyleSwapUndoTupleArchive& operator=(const StyleSwapUndoTupleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleSwapUndoTupleArchive& operator=(StyleSwapUndoTupleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleSwapUndoTupleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleSwapUndoTupleArchive* internal_default_instance() {
    return reinterpret_cast<const StyleSwapUndoTupleArchive*>(
               &_StyleSwapUndoTupleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StyleSwapUndoTupleArchive& a, StyleSwapUndoTupleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleSwapUndoTupleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleSwapUndoTupleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StyleSwapUndoTupleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StyleSwapUndoTupleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleSwapUndoTupleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StyleSwapUndoTupleArchive& from) {
    StyleSwapUndoTupleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleSwapUndoTupleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.StyleSwapUndoTupleArchive";
  }
  protected:
  explicit StyleSwapUndoTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartInfoFieldNumber = 1,
    kOldValueFieldNumber = 4,
    kNewValueFieldNumber = 5,
    kIndexFieldNumber = 3,
    kSwapTypeFieldNumber = 2,
  };
  // optional .TSP.Reference chart_info = 1;
  bool has_chart_info() const;
  private:
  bool _internal_has_chart_info() const;
  public:
  void clear_chart_info();
  const ::TSP::Reference& chart_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_info();
  ::TSP::Reference* mutable_chart_info();
  void set_allocated_chart_info(::TSP::Reference* chart_info);
  private:
  const ::TSP::Reference& _internal_chart_info() const;
  ::TSP::Reference* _internal_mutable_chart_info();
  public:
  void unsafe_arena_set_allocated_chart_info(
      ::TSP::Reference* chart_info);
  ::TSP::Reference* unsafe_arena_release_chart_info();

  // optional .TSP.Reference old_value = 4;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::TSP::Reference& old_value() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_value();
  ::TSP::Reference* mutable_old_value();
  void set_allocated_old_value(::TSP::Reference* old_value);
  private:
  const ::TSP::Reference& _internal_old_value() const;
  ::TSP::Reference* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::TSP::Reference* old_value);
  ::TSP::Reference* unsafe_arena_release_old_value();

  // optional .TSP.Reference new_value = 5;
  bool has_new_value() const;
  private:
  bool _internal_has_new_value() const;
  public:
  void clear_new_value();
  const ::TSP::Reference& new_value() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_value();
  ::TSP::Reference* mutable_new_value();
  void set_allocated_new_value(::TSP::Reference* new_value);
  private:
  const ::TSP::Reference& _internal_new_value() const;
  ::TSP::Reference* _internal_mutable_new_value();
  public:
  void unsafe_arena_set_allocated_new_value(
      ::TSP::Reference* new_value);
  ::TSP::Reference* unsafe_arena_release_new_value();

  // optional uint32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional .TSCH.StyleSwapType swap_type = 2;
  bool has_swap_type() const;
  private:
  bool _internal_has_swap_type() const;
  public:
  void clear_swap_type();
  ::TSCH::StyleSwapType swap_type() const;
  void set_swap_type(::TSCH::StyleSwapType value);
  private:
  ::TSCH::StyleSwapType _internal_swap_type() const;
  void _internal_set_swap_type(::TSCH::StyleSwapType value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.StyleSwapUndoTupleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* chart_info_;
    ::TSP::Reference* old_value_;
    ::TSP::Reference* new_value_;
    uint32_t index_;
    int swap_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandStyleSwapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandStyleSwapArchive) */ {
 public:
  inline CommandStyleSwapArchive() : CommandStyleSwapArchive(nullptr) {}
  ~CommandStyleSwapArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandStyleSwapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandStyleSwapArchive(const CommandStyleSwapArchive& from);
  CommandStyleSwapArchive(CommandStyleSwapArchive&& from) noexcept
    : CommandStyleSwapArchive() {
    *this = ::std::move(from);
  }

  inline CommandStyleSwapArchive& operator=(const CommandStyleSwapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStyleSwapArchive& operator=(CommandStyleSwapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandStyleSwapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandStyleSwapArchive* internal_default_instance() {
    return reinterpret_cast<const CommandStyleSwapArchive*>(
               &_CommandStyleSwapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandStyleSwapArchive& a, CommandStyleSwapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStyleSwapArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStyleSwapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandStyleSwapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandStyleSwapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandStyleSwapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandStyleSwapArchive& from) {
    CommandStyleSwapArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStyleSwapArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandStyleSwapArchive";
  }
  protected:
  explicit CommandStyleSwapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoTuplesFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
  int undo_tuples_size() const;
  private:
  int _internal_undo_tuples_size() const;
  public:
  void clear_undo_tuples();
  ::TSCH::StyleSwapUndoTupleArchive* mutable_undo_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
      mutable_undo_tuples();
  private:
  const ::TSCH::StyleSwapUndoTupleArchive& _internal_undo_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* _internal_add_undo_tuples();
  public:
  const ::TSCH::StyleSwapUndoTupleArchive& undo_tuples(int index) const;
  ::TSCH::StyleSwapUndoTupleArchive* add_undo_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
      undo_tuples() const;

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.CommandStyleSwapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive > undo_tuples_;
    ::TSCH::ChartCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSeriesNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetSeriesNameArchive) */ {
 public:
  inline CommandSetSeriesNameArchive() : CommandSetSeriesNameArchive(nullptr) {}
  ~CommandSetSeriesNameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSeriesNameArchive(const CommandSetSeriesNameArchive& from);
  CommandSetSeriesNameArchive(CommandSetSeriesNameArchive&& from) noexcept
    : CommandSetSeriesNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSeriesNameArchive& operator=(const CommandSetSeriesNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSeriesNameArchive& operator=(CommandSetSeriesNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSeriesNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSeriesNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSeriesNameArchive*>(
               &_CommandSetSeriesNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandSetSeriesNameArchive& a, CommandSetSeriesNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSeriesNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSeriesNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetSeriesNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetSeriesNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetSeriesNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetSeriesNameArchive& from) {
    CommandSetSeriesNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSeriesNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetSeriesNameArchive";
  }
  protected:
  explicit CommandSetSeriesNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 3,
    kNewNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kSeriesIndexFieldNumber = 2,
  };
  // required string oldName = 3;
  bool has_oldname() const;
  private:
  bool _internal_has_oldname() const;
  public:
  void clear_oldname();
  const std::string& oldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldname();
  PROTOBUF_NODISCARD std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // required string newName = 4;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  PROTOBUF_NODISCARD std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 seriesIndex = 2;
  bool has_seriesindex() const;
  private:
  bool _internal_has_seriesindex() const;
  public:
  void clear_seriesindex();
  uint32_t seriesindex() const;
  void set_seriesindex(uint32_t value);
  private:
  uint32_t _internal_seriesindex() const;
  void _internal_set_seriesindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetSeriesNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t seriesindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetCategoryNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetCategoryNameArchive) */ {
 public:
  inline CommandSetCategoryNameArchive() : CommandSetCategoryNameArchive(nullptr) {}
  ~CommandSetCategoryNameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetCategoryNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetCategoryNameArchive(const CommandSetCategoryNameArchive& from);
  CommandSetCategoryNameArchive(CommandSetCategoryNameArchive&& from) noexcept
    : CommandSetCategoryNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetCategoryNameArchive& operator=(const CommandSetCategoryNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetCategoryNameArchive& operator=(CommandSetCategoryNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetCategoryNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetCategoryNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetCategoryNameArchive*>(
               &_CommandSetCategoryNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandSetCategoryNameArchive& a, CommandSetCategoryNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetCategoryNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetCategoryNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetCategoryNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetCategoryNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetCategoryNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetCategoryNameArchive& from) {
    CommandSetCategoryNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetCategoryNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetCategoryNameArchive";
  }
  protected:
  explicit CommandSetCategoryNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 3,
    kNewNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kCategoryIndexFieldNumber = 2,
    kIsMultiDataIndexFieldNumber = 5,
  };
  // required string oldName = 3;
  bool has_oldname() const;
  private:
  bool _internal_has_oldname() const;
  public:
  void clear_oldname();
  const std::string& oldname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldname();
  PROTOBUF_NODISCARD std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // required string newName = 4;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  PROTOBUF_NODISCARD std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 categoryIndex = 2;
  bool has_categoryindex() const;
  private:
  bool _internal_has_categoryindex() const;
  public:
  void clear_categoryindex();
  uint32_t categoryindex() const;
  void set_categoryindex(uint32_t value);
  private:
  uint32_t _internal_categoryindex() const;
  void _internal_set_categoryindex(uint32_t value);
  public:

  // optional bool isMultiDataIndex = 5;
  bool has_ismultidataindex() const;
  private:
  bool _internal_has_ismultidataindex() const;
  public:
  void clear_ismultidataindex();
  bool ismultidataindex() const;
  void set_ismultidataindex(bool value);
  private:
  bool _internal_ismultidataindex() const;
  void _internal_set_ismultidataindex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetCategoryNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t categoryindex_;
    bool ismultidataindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAddGridRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandAddGridRowsArchive) */ {
 public:
  inline CommandAddGridRowsArchive() : CommandAddGridRowsArchive(nullptr) {}
  ~CommandAddGridRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandAddGridRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAddGridRowsArchive(const CommandAddGridRowsArchive& from);
  CommandAddGridRowsArchive(CommandAddGridRowsArchive&& from) noexcept
    : CommandAddGridRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandAddGridRowsArchive& operator=(const CommandAddGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAddGridRowsArchive& operator=(CommandAddGridRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAddGridRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAddGridRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAddGridRowsArchive*>(
               &_CommandAddGridRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandAddGridRowsArchive& a, CommandAddGridRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAddGridRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAddGridRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandAddGridRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandAddGridRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAddGridRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandAddGridRowsArchive& from) {
    CommandAddGridRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAddGridRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandAddGridRowsArchive";
  }
  protected:
  explicit CommandAddGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kLocationFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // repeated string name = 4;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  uint32_t location() const;
  void set_location(uint32_t value);
  private:
  uint32_t _internal_location() const;
  void _internal_set_location(uint32_t value);
  public:

  // optional uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandAddGridRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t location_;
    uint32_t length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAddGridColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandAddGridColumnsArchive) */ {
 public:
  inline CommandAddGridColumnsArchive() : CommandAddGridColumnsArchive(nullptr) {}
  ~CommandAddGridColumnsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandAddGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAddGridColumnsArchive(const CommandAddGridColumnsArchive& from);
  CommandAddGridColumnsArchive(CommandAddGridColumnsArchive&& from) noexcept
    : CommandAddGridColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandAddGridColumnsArchive& operator=(const CommandAddGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAddGridColumnsArchive& operator=(CommandAddGridColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAddGridColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAddGridColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAddGridColumnsArchive*>(
               &_CommandAddGridColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandAddGridColumnsArchive& a, CommandAddGridColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAddGridColumnsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAddGridColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandAddGridColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandAddGridColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAddGridColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandAddGridColumnsArchive& from) {
    CommandAddGridColumnsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAddGridColumnsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandAddGridColumnsArchive";
  }
  protected:
  explicit CommandAddGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kLocationFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // repeated string name = 4;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  uint32_t location() const;
  void set_location(uint32_t value);
  private:
  uint32_t _internal_location() const;
  void _internal_set_location(uint32_t value);
  public:

  // optional uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandAddGridColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t location_;
    uint32_t length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveGridRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMoveGridRowsArchive) */ {
 public:
  inline CommandMoveGridRowsArchive() : CommandMoveGridRowsArchive(nullptr) {}
  ~CommandMoveGridRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMoveGridRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveGridRowsArchive(const CommandMoveGridRowsArchive& from);
  CommandMoveGridRowsArchive(CommandMoveGridRowsArchive&& from) noexcept
    : CommandMoveGridRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveGridRowsArchive& operator=(const CommandMoveGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveGridRowsArchive& operator=(CommandMoveGridRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveGridRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveGridRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveGridRowsArchive*>(
               &_CommandMoveGridRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandMoveGridRowsArchive& a, CommandMoveGridRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveGridRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveGridRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMoveGridRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMoveGridRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveGridRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMoveGridRowsArchive& from) {
    CommandMoveGridRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveGridRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMoveGridRowsArchive";
  }
  protected:
  explicit CommandMoveGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kLocationFieldNumber = 2,
    kLengthFieldNumber = 3,
    kAfterrowFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  uint32_t location() const;
  void set_location(uint32_t value);
  private:
  uint32_t _internal_location() const;
  void _internal_set_location(uint32_t value);
  public:

  // required uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // required int32 afterrow = 4;
  bool has_afterrow() const;
  private:
  bool _internal_has_afterrow() const;
  public:
  void clear_afterrow();
  int32_t afterrow() const;
  void set_afterrow(int32_t value);
  private:
  int32_t _internal_afterrow() const;
  void _internal_set_afterrow(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandMoveGridRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t location_;
    uint32_t length_;
    int32_t afterrow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveGridColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandMoveGridColumnsArchive) */ {
 public:
  inline CommandMoveGridColumnsArchive() : CommandMoveGridColumnsArchive(nullptr) {}
  ~CommandMoveGridColumnsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMoveGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveGridColumnsArchive(const CommandMoveGridColumnsArchive& from);
  CommandMoveGridColumnsArchive(CommandMoveGridColumnsArchive&& from) noexcept
    : CommandMoveGridColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveGridColumnsArchive& operator=(const CommandMoveGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveGridColumnsArchive& operator=(CommandMoveGridColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveGridColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveGridColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveGridColumnsArchive*>(
               &_CommandMoveGridColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandMoveGridColumnsArchive& a, CommandMoveGridColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveGridColumnsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveGridColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMoveGridColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMoveGridColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveGridColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMoveGridColumnsArchive& from) {
    CommandMoveGridColumnsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveGridColumnsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandMoveGridColumnsArchive";
  }
  protected:
  explicit CommandMoveGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kLocationFieldNumber = 2,
    kLengthFieldNumber = 3,
    kAftercolumnFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  uint32_t location() const;
  void set_location(uint32_t value);
  private:
  uint32_t _internal_location() const;
  void _internal_set_location(uint32_t value);
  public:

  // required uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // required int32 aftercolumn = 4;
  bool has_aftercolumn() const;
  private:
  bool _internal_has_aftercolumn() const;
  public:
  void clear_aftercolumn();
  int32_t aftercolumn() const;
  void set_aftercolumn(int32_t value);
  private:
  int32_t _internal_aftercolumn() const;
  void _internal_set_aftercolumn(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandMoveGridColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t location_;
    uint32_t length_;
    int32_t aftercolumn_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteGridRowsArchive_ValueRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandDeleteGridRowsArchive.ValueRow) */ {
 public:
  inline CommandDeleteGridRowsArchive_ValueRow() : CommandDeleteGridRowsArchive_ValueRow(nullptr) {}
  ~CommandDeleteGridRowsArchive_ValueRow() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteGridRowsArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteGridRowsArchive_ValueRow(const CommandDeleteGridRowsArchive_ValueRow& from);
  CommandDeleteGridRowsArchive_ValueRow(CommandDeleteGridRowsArchive_ValueRow&& from) noexcept
    : CommandDeleteGridRowsArchive_ValueRow() {
    *this = ::std::move(from);
  }

  inline CommandDeleteGridRowsArchive_ValueRow& operator=(const CommandDeleteGridRowsArchive_ValueRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteGridRowsArchive_ValueRow& operator=(CommandDeleteGridRowsArchive_ValueRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteGridRowsArchive_ValueRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteGridRowsArchive_ValueRow* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteGridRowsArchive_ValueRow*>(
               &_CommandDeleteGridRowsArchive_ValueRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandDeleteGridRowsArchive_ValueRow& a, CommandDeleteGridRowsArchive_ValueRow& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteGridRowsArchive_ValueRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteGridRowsArchive_ValueRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteGridRowsArchive_ValueRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteGridRowsArchive_ValueRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteGridRowsArchive_ValueRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteGridRowsArchive_ValueRow& from) {
    CommandDeleteGridRowsArchive_ValueRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteGridRowsArchive_ValueRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandDeleteGridRowsArchive.ValueRow";
  }
  protected:
  explicit CommandDeleteGridRowsArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 5,
  };
  // repeated double value = 5;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridRowsArchive.ValueRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteGridRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandDeleteGridRowsArchive) */ {
 public:
  inline CommandDeleteGridRowsArchive() : CommandDeleteGridRowsArchive(nullptr) {}
  ~CommandDeleteGridRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteGridRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteGridRowsArchive(const CommandDeleteGridRowsArchive& from);
  CommandDeleteGridRowsArchive(CommandDeleteGridRowsArchive&& from) noexcept
    : CommandDeleteGridRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteGridRowsArchive& operator=(const CommandDeleteGridRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteGridRowsArchive& operator=(CommandDeleteGridRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteGridRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteGridRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteGridRowsArchive*>(
               &_CommandDeleteGridRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandDeleteGridRowsArchive& a, CommandDeleteGridRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteGridRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteGridRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteGridRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteGridRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteGridRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteGridRowsArchive& from) {
    CommandDeleteGridRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteGridRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandDeleteGridRowsArchive";
  }
  protected:
  explicit CommandDeleteGridRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandDeleteGridRowsArchive_ValueRow ValueRow;

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 4,
    kValueRowFieldNumber = 6,
    kColumnNamesFieldNumber = 8,
    kSuperFieldNumber = 1,
    kLocationFieldNumber = 2,
    kLengthFieldNumber = 3,
    kRemovedAllRowsFieldNumber = 7,
  };
  // repeated string names = 4;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
  int value_row_size() const;
  private:
  int _internal_value_row_size() const;
  public:
  void clear_value_row();
  ::TSCH::CommandDeleteGridRowsArchive_ValueRow* mutable_value_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >*
      mutable_value_row();
  private:
  const ::TSCH::CommandDeleteGridRowsArchive_ValueRow& _internal_value_row(int index) const;
  ::TSCH::CommandDeleteGridRowsArchive_ValueRow* _internal_add_value_row();
  public:
  const ::TSCH::CommandDeleteGridRowsArchive_ValueRow& value_row(int index) const;
  ::TSCH::CommandDeleteGridRowsArchive_ValueRow* add_value_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >&
      value_row() const;

  // repeated string column_names = 8;
  int column_names_size() const;
  private:
  int _internal_column_names_size() const;
  public:
  void clear_column_names();
  const std::string& column_names(int index) const;
  std::string* mutable_column_names(int index);
  void set_column_names(int index, const std::string& value);
  void set_column_names(int index, std::string&& value);
  void set_column_names(int index, const char* value);
  void set_column_names(int index, const char* value, size_t size);
  std::string* add_column_names();
  void add_column_names(const std::string& value);
  void add_column_names(std::string&& value);
  void add_column_names(const char* value);
  void add_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_names();
  private:
  const std::string& _internal_column_names(int index) const;
  std::string* _internal_add_column_names();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  uint32_t location() const;
  void set_location(uint32_t value);
  private:
  uint32_t _internal_location() const;
  void _internal_set_location(uint32_t value);
  public:

  // required uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // optional bool removed_all_rows = 7;
  bool has_removed_all_rows() const;
  private:
  bool _internal_has_removed_all_rows() const;
  public:
  void clear_removed_all_rows();
  bool removed_all_rows() const;
  void set_removed_all_rows(bool value);
  private:
  bool _internal_removed_all_rows() const;
  void _internal_set_removed_all_rows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow > value_row_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_names_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t location_;
    uint32_t length_;
    bool removed_all_rows_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteGridColumnsArchive_ValueRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandDeleteGridColumnsArchive.ValueRow) */ {
 public:
  inline CommandDeleteGridColumnsArchive_ValueRow() : CommandDeleteGridColumnsArchive_ValueRow(nullptr) {}
  ~CommandDeleteGridColumnsArchive_ValueRow() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteGridColumnsArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteGridColumnsArchive_ValueRow(const CommandDeleteGridColumnsArchive_ValueRow& from);
  CommandDeleteGridColumnsArchive_ValueRow(CommandDeleteGridColumnsArchive_ValueRow&& from) noexcept
    : CommandDeleteGridColumnsArchive_ValueRow() {
    *this = ::std::move(from);
  }

  inline CommandDeleteGridColumnsArchive_ValueRow& operator=(const CommandDeleteGridColumnsArchive_ValueRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteGridColumnsArchive_ValueRow& operator=(CommandDeleteGridColumnsArchive_ValueRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteGridColumnsArchive_ValueRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteGridColumnsArchive_ValueRow* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteGridColumnsArchive_ValueRow*>(
               &_CommandDeleteGridColumnsArchive_ValueRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandDeleteGridColumnsArchive_ValueRow& a, CommandDeleteGridColumnsArchive_ValueRow& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteGridColumnsArchive_ValueRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteGridColumnsArchive_ValueRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteGridColumnsArchive_ValueRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteGridColumnsArchive_ValueRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteGridColumnsArchive_ValueRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteGridColumnsArchive_ValueRow& from) {
    CommandDeleteGridColumnsArchive_ValueRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteGridColumnsArchive_ValueRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandDeleteGridColumnsArchive.ValueRow";
  }
  protected:
  explicit CommandDeleteGridColumnsArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 5,
  };
  // repeated double value = 5;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridColumnsArchive.ValueRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteGridColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandDeleteGridColumnsArchive) */ {
 public:
  inline CommandDeleteGridColumnsArchive() : CommandDeleteGridColumnsArchive(nullptr) {}
  ~CommandDeleteGridColumnsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteGridColumnsArchive(const CommandDeleteGridColumnsArchive& from);
  CommandDeleteGridColumnsArchive(CommandDeleteGridColumnsArchive&& from) noexcept
    : CommandDeleteGridColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteGridColumnsArchive& operator=(const CommandDeleteGridColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteGridColumnsArchive& operator=(CommandDeleteGridColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteGridColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteGridColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteGridColumnsArchive*>(
               &_CommandDeleteGridColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandDeleteGridColumnsArchive& a, CommandDeleteGridColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteGridColumnsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteGridColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteGridColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteGridColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteGridColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteGridColumnsArchive& from) {
    CommandDeleteGridColumnsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteGridColumnsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandDeleteGridColumnsArchive";
  }
  protected:
  explicit CommandDeleteGridColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandDeleteGridColumnsArchive_ValueRow ValueRow;

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 4,
    kValueRowFieldNumber = 6,
    kRowNamesFieldNumber = 8,
    kSuperFieldNumber = 1,
    kLocationFieldNumber = 2,
    kLengthFieldNumber = 3,
    kRemovedAllColumnsFieldNumber = 7,
  };
  // repeated string names = 4;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
  int value_row_size() const;
  private:
  int _internal_value_row_size() const;
  public:
  void clear_value_row();
  ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* mutable_value_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >*
      mutable_value_row();
  private:
  const ::TSCH::CommandDeleteGridColumnsArchive_ValueRow& _internal_value_row(int index) const;
  ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* _internal_add_value_row();
  public:
  const ::TSCH::CommandDeleteGridColumnsArchive_ValueRow& value_row(int index) const;
  ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* add_value_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >&
      value_row() const;

  // repeated string row_names = 8;
  int row_names_size() const;
  private:
  int _internal_row_names_size() const;
  public:
  void clear_row_names();
  const std::string& row_names(int index) const;
  std::string* mutable_row_names(int index);
  void set_row_names(int index, const std::string& value);
  void set_row_names(int index, std::string&& value);
  void set_row_names(int index, const char* value);
  void set_row_names(int index, const char* value, size_t size);
  std::string* add_row_names();
  void add_row_names(const std::string& value);
  void add_row_names(std::string&& value);
  void add_row_names(const char* value);
  void add_row_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_names();
  private:
  const std::string& _internal_row_names(int index) const;
  std::string* _internal_add_row_names();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  uint32_t location() const;
  void set_location(uint32_t value);
  private:
  uint32_t _internal_location() const;
  void _internal_set_location(uint32_t value);
  public:

  // required uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // optional bool removed_all_columns = 7;
  bool has_removed_all_columns() const;
  private:
  bool _internal_has_removed_all_columns() const;
  public:
  void clear_removed_all_columns();
  bool removed_all_columns() const;
  void set_removed_all_columns(bool value);
  private:
  bool _internal_removed_all_columns() const;
  void _internal_set_removed_all_columns(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandDeleteGridColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow > value_row_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_names_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t location_;
    uint32_t length_;
    bool removed_all_columns_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPreviewLocArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetPreviewLocArchive) */ {
 public:
  inline CommandSetPreviewLocArchive() : CommandSetPreviewLocArchive(nullptr) {}
  ~CommandSetPreviewLocArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetPreviewLocArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPreviewLocArchive(const CommandSetPreviewLocArchive& from);
  CommandSetPreviewLocArchive(CommandSetPreviewLocArchive&& from) noexcept
    : CommandSetPreviewLocArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetPreviewLocArchive& operator=(const CommandSetPreviewLocArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPreviewLocArchive& operator=(CommandSetPreviewLocArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPreviewLocArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPreviewLocArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetPreviewLocArchive*>(
               &_CommandSetPreviewLocArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommandSetPreviewLocArchive& a, CommandSetPreviewLocArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPreviewLocArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPreviewLocArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetPreviewLocArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetPreviewLocArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetPreviewLocArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetPreviewLocArchive& from) {
    CommandSetPreviewLocArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPreviewLocArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetPreviewLocArchive";
  }
  protected:
  explicit CommandSetPreviewLocArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldLocFieldNumber = 2,
    kNewLocFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSP.Point old_loc = 2;
  bool has_old_loc() const;
  private:
  bool _internal_has_old_loc() const;
  public:
  void clear_old_loc();
  const ::TSP::Point& old_loc() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_old_loc();
  ::TSP::Point* mutable_old_loc();
  void set_allocated_old_loc(::TSP::Point* old_loc);
  private:
  const ::TSP::Point& _internal_old_loc() const;
  ::TSP::Point* _internal_mutable_old_loc();
  public:
  void unsafe_arena_set_allocated_old_loc(
      ::TSP::Point* old_loc);
  ::TSP::Point* unsafe_arena_release_old_loc();

  // required .TSP.Point new_loc = 3;
  bool has_new_loc() const;
  private:
  bool _internal_has_new_loc() const;
  public:
  void clear_new_loc();
  const ::TSP::Point& new_loc() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_new_loc();
  ::TSP::Point* mutable_new_loc();
  void set_allocated_new_loc(::TSP::Point* new_loc);
  private:
  const ::TSP::Point& _internal_new_loc() const;
  ::TSP::Point* _internal_mutable_new_loc();
  public:
  void unsafe_arena_set_allocated_new_loc(
      ::TSP::Point* new_loc);
  ::TSP::Point* unsafe_arena_release_new_loc();

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetPreviewLocArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSP::Point* old_loc_;
    ::TSP::Point* new_loc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetGridValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetGridValueArchive) */ {
 public:
  inline CommandSetGridValueArchive() : CommandSetGridValueArchive(nullptr) {}
  ~CommandSetGridValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetGridValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetGridValueArchive(const CommandSetGridValueArchive& from);
  CommandSetGridValueArchive(CommandSetGridValueArchive&& from) noexcept
    : CommandSetGridValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetGridValueArchive& operator=(const CommandSetGridValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetGridValueArchive& operator=(CommandSetGridValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetGridValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetGridValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetGridValueArchive*>(
               &_CommandSetGridValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandSetGridValueArchive& a, CommandSetGridValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetGridValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetGridValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetGridValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetGridValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetGridValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetGridValueArchive& from) {
    CommandSetGridValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetGridValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetGridValueArchive";
  }
  protected:
  explicit CommandSetGridValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRowindexFieldNumber = 2,
    kColumnindexFieldNumber = 3,
    kOldvalueFieldNumber = 4,
    kNewvalueFieldNumber = 5,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 rowindex = 2;
  bool has_rowindex() const;
  private:
  bool _internal_has_rowindex() const;
  public:
  void clear_rowindex();
  uint32_t rowindex() const;
  void set_rowindex(uint32_t value);
  private:
  uint32_t _internal_rowindex() const;
  void _internal_set_rowindex(uint32_t value);
  public:

  // required uint32 columnindex = 3;
  bool has_columnindex() const;
  private:
  bool _internal_has_columnindex() const;
  public:
  void clear_columnindex();
  uint32_t columnindex() const;
  void set_columnindex(uint32_t value);
  private:
  uint32_t _internal_columnindex() const;
  void _internal_set_columnindex(uint32_t value);
  public:

  // required double oldvalue = 4;
  bool has_oldvalue() const;
  private:
  bool _internal_has_oldvalue() const;
  public:
  void clear_oldvalue();
  double oldvalue() const;
  void set_oldvalue(double value);
  private:
  double _internal_oldvalue() const;
  void _internal_set_oldvalue(double value);
  public:

  // required double newvalue = 5;
  bool has_newvalue() const;
  private:
  bool _internal_has_newvalue() const;
  public:
  void clear_newvalue();
  double newvalue() const;
  void set_newvalue(double value);
  private:
  double _internal_newvalue() const;
  void _internal_set_newvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetGridValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t rowindex_;
    uint32_t columnindex_;
    double oldvalue_;
    double newvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetGridDirectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetGridDirectionArchive) */ {
 public:
  inline CommandSetGridDirectionArchive() : CommandSetGridDirectionArchive(nullptr) {}
  ~CommandSetGridDirectionArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetGridDirectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetGridDirectionArchive(const CommandSetGridDirectionArchive& from);
  CommandSetGridDirectionArchive(CommandSetGridDirectionArchive&& from) noexcept
    : CommandSetGridDirectionArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetGridDirectionArchive& operator=(const CommandSetGridDirectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetGridDirectionArchive& operator=(CommandSetGridDirectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetGridDirectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetGridDirectionArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetGridDirectionArchive*>(
               &_CommandSetGridDirectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandSetGridDirectionArchive& a, CommandSetGridDirectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetGridDirectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetGridDirectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetGridDirectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetGridDirectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetGridDirectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetGridDirectionArchive& from) {
    CommandSetGridDirectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetGridDirectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetGridDirectionArchive";
  }
  protected:
  explicit CommandSetGridDirectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldDirectionFieldNumber = 2,
    kNewDirectionFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 old_direction = 2;
  bool has_old_direction() const;
  private:
  bool _internal_has_old_direction() const;
  public:
  void clear_old_direction();
  uint32_t old_direction() const;
  void set_old_direction(uint32_t value);
  private:
  uint32_t _internal_old_direction() const;
  void _internal_set_old_direction(uint32_t value);
  public:

  // required uint32 new_direction = 3;
  bool has_new_direction() const;
  private:
  bool _internal_has_new_direction() const;
  public:
  void clear_new_direction();
  uint32_t new_direction() const;
  void set_new_direction(uint32_t value);
  private:
  uint32_t _internal_new_direction() const;
  void _internal_set_new_direction(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetGridDirectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t old_direction_;
    uint32_t new_direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSeriesTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetSeriesTypeArchive) */ {
 public:
  inline CommandSetSeriesTypeArchive() : CommandSetSeriesTypeArchive(nullptr) {}
  ~CommandSetSeriesTypeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetSeriesTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSeriesTypeArchive(const CommandSetSeriesTypeArchive& from);
  CommandSetSeriesTypeArchive(CommandSetSeriesTypeArchive&& from) noexcept
    : CommandSetSeriesTypeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSeriesTypeArchive& operator=(const CommandSetSeriesTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSeriesTypeArchive& operator=(CommandSetSeriesTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSeriesTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSeriesTypeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSeriesTypeArchive*>(
               &_CommandSetSeriesTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandSetSeriesTypeArchive& a, CommandSetSeriesTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSeriesTypeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSeriesTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetSeriesTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetSeriesTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetSeriesTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetSeriesTypeArchive& from) {
    CommandSetSeriesTypeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSeriesTypeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetSeriesTypeArchive";
  }
  protected:
  explicit CommandSetSeriesTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSeriesindexFieldNumber = 2,
    kOldtypeFieldNumber = 3,
    kNewtypeFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 seriesindex = 2;
  bool has_seriesindex() const;
  private:
  bool _internal_has_seriesindex() const;
  public:
  void clear_seriesindex();
  uint32_t seriesindex() const;
  void set_seriesindex(uint32_t value);
  private:
  uint32_t _internal_seriesindex() const;
  void _internal_set_seriesindex(uint32_t value);
  public:

  // required uint32 oldtype = 3;
  bool has_oldtype() const;
  private:
  bool _internal_has_oldtype() const;
  public:
  void clear_oldtype();
  uint32_t oldtype() const;
  void set_oldtype(uint32_t value);
  private:
  uint32_t _internal_oldtype() const;
  void _internal_set_oldtype(uint32_t value);
  public:

  // required uint32 newtype = 4;
  bool has_newtype() const;
  private:
  bool _internal_has_newtype() const;
  public:
  void clear_newtype();
  uint32_t newtype() const;
  void set_newtype(uint32_t value);
  private:
  uint32_t _internal_newtype() const;
  void _internal_set_newtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetSeriesTypeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t seriesindex_;
    uint32_t oldtype_;
    uint32_t newtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetScatterFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetScatterFormatArchive) */ {
 public:
  inline CommandSetScatterFormatArchive() : CommandSetScatterFormatArchive(nullptr) {}
  ~CommandSetScatterFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetScatterFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetScatterFormatArchive(const CommandSetScatterFormatArchive& from);
  CommandSetScatterFormatArchive(CommandSetScatterFormatArchive&& from) noexcept
    : CommandSetScatterFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetScatterFormatArchive& operator=(const CommandSetScatterFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetScatterFormatArchive& operator=(CommandSetScatterFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetScatterFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetScatterFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetScatterFormatArchive*>(
               &_CommandSetScatterFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandSetScatterFormatArchive& a, CommandSetScatterFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetScatterFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetScatterFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetScatterFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetScatterFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetScatterFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetScatterFormatArchive& from) {
    CommandSetScatterFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetScatterFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetScatterFormatArchive";
  }
  protected:
  explicit CommandSetScatterFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldformatFieldNumber = 3,
    kNewformatFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 oldformat = 3;
  bool has_oldformat() const;
  private:
  bool _internal_has_oldformat() const;
  public:
  void clear_oldformat();
  uint32_t oldformat() const;
  void set_oldformat(uint32_t value);
  private:
  uint32_t _internal_oldformat() const;
  void _internal_set_oldformat(uint32_t value);
  public:

  // required uint32 newformat = 4;
  bool has_newformat() const;
  private:
  bool _internal_has_newformat() const;
  public:
  void clear_newformat();
  uint32_t newformat() const;
  void set_newformat(uint32_t value);
  private:
  uint32_t _internal_newformat() const;
  void _internal_set_newformat(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetScatterFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t oldformat_;
    uint32_t newformat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultiDataSetIndexArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetMultiDataSetIndexArchive) */ {
 public:
  inline CommandSetMultiDataSetIndexArchive() : CommandSetMultiDataSetIndexArchive(nullptr) {}
  ~CommandSetMultiDataSetIndexArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultiDataSetIndexArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultiDataSetIndexArchive(const CommandSetMultiDataSetIndexArchive& from);
  CommandSetMultiDataSetIndexArchive(CommandSetMultiDataSetIndexArchive&& from) noexcept
    : CommandSetMultiDataSetIndexArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultiDataSetIndexArchive& operator=(const CommandSetMultiDataSetIndexArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultiDataSetIndexArchive& operator=(CommandSetMultiDataSetIndexArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultiDataSetIndexArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultiDataSetIndexArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultiDataSetIndexArchive*>(
               &_CommandSetMultiDataSetIndexArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandSetMultiDataSetIndexArchive& a, CommandSetMultiDataSetIndexArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultiDataSetIndexArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultiDataSetIndexArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultiDataSetIndexArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultiDataSetIndexArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultiDataSetIndexArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultiDataSetIndexArchive& from) {
    CommandSetMultiDataSetIndexArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultiDataSetIndexArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetMultiDataSetIndexArchive";
  }
  protected:
  explicit CommandSetMultiDataSetIndexArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldindexFieldNumber = 2,
    kNewindexFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 oldindex = 2;
  bool has_oldindex() const;
  private:
  bool _internal_has_oldindex() const;
  public:
  void clear_oldindex();
  uint32_t oldindex() const;
  void set_oldindex(uint32_t value);
  private:
  uint32_t _internal_oldindex() const;
  void _internal_set_oldindex(uint32_t value);
  public:

  // required uint32 newindex = 3;
  bool has_newindex() const;
  private:
  bool _internal_has_newindex() const;
  public:
  void clear_newindex();
  uint32_t newindex() const;
  void set_newindex(uint32_t value);
  private:
  uint32_t _internal_newindex() const;
  void _internal_set_newindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetMultiDataSetIndexArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t oldindex_;
    uint32_t newindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetLegendFrameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetLegendFrameArchive) */ {
 public:
  inline CommandSetLegendFrameArchive() : CommandSetLegendFrameArchive(nullptr) {}
  ~CommandSetLegendFrameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetLegendFrameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetLegendFrameArchive(const CommandSetLegendFrameArchive& from);
  CommandSetLegendFrameArchive(CommandSetLegendFrameArchive&& from) noexcept
    : CommandSetLegendFrameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetLegendFrameArchive& operator=(const CommandSetLegendFrameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetLegendFrameArchive& operator=(CommandSetLegendFrameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetLegendFrameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetLegendFrameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetLegendFrameArchive*>(
               &_CommandSetLegendFrameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandSetLegendFrameArchive& a, CommandSetLegendFrameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetLegendFrameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetLegendFrameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetLegendFrameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetLegendFrameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetLegendFrameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetLegendFrameArchive& from) {
    CommandSetLegendFrameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetLegendFrameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetLegendFrameArchive";
  }
  protected:
  explicit CommandSetLegendFrameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldLegendFrameFieldNumber = 2,
    kNewLegendFrameFieldNumber = 3,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required .TSCH.RectArchive old_legend_frame = 2;
  bool has_old_legend_frame() const;
  private:
  bool _internal_has_old_legend_frame() const;
  public:
  void clear_old_legend_frame();
  const ::TSCH::RectArchive& old_legend_frame() const;
  PROTOBUF_NODISCARD ::TSCH::RectArchive* release_old_legend_frame();
  ::TSCH::RectArchive* mutable_old_legend_frame();
  void set_allocated_old_legend_frame(::TSCH::RectArchive* old_legend_frame);
  private:
  const ::TSCH::RectArchive& _internal_old_legend_frame() const;
  ::TSCH::RectArchive* _internal_mutable_old_legend_frame();
  public:
  void unsafe_arena_set_allocated_old_legend_frame(
      ::TSCH::RectArchive* old_legend_frame);
  ::TSCH::RectArchive* unsafe_arena_release_old_legend_frame();

  // required .TSCH.RectArchive new_legend_frame = 3;
  bool has_new_legend_frame() const;
  private:
  bool _internal_has_new_legend_frame() const;
  public:
  void clear_new_legend_frame();
  const ::TSCH::RectArchive& new_legend_frame() const;
  PROTOBUF_NODISCARD ::TSCH::RectArchive* release_new_legend_frame();
  ::TSCH::RectArchive* mutable_new_legend_frame();
  void set_allocated_new_legend_frame(::TSCH::RectArchive* new_legend_frame);
  private:
  const ::TSCH::RectArchive& _internal_new_legend_frame() const;
  ::TSCH::RectArchive* _internal_mutable_new_legend_frame();
  public:
  void unsafe_arena_set_allocated_new_legend_frame(
      ::TSCH::RectArchive* new_legend_frame);
  ::TSCH::RectArchive* unsafe_arena_release_new_legend_frame();

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetLegendFrameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSCH::RectArchive* old_legend_frame_;
    ::TSCH::RectArchive* new_legend_frame_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetPieWedgeExplosion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandSetPieWedgeExplosion) */ {
 public:
  inline CommandSetPieWedgeExplosion() : CommandSetPieWedgeExplosion(nullptr) {}
  ~CommandSetPieWedgeExplosion() override;
  explicit PROTOBUF_CONSTEXPR CommandSetPieWedgeExplosion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetPieWedgeExplosion(const CommandSetPieWedgeExplosion& from);
  CommandSetPieWedgeExplosion(CommandSetPieWedgeExplosion&& from) noexcept
    : CommandSetPieWedgeExplosion() {
    *this = ::std::move(from);
  }

  inline CommandSetPieWedgeExplosion& operator=(const CommandSetPieWedgeExplosion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetPieWedgeExplosion& operator=(CommandSetPieWedgeExplosion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetPieWedgeExplosion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetPieWedgeExplosion* internal_default_instance() {
    return reinterpret_cast<const CommandSetPieWedgeExplosion*>(
               &_CommandSetPieWedgeExplosion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandSetPieWedgeExplosion& a, CommandSetPieWedgeExplosion& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetPieWedgeExplosion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetPieWedgeExplosion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetPieWedgeExplosion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetPieWedgeExplosion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetPieWedgeExplosion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetPieWedgeExplosion& from) {
    CommandSetPieWedgeExplosion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetPieWedgeExplosion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandSetPieWedgeExplosion";
  }
  protected:
  explicit CommandSetPieWedgeExplosion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoGeometryCommandFieldNumber = 2,
    kStyleMutationCommandFieldNumber = 3,
    kAnchorAttachmentCommandFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info_geometry_command = 2;
  bool has_info_geometry_command() const;
  private:
  bool _internal_has_info_geometry_command() const;
  public:
  void clear_info_geometry_command();
  const ::TSP::Reference& info_geometry_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info_geometry_command();
  ::TSP::Reference* mutable_info_geometry_command();
  void set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command);
  private:
  const ::TSP::Reference& _internal_info_geometry_command() const;
  ::TSP::Reference* _internal_mutable_info_geometry_command();
  public:
  void unsafe_arena_set_allocated_info_geometry_command(
      ::TSP::Reference* info_geometry_command);
  ::TSP::Reference* unsafe_arena_release_info_geometry_command();

  // optional .TSP.Reference style_mutation_command = 3;
  bool has_style_mutation_command() const;
  private:
  bool _internal_has_style_mutation_command() const;
  public:
  void clear_style_mutation_command();
  const ::TSP::Reference& style_mutation_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_style_mutation_command();
  ::TSP::Reference* mutable_style_mutation_command();
  void set_allocated_style_mutation_command(::TSP::Reference* style_mutation_command);
  private:
  const ::TSP::Reference& _internal_style_mutation_command() const;
  ::TSP::Reference* _internal_mutable_style_mutation_command();
  public:
  void unsafe_arena_set_allocated_style_mutation_command(
      ::TSP::Reference* style_mutation_command);
  ::TSP::Reference* unsafe_arena_release_style_mutation_command();

  // optional .TSP.Reference anchor_attachment_command = 4;
  bool has_anchor_attachment_command() const;
  private:
  bool _internal_has_anchor_attachment_command() const;
  public:
  void clear_anchor_attachment_command();
  const ::TSP::Reference& anchor_attachment_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_anchor_attachment_command();
  ::TSP::Reference* mutable_anchor_attachment_command();
  void set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command);
  private:
  const ::TSP::Reference& _internal_anchor_attachment_command() const;
  ::TSP::Reference* _internal_mutable_anchor_attachment_command();
  public:
  void unsafe_arena_set_allocated_anchor_attachment_command(
      ::TSP::Reference* anchor_attachment_command);
  ::TSP::Reference* unsafe_arena_release_anchor_attachment_command();

  // @@protoc_insertion_point(class_scope:TSCH.CommandSetPieWedgeExplosion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSP::Reference* info_geometry_command_;
    ::TSP::Reference* style_mutation_command_;
    ::TSP::Reference* anchor_attachment_command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SynchronousCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.SynchronousCommandArchive) */ {
 public:
  inline SynchronousCommandArchive() : SynchronousCommandArchive(nullptr) {}
  ~SynchronousCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR SynchronousCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynchronousCommandArchive(const SynchronousCommandArchive& from);
  SynchronousCommandArchive(SynchronousCommandArchive&& from) noexcept
    : SynchronousCommandArchive() {
    *this = ::std::move(from);
  }

  inline SynchronousCommandArchive& operator=(const SynchronousCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronousCommandArchive& operator=(SynchronousCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynchronousCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynchronousCommandArchive* internal_default_instance() {
    return reinterpret_cast<const SynchronousCommandArchive*>(
               &_SynchronousCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SynchronousCommandArchive& a, SynchronousCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronousCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronousCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynchronousCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynchronousCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynchronousCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SynchronousCommandArchive& from) {
    SynchronousCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronousCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.SynchronousCommandArchive";
  }
  protected:
  explicit SynchronousCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::TSP::Reference& command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_command();
  ::TSP::Reference* mutable_command();
  void set_allocated_command(::TSP::Reference* command);
  private:
  const ::TSP::Reference& _internal_command() const;
  ::TSP::Reference* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::TSP::Reference* command);
  ::TSP::Reference* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:TSCH.SynchronousCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceAllArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceAllArchive) */ {
 public:
  inline CommandReplaceAllArchive() : CommandReplaceAllArchive(nullptr) {}
  ~CommandReplaceAllArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceAllArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceAllArchive(const CommandReplaceAllArchive& from);
  CommandReplaceAllArchive(CommandReplaceAllArchive&& from) noexcept
    : CommandReplaceAllArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceAllArchive& operator=(const CommandReplaceAllArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceAllArchive& operator=(CommandReplaceAllArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceAllArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceAllArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceAllArchive*>(
               &_CommandReplaceAllArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CommandReplaceAllArchive& a, CommandReplaceAllArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceAllArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceAllArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceAllArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceAllArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceAllArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceAllArchive& from) {
    CommandReplaceAllArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceAllArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceAllArchive";
  }
  protected:
  explicit CommandReplaceAllArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 3,
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // repeated .TSP.Reference commands = 3;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::TSP::Reference* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_commands();
  private:
  const ::TSP::Reference& _internal_commands(int index) const;
  ::TSP::Reference* _internal_add_commands();
  public:
  const ::TSP::Reference& commands(int index) const;
  ::TSP::Reference* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      commands() const;

  // required .TSK.ReplaceAllChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::ReplaceAllChildCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::ReplaceAllChildCommandArchive* release_super();
  ::TSK::ReplaceAllChildCommandArchive* mutable_super();
  void set_allocated_super(::TSK::ReplaceAllChildCommandArchive* super);
  private:
  const ::TSK::ReplaceAllChildCommandArchive& _internal_super() const;
  ::TSK::ReplaceAllChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::ReplaceAllChildCommandArchive* super);
  ::TSK::ReplaceAllChildCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceAllArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > commands_;
    ::TSK::ReplaceAllChildCommandArchive* super_;
    ::TSP::Reference* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartApplyTheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandChartApplyTheme) */ {
 public:
  inline CommandChartApplyTheme() : CommandChartApplyTheme(nullptr) {}
  ~CommandChartApplyTheme() override;
  explicit PROTOBUF_CONSTEXPR CommandChartApplyTheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartApplyTheme(const CommandChartApplyTheme& from);
  CommandChartApplyTheme(CommandChartApplyTheme&& from) noexcept
    : CommandChartApplyTheme() {
    *this = ::std::move(from);
  }

  inline CommandChartApplyTheme& operator=(const CommandChartApplyTheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartApplyTheme& operator=(CommandChartApplyTheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartApplyTheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartApplyTheme* internal_default_instance() {
    return reinterpret_cast<const CommandChartApplyTheme*>(
               &_CommandChartApplyTheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandChartApplyTheme& a, CommandChartApplyTheme& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartApplyTheme* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartApplyTheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChartApplyTheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChartApplyTheme>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChartApplyTheme& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChartApplyTheme& from) {
    CommandChartApplyTheme::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartApplyTheme* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandChartApplyTheme";
  }
  protected:
  explicit CommandChartApplyTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kSwapCommandFieldNumber = 3,
    kPresetFieldNumber = 4,
  };
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ApplyThemeChildCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::ApplyThemeChildCommandArchive* release_super();
  ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);
  private:
  const ::TSS::ApplyThemeChildCommandArchive& _internal_super() const;
  ::TSS::ApplyThemeChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ApplyThemeChildCommandArchive* super);
  ::TSS::ApplyThemeChildCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference swap_command = 3;
  bool has_swap_command() const;
  private:
  bool _internal_has_swap_command() const;
  public:
  void clear_swap_command();
  const ::TSP::Reference& swap_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_swap_command();
  ::TSP::Reference* mutable_swap_command();
  void set_allocated_swap_command(::TSP::Reference* swap_command);
  private:
  const ::TSP::Reference& _internal_swap_command() const;
  ::TSP::Reference* _internal_mutable_swap_command();
  public:
  void unsafe_arena_set_allocated_swap_command(
      ::TSP::Reference* swap_command);
  ::TSP::Reference* unsafe_arena_release_swap_command();

  // optional .TSP.Reference preset = 4;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // @@protoc_insertion_point(class_scope:TSCH.CommandChartApplyTheme)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::ApplyThemeChildCommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSP::Reference* swap_command_;
    ::TSP::Reference* preset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChartApplyPreset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandChartApplyPreset) */ {
 public:
  inline CommandChartApplyPreset() : CommandChartApplyPreset(nullptr) {}
  ~CommandChartApplyPreset() override;
  explicit PROTOBUF_CONSTEXPR CommandChartApplyPreset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChartApplyPreset(const CommandChartApplyPreset& from);
  CommandChartApplyPreset(CommandChartApplyPreset&& from) noexcept
    : CommandChartApplyPreset() {
    *this = ::std::move(from);
  }

  inline CommandChartApplyPreset& operator=(const CommandChartApplyPreset& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChartApplyPreset& operator=(CommandChartApplyPreset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChartApplyPreset& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChartApplyPreset* internal_default_instance() {
    return reinterpret_cast<const CommandChartApplyPreset*>(
               &_CommandChartApplyPreset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CommandChartApplyPreset& a, CommandChartApplyPreset& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChartApplyPreset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChartApplyPreset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChartApplyPreset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChartApplyPreset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChartApplyPreset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChartApplyPreset& from) {
    CommandChartApplyPreset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChartApplyPreset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandChartApplyPreset";
  }
  protected:
  explicit CommandChartApplyPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSwapCommandFieldNumber = 2,
    kPresetFieldNumber = 3,
    kBehaviorFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference swap_command = 2;
  bool has_swap_command() const;
  private:
  bool _internal_has_swap_command() const;
  public:
  void clear_swap_command();
  const ::TSP::Reference& swap_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_swap_command();
  ::TSP::Reference* mutable_swap_command();
  void set_allocated_swap_command(::TSP::Reference* swap_command);
  private:
  const ::TSP::Reference& _internal_swap_command() const;
  ::TSP::Reference* _internal_mutable_swap_command();
  public:
  void unsafe_arena_set_allocated_swap_command(
      ::TSP::Reference* swap_command);
  ::TSP::Reference* unsafe_arena_release_swap_command();

  // optional .TSP.Reference preset = 3;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
  bool has_behavior() const;
  private:
  bool _internal_has_behavior() const;
  public:
  void clear_behavior();
  ::TSCH::ApplyPresetBehavior behavior() const;
  void set_behavior(::TSCH::ApplyPresetBehavior value);
  private:
  ::TSCH::ApplyPresetBehavior _internal_behavior() const;
  void _internal_set_behavior(::TSCH::ApplyPresetBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandChartApplyPreset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSP::Reference* swap_command_;
    ::TSP::Reference* preset_;
    int behavior_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCleanupGeometryArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandCleanupGeometryArchive) */ {
 public:
  inline CommandCleanupGeometryArchive() : CommandCleanupGeometryArchive(nullptr) {}
  ~CommandCleanupGeometryArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandCleanupGeometryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCleanupGeometryArchive(const CommandCleanupGeometryArchive& from);
  CommandCleanupGeometryArchive(CommandCleanupGeometryArchive&& from) noexcept
    : CommandCleanupGeometryArchive() {
    *this = ::std::move(from);
  }

  inline CommandCleanupGeometryArchive& operator=(const CommandCleanupGeometryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCleanupGeometryArchive& operator=(CommandCleanupGeometryArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCleanupGeometryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCleanupGeometryArchive* internal_default_instance() {
    return reinterpret_cast<const CommandCleanupGeometryArchive*>(
               &_CommandCleanupGeometryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CommandCleanupGeometryArchive& a, CommandCleanupGeometryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCleanupGeometryArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCleanupGeometryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCleanupGeometryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCleanupGeometryArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCleanupGeometryArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCleanupGeometryArchive& from) {
    CommandCleanupGeometryArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCleanupGeometryArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandCleanupGeometryArchive";
  }
  protected:
  explicit CommandCleanupGeometryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoGeometryCommandFieldNumber = 2,
    kAnchorAttachmentCommandFieldNumber = 3,
    kOriginalLegendRectFieldNumber = 4,
  };
  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info_geometry_command = 2;
  bool has_info_geometry_command() const;
  private:
  bool _internal_has_info_geometry_command() const;
  public:
  void clear_info_geometry_command();
  const ::TSP::Reference& info_geometry_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info_geometry_command();
  ::TSP::Reference* mutable_info_geometry_command();
  void set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command);
  private:
  const ::TSP::Reference& _internal_info_geometry_command() const;
  ::TSP::Reference* _internal_mutable_info_geometry_command();
  public:
  void unsafe_arena_set_allocated_info_geometry_command(
      ::TSP::Reference* info_geometry_command);
  ::TSP::Reference* unsafe_arena_release_info_geometry_command();

  // optional .TSP.Reference anchor_attachment_command = 3;
  bool has_anchor_attachment_command() const;
  private:
  bool _internal_has_anchor_attachment_command() const;
  public:
  void clear_anchor_attachment_command();
  const ::TSP::Reference& anchor_attachment_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_anchor_attachment_command();
  ::TSP::Reference* mutable_anchor_attachment_command();
  void set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command);
  private:
  const ::TSP::Reference& _internal_anchor_attachment_command() const;
  ::TSP::Reference* _internal_mutable_anchor_attachment_command();
  public:
  void unsafe_arena_set_allocated_anchor_attachment_command(
      ::TSP::Reference* anchor_attachment_command);
  ::TSP::Reference* unsafe_arena_release_anchor_attachment_command();

  // optional .TSCH.RectArchive original_legend_rect = 4;
  bool has_original_legend_rect() const;
  private:
  bool _internal_has_original_legend_rect() const;
  public:
  void clear_original_legend_rect();
  const ::TSCH::RectArchive& original_legend_rect() const;
  PROTOBUF_NODISCARD ::TSCH::RectArchive* release_original_legend_rect();
  ::TSCH::RectArchive* mutable_original_legend_rect();
  void set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect);
  private:
  const ::TSCH::RectArchive& _internal_original_legend_rect() const;
  ::TSCH::RectArchive* _internal_mutable_original_legend_rect();
  public:
  void unsafe_arena_set_allocated_original_legend_rect(
      ::TSCH::RectArchive* original_legend_rect);
  ::TSCH::RectArchive* unsafe_arena_release_original_legend_rect();

  // @@protoc_insertion_point(class_scope:TSCH.CommandCleanupGeometryArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartCommandArchive* super_;
    ::TSP::Reference* info_geometry_command_;
    ::TSP::Reference* anchor_attachment_command_;
    ::TSCH::RectArchive* original_legend_rect_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartCommandArchive) */ {
 public:
  inline ChartCommandArchive() : ChartCommandArchive(nullptr) {}
  ~ChartCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartCommandArchive(const ChartCommandArchive& from);
  ChartCommandArchive(ChartCommandArchive&& from) noexcept
    : ChartCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChartCommandArchive& operator=(const ChartCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartCommandArchive& operator=(ChartCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChartCommandArchive*>(
               &_ChartCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ChartCommandArchive& a, ChartCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartCommandArchive& from) {
    ChartCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartCommandArchive";
  }
  protected:
  explicit ChartCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kOriginalDirtyStateFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional bool original_dirty_state = 3;
  bool has_original_dirty_state() const;
  private:
  bool _internal_has_original_dirty_state() const;
  public:
  void clear_original_dirty_state();
  bool original_dirty_state() const;
  void set_original_dirty_state(bool value);
  private:
  bool _internal_original_dirty_state() const;
  void _internal_set_original_dirty_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    bool original_dirty_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceGridValuesArchive_ValueRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceGridValuesArchive.ValueRow) */ {
 public:
  inline CommandReplaceGridValuesArchive_ValueRow() : CommandReplaceGridValuesArchive_ValueRow(nullptr) {}
  ~CommandReplaceGridValuesArchive_ValueRow() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceGridValuesArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceGridValuesArchive_ValueRow(const CommandReplaceGridValuesArchive_ValueRow& from);
  CommandReplaceGridValuesArchive_ValueRow(CommandReplaceGridValuesArchive_ValueRow&& from) noexcept
    : CommandReplaceGridValuesArchive_ValueRow() {
    *this = ::std::move(from);
  }

  inline CommandReplaceGridValuesArchive_ValueRow& operator=(const CommandReplaceGridValuesArchive_ValueRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceGridValuesArchive_ValueRow& operator=(CommandReplaceGridValuesArchive_ValueRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceGridValuesArchive_ValueRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceGridValuesArchive_ValueRow* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceGridValuesArchive_ValueRow*>(
               &_CommandReplaceGridValuesArchive_ValueRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandReplaceGridValuesArchive_ValueRow& a, CommandReplaceGridValuesArchive_ValueRow& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceGridValuesArchive_ValueRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceGridValuesArchive_ValueRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceGridValuesArchive_ValueRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceGridValuesArchive_ValueRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceGridValuesArchive_ValueRow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceGridValuesArchive_ValueRow& from) {
    CommandReplaceGridValuesArchive_ValueRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceGridValuesArchive_ValueRow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceGridValuesArchive.ValueRow";
  }
  protected:
  explicit CommandReplaceGridValuesArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceGridValuesArchive.ValueRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceGridValuesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceGridValuesArchive) */ {
 public:
  inline CommandReplaceGridValuesArchive() : CommandReplaceGridValuesArchive(nullptr) {}
  ~CommandReplaceGridValuesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceGridValuesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceGridValuesArchive(const CommandReplaceGridValuesArchive& from);
  CommandReplaceGridValuesArchive(CommandReplaceGridValuesArchive&& from) noexcept
    : CommandReplaceGridValuesArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceGridValuesArchive& operator=(const CommandReplaceGridValuesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceGridValuesArchive& operator=(CommandReplaceGridValuesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceGridValuesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceGridValuesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceGridValuesArchive*>(
               &_CommandReplaceGridValuesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandReplaceGridValuesArchive& a, CommandReplaceGridValuesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceGridValuesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceGridValuesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceGridValuesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceGridValuesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceGridValuesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceGridValuesArchive& from) {
    CommandReplaceGridValuesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceGridValuesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceGridValuesArchive";
  }
  protected:
  explicit CommandReplaceGridValuesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandReplaceGridValuesArchive_ValueRow ValueRow;

  // accessors -------------------------------------------------------

  enum : int {
    kOldDataRowsFieldNumber = 4,
    kNewDataRowsFieldNumber = 5,
    kOldRowNamesFieldNumber = 6,
    kNewRowNamesFieldNumber = 7,
    kOldColNamesFieldNumber = 8,
    kNewColNamesFieldNumber = 9,
    kSuperFieldNumber = 1,
    kRowindexFieldNumber = 2,
    kColumnindexFieldNumber = 3,
    kRowsToAddFieldNumber = 10,
    kColsToAddFieldNumber = 11,
  };
  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
  int old_data_rows_size() const;
  private:
  int _internal_old_data_rows_size() const;
  public:
  void clear_old_data_rows();
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* mutable_old_data_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
      mutable_old_data_rows();
  private:
  const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& _internal_old_data_rows(int index) const;
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* _internal_add_old_data_rows();
  public:
  const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& old_data_rows(int index) const;
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* add_old_data_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
      old_data_rows() const;

  // repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
  int new_data_rows_size() const;
  private:
  int _internal_new_data_rows_size() const;
  public:
  void clear_new_data_rows();
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* mutable_new_data_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
      mutable_new_data_rows();
  private:
  const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& _internal_new_data_rows(int index) const;
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* _internal_add_new_data_rows();
  public:
  const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& new_data_rows(int index) const;
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* add_new_data_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
      new_data_rows() const;

  // repeated string old_row_names = 6;
  int old_row_names_size() const;
  private:
  int _internal_old_row_names_size() const;
  public:
  void clear_old_row_names();
  const std::string& old_row_names(int index) const;
  std::string* mutable_old_row_names(int index);
  void set_old_row_names(int index, const std::string& value);
  void set_old_row_names(int index, std::string&& value);
  void set_old_row_names(int index, const char* value);
  void set_old_row_names(int index, const char* value, size_t size);
  std::string* add_old_row_names();
  void add_old_row_names(const std::string& value);
  void add_old_row_names(std::string&& value);
  void add_old_row_names(const char* value);
  void add_old_row_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& old_row_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_old_row_names();
  private:
  const std::string& _internal_old_row_names(int index) const;
  std::string* _internal_add_old_row_names();
  public:

  // repeated string new_row_names = 7;
  int new_row_names_size() const;
  private:
  int _internal_new_row_names_size() const;
  public:
  void clear_new_row_names();
  const std::string& new_row_names(int index) const;
  std::string* mutable_new_row_names(int index);
  void set_new_row_names(int index, const std::string& value);
  void set_new_row_names(int index, std::string&& value);
  void set_new_row_names(int index, const char* value);
  void set_new_row_names(int index, const char* value, size_t size);
  std::string* add_new_row_names();
  void add_new_row_names(const std::string& value);
  void add_new_row_names(std::string&& value);
  void add_new_row_names(const char* value);
  void add_new_row_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& new_row_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_new_row_names();
  private:
  const std::string& _internal_new_row_names(int index) const;
  std::string* _internal_add_new_row_names();
  public:

  // repeated string old_col_names = 8;
  int old_col_names_size() const;
  private:
  int _internal_old_col_names_size() const;
  public:
  void clear_old_col_names();
  const std::string& old_col_names(int index) const;
  std::string* mutable_old_col_names(int index);
  void set_old_col_names(int index, const std::string& value);
  void set_old_col_names(int index, std::string&& value);
  void set_old_col_names(int index, const char* value);
  void set_old_col_names(int index, const char* value, size_t size);
  std::string* add_old_col_names();
  void add_old_col_names(const std::string& value);
  void add_old_col_names(std::string&& value);
  void add_old_col_names(const char* value);
  void add_old_col_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& old_col_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_old_col_names();
  private:
  const std::string& _internal_old_col_names(int index) const;
  std::string* _internal_add_old_col_names();
  public:

  // repeated string new_col_names = 9;
  int new_col_names_size() const;
  private:
  int _internal_new_col_names_size() const;
  public:
  void clear_new_col_names();
  const std::string& new_col_names(int index) const;
  std::string* mutable_new_col_names(int index);
  void set_new_col_names(int index, const std::string& value);
  void set_new_col_names(int index, std::string&& value);
  void set_new_col_names(int index, const char* value);
  void set_new_col_names(int index, const char* value, size_t size);
  std::string* add_new_col_names();
  void add_new_col_names(const std::string& value);
  void add_new_col_names(std::string&& value);
  void add_new_col_names(const char* value);
  void add_new_col_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& new_col_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_new_col_names();
  private:
  const std::string& _internal_new_col_names(int index) const;
  std::string* _internal_add_new_col_names();
  public:

  // required .TSCH.ChartCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSCH::ChartCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSCH::ChartCommandArchive* release_super();
  ::TSCH::ChartCommandArchive* mutable_super();
  void set_allocated_super(::TSCH::ChartCommandArchive* super);
  private:
  const ::TSCH::ChartCommandArchive& _internal_super() const;
  ::TSCH::ChartCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSCH::ChartCommandArchive* super);
  ::TSCH::ChartCommandArchive* unsafe_arena_release_super();

  // required uint32 rowindex = 2;
  bool has_rowindex() const;
  private:
  bool _internal_has_rowindex() const;
  public:
  void clear_rowindex();
  uint32_t rowindex() const;
  void set_rowindex(uint32_t value);
  private:
  uint32_t _internal_rowindex() const;
  void _internal_set_rowindex(uint32_t value);
  public:

  // required uint32 columnindex = 3;
  bool has_columnindex() const;
  private:
  bool _internal_has_columnindex() const;
  public:
  void clear_columnindex();
  uint32_t columnindex() const;
  void set_columnindex(uint32_t value);
  private:
  uint32_t _internal_columnindex() const;
  void _internal_set_columnindex(uint32_t value);
  public:

  // optional uint32 rows_to_add = 10;
  bool has_rows_to_add() const;
  private:
  bool _internal_has_rows_to_add() const;
  public:
  void clear_rows_to_add();
  uint32_t rows_to_add() const;
  void set_rows_to_add(uint32_t value);
  private:
  uint32_t _internal_rows_to_add() const;
  void _internal_set_rows_to_add(uint32_t value);
  public:

  // optional uint32 cols_to_add = 11;
  bool has_cols_to_add() const;
  private:
  bool _internal_has_cols_to_add() const;
  public:
  void clear_cols_to_add();
  uint32_t cols_to_add() const;
  void set_cols_to_add(uint32_t value);
  private:
  uint32_t _internal_cols_to_add() const;
  void _internal_set_cols_to_add(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceGridValuesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow > old_data_rows_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow > new_data_rows_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> old_row_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> new_row_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> old_col_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> new_col_names_;
    ::TSCH::ChartCommandArchive* super_;
    uint32_t rowindex_;
    uint32_t columnindex_;
    uint32_t rows_to_add_;
    uint32_t cols_to_add_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceThemePresetArchive_StyleAndIdentifierPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair) */ {
 public:
  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair() : CommandReplaceThemePresetArchive_StyleAndIdentifierPair(nullptr) {}
  ~CommandReplaceThemePresetArchive_StyleAndIdentifierPair() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceThemePresetArchive_StyleAndIdentifierPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceThemePresetArchive_StyleAndIdentifierPair(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);
  CommandReplaceThemePresetArchive_StyleAndIdentifierPair(CommandReplaceThemePresetArchive_StyleAndIdentifierPair&& from) noexcept
    : CommandReplaceThemePresetArchive_StyleAndIdentifierPair() {
    *this = ::std::move(from);
  }

  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair& operator=(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceThemePresetArchive_StyleAndIdentifierPair& operator=(CommandReplaceThemePresetArchive_StyleAndIdentifierPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceThemePresetArchive_StyleAndIdentifierPair* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceThemePresetArchive_StyleAndIdentifierPair*>(
               &_CommandReplaceThemePresetArchive_StyleAndIdentifierPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair& a, CommandReplaceThemePresetArchive_StyleAndIdentifierPair& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceThemePresetArchive_StyleAndIdentifierPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceThemePresetArchive_StyleAndIdentifierPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceThemePresetArchive_StyleAndIdentifierPair& from) {
    CommandReplaceThemePresetArchive_StyleAndIdentifierPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceThemePresetArchive_StyleAndIdentifierPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair";
  }
  protected:
  explicit CommandReplaceThemePresetArchive_StyleAndIdentifierPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kStyleFieldNumber = 1,
  };
  // required string identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required .TSP.Reference style = 1;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::TSP::Reference* style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceThemePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandReplaceThemePresetArchive) */ {
 public:
  inline CommandReplaceThemePresetArchive() : CommandReplaceThemePresetArchive(nullptr) {}
  ~CommandReplaceThemePresetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceThemePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceThemePresetArchive(const CommandReplaceThemePresetArchive& from);
  CommandReplaceThemePresetArchive(CommandReplaceThemePresetArchive&& from) noexcept
    : CommandReplaceThemePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceThemePresetArchive& operator=(const CommandReplaceThemePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceThemePresetArchive& operator=(CommandReplaceThemePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceThemePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceThemePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceThemePresetArchive*>(
               &_CommandReplaceThemePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CommandReplaceThemePresetArchive& a, CommandReplaceThemePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceThemePresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceThemePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceThemePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceThemePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceThemePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceThemePresetArchive& from) {
    CommandReplaceThemePresetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceThemePresetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandReplaceThemePresetArchive";
  }
  protected:
  explicit CommandReplaceThemePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandReplaceThemePresetArchive_StyleAndIdentifierPair StyleAndIdentifierPair;

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiersFieldNumber = 5,
    kSuperFieldNumber = 1,
    kThemeFieldNumber = 2,
    kOldPresetFieldNumber = 3,
    kNewPresetFieldNumber = 4,
    kOldPresetIndexFieldNumber = 6,
  };
  // repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
  int identifiers_size() const;
  private:
  int _internal_identifiers_size() const;
  public:
  void clear_identifiers();
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* mutable_identifiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >*
      mutable_identifiers();
  private:
  const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& _internal_identifiers(int index) const;
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* _internal_add_identifiers();
  public:
  const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& identifiers(int index) const;
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* add_identifiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >&
      identifiers() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference theme = 2;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::TSP::Reference& theme() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme();
  ::TSP::Reference* mutable_theme();
  void set_allocated_theme(::TSP::Reference* theme);
  private:
  const ::TSP::Reference& _internal_theme() const;
  ::TSP::Reference* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::TSP::Reference* theme);
  ::TSP::Reference* unsafe_arena_release_theme();

  // optional .TSP.Reference old_preset = 3;
  bool has_old_preset() const;
  private:
  bool _internal_has_old_preset() const;
  public:
  void clear_old_preset();
  const ::TSP::Reference& old_preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_preset();
  ::TSP::Reference* mutable_old_preset();
  void set_allocated_old_preset(::TSP::Reference* old_preset);
  private:
  const ::TSP::Reference& _internal_old_preset() const;
  ::TSP::Reference* _internal_mutable_old_preset();
  public:
  void unsafe_arena_set_allocated_old_preset(
      ::TSP::Reference* old_preset);
  ::TSP::Reference* unsafe_arena_release_old_preset();

  // optional .TSP.Reference new_preset = 4;
  bool has_new_preset() const;
  private:
  bool _internal_has_new_preset() const;
  public:
  void clear_new_preset();
  const ::TSP::Reference& new_preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_preset();
  ::TSP::Reference* mutable_new_preset();
  void set_allocated_new_preset(::TSP::Reference* new_preset);
  private:
  const ::TSP::Reference& _internal_new_preset() const;
  ::TSP::Reference* _internal_mutable_new_preset();
  public:
  void unsafe_arena_set_allocated_new_preset(
      ::TSP::Reference* new_preset);
  ::TSP::Reference* unsafe_arena_release_new_preset();

  // optional uint64 old_preset_index = 6;
  bool has_old_preset_index() const;
  private:
  bool _internal_has_old_preset_index() const;
  public:
  void clear_old_preset_index();
  uint64_t old_preset_index() const;
  void set_old_preset_index(uint64_t value);
  private:
  uint64_t _internal_old_preset_index() const;
  void _internal_set_old_preset_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.CommandReplaceThemePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair > identifiers_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* theme_;
    ::TSP::Reference* old_preset_;
    ::TSP::Reference* new_preset_;
    uint64_t old_preset_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInvalidateWPCaches final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CommandInvalidateWPCaches) */ {
 public:
  inline CommandInvalidateWPCaches() : CommandInvalidateWPCaches(nullptr) {}
  ~CommandInvalidateWPCaches() override;
  explicit PROTOBUF_CONSTEXPR CommandInvalidateWPCaches(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInvalidateWPCaches(const CommandInvalidateWPCaches& from);
  CommandInvalidateWPCaches(CommandInvalidateWPCaches&& from) noexcept
    : CommandInvalidateWPCaches() {
    *this = ::std::move(from);
  }

  inline CommandInvalidateWPCaches& operator=(const CommandInvalidateWPCaches& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInvalidateWPCaches& operator=(CommandInvalidateWPCaches&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInvalidateWPCaches& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInvalidateWPCaches* internal_default_instance() {
    return reinterpret_cast<const CommandInvalidateWPCaches*>(
               &_CommandInvalidateWPCaches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CommandInvalidateWPCaches& a, CommandInvalidateWPCaches& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInvalidateWPCaches* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInvalidateWPCaches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandInvalidateWPCaches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandInvalidateWPCaches>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInvalidateWPCaches& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandInvalidateWPCaches& from) {
    CommandInvalidateWPCaches::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInvalidateWPCaches* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CommandInvalidateWPCaches";
  }
  protected:
  explicit CommandInvalidateWPCaches(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.CommandInvalidateWPCaches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandSetChartTypeArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetChartTypeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetChartTypeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetChartTypeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetChartTypeArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetChartTypeArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.super)
  return _internal_super();
}
inline void CommandSetChartTypeArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetChartTypeArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetChartTypeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetChartTypeArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.super)
  return _msg;
}
inline void CommandSetChartTypeArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetChartTypeArchive.super)
}

// required .TSCH.ChartType oldChartType = 2;
inline bool CommandSetChartTypeArchive::_internal_has_oldcharttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetChartTypeArchive::has_oldcharttype() const {
  return _internal_has_oldcharttype();
}
inline void CommandSetChartTypeArchive::clear_oldcharttype() {
  _impl_.oldcharttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::_internal_oldcharttype() const {
  return static_cast< ::TSCH::ChartType >(_impl_.oldcharttype_);
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::oldcharttype() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.oldChartType)
  return _internal_oldcharttype();
}
inline void CommandSetChartTypeArchive::_internal_set_oldcharttype(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.oldcharttype_ = value;
}
inline void CommandSetChartTypeArchive::set_oldcharttype(::TSCH::ChartType value) {
  _internal_set_oldcharttype(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetChartTypeArchive.oldChartType)
}

// required .TSCH.ChartType newChartType = 3;
inline bool CommandSetChartTypeArchive::_internal_has_newcharttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetChartTypeArchive::has_newcharttype() const {
  return _internal_has_newcharttype();
}
inline void CommandSetChartTypeArchive::clear_newcharttype() {
  _impl_.newcharttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::_internal_newcharttype() const {
  return static_cast< ::TSCH::ChartType >(_impl_.newcharttype_);
}
inline ::TSCH::ChartType CommandSetChartTypeArchive::newcharttype() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.newChartType)
  return _internal_newcharttype();
}
inline void CommandSetChartTypeArchive::_internal_set_newcharttype(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.newcharttype_ = value;
}
inline void CommandSetChartTypeArchive::set_newcharttype(::TSCH::ChartType value) {
  _internal_set_newcharttype(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetChartTypeArchive.newChartType)
}

// optional .TSP.Reference info_geometry_command = 5;
inline bool CommandSetChartTypeArchive::_internal_has_info_geometry_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_geometry_command_ != nullptr);
  return value;
}
inline bool CommandSetChartTypeArchive::has_info_geometry_command() const {
  return _internal_has_info_geometry_command();
}
inline const ::TSP::Reference& CommandSetChartTypeArchive::_internal_info_geometry_command() const {
  const ::TSP::Reference* p = _impl_.info_geometry_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetChartTypeArchive::info_geometry_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.info_geometry_command)
  return _internal_info_geometry_command();
}
inline void CommandSetChartTypeArchive::unsafe_arena_set_allocated_info_geometry_command(
    ::TSP::Reference* info_geometry_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_geometry_command_);
  }
  _impl_.info_geometry_command_ = info_geometry_command;
  if (info_geometry_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetChartTypeArchive.info_geometry_command)
}
inline ::TSP::Reference* CommandSetChartTypeArchive::release_info_geometry_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_geometry_command_;
  _impl_.info_geometry_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::unsafe_arena_release_info_geometry_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetChartTypeArchive.info_geometry_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_geometry_command_;
  _impl_.info_geometry_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::_internal_mutable_info_geometry_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_geometry_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_geometry_command_ = p;
  }
  return _impl_.info_geometry_command_;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::mutable_info_geometry_command() {
  ::TSP::Reference* _msg = _internal_mutable_info_geometry_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.info_geometry_command)
  return _msg;
}
inline void CommandSetChartTypeArchive::set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_geometry_command_);
  }
  if (info_geometry_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_geometry_command));
    if (message_arena != submessage_arena) {
      info_geometry_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_geometry_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_geometry_command_ = info_geometry_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetChartTypeArchive.info_geometry_command)
}

// optional .TSP.Reference anchor_attachment_command = 6;
inline bool CommandSetChartTypeArchive::_internal_has_anchor_attachment_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anchor_attachment_command_ != nullptr);
  return value;
}
inline bool CommandSetChartTypeArchive::has_anchor_attachment_command() const {
  return _internal_has_anchor_attachment_command();
}
inline const ::TSP::Reference& CommandSetChartTypeArchive::_internal_anchor_attachment_command() const {
  const ::TSP::Reference* p = _impl_.anchor_attachment_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetChartTypeArchive::anchor_attachment_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.anchor_attachment_command)
  return _internal_anchor_attachment_command();
}
inline void CommandSetChartTypeArchive::unsafe_arena_set_allocated_anchor_attachment_command(
    ::TSP::Reference* anchor_attachment_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_attachment_command_);
  }
  _impl_.anchor_attachment_command_ = anchor_attachment_command;
  if (anchor_attachment_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetChartTypeArchive.anchor_attachment_command)
}
inline ::TSP::Reference* CommandSetChartTypeArchive::release_anchor_attachment_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.anchor_attachment_command_;
  _impl_.anchor_attachment_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::unsafe_arena_release_anchor_attachment_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetChartTypeArchive.anchor_attachment_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.anchor_attachment_command_;
  _impl_.anchor_attachment_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::_internal_mutable_anchor_attachment_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.anchor_attachment_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.anchor_attachment_command_ = p;
  }
  return _impl_.anchor_attachment_command_;
}
inline ::TSP::Reference* CommandSetChartTypeArchive::mutable_anchor_attachment_command() {
  ::TSP::Reference* _msg = _internal_mutable_anchor_attachment_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.anchor_attachment_command)
  return _msg;
}
inline void CommandSetChartTypeArchive::set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_attachment_command_);
  }
  if (anchor_attachment_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_attachment_command));
    if (message_arena != submessage_arena) {
      anchor_attachment_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_attachment_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.anchor_attachment_command_ = anchor_attachment_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetChartTypeArchive.anchor_attachment_command)
}

// optional .TSCH.RectArchive original_legend_rect = 7;
inline bool CommandSetChartTypeArchive::_internal_has_original_legend_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_legend_rect_ != nullptr);
  return value;
}
inline bool CommandSetChartTypeArchive::has_original_legend_rect() const {
  return _internal_has_original_legend_rect();
}
inline const ::TSCH::RectArchive& CommandSetChartTypeArchive::_internal_original_legend_rect() const {
  const ::TSCH::RectArchive* p = _impl_.original_legend_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& CommandSetChartTypeArchive::original_legend_rect() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetChartTypeArchive.original_legend_rect)
  return _internal_original_legend_rect();
}
inline void CommandSetChartTypeArchive::unsafe_arena_set_allocated_original_legend_rect(
    ::TSCH::RectArchive* original_legend_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_legend_rect_);
  }
  _impl_.original_legend_rect_ = original_legend_rect;
  if (original_legend_rect) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetChartTypeArchive.original_legend_rect)
}
inline ::TSCH::RectArchive* CommandSetChartTypeArchive::release_original_legend_rect() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::RectArchive* temp = _impl_.original_legend_rect_;
  _impl_.original_legend_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* CommandSetChartTypeArchive::unsafe_arena_release_original_legend_rect() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetChartTypeArchive.original_legend_rect)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::RectArchive* temp = _impl_.original_legend_rect_;
  _impl_.original_legend_rect_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* CommandSetChartTypeArchive::_internal_mutable_original_legend_rect() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.original_legend_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    _impl_.original_legend_rect_ = p;
  }
  return _impl_.original_legend_rect_;
}
inline ::TSCH::RectArchive* CommandSetChartTypeArchive::mutable_original_legend_rect() {
  ::TSCH::RectArchive* _msg = _internal_mutable_original_legend_rect();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetChartTypeArchive.original_legend_rect)
  return _msg;
}
inline void CommandSetChartTypeArchive::set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_legend_rect_);
  }
  if (original_legend_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_legend_rect));
    if (message_arena != submessage_arena) {
      original_legend_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_legend_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.original_legend_rect_ = original_legend_rect;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetChartTypeArchive.original_legend_rect)
}

// -------------------------------------------------------------------

// PropertyMutationUndoTupleArchive

// optional .TSP.Reference chart_info = 1;
inline bool PropertyMutationUndoTupleArchive::_internal_has_chart_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_info_ != nullptr);
  return value;
}
inline bool PropertyMutationUndoTupleArchive::has_chart_info() const {
  return _internal_has_chart_info();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::_internal_chart_info() const {
  const ::TSP::Reference* p = _impl_.chart_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::chart_info() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyMutationUndoTupleArchive.chart_info)
  return _internal_chart_info();
}
inline void PropertyMutationUndoTupleArchive::unsafe_arena_set_allocated_chart_info(
    ::TSP::Reference* chart_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_info_);
  }
  _impl_.chart_info_ = chart_info;
  if (chart_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyMutationUndoTupleArchive.chart_info)
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_chart_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_info_;
  _impl_.chart_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::unsafe_arena_release_chart_info() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyMutationUndoTupleArchive.chart_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_info_;
  _impl_.chart_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::_internal_mutable_chart_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_info_ = p;
  }
  return _impl_.chart_info_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_chart_info() {
  ::TSP::Reference* _msg = _internal_mutable_chart_info();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyMutationUndoTupleArchive.chart_info)
  return _msg;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_chart_info(::TSP::Reference* chart_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_info_);
  }
  if (chart_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info));
    if (message_arena != submessage_arena) {
      chart_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_info_ = chart_info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyMutationUndoTupleArchive.chart_info)
}

// optional .TSCH.StyleOwnerType style_owner_type = 2;
inline bool PropertyMutationUndoTupleArchive::_internal_has_style_owner_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PropertyMutationUndoTupleArchive::has_style_owner_type() const {
  return _internal_has_style_owner_type();
}
inline void PropertyMutationUndoTupleArchive::clear_style_owner_type() {
  _impl_.style_owner_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::TSCH::StyleOwnerType PropertyMutationUndoTupleArchive::_internal_style_owner_type() const {
  return static_cast< ::TSCH::StyleOwnerType >(_impl_.style_owner_type_);
}
inline ::TSCH::StyleOwnerType PropertyMutationUndoTupleArchive::style_owner_type() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyMutationUndoTupleArchive.style_owner_type)
  return _internal_style_owner_type();
}
inline void PropertyMutationUndoTupleArchive::_internal_set_style_owner_type(::TSCH::StyleOwnerType value) {
  assert(::TSCH::StyleOwnerType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.style_owner_type_ = value;
}
inline void PropertyMutationUndoTupleArchive::set_style_owner_type(::TSCH::StyleOwnerType value) {
  _internal_set_style_owner_type(value);
  // @@protoc_insertion_point(field_set:TSCH.PropertyMutationUndoTupleArchive.style_owner_type)
}

// optional uint32 index = 3;
inline bool PropertyMutationUndoTupleArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PropertyMutationUndoTupleArchive::has_index() const {
  return _internal_has_index();
}
inline void PropertyMutationUndoTupleArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PropertyMutationUndoTupleArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t PropertyMutationUndoTupleArchive::index() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyMutationUndoTupleArchive.index)
  return _internal_index();
}
inline void PropertyMutationUndoTupleArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.index_ = value;
}
inline void PropertyMutationUndoTupleArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSCH.PropertyMutationUndoTupleArchive.index)
}

// optional .TSP.Reference old_style = 4;
inline bool PropertyMutationUndoTupleArchive::_internal_has_old_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_style_ != nullptr);
  return value;
}
inline bool PropertyMutationUndoTupleArchive::has_old_style() const {
  return _internal_has_old_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::_internal_old_style() const {
  const ::TSP::Reference* p = _impl_.old_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::old_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyMutationUndoTupleArchive.old_style)
  return _internal_old_style();
}
inline void PropertyMutationUndoTupleArchive::unsafe_arena_set_allocated_old_style(
    ::TSP::Reference* old_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  _impl_.old_style_ = old_style;
  if (old_style) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyMutationUndoTupleArchive.old_style)
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_old_style() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::unsafe_arena_release_old_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyMutationUndoTupleArchive.old_style)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::_internal_mutable_old_style() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_style_ = p;
  }
  return _impl_.old_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_old_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyMutationUndoTupleArchive.old_style)
  return _msg;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_old_style(::TSP::Reference* old_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  if (old_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style));
    if (message_arena != submessage_arena) {
      old_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_style_ = old_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyMutationUndoTupleArchive.old_style)
}

// optional .TSP.Reference new_style = 5;
inline bool PropertyMutationUndoTupleArchive::_internal_has_new_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_style_ != nullptr);
  return value;
}
inline bool PropertyMutationUndoTupleArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::_internal_new_style() const {
  const ::TSP::Reference* p = _impl_.new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyMutationUndoTupleArchive.new_style)
  return _internal_new_style();
}
inline void PropertyMutationUndoTupleArchive::unsafe_arena_set_allocated_new_style(
    ::TSP::Reference* new_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  _impl_.new_style_ = new_style;
  if (new_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyMutationUndoTupleArchive.new_style)
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_new_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyMutationUndoTupleArchive.new_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::_internal_mutable_new_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_style_ = p;
  }
  return _impl_.new_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_new_style() {
  ::TSP::Reference* _msg = _internal_mutable_new_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyMutationUndoTupleArchive.new_style)
  return _msg;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style));
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyMutationUndoTupleArchive.new_style)
}

// optional .TSP.Reference old_non_style = 6;
inline bool PropertyMutationUndoTupleArchive::_internal_has_old_non_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_non_style_ != nullptr);
  return value;
}
inline bool PropertyMutationUndoTupleArchive::has_old_non_style() const {
  return _internal_has_old_non_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::_internal_old_non_style() const {
  const ::TSP::Reference* p = _impl_.old_non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::old_non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyMutationUndoTupleArchive.old_non_style)
  return _internal_old_non_style();
}
inline void PropertyMutationUndoTupleArchive::unsafe_arena_set_allocated_old_non_style(
    ::TSP::Reference* old_non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_non_style_);
  }
  _impl_.old_non_style_ = old_non_style;
  if (old_non_style) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyMutationUndoTupleArchive.old_non_style)
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_old_non_style() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_non_style_;
  _impl_.old_non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::unsafe_arena_release_old_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyMutationUndoTupleArchive.old_non_style)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_non_style_;
  _impl_.old_non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::_internal_mutable_old_non_style() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_non_style_ = p;
  }
  return _impl_.old_non_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_old_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyMutationUndoTupleArchive.old_non_style)
  return _msg;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_old_non_style(::TSP::Reference* old_non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_non_style_);
  }
  if (old_non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_non_style));
    if (message_arena != submessage_arena) {
      old_non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_non_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_non_style_ = old_non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyMutationUndoTupleArchive.old_non_style)
}

// optional .TSP.Reference new_non_style = 7;
inline bool PropertyMutationUndoTupleArchive::_internal_has_new_non_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_non_style_ != nullptr);
  return value;
}
inline bool PropertyMutationUndoTupleArchive::has_new_non_style() const {
  return _internal_has_new_non_style();
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::_internal_new_non_style() const {
  const ::TSP::Reference* p = _impl_.new_non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyMutationUndoTupleArchive::new_non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyMutationUndoTupleArchive.new_non_style)
  return _internal_new_non_style();
}
inline void PropertyMutationUndoTupleArchive::unsafe_arena_set_allocated_new_non_style(
    ::TSP::Reference* new_non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_non_style_);
  }
  _impl_.new_non_style_ = new_non_style;
  if (new_non_style) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyMutationUndoTupleArchive.new_non_style)
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::release_new_non_style() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.new_non_style_;
  _impl_.new_non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::unsafe_arena_release_new_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyMutationUndoTupleArchive.new_non_style)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.new_non_style_;
  _impl_.new_non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::_internal_mutable_new_non_style() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_non_style_ = p;
  }
  return _impl_.new_non_style_;
}
inline ::TSP::Reference* PropertyMutationUndoTupleArchive::mutable_new_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_new_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyMutationUndoTupleArchive.new_non_style)
  return _msg;
}
inline void PropertyMutationUndoTupleArchive::set_allocated_new_non_style(::TSP::Reference* new_non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_non_style_);
  }
  if (new_non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_non_style));
    if (message_arena != submessage_arena) {
      new_non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_non_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_non_style_ = new_non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyMutationUndoTupleArchive.new_non_style)
}

// -------------------------------------------------------------------

// StyleSwapUndoTupleArchive

// optional .TSP.Reference chart_info = 1;
inline bool StyleSwapUndoTupleArchive::_internal_has_chart_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_info_ != nullptr);
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_chart_info() const {
  return _internal_has_chart_info();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::_internal_chart_info() const {
  const ::TSP::Reference* p = _impl_.chart_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::chart_info() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.chart_info)
  return _internal_chart_info();
}
inline void StyleSwapUndoTupleArchive::unsafe_arena_set_allocated_chart_info(
    ::TSP::Reference* chart_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_info_);
  }
  _impl_.chart_info_ = chart_info;
  if (chart_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StyleSwapUndoTupleArchive.chart_info)
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_chart_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_info_;
  _impl_.chart_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::unsafe_arena_release_chart_info() {
  // @@protoc_insertion_point(field_release:TSCH.StyleSwapUndoTupleArchive.chart_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_info_;
  _impl_.chart_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::_internal_mutable_chart_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_info_ = p;
  }
  return _impl_.chart_info_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_chart_info() {
  ::TSP::Reference* _msg = _internal_mutable_chart_info();
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTupleArchive.chart_info)
  return _msg;
}
inline void StyleSwapUndoTupleArchive::set_allocated_chart_info(::TSP::Reference* chart_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_info_);
  }
  if (chart_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_info));
    if (message_arena != submessage_arena) {
      chart_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_info_ = chart_info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StyleSwapUndoTupleArchive.chart_info)
}

// optional .TSCH.StyleSwapType swap_type = 2;
inline bool StyleSwapUndoTupleArchive::_internal_has_swap_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_swap_type() const {
  return _internal_has_swap_type();
}
inline void StyleSwapUndoTupleArchive::clear_swap_type() {
  _impl_.swap_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSCH::StyleSwapType StyleSwapUndoTupleArchive::_internal_swap_type() const {
  return static_cast< ::TSCH::StyleSwapType >(_impl_.swap_type_);
}
inline ::TSCH::StyleSwapType StyleSwapUndoTupleArchive::swap_type() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.swap_type)
  return _internal_swap_type();
}
inline void StyleSwapUndoTupleArchive::_internal_set_swap_type(::TSCH::StyleSwapType value) {
  assert(::TSCH::StyleSwapType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.swap_type_ = value;
}
inline void StyleSwapUndoTupleArchive::set_swap_type(::TSCH::StyleSwapType value) {
  _internal_set_swap_type(value);
  // @@protoc_insertion_point(field_set:TSCH.StyleSwapUndoTupleArchive.swap_type)
}

// optional uint32 index = 3;
inline bool StyleSwapUndoTupleArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_index() const {
  return _internal_has_index();
}
inline void StyleSwapUndoTupleArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t StyleSwapUndoTupleArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t StyleSwapUndoTupleArchive::index() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.index)
  return _internal_index();
}
inline void StyleSwapUndoTupleArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void StyleSwapUndoTupleArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSCH.StyleSwapUndoTupleArchive.index)
}

// optional .TSP.Reference old_value = 4;
inline bool StyleSwapUndoTupleArchive::_internal_has_old_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_value_ != nullptr);
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_old_value() const {
  return _internal_has_old_value();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::_internal_old_value() const {
  const ::TSP::Reference* p = _impl_.old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::old_value() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.old_value)
  return _internal_old_value();
}
inline void StyleSwapUndoTupleArchive::unsafe_arena_set_allocated_old_value(
    ::TSP::Reference* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_value_);
  }
  _impl_.old_value_ = old_value;
  if (old_value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StyleSwapUndoTupleArchive.old_value)
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_old_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:TSCH.StyleSwapUndoTupleArchive.old_value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::_internal_mutable_old_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_value_ = p;
  }
  return _impl_.old_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_old_value() {
  ::TSP::Reference* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTupleArchive.old_value)
  return _msg;
}
inline void StyleSwapUndoTupleArchive::set_allocated_old_value(::TSP::Reference* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_value_);
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_value));
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StyleSwapUndoTupleArchive.old_value)
}

// optional .TSP.Reference new_value = 5;
inline bool StyleSwapUndoTupleArchive::_internal_has_new_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_value_ != nullptr);
  return value;
}
inline bool StyleSwapUndoTupleArchive::has_new_value() const {
  return _internal_has_new_value();
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::_internal_new_value() const {
  const ::TSP::Reference* p = _impl_.new_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleSwapUndoTupleArchive::new_value() const {
  // @@protoc_insertion_point(field_get:TSCH.StyleSwapUndoTupleArchive.new_value)
  return _internal_new_value();
}
inline void StyleSwapUndoTupleArchive::unsafe_arena_set_allocated_new_value(
    ::TSP::Reference* new_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_value_);
  }
  _impl_.new_value_ = new_value;
  if (new_value) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StyleSwapUndoTupleArchive.new_value)
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::release_new_value() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.new_value_;
  _impl_.new_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::unsafe_arena_release_new_value() {
  // @@protoc_insertion_point(field_release:TSCH.StyleSwapUndoTupleArchive.new_value)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.new_value_;
  _impl_.new_value_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::_internal_mutable_new_value() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_value_ = p;
  }
  return _impl_.new_value_;
}
inline ::TSP::Reference* StyleSwapUndoTupleArchive::mutable_new_value() {
  ::TSP::Reference* _msg = _internal_mutable_new_value();
  // @@protoc_insertion_point(field_mutable:TSCH.StyleSwapUndoTupleArchive.new_value)
  return _msg;
}
inline void StyleSwapUndoTupleArchive::set_allocated_new_value(::TSP::Reference* new_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_value_);
  }
  if (new_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_value));
    if (message_arena != submessage_arena) {
      new_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StyleSwapUndoTupleArchive.new_value)
}

// -------------------------------------------------------------------

// CommandStyleSwapArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandStyleSwapArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandStyleSwapArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandStyleSwapArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandStyleSwapArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandStyleSwapArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandStyleSwapArchive.super)
  return _internal_super();
}
inline void CommandStyleSwapArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandStyleSwapArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandStyleSwapArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandStyleSwapArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandStyleSwapArchive.super)
  return _msg;
}
inline void CommandStyleSwapArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandStyleSwapArchive.super)
}

// repeated .TSCH.StyleSwapUndoTupleArchive undo_tuples = 2;
inline int CommandStyleSwapArchive::_internal_undo_tuples_size() const {
  return _impl_.undo_tuples_.size();
}
inline int CommandStyleSwapArchive::undo_tuples_size() const {
  return _internal_undo_tuples_size();
}
inline void CommandStyleSwapArchive::clear_undo_tuples() {
  _impl_.undo_tuples_.Clear();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::mutable_undo_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandStyleSwapArchive.undo_tuples)
  return _impl_.undo_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >*
CommandStyleSwapArchive::mutable_undo_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandStyleSwapArchive.undo_tuples)
  return &_impl_.undo_tuples_;
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandStyleSwapArchive::_internal_undo_tuples(int index) const {
  return _impl_.undo_tuples_.Get(index);
}
inline const ::TSCH::StyleSwapUndoTupleArchive& CommandStyleSwapArchive::undo_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandStyleSwapArchive.undo_tuples)
  return _internal_undo_tuples(index);
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::_internal_add_undo_tuples() {
  return _impl_.undo_tuples_.Add();
}
inline ::TSCH::StyleSwapUndoTupleArchive* CommandStyleSwapArchive::add_undo_tuples() {
  ::TSCH::StyleSwapUndoTupleArchive* _add = _internal_add_undo_tuples();
  // @@protoc_insertion_point(field_add:TSCH.CommandStyleSwapArchive.undo_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::StyleSwapUndoTupleArchive >&
CommandStyleSwapArchive::undo_tuples() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandStyleSwapArchive.undo_tuples)
  return _impl_.undo_tuples_;
}

// -------------------------------------------------------------------

// CommandSetSeriesNameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetSeriesNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetSeriesNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetSeriesNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesNameArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.super)
  return _internal_super();
}
inline void CommandSetSeriesNameArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetSeriesNameArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesNameArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesNameArchive.super)
  return _msg;
}
inline void CommandSetSeriesNameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesNameArchive.super)
}

// required uint32 seriesIndex = 2;
inline bool CommandSetSeriesNameArchive::_internal_has_seriesindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetSeriesNameArchive::has_seriesindex() const {
  return _internal_has_seriesindex();
}
inline void CommandSetSeriesNameArchive::clear_seriesindex() {
  _impl_.seriesindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSetSeriesNameArchive::_internal_seriesindex() const {
  return _impl_.seriesindex_;
}
inline uint32_t CommandSetSeriesNameArchive::seriesindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.seriesIndex)
  return _internal_seriesindex();
}
inline void CommandSetSeriesNameArchive::_internal_set_seriesindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seriesindex_ = value;
}
inline void CommandSetSeriesNameArchive::set_seriesindex(uint32_t value) {
  _internal_set_seriesindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesNameArchive.seriesIndex)
}

// required string oldName = 3;
inline bool CommandSetSeriesNameArchive::_internal_has_oldname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetSeriesNameArchive::has_oldname() const {
  return _internal_has_oldname();
}
inline void CommandSetSeriesNameArchive::clear_oldname() {
  _impl_.oldname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetSeriesNameArchive::oldname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.oldName)
  return _internal_oldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetSeriesNameArchive::set_oldname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.oldname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesNameArchive.oldName)
}
inline std::string* CommandSetSeriesNameArchive::mutable_oldname() {
  std::string* _s = _internal_mutable_oldname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesNameArchive.oldName)
  return _s;
}
inline const std::string& CommandSetSeriesNameArchive::_internal_oldname() const {
  return _impl_.oldname_.Get();
}
inline void CommandSetSeriesNameArchive::_internal_set_oldname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.oldname_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::_internal_mutable_oldname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.oldname_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::release_oldname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesNameArchive.oldName)
  if (!_internal_has_oldname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.oldname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldname_.IsDefault()) {
    _impl_.oldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetSeriesNameArchive::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.oldname_.SetAllocated(oldname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldname_.IsDefault()) {
    _impl_.oldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesNameArchive.oldName)
}

// required string newName = 4;
inline bool CommandSetSeriesNameArchive::_internal_has_newname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetSeriesNameArchive::has_newname() const {
  return _internal_has_newname();
}
inline void CommandSetSeriesNameArchive::clear_newname() {
  _impl_.newname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetSeriesNameArchive::newname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesNameArchive.newName)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetSeriesNameArchive::set_newname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.newname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesNameArchive.newName)
}
inline std::string* CommandSetSeriesNameArchive::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesNameArchive.newName)
  return _s;
}
inline const std::string& CommandSetSeriesNameArchive::_internal_newname() const {
  return _impl_.newname_.Get();
}
inline void CommandSetSeriesNameArchive::_internal_set_newname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.newname_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::_internal_mutable_newname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.newname_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetSeriesNameArchive::release_newname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesNameArchive.newName)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.newname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetSeriesNameArchive::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newname_.SetAllocated(newname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesNameArchive.newName)
}

// -------------------------------------------------------------------

// CommandSetCategoryNameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetCategoryNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetCategoryNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetCategoryNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetCategoryNameArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetCategoryNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.super)
  return _internal_super();
}
inline void CommandSetCategoryNameArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetCategoryNameArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetCategoryNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetCategoryNameArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetCategoryNameArchive.super)
  return _msg;
}
inline void CommandSetCategoryNameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetCategoryNameArchive.super)
}

// required uint32 categoryIndex = 2;
inline bool CommandSetCategoryNameArchive::_internal_has_categoryindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_categoryindex() const {
  return _internal_has_categoryindex();
}
inline void CommandSetCategoryNameArchive::clear_categoryindex() {
  _impl_.categoryindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSetCategoryNameArchive::_internal_categoryindex() const {
  return _impl_.categoryindex_;
}
inline uint32_t CommandSetCategoryNameArchive::categoryindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.categoryIndex)
  return _internal_categoryindex();
}
inline void CommandSetCategoryNameArchive::_internal_set_categoryindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.categoryindex_ = value;
}
inline void CommandSetCategoryNameArchive::set_categoryindex(uint32_t value) {
  _internal_set_categoryindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.categoryIndex)
}

// required string oldName = 3;
inline bool CommandSetCategoryNameArchive::_internal_has_oldname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_oldname() const {
  return _internal_has_oldname();
}
inline void CommandSetCategoryNameArchive::clear_oldname() {
  _impl_.oldname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetCategoryNameArchive::oldname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.oldName)
  return _internal_oldname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetCategoryNameArchive::set_oldname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.oldname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.oldName)
}
inline std::string* CommandSetCategoryNameArchive::mutable_oldname() {
  std::string* _s = _internal_mutable_oldname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetCategoryNameArchive.oldName)
  return _s;
}
inline const std::string& CommandSetCategoryNameArchive::_internal_oldname() const {
  return _impl_.oldname_.Get();
}
inline void CommandSetCategoryNameArchive::_internal_set_oldname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.oldname_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::_internal_mutable_oldname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.oldname_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::release_oldname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetCategoryNameArchive.oldName)
  if (!_internal_has_oldname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.oldname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldname_.IsDefault()) {
    _impl_.oldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetCategoryNameArchive::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.oldname_.SetAllocated(oldname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldname_.IsDefault()) {
    _impl_.oldname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetCategoryNameArchive.oldName)
}

// required string newName = 4;
inline bool CommandSetCategoryNameArchive::_internal_has_newname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_newname() const {
  return _internal_has_newname();
}
inline void CommandSetCategoryNameArchive::clear_newname() {
  _impl_.newname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetCategoryNameArchive::newname() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.newName)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetCategoryNameArchive::set_newname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.newname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.newName)
}
inline std::string* CommandSetCategoryNameArchive::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetCategoryNameArchive.newName)
  return _s;
}
inline const std::string& CommandSetCategoryNameArchive::_internal_newname() const {
  return _impl_.newname_.Get();
}
inline void CommandSetCategoryNameArchive::_internal_set_newname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.newname_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::_internal_mutable_newname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.newname_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetCategoryNameArchive::release_newname() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetCategoryNameArchive.newName)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.newname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetCategoryNameArchive::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newname_.SetAllocated(newname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetCategoryNameArchive.newName)
}

// optional bool isMultiDataIndex = 5;
inline bool CommandSetCategoryNameArchive::_internal_has_ismultidataindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetCategoryNameArchive::has_ismultidataindex() const {
  return _internal_has_ismultidataindex();
}
inline void CommandSetCategoryNameArchive::clear_ismultidataindex() {
  _impl_.ismultidataindex_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetCategoryNameArchive::_internal_ismultidataindex() const {
  return _impl_.ismultidataindex_;
}
inline bool CommandSetCategoryNameArchive::ismultidataindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetCategoryNameArchive.isMultiDataIndex)
  return _internal_ismultidataindex();
}
inline void CommandSetCategoryNameArchive::_internal_set_ismultidataindex(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ismultidataindex_ = value;
}
inline void CommandSetCategoryNameArchive::set_ismultidataindex(bool value) {
  _internal_set_ismultidataindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetCategoryNameArchive.isMultiDataIndex)
}

// -------------------------------------------------------------------

// CommandAddGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandAddGridRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandAddGridRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAddGridRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridRowsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.super)
  return _internal_super();
}
inline void CommandAddGridRowsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridRowsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridRowsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.super)
  return _msg;
}
inline void CommandAddGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridRowsArchive.super)
}

// required uint32 location = 2;
inline bool CommandAddGridRowsArchive::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandAddGridRowsArchive::has_location() const {
  return _internal_has_location();
}
inline void CommandAddGridRowsArchive::clear_location() {
  _impl_.location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandAddGridRowsArchive::_internal_location() const {
  return _impl_.location_;
}
inline uint32_t CommandAddGridRowsArchive::location() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.location)
  return _internal_location();
}
inline void CommandAddGridRowsArchive::_internal_set_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_ = value;
}
inline void CommandAddGridRowsArchive::set_location(uint32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridRowsArchive.location)
}

// optional uint32 length = 3;
inline bool CommandAddGridRowsArchive::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandAddGridRowsArchive::has_length() const {
  return _internal_has_length();
}
inline void CommandAddGridRowsArchive::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandAddGridRowsArchive::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t CommandAddGridRowsArchive::length() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.length)
  return _internal_length();
}
inline void CommandAddGridRowsArchive::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}
inline void CommandAddGridRowsArchive::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridRowsArchive.length)
}

// repeated string name = 4;
inline int CommandAddGridRowsArchive::_internal_name_size() const {
  return _impl_.name_.size();
}
inline int CommandAddGridRowsArchive::name_size() const {
  return _internal_name_size();
}
inline void CommandAddGridRowsArchive::clear_name() {
  _impl_.name_.Clear();
}
inline std::string* CommandAddGridRowsArchive::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandAddGridRowsArchive.name)
  return _s;
}
inline const std::string& CommandAddGridRowsArchive::_internal_name(int index) const {
  return _impl_.name_.Get(index);
}
inline const std::string& CommandAddGridRowsArchive::name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridRowsArchive.name)
  return _internal_name(index);
}
inline std::string* CommandAddGridRowsArchive::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridRowsArchive.name)
  return _impl_.name_.Mutable(index);
}
inline void CommandAddGridRowsArchive::set_name(int index, const std::string& value) {
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridRowsArchive.name)
}
inline void CommandAddGridRowsArchive::set_name(int index, std::string&& value) {
  _impl_.name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridRowsArchive.name)
}
inline void CommandAddGridRowsArchive::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandAddGridRowsArchive.name)
}
inline void CommandAddGridRowsArchive::set_name(int index, const char* value, size_t size) {
  _impl_.name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandAddGridRowsArchive.name)
}
inline std::string* CommandAddGridRowsArchive::_internal_add_name() {
  return _impl_.name_.Add();
}
inline void CommandAddGridRowsArchive::add_name(const std::string& value) {
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridRowsArchive.name)
}
inline void CommandAddGridRowsArchive::add_name(std::string&& value) {
  _impl_.name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridRowsArchive.name)
}
inline void CommandAddGridRowsArchive::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandAddGridRowsArchive.name)
}
inline void CommandAddGridRowsArchive::add_name(const char* value, size_t size) {
  _impl_.name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandAddGridRowsArchive.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandAddGridRowsArchive::name() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddGridRowsArchive.name)
  return _impl_.name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandAddGridRowsArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddGridRowsArchive.name)
  return &_impl_.name_;
}

// -------------------------------------------------------------------

// CommandAddGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandAddGridColumnsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandAddGridColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAddGridColumnsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridColumnsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandAddGridColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.super)
  return _internal_super();
}
inline void CommandAddGridColumnsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandAddGridColumnsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandAddGridColumnsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandAddGridColumnsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.super)
  return _msg;
}
inline void CommandAddGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandAddGridColumnsArchive.super)
}

// required uint32 location = 2;
inline bool CommandAddGridColumnsArchive::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandAddGridColumnsArchive::has_location() const {
  return _internal_has_location();
}
inline void CommandAddGridColumnsArchive::clear_location() {
  _impl_.location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandAddGridColumnsArchive::_internal_location() const {
  return _impl_.location_;
}
inline uint32_t CommandAddGridColumnsArchive::location() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.location)
  return _internal_location();
}
inline void CommandAddGridColumnsArchive::_internal_set_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_ = value;
}
inline void CommandAddGridColumnsArchive::set_location(uint32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridColumnsArchive.location)
}

// optional uint32 length = 3;
inline bool CommandAddGridColumnsArchive::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandAddGridColumnsArchive::has_length() const {
  return _internal_has_length();
}
inline void CommandAddGridColumnsArchive::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandAddGridColumnsArchive::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t CommandAddGridColumnsArchive::length() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.length)
  return _internal_length();
}
inline void CommandAddGridColumnsArchive::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}
inline void CommandAddGridColumnsArchive::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridColumnsArchive.length)
}

// repeated string name = 4;
inline int CommandAddGridColumnsArchive::_internal_name_size() const {
  return _impl_.name_.size();
}
inline int CommandAddGridColumnsArchive::name_size() const {
  return _internal_name_size();
}
inline void CommandAddGridColumnsArchive::clear_name() {
  _impl_.name_.Clear();
}
inline std::string* CommandAddGridColumnsArchive::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandAddGridColumnsArchive.name)
  return _s;
}
inline const std::string& CommandAddGridColumnsArchive::_internal_name(int index) const {
  return _impl_.name_.Get(index);
}
inline const std::string& CommandAddGridColumnsArchive::name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandAddGridColumnsArchive.name)
  return _internal_name(index);
}
inline std::string* CommandAddGridColumnsArchive::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandAddGridColumnsArchive.name)
  return _impl_.name_.Mutable(index);
}
inline void CommandAddGridColumnsArchive::set_name(int index, const std::string& value) {
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridColumnsArchive.name)
}
inline void CommandAddGridColumnsArchive::set_name(int index, std::string&& value) {
  _impl_.name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandAddGridColumnsArchive.name)
}
inline void CommandAddGridColumnsArchive::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandAddGridColumnsArchive.name)
}
inline void CommandAddGridColumnsArchive::set_name(int index, const char* value, size_t size) {
  _impl_.name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandAddGridColumnsArchive.name)
}
inline std::string* CommandAddGridColumnsArchive::_internal_add_name() {
  return _impl_.name_.Add();
}
inline void CommandAddGridColumnsArchive::add_name(const std::string& value) {
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridColumnsArchive.name)
}
inline void CommandAddGridColumnsArchive::add_name(std::string&& value) {
  _impl_.name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandAddGridColumnsArchive.name)
}
inline void CommandAddGridColumnsArchive::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandAddGridColumnsArchive.name)
}
inline void CommandAddGridColumnsArchive::add_name(const char* value, size_t size) {
  _impl_.name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandAddGridColumnsArchive.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandAddGridColumnsArchive::name() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandAddGridColumnsArchive.name)
  return _impl_.name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandAddGridColumnsArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandAddGridColumnsArchive.name)
  return &_impl_.name_;
}

// -------------------------------------------------------------------

// CommandMoveGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandMoveGridRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMoveGridRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveGridRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridRowsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.super)
  return _internal_super();
}
inline void CommandMoveGridRowsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridRowsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridRowsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridRowsArchive.super)
  return _msg;
}
inline void CommandMoveGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridRowsArchive.super)
}

// required uint32 location = 2;
inline bool CommandMoveGridRowsArchive::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandMoveGridRowsArchive::has_location() const {
  return _internal_has_location();
}
inline void CommandMoveGridRowsArchive::clear_location() {
  _impl_.location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandMoveGridRowsArchive::_internal_location() const {
  return _impl_.location_;
}
inline uint32_t CommandMoveGridRowsArchive::location() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.location)
  return _internal_location();
}
inline void CommandMoveGridRowsArchive::_internal_set_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_ = value;
}
inline void CommandMoveGridRowsArchive::set_location(uint32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMoveGridRowsArchive.location)
}

// required uint32 length = 3;
inline bool CommandMoveGridRowsArchive::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandMoveGridRowsArchive::has_length() const {
  return _internal_has_length();
}
inline void CommandMoveGridRowsArchive::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandMoveGridRowsArchive::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t CommandMoveGridRowsArchive::length() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.length)
  return _internal_length();
}
inline void CommandMoveGridRowsArchive::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}
inline void CommandMoveGridRowsArchive::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMoveGridRowsArchive.length)
}

// required int32 afterrow = 4;
inline bool CommandMoveGridRowsArchive::_internal_has_afterrow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandMoveGridRowsArchive::has_afterrow() const {
  return _internal_has_afterrow();
}
inline void CommandMoveGridRowsArchive::clear_afterrow() {
  _impl_.afterrow_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CommandMoveGridRowsArchive::_internal_afterrow() const {
  return _impl_.afterrow_;
}
inline int32_t CommandMoveGridRowsArchive::afterrow() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridRowsArchive.afterrow)
  return _internal_afterrow();
}
inline void CommandMoveGridRowsArchive::_internal_set_afterrow(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.afterrow_ = value;
}
inline void CommandMoveGridRowsArchive::set_afterrow(int32_t value) {
  _internal_set_afterrow(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMoveGridRowsArchive.afterrow)
}

// -------------------------------------------------------------------

// CommandMoveGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandMoveGridColumnsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveGridColumnsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridColumnsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandMoveGridColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.super)
  return _internal_super();
}
inline void CommandMoveGridColumnsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandMoveGridColumnsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandMoveGridColumnsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandMoveGridColumnsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandMoveGridColumnsArchive.super)
  return _msg;
}
inline void CommandMoveGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandMoveGridColumnsArchive.super)
}

// required uint32 location = 2;
inline bool CommandMoveGridColumnsArchive::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_location() const {
  return _internal_has_location();
}
inline void CommandMoveGridColumnsArchive::clear_location() {
  _impl_.location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandMoveGridColumnsArchive::_internal_location() const {
  return _impl_.location_;
}
inline uint32_t CommandMoveGridColumnsArchive::location() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.location)
  return _internal_location();
}
inline void CommandMoveGridColumnsArchive::_internal_set_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_ = value;
}
inline void CommandMoveGridColumnsArchive::set_location(uint32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMoveGridColumnsArchive.location)
}

// required uint32 length = 3;
inline bool CommandMoveGridColumnsArchive::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_length() const {
  return _internal_has_length();
}
inline void CommandMoveGridColumnsArchive::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandMoveGridColumnsArchive::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t CommandMoveGridColumnsArchive::length() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.length)
  return _internal_length();
}
inline void CommandMoveGridColumnsArchive::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}
inline void CommandMoveGridColumnsArchive::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMoveGridColumnsArchive.length)
}

// required int32 aftercolumn = 4;
inline bool CommandMoveGridColumnsArchive::_internal_has_aftercolumn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandMoveGridColumnsArchive::has_aftercolumn() const {
  return _internal_has_aftercolumn();
}
inline void CommandMoveGridColumnsArchive::clear_aftercolumn() {
  _impl_.aftercolumn_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CommandMoveGridColumnsArchive::_internal_aftercolumn() const {
  return _impl_.aftercolumn_;
}
inline int32_t CommandMoveGridColumnsArchive::aftercolumn() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandMoveGridColumnsArchive.aftercolumn)
  return _internal_aftercolumn();
}
inline void CommandMoveGridColumnsArchive::_internal_set_aftercolumn(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.aftercolumn_ = value;
}
inline void CommandMoveGridColumnsArchive::set_aftercolumn(int32_t value) {
  _internal_set_aftercolumn(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandMoveGridColumnsArchive.aftercolumn)
}

// -------------------------------------------------------------------

// CommandDeleteGridRowsArchive_ValueRow

// repeated double value = 5;
inline int CommandDeleteGridRowsArchive_ValueRow::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int CommandDeleteGridRowsArchive_ValueRow::value_size() const {
  return _internal_value_size();
}
inline void CommandDeleteGridRowsArchive_ValueRow::clear_value() {
  _impl_.value_.Clear();
}
inline double CommandDeleteGridRowsArchive_ValueRow::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline double CommandDeleteGridRowsArchive_ValueRow::value(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.ValueRow.value)
  return _internal_value(index);
}
inline void CommandDeleteGridRowsArchive_ValueRow::set_value(int index, double value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.ValueRow.value)
}
inline void CommandDeleteGridRowsArchive_ValueRow::_internal_add_value(double value) {
  _impl_.value_.Add(value);
}
inline void CommandDeleteGridRowsArchive_ValueRow::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.ValueRow.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandDeleteGridRowsArchive_ValueRow::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandDeleteGridRowsArchive_ValueRow::value() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.ValueRow.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandDeleteGridRowsArchive_ValueRow::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandDeleteGridRowsArchive_ValueRow::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.ValueRow.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// CommandDeleteGridRowsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandDeleteGridRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteGridRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridRowsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.super)
  return _internal_super();
}
inline void CommandDeleteGridRowsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridRowsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridRowsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.super)
  return _msg;
}
inline void CommandDeleteGridRowsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridRowsArchive.super)
}

// required uint32 location = 2;
inline bool CommandDeleteGridRowsArchive::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_location() const {
  return _internal_has_location();
}
inline void CommandDeleteGridRowsArchive::clear_location() {
  _impl_.location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandDeleteGridRowsArchive::_internal_location() const {
  return _impl_.location_;
}
inline uint32_t CommandDeleteGridRowsArchive::location() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.location)
  return _internal_location();
}
inline void CommandDeleteGridRowsArchive::_internal_set_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_ = value;
}
inline void CommandDeleteGridRowsArchive::set_location(uint32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.location)
}

// required uint32 length = 3;
inline bool CommandDeleteGridRowsArchive::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_length() const {
  return _internal_has_length();
}
inline void CommandDeleteGridRowsArchive::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandDeleteGridRowsArchive::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t CommandDeleteGridRowsArchive::length() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.length)
  return _internal_length();
}
inline void CommandDeleteGridRowsArchive::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}
inline void CommandDeleteGridRowsArchive::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.length)
}

// repeated string names = 4;
inline int CommandDeleteGridRowsArchive::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int CommandDeleteGridRowsArchive::names_size() const {
  return _internal_names_size();
}
inline void CommandDeleteGridRowsArchive::clear_names() {
  _impl_.names_.Clear();
}
inline std::string* CommandDeleteGridRowsArchive::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridRowsArchive.names)
  return _s;
}
inline const std::string& CommandDeleteGridRowsArchive::_internal_names(int index) const {
  return _impl_.names_.Get(index);
}
inline const std::string& CommandDeleteGridRowsArchive::names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.names)
  return _internal_names(index);
}
inline std::string* CommandDeleteGridRowsArchive::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.names)
  return _impl_.names_.Mutable(index);
}
inline void CommandDeleteGridRowsArchive::set_names(int index, const std::string& value) {
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.names)
}
inline void CommandDeleteGridRowsArchive::set_names(int index, std::string&& value) {
  _impl_.names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.names)
}
inline void CommandDeleteGridRowsArchive::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridRowsArchive.names)
}
inline void CommandDeleteGridRowsArchive::set_names(int index, const char* value, size_t size) {
  _impl_.names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridRowsArchive.names)
}
inline std::string* CommandDeleteGridRowsArchive::_internal_add_names() {
  return _impl_.names_.Add();
}
inline void CommandDeleteGridRowsArchive::add_names(const std::string& value) {
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.names)
}
inline void CommandDeleteGridRowsArchive::add_names(std::string&& value) {
  _impl_.names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.names)
}
inline void CommandDeleteGridRowsArchive::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridRowsArchive.names)
}
inline void CommandDeleteGridRowsArchive::add_names(const char* value, size_t size) {
  _impl_.names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridRowsArchive.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridRowsArchive::names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.names)
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridRowsArchive::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.names)
  return &_impl_.names_;
}

// repeated .TSCH.CommandDeleteGridRowsArchive.ValueRow value_row = 6;
inline int CommandDeleteGridRowsArchive::_internal_value_row_size() const {
  return _impl_.value_row_.size();
}
inline int CommandDeleteGridRowsArchive::value_row_size() const {
  return _internal_value_row_size();
}
inline void CommandDeleteGridRowsArchive::clear_value_row() {
  _impl_.value_row_.Clear();
}
inline ::TSCH::CommandDeleteGridRowsArchive_ValueRow* CommandDeleteGridRowsArchive::mutable_value_row(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.value_row)
  return _impl_.value_row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >*
CommandDeleteGridRowsArchive::mutable_value_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.value_row)
  return &_impl_.value_row_;
}
inline const ::TSCH::CommandDeleteGridRowsArchive_ValueRow& CommandDeleteGridRowsArchive::_internal_value_row(int index) const {
  return _impl_.value_row_.Get(index);
}
inline const ::TSCH::CommandDeleteGridRowsArchive_ValueRow& CommandDeleteGridRowsArchive::value_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.value_row)
  return _internal_value_row(index);
}
inline ::TSCH::CommandDeleteGridRowsArchive_ValueRow* CommandDeleteGridRowsArchive::_internal_add_value_row() {
  return _impl_.value_row_.Add();
}
inline ::TSCH::CommandDeleteGridRowsArchive_ValueRow* CommandDeleteGridRowsArchive::add_value_row() {
  ::TSCH::CommandDeleteGridRowsArchive_ValueRow* _add = _internal_add_value_row();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.value_row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridRowsArchive_ValueRow >&
CommandDeleteGridRowsArchive::value_row() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.value_row)
  return _impl_.value_row_;
}

// optional bool removed_all_rows = 7;
inline bool CommandDeleteGridRowsArchive::_internal_has_removed_all_rows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandDeleteGridRowsArchive::has_removed_all_rows() const {
  return _internal_has_removed_all_rows();
}
inline void CommandDeleteGridRowsArchive::clear_removed_all_rows() {
  _impl_.removed_all_rows_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandDeleteGridRowsArchive::_internal_removed_all_rows() const {
  return _impl_.removed_all_rows_;
}
inline bool CommandDeleteGridRowsArchive::removed_all_rows() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.removed_all_rows)
  return _internal_removed_all_rows();
}
inline void CommandDeleteGridRowsArchive::_internal_set_removed_all_rows(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.removed_all_rows_ = value;
}
inline void CommandDeleteGridRowsArchive::set_removed_all_rows(bool value) {
  _internal_set_removed_all_rows(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.removed_all_rows)
}

// repeated string column_names = 8;
inline int CommandDeleteGridRowsArchive::_internal_column_names_size() const {
  return _impl_.column_names_.size();
}
inline int CommandDeleteGridRowsArchive::column_names_size() const {
  return _internal_column_names_size();
}
inline void CommandDeleteGridRowsArchive::clear_column_names() {
  _impl_.column_names_.Clear();
}
inline std::string* CommandDeleteGridRowsArchive::add_column_names() {
  std::string* _s = _internal_add_column_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridRowsArchive.column_names)
  return _s;
}
inline const std::string& CommandDeleteGridRowsArchive::_internal_column_names(int index) const {
  return _impl_.column_names_.Get(index);
}
inline const std::string& CommandDeleteGridRowsArchive::column_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridRowsArchive.column_names)
  return _internal_column_names(index);
}
inline std::string* CommandDeleteGridRowsArchive::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridRowsArchive.column_names)
  return _impl_.column_names_.Mutable(index);
}
inline void CommandDeleteGridRowsArchive::set_column_names(int index, const std::string& value) {
  _impl_.column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline void CommandDeleteGridRowsArchive::set_column_names(int index, std::string&& value) {
  _impl_.column_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline void CommandDeleteGridRowsArchive::set_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline void CommandDeleteGridRowsArchive::set_column_names(int index, const char* value, size_t size) {
  _impl_.column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline std::string* CommandDeleteGridRowsArchive::_internal_add_column_names() {
  return _impl_.column_names_.Add();
}
inline void CommandDeleteGridRowsArchive::add_column_names(const std::string& value) {
  _impl_.column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline void CommandDeleteGridRowsArchive::add_column_names(std::string&& value) {
  _impl_.column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline void CommandDeleteGridRowsArchive::add_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline void CommandDeleteGridRowsArchive::add_column_names(const char* value, size_t size) {
  _impl_.column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridRowsArchive.column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridRowsArchive::column_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridRowsArchive.column_names)
  return _impl_.column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridRowsArchive::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridRowsArchive.column_names)
  return &_impl_.column_names_;
}

// -------------------------------------------------------------------

// CommandDeleteGridColumnsArchive_ValueRow

// repeated double value = 5;
inline int CommandDeleteGridColumnsArchive_ValueRow::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int CommandDeleteGridColumnsArchive_ValueRow::value_size() const {
  return _internal_value_size();
}
inline void CommandDeleteGridColumnsArchive_ValueRow::clear_value() {
  _impl_.value_.Clear();
}
inline double CommandDeleteGridColumnsArchive_ValueRow::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline double CommandDeleteGridColumnsArchive_ValueRow::value(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.ValueRow.value)
  return _internal_value(index);
}
inline void CommandDeleteGridColumnsArchive_ValueRow::set_value(int index, double value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.ValueRow.value)
}
inline void CommandDeleteGridColumnsArchive_ValueRow::_internal_add_value(double value) {
  _impl_.value_.Add(value);
}
inline void CommandDeleteGridColumnsArchive_ValueRow::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.ValueRow.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandDeleteGridColumnsArchive_ValueRow::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandDeleteGridColumnsArchive_ValueRow::value() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.ValueRow.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandDeleteGridColumnsArchive_ValueRow::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandDeleteGridColumnsArchive_ValueRow::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.ValueRow.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// CommandDeleteGridColumnsArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandDeleteGridColumnsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteGridColumnsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridColumnsArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandDeleteGridColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.super)
  return _internal_super();
}
inline void CommandDeleteGridColumnsArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandDeleteGridColumnsArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandDeleteGridColumnsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandDeleteGridColumnsArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.super)
  return _msg;
}
inline void CommandDeleteGridColumnsArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandDeleteGridColumnsArchive.super)
}

// required uint32 location = 2;
inline bool CommandDeleteGridColumnsArchive::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_location() const {
  return _internal_has_location();
}
inline void CommandDeleteGridColumnsArchive::clear_location() {
  _impl_.location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandDeleteGridColumnsArchive::_internal_location() const {
  return _impl_.location_;
}
inline uint32_t CommandDeleteGridColumnsArchive::location() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.location)
  return _internal_location();
}
inline void CommandDeleteGridColumnsArchive::_internal_set_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.location_ = value;
}
inline void CommandDeleteGridColumnsArchive::set_location(uint32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.location)
}

// required uint32 length = 3;
inline bool CommandDeleteGridColumnsArchive::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_length() const {
  return _internal_has_length();
}
inline void CommandDeleteGridColumnsArchive::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandDeleteGridColumnsArchive::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t CommandDeleteGridColumnsArchive::length() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.length)
  return _internal_length();
}
inline void CommandDeleteGridColumnsArchive::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}
inline void CommandDeleteGridColumnsArchive::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.length)
}

// repeated string names = 4;
inline int CommandDeleteGridColumnsArchive::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int CommandDeleteGridColumnsArchive::names_size() const {
  return _internal_names_size();
}
inline void CommandDeleteGridColumnsArchive::clear_names() {
  _impl_.names_.Clear();
}
inline std::string* CommandDeleteGridColumnsArchive::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridColumnsArchive.names)
  return _s;
}
inline const std::string& CommandDeleteGridColumnsArchive::_internal_names(int index) const {
  return _impl_.names_.Get(index);
}
inline const std::string& CommandDeleteGridColumnsArchive::names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.names)
  return _internal_names(index);
}
inline std::string* CommandDeleteGridColumnsArchive::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.names)
  return _impl_.names_.Mutable(index);
}
inline void CommandDeleteGridColumnsArchive::set_names(int index, const std::string& value) {
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline void CommandDeleteGridColumnsArchive::set_names(int index, std::string&& value) {
  _impl_.names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline void CommandDeleteGridColumnsArchive::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline void CommandDeleteGridColumnsArchive::set_names(int index, const char* value, size_t size) {
  _impl_.names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline std::string* CommandDeleteGridColumnsArchive::_internal_add_names() {
  return _impl_.names_.Add();
}
inline void CommandDeleteGridColumnsArchive::add_names(const std::string& value) {
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline void CommandDeleteGridColumnsArchive::add_names(std::string&& value) {
  _impl_.names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline void CommandDeleteGridColumnsArchive::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline void CommandDeleteGridColumnsArchive::add_names(const char* value, size_t size) {
  _impl_.names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridColumnsArchive.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridColumnsArchive::names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.names)
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridColumnsArchive::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.names)
  return &_impl_.names_;
}

// repeated .TSCH.CommandDeleteGridColumnsArchive.ValueRow value_row = 6;
inline int CommandDeleteGridColumnsArchive::_internal_value_row_size() const {
  return _impl_.value_row_.size();
}
inline int CommandDeleteGridColumnsArchive::value_row_size() const {
  return _internal_value_row_size();
}
inline void CommandDeleteGridColumnsArchive::clear_value_row() {
  _impl_.value_row_.Clear();
}
inline ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* CommandDeleteGridColumnsArchive::mutable_value_row(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.value_row)
  return _impl_.value_row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >*
CommandDeleteGridColumnsArchive::mutable_value_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.value_row)
  return &_impl_.value_row_;
}
inline const ::TSCH::CommandDeleteGridColumnsArchive_ValueRow& CommandDeleteGridColumnsArchive::_internal_value_row(int index) const {
  return _impl_.value_row_.Get(index);
}
inline const ::TSCH::CommandDeleteGridColumnsArchive_ValueRow& CommandDeleteGridColumnsArchive::value_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.value_row)
  return _internal_value_row(index);
}
inline ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* CommandDeleteGridColumnsArchive::_internal_add_value_row() {
  return _impl_.value_row_.Add();
}
inline ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* CommandDeleteGridColumnsArchive::add_value_row() {
  ::TSCH::CommandDeleteGridColumnsArchive_ValueRow* _add = _internal_add_value_row();
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.value_row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandDeleteGridColumnsArchive_ValueRow >&
CommandDeleteGridColumnsArchive::value_row() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.value_row)
  return _impl_.value_row_;
}

// optional bool removed_all_columns = 7;
inline bool CommandDeleteGridColumnsArchive::_internal_has_removed_all_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandDeleteGridColumnsArchive::has_removed_all_columns() const {
  return _internal_has_removed_all_columns();
}
inline void CommandDeleteGridColumnsArchive::clear_removed_all_columns() {
  _impl_.removed_all_columns_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandDeleteGridColumnsArchive::_internal_removed_all_columns() const {
  return _impl_.removed_all_columns_;
}
inline bool CommandDeleteGridColumnsArchive::removed_all_columns() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.removed_all_columns)
  return _internal_removed_all_columns();
}
inline void CommandDeleteGridColumnsArchive::_internal_set_removed_all_columns(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.removed_all_columns_ = value;
}
inline void CommandDeleteGridColumnsArchive::set_removed_all_columns(bool value) {
  _internal_set_removed_all_columns(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.removed_all_columns)
}

// repeated string row_names = 8;
inline int CommandDeleteGridColumnsArchive::_internal_row_names_size() const {
  return _impl_.row_names_.size();
}
inline int CommandDeleteGridColumnsArchive::row_names_size() const {
  return _internal_row_names_size();
}
inline void CommandDeleteGridColumnsArchive::clear_row_names() {
  _impl_.row_names_.Clear();
}
inline std::string* CommandDeleteGridColumnsArchive::add_row_names() {
  std::string* _s = _internal_add_row_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandDeleteGridColumnsArchive.row_names)
  return _s;
}
inline const std::string& CommandDeleteGridColumnsArchive::_internal_row_names(int index) const {
  return _impl_.row_names_.Get(index);
}
inline const std::string& CommandDeleteGridColumnsArchive::row_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandDeleteGridColumnsArchive.row_names)
  return _internal_row_names(index);
}
inline std::string* CommandDeleteGridColumnsArchive::mutable_row_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandDeleteGridColumnsArchive.row_names)
  return _impl_.row_names_.Mutable(index);
}
inline void CommandDeleteGridColumnsArchive::set_row_names(int index, const std::string& value) {
  _impl_.row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline void CommandDeleteGridColumnsArchive::set_row_names(int index, std::string&& value) {
  _impl_.row_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline void CommandDeleteGridColumnsArchive::set_row_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline void CommandDeleteGridColumnsArchive::set_row_names(int index, const char* value, size_t size) {
  _impl_.row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline std::string* CommandDeleteGridColumnsArchive::_internal_add_row_names() {
  return _impl_.row_names_.Add();
}
inline void CommandDeleteGridColumnsArchive::add_row_names(const std::string& value) {
  _impl_.row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline void CommandDeleteGridColumnsArchive::add_row_names(std::string&& value) {
  _impl_.row_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline void CommandDeleteGridColumnsArchive::add_row_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline void CommandDeleteGridColumnsArchive::add_row_names(const char* value, size_t size) {
  _impl_.row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandDeleteGridColumnsArchive.row_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandDeleteGridColumnsArchive::row_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandDeleteGridColumnsArchive.row_names)
  return _impl_.row_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandDeleteGridColumnsArchive::mutable_row_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandDeleteGridColumnsArchive.row_names)
  return &_impl_.row_names_;
}

// -------------------------------------------------------------------

// CommandSetPreviewLocArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetPreviewLocArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetPreviewLocArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetPreviewLocArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetPreviewLocArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetPreviewLocArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPreviewLocArchive.super)
  return _internal_super();
}
inline void CommandSetPreviewLocArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPreviewLocArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetPreviewLocArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetPreviewLocArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPreviewLocArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetPreviewLocArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetPreviewLocArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPreviewLocArchive.super)
  return _msg;
}
inline void CommandSetPreviewLocArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPreviewLocArchive.super)
}

// required .TSP.Point old_loc = 2;
inline bool CommandSetPreviewLocArchive::_internal_has_old_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_loc_ != nullptr);
  return value;
}
inline bool CommandSetPreviewLocArchive::has_old_loc() const {
  return _internal_has_old_loc();
}
inline const ::TSP::Point& CommandSetPreviewLocArchive::_internal_old_loc() const {
  const ::TSP::Point* p = _impl_.old_loc_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& CommandSetPreviewLocArchive::old_loc() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPreviewLocArchive.old_loc)
  return _internal_old_loc();
}
inline void CommandSetPreviewLocArchive::unsafe_arena_set_allocated_old_loc(
    ::TSP::Point* old_loc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_loc_);
  }
  _impl_.old_loc_ = old_loc;
  if (old_loc) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPreviewLocArchive.old_loc)
}
inline ::TSP::Point* CommandSetPreviewLocArchive::release_old_loc() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.old_loc_;
  _impl_.old_loc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::unsafe_arena_release_old_loc() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPreviewLocArchive.old_loc)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.old_loc_;
  _impl_.old_loc_ = nullptr;
  return temp;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::_internal_mutable_old_loc() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.old_loc_ = p;
  }
  return _impl_.old_loc_;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::mutable_old_loc() {
  ::TSP::Point* _msg = _internal_mutable_old_loc();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPreviewLocArchive.old_loc)
  return _msg;
}
inline void CommandSetPreviewLocArchive::set_allocated_old_loc(::TSP::Point* old_loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_loc_);
  }
  if (old_loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_loc));
    if (message_arena != submessage_arena) {
      old_loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_loc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_loc_ = old_loc;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPreviewLocArchive.old_loc)
}

// required .TSP.Point new_loc = 3;
inline bool CommandSetPreviewLocArchive::_internal_has_new_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_loc_ != nullptr);
  return value;
}
inline bool CommandSetPreviewLocArchive::has_new_loc() const {
  return _internal_has_new_loc();
}
inline const ::TSP::Point& CommandSetPreviewLocArchive::_internal_new_loc() const {
  const ::TSP::Point* p = _impl_.new_loc_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& CommandSetPreviewLocArchive::new_loc() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPreviewLocArchive.new_loc)
  return _internal_new_loc();
}
inline void CommandSetPreviewLocArchive::unsafe_arena_set_allocated_new_loc(
    ::TSP::Point* new_loc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_loc_);
  }
  _impl_.new_loc_ = new_loc;
  if (new_loc) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPreviewLocArchive.new_loc)
}
inline ::TSP::Point* CommandSetPreviewLocArchive::release_new_loc() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Point* temp = _impl_.new_loc_;
  _impl_.new_loc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::unsafe_arena_release_new_loc() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPreviewLocArchive.new_loc)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Point* temp = _impl_.new_loc_;
  _impl_.new_loc_ = nullptr;
  return temp;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::_internal_mutable_new_loc() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.new_loc_ = p;
  }
  return _impl_.new_loc_;
}
inline ::TSP::Point* CommandSetPreviewLocArchive::mutable_new_loc() {
  ::TSP::Point* _msg = _internal_mutable_new_loc();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPreviewLocArchive.new_loc)
  return _msg;
}
inline void CommandSetPreviewLocArchive::set_allocated_new_loc(::TSP::Point* new_loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_loc_);
  }
  if (new_loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_loc));
    if (message_arena != submessage_arena) {
      new_loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_loc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_loc_ = new_loc;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPreviewLocArchive.new_loc)
}

// -------------------------------------------------------------------

// CommandSetGridValueArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetGridValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetGridValueArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetGridValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridValueArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.super)
  return _internal_super();
}
inline void CommandSetGridValueArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetGridValueArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetGridValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridValueArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetGridValueArchive.super)
  return _msg;
}
inline void CommandSetGridValueArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetGridValueArchive.super)
}

// required uint32 rowindex = 2;
inline bool CommandSetGridValueArchive::_internal_has_rowindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_rowindex() const {
  return _internal_has_rowindex();
}
inline void CommandSetGridValueArchive::clear_rowindex() {
  _impl_.rowindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetGridValueArchive::_internal_rowindex() const {
  return _impl_.rowindex_;
}
inline uint32_t CommandSetGridValueArchive::rowindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.rowindex)
  return _internal_rowindex();
}
inline void CommandSetGridValueArchive::_internal_set_rowindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rowindex_ = value;
}
inline void CommandSetGridValueArchive::set_rowindex(uint32_t value) {
  _internal_set_rowindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.rowindex)
}

// required uint32 columnindex = 3;
inline bool CommandSetGridValueArchive::_internal_has_columnindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_columnindex() const {
  return _internal_has_columnindex();
}
inline void CommandSetGridValueArchive::clear_columnindex() {
  _impl_.columnindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetGridValueArchive::_internal_columnindex() const {
  return _impl_.columnindex_;
}
inline uint32_t CommandSetGridValueArchive::columnindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.columnindex)
  return _internal_columnindex();
}
inline void CommandSetGridValueArchive::_internal_set_columnindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.columnindex_ = value;
}
inline void CommandSetGridValueArchive::set_columnindex(uint32_t value) {
  _internal_set_columnindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.columnindex)
}

// required double oldvalue = 4;
inline bool CommandSetGridValueArchive::_internal_has_oldvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_oldvalue() const {
  return _internal_has_oldvalue();
}
inline void CommandSetGridValueArchive::clear_oldvalue() {
  _impl_.oldvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double CommandSetGridValueArchive::_internal_oldvalue() const {
  return _impl_.oldvalue_;
}
inline double CommandSetGridValueArchive::oldvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.oldvalue)
  return _internal_oldvalue();
}
inline void CommandSetGridValueArchive::_internal_set_oldvalue(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.oldvalue_ = value;
}
inline void CommandSetGridValueArchive::set_oldvalue(double value) {
  _internal_set_oldvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.oldvalue)
}

// required double newvalue = 5;
inline bool CommandSetGridValueArchive::_internal_has_newvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetGridValueArchive::has_newvalue() const {
  return _internal_has_newvalue();
}
inline void CommandSetGridValueArchive::clear_newvalue() {
  _impl_.newvalue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double CommandSetGridValueArchive::_internal_newvalue() const {
  return _impl_.newvalue_;
}
inline double CommandSetGridValueArchive::newvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridValueArchive.newvalue)
  return _internal_newvalue();
}
inline void CommandSetGridValueArchive::_internal_set_newvalue(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.newvalue_ = value;
}
inline void CommandSetGridValueArchive::set_newvalue(double value) {
  _internal_set_newvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridValueArchive.newvalue)
}

// -------------------------------------------------------------------

// CommandSetGridDirectionArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetGridDirectionArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetGridDirectionArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetGridDirectionArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridDirectionArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetGridDirectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridDirectionArchive.super)
  return _internal_super();
}
inline void CommandSetGridDirectionArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetGridDirectionArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetGridDirectionArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetGridDirectionArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetGridDirectionArchive.super)
  return _msg;
}
inline void CommandSetGridDirectionArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetGridDirectionArchive.super)
}

// required uint32 old_direction = 2;
inline bool CommandSetGridDirectionArchive::_internal_has_old_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetGridDirectionArchive::has_old_direction() const {
  return _internal_has_old_direction();
}
inline void CommandSetGridDirectionArchive::clear_old_direction() {
  _impl_.old_direction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetGridDirectionArchive::_internal_old_direction() const {
  return _impl_.old_direction_;
}
inline uint32_t CommandSetGridDirectionArchive::old_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridDirectionArchive.old_direction)
  return _internal_old_direction();
}
inline void CommandSetGridDirectionArchive::_internal_set_old_direction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_direction_ = value;
}
inline void CommandSetGridDirectionArchive::set_old_direction(uint32_t value) {
  _internal_set_old_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridDirectionArchive.old_direction)
}

// required uint32 new_direction = 3;
inline bool CommandSetGridDirectionArchive::_internal_has_new_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetGridDirectionArchive::has_new_direction() const {
  return _internal_has_new_direction();
}
inline void CommandSetGridDirectionArchive::clear_new_direction() {
  _impl_.new_direction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetGridDirectionArchive::_internal_new_direction() const {
  return _impl_.new_direction_;
}
inline uint32_t CommandSetGridDirectionArchive::new_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetGridDirectionArchive.new_direction)
  return _internal_new_direction();
}
inline void CommandSetGridDirectionArchive::_internal_set_new_direction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_direction_ = value;
}
inline void CommandSetGridDirectionArchive::set_new_direction(uint32_t value) {
  _internal_set_new_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetGridDirectionArchive.new_direction)
}

// -------------------------------------------------------------------

// CommandSetSeriesTypeArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetSeriesTypeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetSeriesTypeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesTypeArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetSeriesTypeArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.super)
  return _internal_super();
}
inline void CommandSetSeriesTypeArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetSeriesTypeArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetSeriesTypeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetSeriesTypeArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetSeriesTypeArchive.super)
  return _msg;
}
inline void CommandSetSeriesTypeArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetSeriesTypeArchive.super)
}

// required uint32 seriesindex = 2;
inline bool CommandSetSeriesTypeArchive::_internal_has_seriesindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_seriesindex() const {
  return _internal_has_seriesindex();
}
inline void CommandSetSeriesTypeArchive::clear_seriesindex() {
  _impl_.seriesindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetSeriesTypeArchive::_internal_seriesindex() const {
  return _impl_.seriesindex_;
}
inline uint32_t CommandSetSeriesTypeArchive::seriesindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.seriesindex)
  return _internal_seriesindex();
}
inline void CommandSetSeriesTypeArchive::_internal_set_seriesindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.seriesindex_ = value;
}
inline void CommandSetSeriesTypeArchive::set_seriesindex(uint32_t value) {
  _internal_set_seriesindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesTypeArchive.seriesindex)
}

// required uint32 oldtype = 3;
inline bool CommandSetSeriesTypeArchive::_internal_has_oldtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_oldtype() const {
  return _internal_has_oldtype();
}
inline void CommandSetSeriesTypeArchive::clear_oldtype() {
  _impl_.oldtype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetSeriesTypeArchive::_internal_oldtype() const {
  return _impl_.oldtype_;
}
inline uint32_t CommandSetSeriesTypeArchive::oldtype() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.oldtype)
  return _internal_oldtype();
}
inline void CommandSetSeriesTypeArchive::_internal_set_oldtype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.oldtype_ = value;
}
inline void CommandSetSeriesTypeArchive::set_oldtype(uint32_t value) {
  _internal_set_oldtype(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesTypeArchive.oldtype)
}

// required uint32 newtype = 4;
inline bool CommandSetSeriesTypeArchive::_internal_has_newtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetSeriesTypeArchive::has_newtype() const {
  return _internal_has_newtype();
}
inline void CommandSetSeriesTypeArchive::clear_newtype() {
  _impl_.newtype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSetSeriesTypeArchive::_internal_newtype() const {
  return _impl_.newtype_;
}
inline uint32_t CommandSetSeriesTypeArchive::newtype() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetSeriesTypeArchive.newtype)
  return _internal_newtype();
}
inline void CommandSetSeriesTypeArchive::_internal_set_newtype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.newtype_ = value;
}
inline void CommandSetSeriesTypeArchive::set_newtype(uint32_t value) {
  _internal_set_newtype(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetSeriesTypeArchive.newtype)
}

// -------------------------------------------------------------------

// CommandSetScatterFormatArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetScatterFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetScatterFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetScatterFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetScatterFormatArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetScatterFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetScatterFormatArchive.super)
  return _internal_super();
}
inline void CommandSetScatterFormatArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetScatterFormatArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetScatterFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetScatterFormatArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetScatterFormatArchive.super)
  return _msg;
}
inline void CommandSetScatterFormatArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetScatterFormatArchive.super)
}

// required uint32 oldformat = 3;
inline bool CommandSetScatterFormatArchive::_internal_has_oldformat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetScatterFormatArchive::has_oldformat() const {
  return _internal_has_oldformat();
}
inline void CommandSetScatterFormatArchive::clear_oldformat() {
  _impl_.oldformat_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetScatterFormatArchive::_internal_oldformat() const {
  return _impl_.oldformat_;
}
inline uint32_t CommandSetScatterFormatArchive::oldformat() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetScatterFormatArchive.oldformat)
  return _internal_oldformat();
}
inline void CommandSetScatterFormatArchive::_internal_set_oldformat(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.oldformat_ = value;
}
inline void CommandSetScatterFormatArchive::set_oldformat(uint32_t value) {
  _internal_set_oldformat(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetScatterFormatArchive.oldformat)
}

// required uint32 newformat = 4;
inline bool CommandSetScatterFormatArchive::_internal_has_newformat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetScatterFormatArchive::has_newformat() const {
  return _internal_has_newformat();
}
inline void CommandSetScatterFormatArchive::clear_newformat() {
  _impl_.newformat_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetScatterFormatArchive::_internal_newformat() const {
  return _impl_.newformat_;
}
inline uint32_t CommandSetScatterFormatArchive::newformat() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetScatterFormatArchive.newformat)
  return _internal_newformat();
}
inline void CommandSetScatterFormatArchive::_internal_set_newformat(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.newformat_ = value;
}
inline void CommandSetScatterFormatArchive::set_newformat(uint32_t value) {
  _internal_set_newformat(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetScatterFormatArchive.newformat)
}

// -------------------------------------------------------------------

// CommandSetMultiDataSetIndexArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetMultiDataSetIndexArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultiDataSetIndexArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultiDataSetIndexArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetMultiDataSetIndexArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetMultiDataSetIndexArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetMultiDataSetIndexArchive.super)
  return _internal_super();
}
inline void CommandSetMultiDataSetIndexArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetMultiDataSetIndexArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetMultiDataSetIndexArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetMultiDataSetIndexArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetMultiDataSetIndexArchive.super)
  return _msg;
}
inline void CommandSetMultiDataSetIndexArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetMultiDataSetIndexArchive.super)
}

// required uint32 oldindex = 2;
inline bool CommandSetMultiDataSetIndexArchive::_internal_has_oldindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetMultiDataSetIndexArchive::has_oldindex() const {
  return _internal_has_oldindex();
}
inline void CommandSetMultiDataSetIndexArchive::clear_oldindex() {
  _impl_.oldindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetMultiDataSetIndexArchive::_internal_oldindex() const {
  return _impl_.oldindex_;
}
inline uint32_t CommandSetMultiDataSetIndexArchive::oldindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetMultiDataSetIndexArchive.oldindex)
  return _internal_oldindex();
}
inline void CommandSetMultiDataSetIndexArchive::_internal_set_oldindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.oldindex_ = value;
}
inline void CommandSetMultiDataSetIndexArchive::set_oldindex(uint32_t value) {
  _internal_set_oldindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetMultiDataSetIndexArchive.oldindex)
}

// required uint32 newindex = 3;
inline bool CommandSetMultiDataSetIndexArchive::_internal_has_newindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetMultiDataSetIndexArchive::has_newindex() const {
  return _internal_has_newindex();
}
inline void CommandSetMultiDataSetIndexArchive::clear_newindex() {
  _impl_.newindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetMultiDataSetIndexArchive::_internal_newindex() const {
  return _impl_.newindex_;
}
inline uint32_t CommandSetMultiDataSetIndexArchive::newindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetMultiDataSetIndexArchive.newindex)
  return _internal_newindex();
}
inline void CommandSetMultiDataSetIndexArchive::_internal_set_newindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.newindex_ = value;
}
inline void CommandSetMultiDataSetIndexArchive::set_newindex(uint32_t value) {
  _internal_set_newindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandSetMultiDataSetIndexArchive.newindex)
}

// -------------------------------------------------------------------

// CommandSetLegendFrameArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetLegendFrameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetLegendFrameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetLegendFrameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetLegendFrameArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetLegendFrameArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetLegendFrameArchive.super)
  return _internal_super();
}
inline void CommandSetLegendFrameArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetLegendFrameArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetLegendFrameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetLegendFrameArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetLegendFrameArchive.super)
  return _msg;
}
inline void CommandSetLegendFrameArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetLegendFrameArchive.super)
}

// required .TSCH.RectArchive old_legend_frame = 2;
inline bool CommandSetLegendFrameArchive::_internal_has_old_legend_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_legend_frame_ != nullptr);
  return value;
}
inline bool CommandSetLegendFrameArchive::has_old_legend_frame() const {
  return _internal_has_old_legend_frame();
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::_internal_old_legend_frame() const {
  const ::TSCH::RectArchive* p = _impl_.old_legend_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::old_legend_frame() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
  return _internal_old_legend_frame();
}
inline void CommandSetLegendFrameArchive::unsafe_arena_set_allocated_old_legend_frame(
    ::TSCH::RectArchive* old_legend_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_legend_frame_);
  }
  _impl_.old_legend_frame_ = old_legend_frame;
  if (old_legend_frame) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::release_old_legend_frame() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::RectArchive* temp = _impl_.old_legend_frame_;
  _impl_.old_legend_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::unsafe_arena_release_old_legend_frame() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::RectArchive* temp = _impl_.old_legend_frame_;
  _impl_.old_legend_frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::_internal_mutable_old_legend_frame() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_legend_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    _impl_.old_legend_frame_ = p;
  }
  return _impl_.old_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::mutable_old_legend_frame() {
  ::TSCH::RectArchive* _msg = _internal_mutable_old_legend_frame();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
  return _msg;
}
inline void CommandSetLegendFrameArchive::set_allocated_old_legend_frame(::TSCH::RectArchive* old_legend_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_legend_frame_);
  }
  if (old_legend_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_legend_frame));
    if (message_arena != submessage_arena) {
      old_legend_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_legend_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_legend_frame_ = old_legend_frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetLegendFrameArchive.old_legend_frame)
}

// required .TSCH.RectArchive new_legend_frame = 3;
inline bool CommandSetLegendFrameArchive::_internal_has_new_legend_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_legend_frame_ != nullptr);
  return value;
}
inline bool CommandSetLegendFrameArchive::has_new_legend_frame() const {
  return _internal_has_new_legend_frame();
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::_internal_new_legend_frame() const {
  const ::TSCH::RectArchive* p = _impl_.new_legend_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& CommandSetLegendFrameArchive::new_legend_frame() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
  return _internal_new_legend_frame();
}
inline void CommandSetLegendFrameArchive::unsafe_arena_set_allocated_new_legend_frame(
    ::TSCH::RectArchive* new_legend_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_legend_frame_);
  }
  _impl_.new_legend_frame_ = new_legend_frame;
  if (new_legend_frame) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::release_new_legend_frame() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::RectArchive* temp = _impl_.new_legend_frame_;
  _impl_.new_legend_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::unsafe_arena_release_new_legend_frame() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::RectArchive* temp = _impl_.new_legend_frame_;
  _impl_.new_legend_frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::_internal_mutable_new_legend_frame() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_legend_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    _impl_.new_legend_frame_ = p;
  }
  return _impl_.new_legend_frame_;
}
inline ::TSCH::RectArchive* CommandSetLegendFrameArchive::mutable_new_legend_frame() {
  ::TSCH::RectArchive* _msg = _internal_mutable_new_legend_frame();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
  return _msg;
}
inline void CommandSetLegendFrameArchive::set_allocated_new_legend_frame(::TSCH::RectArchive* new_legend_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_legend_frame_);
  }
  if (new_legend_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_legend_frame));
    if (message_arena != submessage_arena) {
      new_legend_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_legend_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_legend_frame_ = new_legend_frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetLegendFrameArchive.new_legend_frame)
}

// -------------------------------------------------------------------

// CommandSetPieWedgeExplosion

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandSetPieWedgeExplosion::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetPieWedgeExplosion::has_super() const {
  return _internal_has_super();
}
inline void CommandSetPieWedgeExplosion::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandSetPieWedgeExplosion::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandSetPieWedgeExplosion::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.super)
  return _internal_super();
}
inline void CommandSetPieWedgeExplosion::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPieWedgeExplosion.super)
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPieWedgeExplosion.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandSetPieWedgeExplosion::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPieWedgeExplosion.super)
  return _msg;
}
inline void CommandSetPieWedgeExplosion::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPieWedgeExplosion.super)
}

// optional .TSP.Reference info_geometry_command = 2;
inline bool CommandSetPieWedgeExplosion::_internal_has_info_geometry_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_geometry_command_ != nullptr);
  return value;
}
inline bool CommandSetPieWedgeExplosion::has_info_geometry_command() const {
  return _internal_has_info_geometry_command();
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::_internal_info_geometry_command() const {
  const ::TSP::Reference* p = _impl_.info_geometry_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::info_geometry_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.info_geometry_command)
  return _internal_info_geometry_command();
}
inline void CommandSetPieWedgeExplosion::unsafe_arena_set_allocated_info_geometry_command(
    ::TSP::Reference* info_geometry_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_geometry_command_);
  }
  _impl_.info_geometry_command_ = info_geometry_command;
  if (info_geometry_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPieWedgeExplosion.info_geometry_command)
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::release_info_geometry_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_geometry_command_;
  _impl_.info_geometry_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::unsafe_arena_release_info_geometry_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPieWedgeExplosion.info_geometry_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_geometry_command_;
  _impl_.info_geometry_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::_internal_mutable_info_geometry_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_geometry_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_geometry_command_ = p;
  }
  return _impl_.info_geometry_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::mutable_info_geometry_command() {
  ::TSP::Reference* _msg = _internal_mutable_info_geometry_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPieWedgeExplosion.info_geometry_command)
  return _msg;
}
inline void CommandSetPieWedgeExplosion::set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_geometry_command_);
  }
  if (info_geometry_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_geometry_command));
    if (message_arena != submessage_arena) {
      info_geometry_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_geometry_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_geometry_command_ = info_geometry_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPieWedgeExplosion.info_geometry_command)
}

// optional .TSP.Reference style_mutation_command = 3;
inline bool CommandSetPieWedgeExplosion::_internal_has_style_mutation_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_mutation_command_ != nullptr);
  return value;
}
inline bool CommandSetPieWedgeExplosion::has_style_mutation_command() const {
  return _internal_has_style_mutation_command();
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::_internal_style_mutation_command() const {
  const ::TSP::Reference* p = _impl_.style_mutation_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::style_mutation_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.style_mutation_command)
  return _internal_style_mutation_command();
}
inline void CommandSetPieWedgeExplosion::unsafe_arena_set_allocated_style_mutation_command(
    ::TSP::Reference* style_mutation_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_mutation_command_);
  }
  _impl_.style_mutation_command_ = style_mutation_command;
  if (style_mutation_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPieWedgeExplosion.style_mutation_command)
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::release_style_mutation_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.style_mutation_command_;
  _impl_.style_mutation_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::unsafe_arena_release_style_mutation_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPieWedgeExplosion.style_mutation_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.style_mutation_command_;
  _impl_.style_mutation_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::_internal_mutable_style_mutation_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.style_mutation_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.style_mutation_command_ = p;
  }
  return _impl_.style_mutation_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::mutable_style_mutation_command() {
  ::TSP::Reference* _msg = _internal_mutable_style_mutation_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPieWedgeExplosion.style_mutation_command)
  return _msg;
}
inline void CommandSetPieWedgeExplosion::set_allocated_style_mutation_command(::TSP::Reference* style_mutation_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_mutation_command_);
  }
  if (style_mutation_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_mutation_command));
    if (message_arena != submessage_arena) {
      style_mutation_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_mutation_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.style_mutation_command_ = style_mutation_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPieWedgeExplosion.style_mutation_command)
}

// optional .TSP.Reference anchor_attachment_command = 4;
inline bool CommandSetPieWedgeExplosion::_internal_has_anchor_attachment_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anchor_attachment_command_ != nullptr);
  return value;
}
inline bool CommandSetPieWedgeExplosion::has_anchor_attachment_command() const {
  return _internal_has_anchor_attachment_command();
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::_internal_anchor_attachment_command() const {
  const ::TSP::Reference* p = _impl_.anchor_attachment_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetPieWedgeExplosion::anchor_attachment_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandSetPieWedgeExplosion.anchor_attachment_command)
  return _internal_anchor_attachment_command();
}
inline void CommandSetPieWedgeExplosion::unsafe_arena_set_allocated_anchor_attachment_command(
    ::TSP::Reference* anchor_attachment_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_attachment_command_);
  }
  _impl_.anchor_attachment_command_ = anchor_attachment_command;
  if (anchor_attachment_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandSetPieWedgeExplosion.anchor_attachment_command)
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::release_anchor_attachment_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.anchor_attachment_command_;
  _impl_.anchor_attachment_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::unsafe_arena_release_anchor_attachment_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandSetPieWedgeExplosion.anchor_attachment_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.anchor_attachment_command_;
  _impl_.anchor_attachment_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::_internal_mutable_anchor_attachment_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.anchor_attachment_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.anchor_attachment_command_ = p;
  }
  return _impl_.anchor_attachment_command_;
}
inline ::TSP::Reference* CommandSetPieWedgeExplosion::mutable_anchor_attachment_command() {
  ::TSP::Reference* _msg = _internal_mutable_anchor_attachment_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandSetPieWedgeExplosion.anchor_attachment_command)
  return _msg;
}
inline void CommandSetPieWedgeExplosion::set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_attachment_command_);
  }
  if (anchor_attachment_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_attachment_command));
    if (message_arena != submessage_arena) {
      anchor_attachment_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_attachment_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.anchor_attachment_command_ = anchor_attachment_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandSetPieWedgeExplosion.anchor_attachment_command)
}

// -------------------------------------------------------------------

// SynchronousCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool SynchronousCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool SynchronousCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& SynchronousCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& SynchronousCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.SynchronousCommandArchive.super)
  return _internal_super();
}
inline void SynchronousCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.SynchronousCommandArchive.super)
}
inline ::TSK::CommandArchive* SynchronousCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* SynchronousCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.SynchronousCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* SynchronousCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* SynchronousCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.SynchronousCommandArchive.super)
  return _msg;
}
inline void SynchronousCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.SynchronousCommandArchive.super)
}

// required .TSP.Reference command = 2;
inline bool SynchronousCommandArchive::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.command_ != nullptr);
  return value;
}
inline bool SynchronousCommandArchive::has_command() const {
  return _internal_has_command();
}
inline const ::TSP::Reference& SynchronousCommandArchive::_internal_command() const {
  const ::TSP::Reference* p = _impl_.command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SynchronousCommandArchive::command() const {
  // @@protoc_insertion_point(field_get:TSCH.SynchronousCommandArchive.command)
  return _internal_command();
}
inline void SynchronousCommandArchive::unsafe_arena_set_allocated_command(
    ::TSP::Reference* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  _impl_.command_ = command;
  if (command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.SynchronousCommandArchive.command)
}
inline ::TSP::Reference* SynchronousCommandArchive::release_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.command_;
  _impl_.command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* SynchronousCommandArchive::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:TSCH.SynchronousCommandArchive.command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.command_;
  _impl_.command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SynchronousCommandArchive::_internal_mutable_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.command_ = p;
  }
  return _impl_.command_;
}
inline ::TSP::Reference* SynchronousCommandArchive::mutable_command() {
  ::TSP::Reference* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:TSCH.SynchronousCommandArchive.command)
  return _msg;
}
inline void SynchronousCommandArchive::set_allocated_command(::TSP::Reference* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command));
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.command_ = command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.SynchronousCommandArchive.command)
}

// -------------------------------------------------------------------

// CommandReplaceAllArchive

// required .TSK.ReplaceAllChildCommandArchive super = 1;
inline bool CommandReplaceAllArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandReplaceAllArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::ReplaceAllChildCommandArchive& CommandReplaceAllArchive::_internal_super() const {
  const ::TSK::ReplaceAllChildCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ReplaceAllChildCommandArchive&>(
      ::TSK::_ReplaceAllChildCommandArchive_default_instance_);
}
inline const ::TSK::ReplaceAllChildCommandArchive& CommandReplaceAllArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceAllArchive.super)
  return _internal_super();
}
inline void CommandReplaceAllArchive::unsafe_arena_set_allocated_super(
    ::TSK::ReplaceAllChildCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceAllArchive.super)
}
inline ::TSK::ReplaceAllChildCommandArchive* CommandReplaceAllArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::ReplaceAllChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ReplaceAllChildCommandArchive* CommandReplaceAllArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceAllArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::ReplaceAllChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::ReplaceAllChildCommandArchive* CommandReplaceAllArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ReplaceAllChildCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::ReplaceAllChildCommandArchive* CommandReplaceAllArchive::mutable_super() {
  ::TSK::ReplaceAllChildCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceAllArchive.super)
  return _msg;
}
inline void CommandReplaceAllArchive::set_allocated_super(::TSK::ReplaceAllChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceAllArchive.super)
}

// required .TSP.Reference info = 2;
inline bool CommandReplaceAllArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool CommandReplaceAllArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& CommandReplaceAllArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceAllArchive::info() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceAllArchive.info)
  return _internal_info();
}
inline void CommandReplaceAllArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceAllArchive.info)
}
inline ::TSP::Reference* CommandReplaceAllArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceAllArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceAllArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceAllArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* CommandReplaceAllArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceAllArchive.info)
  return _msg;
}
inline void CommandReplaceAllArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceAllArchive.info)
}

// repeated .TSP.Reference commands = 3;
inline int CommandReplaceAllArchive::_internal_commands_size() const {
  return _impl_.commands_.size();
}
inline int CommandReplaceAllArchive::commands_size() const {
  return _internal_commands_size();
}
inline ::TSP::Reference* CommandReplaceAllArchive::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceAllArchive.commands)
  return _impl_.commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandReplaceAllArchive::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceAllArchive.commands)
  return &_impl_.commands_;
}
inline const ::TSP::Reference& CommandReplaceAllArchive::_internal_commands(int index) const {
  return _impl_.commands_.Get(index);
}
inline const ::TSP::Reference& CommandReplaceAllArchive::commands(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceAllArchive.commands)
  return _internal_commands(index);
}
inline ::TSP::Reference* CommandReplaceAllArchive::_internal_add_commands() {
  return _impl_.commands_.Add();
}
inline ::TSP::Reference* CommandReplaceAllArchive::add_commands() {
  ::TSP::Reference* _add = _internal_add_commands();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceAllArchive.commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandReplaceAllArchive::commands() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceAllArchive.commands)
  return _impl_.commands_;
}

// -------------------------------------------------------------------

// CommandChartApplyTheme

// required .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool CommandChartApplyTheme::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandChartApplyTheme::_internal_super() const {
  const ::TSS::ApplyThemeChildCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ApplyThemeChildCommandArchive&>(
      ::TSS::_ApplyThemeChildCommandArchive_default_instance_);
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandChartApplyTheme::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.super)
  return _internal_super();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_super(
    ::TSS::ApplyThemeChildCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.super)
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandChartApplyTheme::mutable_super() {
  ::TSS::ApplyThemeChildCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.super)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.super)
}

// required .TSP.Reference info = 2;
inline bool CommandChartApplyTheme::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& CommandChartApplyTheme::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyTheme::info() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.info)
  return _internal_info();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.info)
}
inline ::TSP::Reference* CommandChartApplyTheme::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.info)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.info)
}

// optional .TSP.Reference swap_command = 3;
inline bool CommandChartApplyTheme::_internal_has_swap_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.swap_command_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_swap_command() const {
  return _internal_has_swap_command();
}
inline const ::TSP::Reference& CommandChartApplyTheme::_internal_swap_command() const {
  const ::TSP::Reference* p = _impl_.swap_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyTheme::swap_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.swap_command)
  return _internal_swap_command();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_swap_command(
    ::TSP::Reference* swap_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swap_command_);
  }
  _impl_.swap_command_ = swap_command;
  if (swap_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.swap_command)
}
inline ::TSP::Reference* CommandChartApplyTheme::release_swap_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.swap_command_;
  _impl_.swap_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::unsafe_arena_release_swap_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.swap_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.swap_command_;
  _impl_.swap_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::_internal_mutable_swap_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.swap_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.swap_command_ = p;
  }
  return _impl_.swap_command_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_swap_command() {
  ::TSP::Reference* _msg = _internal_mutable_swap_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.swap_command)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_swap_command(::TSP::Reference* swap_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swap_command_);
  }
  if (swap_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swap_command));
    if (message_arena != submessage_arena) {
      swap_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swap_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.swap_command_ = swap_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.swap_command)
}

// optional .TSP.Reference preset = 4;
inline bool CommandChartApplyTheme::_internal_has_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preset_ != nullptr);
  return value;
}
inline bool CommandChartApplyTheme::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& CommandChartApplyTheme::_internal_preset() const {
  const ::TSP::Reference* p = _impl_.preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyTheme::preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyTheme.preset)
  return _internal_preset();
}
inline void CommandChartApplyTheme::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  _impl_.preset_ = preset;
  if (preset) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyTheme.preset)
}
inline ::TSP::Reference* CommandChartApplyTheme::release_preset() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyTheme.preset)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyTheme::_internal_mutable_preset() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.preset_ = p;
  }
  return _impl_.preset_;
}
inline ::TSP::Reference* CommandChartApplyTheme::mutable_preset() {
  ::TSP::Reference* _msg = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyTheme.preset)
  return _msg;
}
inline void CommandChartApplyTheme::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset));
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyTheme.preset)
}

// -------------------------------------------------------------------

// CommandChartApplyPreset

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandChartApplyPreset::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChartApplyPreset::has_super() const {
  return _internal_has_super();
}
inline void CommandChartApplyPreset::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandChartApplyPreset::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandChartApplyPreset::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.super)
  return _internal_super();
}
inline void CommandChartApplyPreset::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyPreset.super)
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyPreset.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandChartApplyPreset::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.super)
  return _msg;
}
inline void CommandChartApplyPreset::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyPreset.super)
}

// optional .TSP.Reference swap_command = 2;
inline bool CommandChartApplyPreset::_internal_has_swap_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.swap_command_ != nullptr);
  return value;
}
inline bool CommandChartApplyPreset::has_swap_command() const {
  return _internal_has_swap_command();
}
inline const ::TSP::Reference& CommandChartApplyPreset::_internal_swap_command() const {
  const ::TSP::Reference* p = _impl_.swap_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyPreset::swap_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.swap_command)
  return _internal_swap_command();
}
inline void CommandChartApplyPreset::unsafe_arena_set_allocated_swap_command(
    ::TSP::Reference* swap_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swap_command_);
  }
  _impl_.swap_command_ = swap_command;
  if (swap_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyPreset.swap_command)
}
inline ::TSP::Reference* CommandChartApplyPreset::release_swap_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.swap_command_;
  _impl_.swap_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::unsafe_arena_release_swap_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyPreset.swap_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.swap_command_;
  _impl_.swap_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::_internal_mutable_swap_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.swap_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.swap_command_ = p;
  }
  return _impl_.swap_command_;
}
inline ::TSP::Reference* CommandChartApplyPreset::mutable_swap_command() {
  ::TSP::Reference* _msg = _internal_mutable_swap_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.swap_command)
  return _msg;
}
inline void CommandChartApplyPreset::set_allocated_swap_command(::TSP::Reference* swap_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swap_command_);
  }
  if (swap_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swap_command));
    if (message_arena != submessage_arena) {
      swap_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swap_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.swap_command_ = swap_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyPreset.swap_command)
}

// optional .TSP.Reference preset = 3;
inline bool CommandChartApplyPreset::_internal_has_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preset_ != nullptr);
  return value;
}
inline bool CommandChartApplyPreset::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& CommandChartApplyPreset::_internal_preset() const {
  const ::TSP::Reference* p = _impl_.preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandChartApplyPreset::preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.preset)
  return _internal_preset();
}
inline void CommandChartApplyPreset::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  _impl_.preset_ = preset;
  if (preset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandChartApplyPreset.preset)
}
inline ::TSP::Reference* CommandChartApplyPreset::release_preset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandChartApplyPreset.preset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandChartApplyPreset::_internal_mutable_preset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.preset_ = p;
  }
  return _impl_.preset_;
}
inline ::TSP::Reference* CommandChartApplyPreset::mutable_preset() {
  ::TSP::Reference* _msg = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandChartApplyPreset.preset)
  return _msg;
}
inline void CommandChartApplyPreset::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset));
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandChartApplyPreset.preset)
}

// optional .TSCH.ApplyPresetBehavior behavior = 4 [default = remove_overrides];
inline bool CommandChartApplyPreset::_internal_has_behavior() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandChartApplyPreset::has_behavior() const {
  return _internal_has_behavior();
}
inline void CommandChartApplyPreset::clear_behavior() {
  _impl_.behavior_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TSCH::ApplyPresetBehavior CommandChartApplyPreset::_internal_behavior() const {
  return static_cast< ::TSCH::ApplyPresetBehavior >(_impl_.behavior_);
}
inline ::TSCH::ApplyPresetBehavior CommandChartApplyPreset::behavior() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandChartApplyPreset.behavior)
  return _internal_behavior();
}
inline void CommandChartApplyPreset::_internal_set_behavior(::TSCH::ApplyPresetBehavior value) {
  assert(::TSCH::ApplyPresetBehavior_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.behavior_ = value;
}
inline void CommandChartApplyPreset::set_behavior(::TSCH::ApplyPresetBehavior value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandChartApplyPreset.behavior)
}

// -------------------------------------------------------------------

// CommandCleanupGeometryArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandCleanupGeometryArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandCleanupGeometryArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandCleanupGeometryArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandCleanupGeometryArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.super)
  return _internal_super();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandCleanupGeometryArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.super)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.super)
}

// optional .TSP.Reference info_geometry_command = 2;
inline bool CommandCleanupGeometryArchive::_internal_has_info_geometry_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_geometry_command_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_info_geometry_command() const {
  return _internal_has_info_geometry_command();
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::_internal_info_geometry_command() const {
  const ::TSP::Reference* p = _impl_.info_geometry_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::info_geometry_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
  return _internal_info_geometry_command();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_info_geometry_command(
    ::TSP::Reference* info_geometry_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_geometry_command_);
  }
  _impl_.info_geometry_command_ = info_geometry_command;
  if (info_geometry_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::release_info_geometry_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_geometry_command_;
  _impl_.info_geometry_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::unsafe_arena_release_info_geometry_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_geometry_command_;
  _impl_.info_geometry_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::_internal_mutable_info_geometry_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_geometry_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_geometry_command_ = p;
  }
  return _impl_.info_geometry_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::mutable_info_geometry_command() {
  ::TSP::Reference* _msg = _internal_mutable_info_geometry_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_info_geometry_command(::TSP::Reference* info_geometry_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_geometry_command_);
  }
  if (info_geometry_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_geometry_command));
    if (message_arena != submessage_arena) {
      info_geometry_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_geometry_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_geometry_command_ = info_geometry_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.info_geometry_command)
}

// optional .TSP.Reference anchor_attachment_command = 3;
inline bool CommandCleanupGeometryArchive::_internal_has_anchor_attachment_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anchor_attachment_command_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_anchor_attachment_command() const {
  return _internal_has_anchor_attachment_command();
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::_internal_anchor_attachment_command() const {
  const ::TSP::Reference* p = _impl_.anchor_attachment_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandCleanupGeometryArchive::anchor_attachment_command() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
  return _internal_anchor_attachment_command();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_anchor_attachment_command(
    ::TSP::Reference* anchor_attachment_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_attachment_command_);
  }
  _impl_.anchor_attachment_command_ = anchor_attachment_command;
  if (anchor_attachment_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::release_anchor_attachment_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.anchor_attachment_command_;
  _impl_.anchor_attachment_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::unsafe_arena_release_anchor_attachment_command() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.anchor_attachment_command_;
  _impl_.anchor_attachment_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::_internal_mutable_anchor_attachment_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.anchor_attachment_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.anchor_attachment_command_ = p;
  }
  return _impl_.anchor_attachment_command_;
}
inline ::TSP::Reference* CommandCleanupGeometryArchive::mutable_anchor_attachment_command() {
  ::TSP::Reference* _msg = _internal_mutable_anchor_attachment_command();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_anchor_attachment_command(::TSP::Reference* anchor_attachment_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_attachment_command_);
  }
  if (anchor_attachment_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_attachment_command));
    if (message_arena != submessage_arena) {
      anchor_attachment_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_attachment_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.anchor_attachment_command_ = anchor_attachment_command;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.anchor_attachment_command)
}

// optional .TSCH.RectArchive original_legend_rect = 4;
inline bool CommandCleanupGeometryArchive::_internal_has_original_legend_rect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_legend_rect_ != nullptr);
  return value;
}
inline bool CommandCleanupGeometryArchive::has_original_legend_rect() const {
  return _internal_has_original_legend_rect();
}
inline const ::TSCH::RectArchive& CommandCleanupGeometryArchive::_internal_original_legend_rect() const {
  const ::TSCH::RectArchive* p = _impl_.original_legend_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& CommandCleanupGeometryArchive::original_legend_rect() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
  return _internal_original_legend_rect();
}
inline void CommandCleanupGeometryArchive::unsafe_arena_set_allocated_original_legend_rect(
    ::TSCH::RectArchive* original_legend_rect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_legend_rect_);
  }
  _impl_.original_legend_rect_ = original_legend_rect;
  if (original_legend_rect) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::release_original_legend_rect() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::RectArchive* temp = _impl_.original_legend_rect_;
  _impl_.original_legend_rect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::unsafe_arena_release_original_legend_rect() {
  // @@protoc_insertion_point(field_release:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCH::RectArchive* temp = _impl_.original_legend_rect_;
  _impl_.original_legend_rect_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::_internal_mutable_original_legend_rect() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.original_legend_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    _impl_.original_legend_rect_ = p;
  }
  return _impl_.original_legend_rect_;
}
inline ::TSCH::RectArchive* CommandCleanupGeometryArchive::mutable_original_legend_rect() {
  ::TSCH::RectArchive* _msg = _internal_mutable_original_legend_rect();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
  return _msg;
}
inline void CommandCleanupGeometryArchive::set_allocated_original_legend_rect(::TSCH::RectArchive* original_legend_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.original_legend_rect_);
  }
  if (original_legend_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(original_legend_rect));
    if (message_arena != submessage_arena) {
      original_legend_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_legend_rect, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.original_legend_rect_ = original_legend_rect;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandCleanupGeometryArchive.original_legend_rect)
}

// -------------------------------------------------------------------

// ChartCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChartCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ChartCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChartCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChartCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.super)
  return _internal_super();
}
inline void ChartCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartCommandArchive.super)
}
inline ::TSK::CommandArchive* ChartCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ChartCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChartCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ChartCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartCommandArchive.super)
  return _msg;
}
inline void ChartCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartCommandArchive.super)
}

// required .TSP.Reference info = 2;
inline bool ChartCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ChartCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ChartCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.info)
  return _internal_info();
}
inline void ChartCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartCommandArchive.info)
}
inline ::TSP::Reference* ChartCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.ChartCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* ChartCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartCommandArchive.info)
  return _msg;
}
inline void ChartCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartCommandArchive.info)
}

// optional bool original_dirty_state = 3;
inline bool ChartCommandArchive::_internal_has_original_dirty_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartCommandArchive::has_original_dirty_state() const {
  return _internal_has_original_dirty_state();
}
inline void ChartCommandArchive::clear_original_dirty_state() {
  _impl_.original_dirty_state_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ChartCommandArchive::_internal_original_dirty_state() const {
  return _impl_.original_dirty_state_;
}
inline bool ChartCommandArchive::original_dirty_state() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCommandArchive.original_dirty_state)
  return _internal_original_dirty_state();
}
inline void ChartCommandArchive::_internal_set_original_dirty_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.original_dirty_state_ = value;
}
inline void ChartCommandArchive::set_original_dirty_state(bool value) {
  _internal_set_original_dirty_state(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCommandArchive.original_dirty_state)
}

// -------------------------------------------------------------------

// CommandReplaceGridValuesArchive_ValueRow

// repeated double value = 1;
inline int CommandReplaceGridValuesArchive_ValueRow::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int CommandReplaceGridValuesArchive_ValueRow::value_size() const {
  return _internal_value_size();
}
inline void CommandReplaceGridValuesArchive_ValueRow::clear_value() {
  _impl_.value_.Clear();
}
inline double CommandReplaceGridValuesArchive_ValueRow::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline double CommandReplaceGridValuesArchive_ValueRow::value(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.ValueRow.value)
  return _internal_value(index);
}
inline void CommandReplaceGridValuesArchive_ValueRow::set_value(int index, double value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.ValueRow.value)
}
inline void CommandReplaceGridValuesArchive_ValueRow::_internal_add_value(double value) {
  _impl_.value_.Add(value);
}
inline void CommandReplaceGridValuesArchive_ValueRow::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.ValueRow.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandReplaceGridValuesArchive_ValueRow::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandReplaceGridValuesArchive_ValueRow::value() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.ValueRow.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandReplaceGridValuesArchive_ValueRow::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandReplaceGridValuesArchive_ValueRow::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.ValueRow.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// CommandReplaceGridValuesArchive

// required .TSCH.ChartCommandArchive super = 1;
inline bool CommandReplaceGridValuesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandReplaceGridValuesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceGridValuesArchive::_internal_super() const {
  const ::TSCH::ChartCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartCommandArchive&>(
      ::TSCH::_ChartCommandArchive_default_instance_);
}
inline const ::TSCH::ChartCommandArchive& CommandReplaceGridValuesArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.super)
  return _internal_super();
}
inline void CommandReplaceGridValuesArchive::unsafe_arena_set_allocated_super(
    ::TSCH::ChartCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceGridValuesArchive.super)
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceGridValuesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSCH::ChartCommandArchive* CommandReplaceGridValuesArchive::mutable_super() {
  ::TSCH::ChartCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.super)
  return _msg;
}
inline void CommandReplaceGridValuesArchive::set_allocated_super(::TSCH::ChartCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceGridValuesArchive.super)
}

// required uint32 rowindex = 2;
inline bool CommandReplaceGridValuesArchive::_internal_has_rowindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_rowindex() const {
  return _internal_has_rowindex();
}
inline void CommandReplaceGridValuesArchive::clear_rowindex() {
  _impl_.rowindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandReplaceGridValuesArchive::_internal_rowindex() const {
  return _impl_.rowindex_;
}
inline uint32_t CommandReplaceGridValuesArchive::rowindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.rowindex)
  return _internal_rowindex();
}
inline void CommandReplaceGridValuesArchive::_internal_set_rowindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rowindex_ = value;
}
inline void CommandReplaceGridValuesArchive::set_rowindex(uint32_t value) {
  _internal_set_rowindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.rowindex)
}

// required uint32 columnindex = 3;
inline bool CommandReplaceGridValuesArchive::_internal_has_columnindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_columnindex() const {
  return _internal_has_columnindex();
}
inline void CommandReplaceGridValuesArchive::clear_columnindex() {
  _impl_.columnindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandReplaceGridValuesArchive::_internal_columnindex() const {
  return _impl_.columnindex_;
}
inline uint32_t CommandReplaceGridValuesArchive::columnindex() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.columnindex)
  return _internal_columnindex();
}
inline void CommandReplaceGridValuesArchive::_internal_set_columnindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.columnindex_ = value;
}
inline void CommandReplaceGridValuesArchive::set_columnindex(uint32_t value) {
  _internal_set_columnindex(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.columnindex)
}

// repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow old_data_rows = 4;
inline int CommandReplaceGridValuesArchive::_internal_old_data_rows_size() const {
  return _impl_.old_data_rows_.size();
}
inline int CommandReplaceGridValuesArchive::old_data_rows_size() const {
  return _internal_old_data_rows_size();
}
inline void CommandReplaceGridValuesArchive::clear_old_data_rows() {
  _impl_.old_data_rows_.Clear();
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::mutable_old_data_rows(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return _impl_.old_data_rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
CommandReplaceGridValuesArchive::mutable_old_data_rows() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return &_impl_.old_data_rows_;
}
inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& CommandReplaceGridValuesArchive::_internal_old_data_rows(int index) const {
  return _impl_.old_data_rows_.Get(index);
}
inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& CommandReplaceGridValuesArchive::old_data_rows(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return _internal_old_data_rows(index);
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::_internal_add_old_data_rows() {
  return _impl_.old_data_rows_.Add();
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::add_old_data_rows() {
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* _add = _internal_add_old_data_rows();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
CommandReplaceGridValuesArchive::old_data_rows() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.old_data_rows)
  return _impl_.old_data_rows_;
}

// repeated .TSCH.CommandReplaceGridValuesArchive.ValueRow new_data_rows = 5;
inline int CommandReplaceGridValuesArchive::_internal_new_data_rows_size() const {
  return _impl_.new_data_rows_.size();
}
inline int CommandReplaceGridValuesArchive::new_data_rows_size() const {
  return _internal_new_data_rows_size();
}
inline void CommandReplaceGridValuesArchive::clear_new_data_rows() {
  _impl_.new_data_rows_.Clear();
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::mutable_new_data_rows(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return _impl_.new_data_rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >*
CommandReplaceGridValuesArchive::mutable_new_data_rows() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return &_impl_.new_data_rows_;
}
inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& CommandReplaceGridValuesArchive::_internal_new_data_rows(int index) const {
  return _impl_.new_data_rows_.Get(index);
}
inline const ::TSCH::CommandReplaceGridValuesArchive_ValueRow& CommandReplaceGridValuesArchive::new_data_rows(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return _internal_new_data_rows(index);
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::_internal_add_new_data_rows() {
  return _impl_.new_data_rows_.Add();
}
inline ::TSCH::CommandReplaceGridValuesArchive_ValueRow* CommandReplaceGridValuesArchive::add_new_data_rows() {
  ::TSCH::CommandReplaceGridValuesArchive_ValueRow* _add = _internal_add_new_data_rows();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceGridValuesArchive_ValueRow >&
CommandReplaceGridValuesArchive::new_data_rows() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.new_data_rows)
  return _impl_.new_data_rows_;
}

// repeated string old_row_names = 6;
inline int CommandReplaceGridValuesArchive::_internal_old_row_names_size() const {
  return _impl_.old_row_names_.size();
}
inline int CommandReplaceGridValuesArchive::old_row_names_size() const {
  return _internal_old_row_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_old_row_names() {
  _impl_.old_row_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_old_row_names() {
  std::string* _s = _internal_add_old_row_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_old_row_names(int index) const {
  return _impl_.old_row_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::old_row_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return _internal_old_row_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_old_row_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return _impl_.old_row_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const std::string& value) {
  _impl_.old_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, std::string&& value) {
  _impl_.old_row_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::set_old_row_names(int index, const char* value, size_t size) {
  _impl_.old_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_old_row_names() {
  return _impl_.old_row_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const std::string& value) {
  _impl_.old_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(std::string&& value) {
  _impl_.old_row_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline void CommandReplaceGridValuesArchive::add_old_row_names(const char* value, size_t size) {
  _impl_.old_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.old_row_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::old_row_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return _impl_.old_row_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_old_row_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.old_row_names)
  return &_impl_.old_row_names_;
}

// repeated string new_row_names = 7;
inline int CommandReplaceGridValuesArchive::_internal_new_row_names_size() const {
  return _impl_.new_row_names_.size();
}
inline int CommandReplaceGridValuesArchive::new_row_names_size() const {
  return _internal_new_row_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_new_row_names() {
  _impl_.new_row_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_new_row_names() {
  std::string* _s = _internal_add_new_row_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_new_row_names(int index) const {
  return _impl_.new_row_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::new_row_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return _internal_new_row_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_new_row_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return _impl_.new_row_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const std::string& value) {
  _impl_.new_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, std::string&& value) {
  _impl_.new_row_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.new_row_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::set_new_row_names(int index, const char* value, size_t size) {
  _impl_.new_row_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_new_row_names() {
  return _impl_.new_row_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const std::string& value) {
  _impl_.new_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(std::string&& value) {
  _impl_.new_row_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.new_row_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline void CommandReplaceGridValuesArchive::add_new_row_names(const char* value, size_t size) {
  _impl_.new_row_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.new_row_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::new_row_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return _impl_.new_row_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_new_row_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.new_row_names)
  return &_impl_.new_row_names_;
}

// repeated string old_col_names = 8;
inline int CommandReplaceGridValuesArchive::_internal_old_col_names_size() const {
  return _impl_.old_col_names_.size();
}
inline int CommandReplaceGridValuesArchive::old_col_names_size() const {
  return _internal_old_col_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_old_col_names() {
  _impl_.old_col_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_old_col_names() {
  std::string* _s = _internal_add_old_col_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_old_col_names(int index) const {
  return _impl_.old_col_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::old_col_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return _internal_old_col_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_old_col_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return _impl_.old_col_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const std::string& value) {
  _impl_.old_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, std::string&& value) {
  _impl_.old_col_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::set_old_col_names(int index, const char* value, size_t size) {
  _impl_.old_col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_old_col_names() {
  return _impl_.old_col_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const std::string& value) {
  _impl_.old_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(std::string&& value) {
  _impl_.old_col_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline void CommandReplaceGridValuesArchive::add_old_col_names(const char* value, size_t size) {
  _impl_.old_col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.old_col_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::old_col_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return _impl_.old_col_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_old_col_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.old_col_names)
  return &_impl_.old_col_names_;
}

// repeated string new_col_names = 9;
inline int CommandReplaceGridValuesArchive::_internal_new_col_names_size() const {
  return _impl_.new_col_names_.size();
}
inline int CommandReplaceGridValuesArchive::new_col_names_size() const {
  return _internal_new_col_names_size();
}
inline void CommandReplaceGridValuesArchive::clear_new_col_names() {
  _impl_.new_col_names_.Clear();
}
inline std::string* CommandReplaceGridValuesArchive::add_new_col_names() {
  std::string* _s = _internal_add_new_col_names();
  // @@protoc_insertion_point(field_add_mutable:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return _s;
}
inline const std::string& CommandReplaceGridValuesArchive::_internal_new_col_names(int index) const {
  return _impl_.new_col_names_.Get(index);
}
inline const std::string& CommandReplaceGridValuesArchive::new_col_names(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return _internal_new_col_names(index);
}
inline std::string* CommandReplaceGridValuesArchive::mutable_new_col_names(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return _impl_.new_col_names_.Mutable(index);
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const std::string& value) {
  _impl_.new_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, std::string&& value) {
  _impl_.new_col_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.new_col_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::set_new_col_names(int index, const char* value, size_t size) {
  _impl_.new_col_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline std::string* CommandReplaceGridValuesArchive::_internal_add_new_col_names() {
  return _impl_.new_col_names_.Add();
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const std::string& value) {
  _impl_.new_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(std::string&& value) {
  _impl_.new_col_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.new_col_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline void CommandReplaceGridValuesArchive::add_new_col_names(const char* value, size_t size) {
  _impl_.new_col_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.CommandReplaceGridValuesArchive.new_col_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandReplaceGridValuesArchive::new_col_names() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return _impl_.new_col_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandReplaceGridValuesArchive::mutable_new_col_names() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceGridValuesArchive.new_col_names)
  return &_impl_.new_col_names_;
}

// optional uint32 rows_to_add = 10;
inline bool CommandReplaceGridValuesArchive::_internal_has_rows_to_add() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_rows_to_add() const {
  return _internal_has_rows_to_add();
}
inline void CommandReplaceGridValuesArchive::clear_rows_to_add() {
  _impl_.rows_to_add_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandReplaceGridValuesArchive::_internal_rows_to_add() const {
  return _impl_.rows_to_add_;
}
inline uint32_t CommandReplaceGridValuesArchive::rows_to_add() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.rows_to_add)
  return _internal_rows_to_add();
}
inline void CommandReplaceGridValuesArchive::_internal_set_rows_to_add(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rows_to_add_ = value;
}
inline void CommandReplaceGridValuesArchive::set_rows_to_add(uint32_t value) {
  _internal_set_rows_to_add(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.rows_to_add)
}

// optional uint32 cols_to_add = 11;
inline bool CommandReplaceGridValuesArchive::_internal_has_cols_to_add() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandReplaceGridValuesArchive::has_cols_to_add() const {
  return _internal_has_cols_to_add();
}
inline void CommandReplaceGridValuesArchive::clear_cols_to_add() {
  _impl_.cols_to_add_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandReplaceGridValuesArchive::_internal_cols_to_add() const {
  return _impl_.cols_to_add_;
}
inline uint32_t CommandReplaceGridValuesArchive::cols_to_add() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceGridValuesArchive.cols_to_add)
  return _internal_cols_to_add();
}
inline void CommandReplaceGridValuesArchive::_internal_set_cols_to_add(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cols_to_add_ = value;
}
inline void CommandReplaceGridValuesArchive::set_cols_to_add(uint32_t value) {
  _internal_set_cols_to_add(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceGridValuesArchive.cols_to_add)
}

// -------------------------------------------------------------------

// CommandReplaceThemePresetArchive_StyleAndIdentifierPair

// required .TSP.Reference style = 1;
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_has_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_style() const {
  const ::TSP::Reference* p = _impl_.style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::style() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
  return _internal_style();
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  _impl_.style_ = style;
  if (style) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::release_style() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_mutable_style() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.style_ = p;
  }
  return _impl_.style_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
  return _msg;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style)
}

// required string identifier = 2;
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandReplaceThemePresetArchive_StyleAndIdentifierPair::has_identifier() const {
  return _internal_has_identifier();
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::identifier() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
}
inline std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
  return _s;
}
inline const std::string& CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandReplaceThemePresetArchive_StyleAndIdentifierPair::release_identifier() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandReplaceThemePresetArchive_StyleAndIdentifierPair::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.identifier)
}

// -------------------------------------------------------------------

// CommandReplaceThemePresetArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandReplaceThemePresetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandReplaceThemePresetArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandReplaceThemePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.super)
  return _internal_super();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.super)
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandReplaceThemePresetArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.super)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.super)
}

// required .TSP.Reference theme = 2;
inline bool CommandReplaceThemePresetArchive::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_theme() const {
  return _internal_has_theme();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::_internal_theme() const {
  const ::TSP::Reference* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::theme() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.theme)
  return _internal_theme();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_theme(
    ::TSP::Reference* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.theme)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.theme)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_theme() {
  ::TSP::Reference* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.theme)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_theme(::TSP::Reference* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme));
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.theme)
}

// optional .TSP.Reference old_preset = 3;
inline bool CommandReplaceThemePresetArchive::_internal_has_old_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_preset_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_old_preset() const {
  return _internal_has_old_preset();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::_internal_old_preset() const {
  const ::TSP::Reference* p = _impl_.old_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::old_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.old_preset)
  return _internal_old_preset();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_old_preset(
    ::TSP::Reference* old_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_preset_);
  }
  _impl_.old_preset_ = old_preset;
  if (old_preset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.old_preset)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_old_preset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_preset_;
  _impl_.old_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::unsafe_arena_release_old_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.old_preset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_preset_;
  _impl_.old_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::_internal_mutable_old_preset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_preset_ = p;
  }
  return _impl_.old_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_old_preset() {
  ::TSP::Reference* _msg = _internal_mutable_old_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.old_preset)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_old_preset(::TSP::Reference* old_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_preset_);
  }
  if (old_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_preset));
    if (message_arena != submessage_arena) {
      old_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_preset_ = old_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.old_preset)
}

// optional .TSP.Reference new_preset = 4;
inline bool CommandReplaceThemePresetArchive::_internal_has_new_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_preset_ != nullptr);
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_new_preset() const {
  return _internal_has_new_preset();
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::_internal_new_preset() const {
  const ::TSP::Reference* p = _impl_.new_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceThemePresetArchive::new_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.new_preset)
  return _internal_new_preset();
}
inline void CommandReplaceThemePresetArchive::unsafe_arena_set_allocated_new_preset(
    ::TSP::Reference* new_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_preset_);
  }
  _impl_.new_preset_ = new_preset;
  if (new_preset) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandReplaceThemePresetArchive.new_preset)
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::release_new_preset() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_preset_;
  _impl_.new_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::unsafe_arena_release_new_preset() {
  // @@protoc_insertion_point(field_release:TSCH.CommandReplaceThemePresetArchive.new_preset)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_preset_;
  _impl_.new_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::_internal_mutable_new_preset() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_preset_ = p;
  }
  return _impl_.new_preset_;
}
inline ::TSP::Reference* CommandReplaceThemePresetArchive::mutable_new_preset() {
  ::TSP::Reference* _msg = _internal_mutable_new_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.new_preset)
  return _msg;
}
inline void CommandReplaceThemePresetArchive::set_allocated_new_preset(::TSP::Reference* new_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_preset_);
  }
  if (new_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_preset));
    if (message_arena != submessage_arena) {
      new_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_preset_ = new_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandReplaceThemePresetArchive.new_preset)
}

// repeated .TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair identifiers = 5;
inline int CommandReplaceThemePresetArchive::_internal_identifiers_size() const {
  return _impl_.identifiers_.size();
}
inline int CommandReplaceThemePresetArchive::identifiers_size() const {
  return _internal_identifiers_size();
}
inline void CommandReplaceThemePresetArchive::clear_identifiers() {
  _impl_.identifiers_.Clear();
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::mutable_identifiers(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return _impl_.identifiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >*
CommandReplaceThemePresetArchive::mutable_identifiers() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return &_impl_.identifiers_;
}
inline const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& CommandReplaceThemePresetArchive::_internal_identifiers(int index) const {
  return _impl_.identifiers_.Get(index);
}
inline const ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair& CommandReplaceThemePresetArchive::identifiers(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return _internal_identifiers(index);
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::_internal_add_identifiers() {
  return _impl_.identifiers_.Add();
}
inline ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* CommandReplaceThemePresetArchive::add_identifiers() {
  ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair* _add = _internal_add_identifiers();
  // @@protoc_insertion_point(field_add:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::CommandReplaceThemePresetArchive_StyleAndIdentifierPair >&
CommandReplaceThemePresetArchive::identifiers() const {
  // @@protoc_insertion_point(field_list:TSCH.CommandReplaceThemePresetArchive.identifiers)
  return _impl_.identifiers_;
}

// optional uint64 old_preset_index = 6;
inline bool CommandReplaceThemePresetArchive::_internal_has_old_preset_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandReplaceThemePresetArchive::has_old_preset_index() const {
  return _internal_has_old_preset_index();
}
inline void CommandReplaceThemePresetArchive::clear_old_preset_index() {
  _impl_.old_preset_index_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CommandReplaceThemePresetArchive::_internal_old_preset_index() const {
  return _impl_.old_preset_index_;
}
inline uint64_t CommandReplaceThemePresetArchive::old_preset_index() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandReplaceThemePresetArchive.old_preset_index)
  return _internal_old_preset_index();
}
inline void CommandReplaceThemePresetArchive::_internal_set_old_preset_index(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.old_preset_index_ = value;
}
inline void CommandReplaceThemePresetArchive::set_old_preset_index(uint64_t value) {
  _internal_set_old_preset_index(value);
  // @@protoc_insertion_point(field_set:TSCH.CommandReplaceThemePresetArchive.old_preset_index)
}

// -------------------------------------------------------------------

// CommandInvalidateWPCaches

// required .TSK.CommandArchive super = 1;
inline bool CommandInvalidateWPCaches::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandInvalidateWPCaches::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandInvalidateWPCaches::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandInvalidateWPCaches::super() const {
  // @@protoc_insertion_point(field_get:TSCH.CommandInvalidateWPCaches.super)
  return _internal_super();
}
inline void CommandInvalidateWPCaches::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.CommandInvalidateWPCaches.super)
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.CommandInvalidateWPCaches.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandInvalidateWPCaches::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.CommandInvalidateWPCaches.super)
  return _msg;
}
inline void CommandInvalidateWPCaches::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.CommandInvalidateWPCaches.super)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSCH::StyleOwnerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::StyleOwnerType>() {
  return ::TSCH::StyleOwnerType_descriptor();
}
template <> struct is_proto_enum< ::TSCH::StyleSwapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::StyleSwapType>() {
  return ::TSCH::StyleSwapType_descriptor();
}
template <> struct is_proto_enum< ::TSCH::ApplyPresetBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSCH::ApplyPresetBehavior>() {
  return ::TSCH::ApplyPresetBehavior_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCHCommandArchives_2eproto
