// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSDCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSDCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSDCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSDCommandArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSDCommandArchives_2eproto;
namespace TSD {
class CommandSelectionBehaviorArchive;
struct CommandSelectionBehaviorArchiveDefaultTypeInternal;
extern CommandSelectionBehaviorArchiveDefaultTypeInternal _CommandSelectionBehaviorArchive_default_instance_;
class CommentStorageApplyCommandArchive;
struct CommentStorageApplyCommandArchiveDefaultTypeInternal;
extern CommentStorageApplyCommandArchiveDefaultTypeInternal _CommentStorageApplyCommandArchive_default_instance_;
class ConnectionLineConnectCommandArchive;
struct ConnectionLineConnectCommandArchiveDefaultTypeInternal;
extern ConnectionLineConnectCommandArchiveDefaultTypeInternal _ConnectionLineConnectCommandArchive_default_instance_;
class ContainerInsertChildrenCommandArchive;
struct ContainerInsertChildrenCommandArchiveDefaultTypeInternal;
extern ContainerInsertChildrenCommandArchiveDefaultTypeInternal _ContainerInsertChildrenCommandArchive_default_instance_;
class ContainerRemoveChildrenCommandArchive;
struct ContainerRemoveChildrenCommandArchiveDefaultTypeInternal;
extern ContainerRemoveChildrenCommandArchiveDefaultTypeInternal _ContainerRemoveChildrenCommandArchive_default_instance_;
class ContainerReorderChildrenCommandArchive;
struct ContainerReorderChildrenCommandArchiveDefaultTypeInternal;
extern ContainerReorderChildrenCommandArchiveDefaultTypeInternal _ContainerReorderChildrenCommandArchive_default_instance_;
class DrawableAccessibilityDescriptionCommandArchive;
struct DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal;
extern DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal _DrawableAccessibilityDescriptionCommandArchive_default_instance_;
class DrawableApplyThemeCommandArchive;
struct DrawableApplyThemeCommandArchiveDefaultTypeInternal;
extern DrawableApplyThemeCommandArchiveDefaultTypeInternal _DrawableApplyThemeCommandArchive_default_instance_;
class DrawableAspectRatioLockedCommandArchive;
struct DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal;
extern DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal _DrawableAspectRatioLockedCommandArchive_default_instance_;
class DrawableHyperlinkCommandArchive;
struct DrawableHyperlinkCommandArchiveDefaultTypeInternal;
extern DrawableHyperlinkCommandArchiveDefaultTypeInternal _DrawableHyperlinkCommandArchive_default_instance_;
class DrawableInfoCommentCommandArchive;
struct DrawableInfoCommentCommandArchiveDefaultTypeInternal;
extern DrawableInfoCommentCommandArchiveDefaultTypeInternal _DrawableInfoCommentCommandArchive_default_instance_;
class DrawableLockCommandArchive;
struct DrawableLockCommandArchiveDefaultTypeInternal;
extern DrawableLockCommandArchiveDefaultTypeInternal _DrawableLockCommandArchive_default_instance_;
class DrawablePathSourceCommandArchive;
struct DrawablePathSourceCommandArchiveDefaultTypeInternal;
extern DrawablePathSourceCommandArchiveDefaultTypeInternal _DrawablePathSourceCommandArchive_default_instance_;
class DrawableShadowCommandArchive;
struct DrawableShadowCommandArchiveDefaultTypeInternal;
extern DrawableShadowCommandArchiveDefaultTypeInternal _DrawableShadowCommandArchive_default_instance_;
class DrawablesCommandGroupArchive;
struct DrawablesCommandGroupArchiveDefaultTypeInternal;
extern DrawablesCommandGroupArchiveDefaultTypeInternal _DrawablesCommandGroupArchive_default_instance_;
class ExteriorTextWrapCommandArchive;
struct ExteriorTextWrapCommandArchiveDefaultTypeInternal;
extern ExteriorTextWrapCommandArchiveDefaultTypeInternal _ExteriorTextWrapCommandArchive_default_instance_;
class ExteriorTextWrapCommandArchive_InfoAndWrap;
struct ExteriorTextWrapCommandArchive_InfoAndWrapDefaultTypeInternal;
extern ExteriorTextWrapCommandArchive_InfoAndWrapDefaultTypeInternal _ExteriorTextWrapCommandArchive_InfoAndWrap_default_instance_;
class GroupDrawablesCommandArchive;
struct GroupDrawablesCommandArchiveDefaultTypeInternal;
extern GroupDrawablesCommandArchiveDefaultTypeInternal _GroupDrawablesCommandArchive_default_instance_;
class GuideCommandArchive;
struct GuideCommandArchiveDefaultTypeInternal;
extern GuideCommandArchiveDefaultTypeInternal _GuideCommandArchive_default_instance_;
class ImageAdjustmentsCommandArchive;
struct ImageAdjustmentsCommandArchiveDefaultTypeInternal;
extern ImageAdjustmentsCommandArchiveDefaultTypeInternal _ImageAdjustmentsCommandArchive_default_instance_;
class ImageMaskCommandArchive;
struct ImageMaskCommandArchiveDefaultTypeInternal;
extern ImageMaskCommandArchiveDefaultTypeInternal _ImageMaskCommandArchive_default_instance_;
class ImageMediaCommandArchive;
struct ImageMediaCommandArchiveDefaultTypeInternal;
extern ImageMediaCommandArchiveDefaultTypeInternal _ImageMediaCommandArchive_default_instance_;
class ImageReplaceCommandArchive;
struct ImageReplaceCommandArchiveDefaultTypeInternal;
extern ImageReplaceCommandArchiveDefaultTypeInternal _ImageReplaceCommandArchive_default_instance_;
class InfoGeometryCommandArchive;
struct InfoGeometryCommandArchiveDefaultTypeInternal;
extern InfoGeometryCommandArchiveDefaultTypeInternal _InfoGeometryCommandArchive_default_instance_;
class InstantAlphaCommandArchive;
struct InstantAlphaCommandArchiveDefaultTypeInternal;
extern InstantAlphaCommandArchiveDefaultTypeInternal _InstantAlphaCommandArchive_default_instance_;
class MediaApplyPresetCommandArchive;
struct MediaApplyPresetCommandArchiveDefaultTypeInternal;
extern MediaApplyPresetCommandArchiveDefaultTypeInternal _MediaApplyPresetCommandArchive_default_instance_;
class MediaFlagsCommandArchive;
struct MediaFlagsCommandArchiveDefaultTypeInternal;
extern MediaFlagsCommandArchiveDefaultTypeInternal _MediaFlagsCommandArchive_default_instance_;
class MediaOriginalSizeCommandArchive;
struct MediaOriginalSizeCommandArchiveDefaultTypeInternal;
extern MediaOriginalSizeCommandArchiveDefaultTypeInternal _MediaOriginalSizeCommandArchive_default_instance_;
class MediaStyleSetValueCommandArchive;
struct MediaStyleSetValueCommandArchiveDefaultTypeInternal;
extern MediaStyleSetValueCommandArchiveDefaultTypeInternal _MediaStyleSetValueCommandArchive_default_instance_;
class MovieSetValueCommandArchive;
struct MovieSetValueCommandArchiveDefaultTypeInternal;
extern MovieSetValueCommandArchiveDefaultTypeInternal _MovieSetValueCommandArchive_default_instance_;
class MovieSetValueCommandArchive_PropertyValue;
struct MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal;
extern MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal _MovieSetValueCommandArchive_PropertyValue_default_instance_;
class PasteStyleCommandArchive;
struct PasteStyleCommandArchiveDefaultTypeInternal;
extern PasteStyleCommandArchiveDefaultTypeInternal _PasteStyleCommandArchive_default_instance_;
class ShapeApplyPresetCommandArchive;
struct ShapeApplyPresetCommandArchiveDefaultTypeInternal;
extern ShapeApplyPresetCommandArchiveDefaultTypeInternal _ShapeApplyPresetCommandArchive_default_instance_;
class ShapePathSourceFlipCommandArchive;
struct ShapePathSourceFlipCommandArchiveDefaultTypeInternal;
extern ShapePathSourceFlipCommandArchiveDefaultTypeInternal _ShapePathSourceFlipCommandArchive_default_instance_;
class ShapeSetLineEndCommandArchive;
struct ShapeSetLineEndCommandArchiveDefaultTypeInternal;
extern ShapeSetLineEndCommandArchiveDefaultTypeInternal _ShapeSetLineEndCommandArchive_default_instance_;
class ShapeStyleSetValueCommandArchive;
struct ShapeStyleSetValueCommandArchiveDefaultTypeInternal;
extern ShapeStyleSetValueCommandArchiveDefaultTypeInternal _ShapeStyleSetValueCommandArchive_default_instance_;
class StyledInfoSetStyleCommandArchive;
struct StyledInfoSetStyleCommandArchiveDefaultTypeInternal;
extern StyledInfoSetStyleCommandArchiveDefaultTypeInternal _StyledInfoSetStyleCommandArchive_default_instance_;
class UngroupGroupCommandArchive;
struct UngroupGroupCommandArchiveDefaultTypeInternal;
extern UngroupGroupCommandArchiveDefaultTypeInternal _UngroupGroupCommandArchive_default_instance_;
}  // namespace TSD
PROTOBUF_NAMESPACE_OPEN
template<> ::TSD::CommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TSD::CommandSelectionBehaviorArchive>(Arena*);
template<> ::TSD::CommentStorageApplyCommandArchive* Arena::CreateMaybeMessage<::TSD::CommentStorageApplyCommandArchive>(Arena*);
template<> ::TSD::ConnectionLineConnectCommandArchive* Arena::CreateMaybeMessage<::TSD::ConnectionLineConnectCommandArchive>(Arena*);
template<> ::TSD::ContainerInsertChildrenCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerInsertChildrenCommandArchive>(Arena*);
template<> ::TSD::ContainerRemoveChildrenCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerRemoveChildrenCommandArchive>(Arena*);
template<> ::TSD::ContainerReorderChildrenCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerReorderChildrenCommandArchive>(Arena*);
template<> ::TSD::DrawableAccessibilityDescriptionCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableAccessibilityDescriptionCommandArchive>(Arena*);
template<> ::TSD::DrawableApplyThemeCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableApplyThemeCommandArchive>(Arena*);
template<> ::TSD::DrawableAspectRatioLockedCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableAspectRatioLockedCommandArchive>(Arena*);
template<> ::TSD::DrawableHyperlinkCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableHyperlinkCommandArchive>(Arena*);
template<> ::TSD::DrawableInfoCommentCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableInfoCommentCommandArchive>(Arena*);
template<> ::TSD::DrawableLockCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableLockCommandArchive>(Arena*);
template<> ::TSD::DrawablePathSourceCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawablePathSourceCommandArchive>(Arena*);
template<> ::TSD::DrawableShadowCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableShadowCommandArchive>(Arena*);
template<> ::TSD::DrawablesCommandGroupArchive* Arena::CreateMaybeMessage<::TSD::DrawablesCommandGroupArchive>(Arena*);
template<> ::TSD::ExteriorTextWrapCommandArchive* Arena::CreateMaybeMessage<::TSD::ExteriorTextWrapCommandArchive>(Arena*);
template<> ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* Arena::CreateMaybeMessage<::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap>(Arena*);
template<> ::TSD::GroupDrawablesCommandArchive* Arena::CreateMaybeMessage<::TSD::GroupDrawablesCommandArchive>(Arena*);
template<> ::TSD::GuideCommandArchive* Arena::CreateMaybeMessage<::TSD::GuideCommandArchive>(Arena*);
template<> ::TSD::ImageAdjustmentsCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageAdjustmentsCommandArchive>(Arena*);
template<> ::TSD::ImageMaskCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageMaskCommandArchive>(Arena*);
template<> ::TSD::ImageMediaCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageMediaCommandArchive>(Arena*);
template<> ::TSD::ImageReplaceCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageReplaceCommandArchive>(Arena*);
template<> ::TSD::InfoGeometryCommandArchive* Arena::CreateMaybeMessage<::TSD::InfoGeometryCommandArchive>(Arena*);
template<> ::TSD::InstantAlphaCommandArchive* Arena::CreateMaybeMessage<::TSD::InstantAlphaCommandArchive>(Arena*);
template<> ::TSD::MediaApplyPresetCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaApplyPresetCommandArchive>(Arena*);
template<> ::TSD::MediaFlagsCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaFlagsCommandArchive>(Arena*);
template<> ::TSD::MediaOriginalSizeCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaOriginalSizeCommandArchive>(Arena*);
template<> ::TSD::MediaStyleSetValueCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaStyleSetValueCommandArchive>(Arena*);
template<> ::TSD::MovieSetValueCommandArchive* Arena::CreateMaybeMessage<::TSD::MovieSetValueCommandArchive>(Arena*);
template<> ::TSD::MovieSetValueCommandArchive_PropertyValue* Arena::CreateMaybeMessage<::TSD::MovieSetValueCommandArchive_PropertyValue>(Arena*);
template<> ::TSD::PasteStyleCommandArchive* Arena::CreateMaybeMessage<::TSD::PasteStyleCommandArchive>(Arena*);
template<> ::TSD::ShapeApplyPresetCommandArchive* Arena::CreateMaybeMessage<::TSD::ShapeApplyPresetCommandArchive>(Arena*);
template<> ::TSD::ShapePathSourceFlipCommandArchive* Arena::CreateMaybeMessage<::TSD::ShapePathSourceFlipCommandArchive>(Arena*);
template<> ::TSD::ShapeSetLineEndCommandArchive* Arena::CreateMaybeMessage<::TSD::ShapeSetLineEndCommandArchive>(Arena*);
template<> ::TSD::ShapeStyleSetValueCommandArchive* Arena::CreateMaybeMessage<::TSD::ShapeStyleSetValueCommandArchive>(Arena*);
template<> ::TSD::StyledInfoSetStyleCommandArchive* Arena::CreateMaybeMessage<::TSD::StyledInfoSetStyleCommandArchive>(Arena*);
template<> ::TSD::UngroupGroupCommandArchive* Arena::CreateMaybeMessage<::TSD::UngroupGroupCommandArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSD {

enum MovieSetValueCommandArchive_LoopOption : int {
  MovieSetValueCommandArchive_LoopOption_None = 0,
  MovieSetValueCommandArchive_LoopOption_Repeat = 1,
  MovieSetValueCommandArchive_LoopOption_BackAndForth = 2
};
bool MovieSetValueCommandArchive_LoopOption_IsValid(int value);
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_LoopOption_LoopOption_MIN = MovieSetValueCommandArchive_LoopOption_None;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_LoopOption_LoopOption_MAX = MovieSetValueCommandArchive_LoopOption_BackAndForth;
constexpr int MovieSetValueCommandArchive_LoopOption_LoopOption_ARRAYSIZE = MovieSetValueCommandArchive_LoopOption_LoopOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovieSetValueCommandArchive_LoopOption_descriptor();
template<typename T>
inline const std::string& MovieSetValueCommandArchive_LoopOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MovieSetValueCommandArchive_LoopOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MovieSetValueCommandArchive_LoopOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MovieSetValueCommandArchive_LoopOption_descriptor(), enum_t_value);
}
inline bool MovieSetValueCommandArchive_LoopOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MovieSetValueCommandArchive_LoopOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MovieSetValueCommandArchive_LoopOption>(
    MovieSetValueCommandArchive_LoopOption_descriptor(), name, value);
}
enum DrawablesCommandGroupArchive_DrawablesCommandGroupType : int {
  DrawablesCommandGroupArchive_DrawablesCommandGroupType_Constructive = 1,
  DrawablesCommandGroupArchive_DrawablesCommandGroupType_Destructive = 2,
  DrawablesCommandGroupArchive_DrawablesCommandGroupType_InPlace = 3
};
bool DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(int value);
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MIN = DrawablesCommandGroupArchive_DrawablesCommandGroupType_Constructive;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MAX = DrawablesCommandGroupArchive_DrawablesCommandGroupType_InPlace;
constexpr int DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_ARRAYSIZE = DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor();
template<typename T>
inline const std::string& DrawablesCommandGroupArchive_DrawablesCommandGroupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrawablesCommandGroupArchive_DrawablesCommandGroupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrawablesCommandGroupArchive_DrawablesCommandGroupType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor(), enum_t_value);
}
inline bool DrawablesCommandGroupArchive_DrawablesCommandGroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DrawablesCommandGroupArchive_DrawablesCommandGroupType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrawablesCommandGroupArchive_DrawablesCommandGroupType>(
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor(), name, value);
}
enum CommandSelectionBehaviorArchive_CommandSelectionBehaviorType : int {
  CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Constructive = 1,
  CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Destructive = 2,
  CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_InPlace = 3,
  CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Replace = 4
};
bool CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_IsValid(int value);
constexpr CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_CommandSelectionBehaviorType_MIN = CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Constructive;
constexpr CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_CommandSelectionBehaviorType_MAX = CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Replace;
constexpr int CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_CommandSelectionBehaviorType_ARRAYSIZE = CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_CommandSelectionBehaviorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor();
template<typename T>
inline const std::string& CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandSelectionBehaviorArchive_CommandSelectionBehaviorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor(), enum_t_value);
}
inline bool CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandSelectionBehaviorArchive_CommandSelectionBehaviorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandSelectionBehaviorArchive_CommandSelectionBehaviorType>(
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor(), name, value);
}
enum GuideCommandArchive_GuideCommandMode : int {
  GuideCommandArchive_GuideCommandMode_Add = 1,
  GuideCommandArchive_GuideCommandMode_Replace = 2,
  GuideCommandArchive_GuideCommandMode_Delete = 3
};
bool GuideCommandArchive_GuideCommandMode_IsValid(int value);
constexpr GuideCommandArchive_GuideCommandMode GuideCommandArchive_GuideCommandMode_GuideCommandMode_MIN = GuideCommandArchive_GuideCommandMode_Add;
constexpr GuideCommandArchive_GuideCommandMode GuideCommandArchive_GuideCommandMode_GuideCommandMode_MAX = GuideCommandArchive_GuideCommandMode_Delete;
constexpr int GuideCommandArchive_GuideCommandMode_GuideCommandMode_ARRAYSIZE = GuideCommandArchive_GuideCommandMode_GuideCommandMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuideCommandArchive_GuideCommandMode_descriptor();
template<typename T>
inline const std::string& GuideCommandArchive_GuideCommandMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GuideCommandArchive_GuideCommandMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GuideCommandArchive_GuideCommandMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GuideCommandArchive_GuideCommandMode_descriptor(), enum_t_value);
}
inline bool GuideCommandArchive_GuideCommandMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GuideCommandArchive_GuideCommandMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GuideCommandArchive_GuideCommandMode>(
    GuideCommandArchive_GuideCommandMode_descriptor(), name, value);
}
// ===================================================================

class ConnectionLineConnectCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ConnectionLineConnectCommandArchive) */ {
 public:
  inline ConnectionLineConnectCommandArchive() : ConnectionLineConnectCommandArchive(nullptr) {}
  ~ConnectionLineConnectCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ConnectionLineConnectCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionLineConnectCommandArchive(const ConnectionLineConnectCommandArchive& from);
  ConnectionLineConnectCommandArchive(ConnectionLineConnectCommandArchive&& from) noexcept
    : ConnectionLineConnectCommandArchive() {
    *this = ::std::move(from);
  }

  inline ConnectionLineConnectCommandArchive& operator=(const ConnectionLineConnectCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionLineConnectCommandArchive& operator=(ConnectionLineConnectCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionLineConnectCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionLineConnectCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ConnectionLineConnectCommandArchive*>(
               &_ConnectionLineConnectCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionLineConnectCommandArchive& a, ConnectionLineConnectCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionLineConnectCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionLineConnectCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionLineConnectCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionLineConnectCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionLineConnectCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionLineConnectCommandArchive& from) {
    ConnectionLineConnectCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionLineConnectCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ConnectionLineConnectCommandArchive";
  }
  protected:
  explicit ConnectionLineConnectCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kConnectionLineFieldNumber = 2,
    kConnectToFieldNumber = 3,
    kConnectFromFieldNumber = 4,
    kOldConnectToFieldNumber = 5,
    kOldConnectFromFieldNumber = 6,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference connection_line = 2;
  bool has_connection_line() const;
  private:
  bool _internal_has_connection_line() const;
  public:
  void clear_connection_line();
  const ::TSP::Reference& connection_line() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_connection_line();
  ::TSP::Reference* mutable_connection_line();
  void set_allocated_connection_line(::TSP::Reference* connection_line);
  private:
  const ::TSP::Reference& _internal_connection_line() const;
  ::TSP::Reference* _internal_mutable_connection_line();
  public:
  void unsafe_arena_set_allocated_connection_line(
      ::TSP::Reference* connection_line);
  ::TSP::Reference* unsafe_arena_release_connection_line();

  // optional .TSP.Reference connect_to = 3;
  bool has_connect_to() const;
  private:
  bool _internal_has_connect_to() const;
  public:
  void clear_connect_to();
  const ::TSP::Reference& connect_to() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_connect_to();
  ::TSP::Reference* mutable_connect_to();
  void set_allocated_connect_to(::TSP::Reference* connect_to);
  private:
  const ::TSP::Reference& _internal_connect_to() const;
  ::TSP::Reference* _internal_mutable_connect_to();
  public:
  void unsafe_arena_set_allocated_connect_to(
      ::TSP::Reference* connect_to);
  ::TSP::Reference* unsafe_arena_release_connect_to();

  // optional .TSP.Reference connect_from = 4;
  bool has_connect_from() const;
  private:
  bool _internal_has_connect_from() const;
  public:
  void clear_connect_from();
  const ::TSP::Reference& connect_from() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_connect_from();
  ::TSP::Reference* mutable_connect_from();
  void set_allocated_connect_from(::TSP::Reference* connect_from);
  private:
  const ::TSP::Reference& _internal_connect_from() const;
  ::TSP::Reference* _internal_mutable_connect_from();
  public:
  void unsafe_arena_set_allocated_connect_from(
      ::TSP::Reference* connect_from);
  ::TSP::Reference* unsafe_arena_release_connect_from();

  // optional .TSP.Reference old_connect_to = 5;
  bool has_old_connect_to() const;
  private:
  bool _internal_has_old_connect_to() const;
  public:
  void clear_old_connect_to();
  const ::TSP::Reference& old_connect_to() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_connect_to();
  ::TSP::Reference* mutable_old_connect_to();
  void set_allocated_old_connect_to(::TSP::Reference* old_connect_to);
  private:
  const ::TSP::Reference& _internal_old_connect_to() const;
  ::TSP::Reference* _internal_mutable_old_connect_to();
  public:
  void unsafe_arena_set_allocated_old_connect_to(
      ::TSP::Reference* old_connect_to);
  ::TSP::Reference* unsafe_arena_release_old_connect_to();

  // optional .TSP.Reference old_connect_from = 6;
  bool has_old_connect_from() const;
  private:
  bool _internal_has_old_connect_from() const;
  public:
  void clear_old_connect_from();
  const ::TSP::Reference& old_connect_from() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_connect_from();
  ::TSP::Reference* mutable_old_connect_from();
  void set_allocated_old_connect_from(::TSP::Reference* old_connect_from);
  private:
  const ::TSP::Reference& _internal_old_connect_from() const;
  ::TSP::Reference* _internal_mutable_old_connect_from();
  public:
  void unsafe_arena_set_allocated_old_connect_from(
      ::TSP::Reference* old_connect_from);
  ::TSP::Reference* unsafe_arena_release_old_connect_from();

  // @@protoc_insertion_point(class_scope:TSD.ConnectionLineConnectCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* connection_line_;
    ::TSP::Reference* connect_to_;
    ::TSP::Reference* connect_from_;
    ::TSP::Reference* old_connect_to_;
    ::TSP::Reference* old_connect_from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupDrawablesCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.GroupDrawablesCommandArchive) */ {
 public:
  inline GroupDrawablesCommandArchive() : GroupDrawablesCommandArchive(nullptr) {}
  ~GroupDrawablesCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR GroupDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupDrawablesCommandArchive(const GroupDrawablesCommandArchive& from);
  GroupDrawablesCommandArchive(GroupDrawablesCommandArchive&& from) noexcept
    : GroupDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline GroupDrawablesCommandArchive& operator=(const GroupDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupDrawablesCommandArchive& operator=(GroupDrawablesCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GroupDrawablesCommandArchive*>(
               &_GroupDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupDrawablesCommandArchive& a, GroupDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupDrawablesCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupDrawablesCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupDrawablesCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupDrawablesCommandArchive& from) {
    GroupDrawablesCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupDrawablesCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.GroupDrawablesCommandArchive";
  }
  protected:
  explicit GroupDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 2,
    kSuperFieldNumber = 1,
    kGroupFieldNumber = 3,
  };
  // repeated .TSP.Reference drawables = 2;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference group = 3;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::TSP::Reference& group() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_group();
  ::TSP::Reference* mutable_group();
  void set_allocated_group(::TSP::Reference* group);
  private:
  const ::TSP::Reference& _internal_group() const;
  ::TSP::Reference* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::TSP::Reference* group);
  ::TSP::Reference* unsafe_arena_release_group();

  // @@protoc_insertion_point(class_scope:TSD.GroupDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class UngroupGroupCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.UngroupGroupCommandArchive) */ {
 public:
  inline UngroupGroupCommandArchive() : UngroupGroupCommandArchive(nullptr) {}
  ~UngroupGroupCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR UngroupGroupCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UngroupGroupCommandArchive(const UngroupGroupCommandArchive& from);
  UngroupGroupCommandArchive(UngroupGroupCommandArchive&& from) noexcept
    : UngroupGroupCommandArchive() {
    *this = ::std::move(from);
  }

  inline UngroupGroupCommandArchive& operator=(const UngroupGroupCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UngroupGroupCommandArchive& operator=(UngroupGroupCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UngroupGroupCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UngroupGroupCommandArchive* internal_default_instance() {
    return reinterpret_cast<const UngroupGroupCommandArchive*>(
               &_UngroupGroupCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UngroupGroupCommandArchive& a, UngroupGroupCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UngroupGroupCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UngroupGroupCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UngroupGroupCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UngroupGroupCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UngroupGroupCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UngroupGroupCommandArchive& from) {
    UngroupGroupCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UngroupGroupCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.UngroupGroupCommandArchive";
  }
  protected:
  explicit UngroupGroupCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 2,
    kSuperFieldNumber = 1,
    kGroupFieldNumber = 3,
  };
  // repeated .TSP.Reference drawables = 2;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference group = 3;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::TSP::Reference& group() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_group();
  ::TSP::Reference* mutable_group();
  void set_allocated_group(::TSP::Reference* group);
  private:
  const ::TSP::Reference& _internal_group() const;
  ::TSP::Reference* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::TSP::Reference* group);
  ::TSP::Reference* unsafe_arena_release_group();

  // @@protoc_insertion_point(class_scope:TSD.UngroupGroupCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerRemoveChildrenCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerRemoveChildrenCommandArchive) */ {
 public:
  inline ContainerRemoveChildrenCommandArchive() : ContainerRemoveChildrenCommandArchive(nullptr) {}
  ~ContainerRemoveChildrenCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ContainerRemoveChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerRemoveChildrenCommandArchive(const ContainerRemoveChildrenCommandArchive& from);
  ContainerRemoveChildrenCommandArchive(ContainerRemoveChildrenCommandArchive&& from) noexcept
    : ContainerRemoveChildrenCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerRemoveChildrenCommandArchive& operator=(const ContainerRemoveChildrenCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerRemoveChildrenCommandArchive& operator=(ContainerRemoveChildrenCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerRemoveChildrenCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerRemoveChildrenCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerRemoveChildrenCommandArchive*>(
               &_ContainerRemoveChildrenCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContainerRemoveChildrenCommandArchive& a, ContainerRemoveChildrenCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerRemoveChildrenCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerRemoveChildrenCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerRemoveChildrenCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerRemoveChildrenCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerRemoveChildrenCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContainerRemoveChildrenCommandArchive& from) {
    ContainerRemoveChildrenCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerRemoveChildrenCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerRemoveChildrenCommandArchive";
  }
  protected:
  explicit ContainerRemoveChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kSuperFieldNumber = 1,
    kContainerFieldNumber = 2,
    kChildrenIndicesFieldNumber = 4,
  };
  // repeated .TSP.Reference children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference container = 2;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const ::TSP::Reference& container() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_container();
  ::TSP::Reference* mutable_container();
  void set_allocated_container(::TSP::Reference* container);
  private:
  const ::TSP::Reference& _internal_container() const;
  ::TSP::Reference* _internal_mutable_container();
  public:
  void unsafe_arena_set_allocated_container(
      ::TSP::Reference* container);
  ::TSP::Reference* unsafe_arena_release_container();

  // optional .TSP.IndexSet children_indices = 4;
  bool has_children_indices() const;
  private:
  bool _internal_has_children_indices() const;
  public:
  void clear_children_indices();
  const ::TSP::IndexSet& children_indices() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_children_indices();
  ::TSP::IndexSet* mutable_children_indices();
  void set_allocated_children_indices(::TSP::IndexSet* children_indices);
  private:
  const ::TSP::IndexSet& _internal_children_indices() const;
  ::TSP::IndexSet* _internal_mutable_children_indices();
  public:
  void unsafe_arena_set_allocated_children_indices(
      ::TSP::IndexSet* children_indices);
  ::TSP::IndexSet* unsafe_arena_release_children_indices();

  // @@protoc_insertion_point(class_scope:TSD.ContainerRemoveChildrenCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* container_;
    ::TSP::IndexSet* children_indices_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerInsertChildrenCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerInsertChildrenCommandArchive) */ {
 public:
  inline ContainerInsertChildrenCommandArchive() : ContainerInsertChildrenCommandArchive(nullptr) {}
  ~ContainerInsertChildrenCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ContainerInsertChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerInsertChildrenCommandArchive(const ContainerInsertChildrenCommandArchive& from);
  ContainerInsertChildrenCommandArchive(ContainerInsertChildrenCommandArchive&& from) noexcept
    : ContainerInsertChildrenCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerInsertChildrenCommandArchive& operator=(const ContainerInsertChildrenCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerInsertChildrenCommandArchive& operator=(ContainerInsertChildrenCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerInsertChildrenCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerInsertChildrenCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerInsertChildrenCommandArchive*>(
               &_ContainerInsertChildrenCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContainerInsertChildrenCommandArchive& a, ContainerInsertChildrenCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerInsertChildrenCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerInsertChildrenCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerInsertChildrenCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerInsertChildrenCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerInsertChildrenCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContainerInsertChildrenCommandArchive& from) {
    ContainerInsertChildrenCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerInsertChildrenCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerInsertChildrenCommandArchive";
  }
  protected:
  explicit ContainerInsertChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kSuperFieldNumber = 1,
    kContainerFieldNumber = 2,
    kIndexFieldNumber = 4,
  };
  // repeated .TSP.Reference children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference container = 2;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const ::TSP::Reference& container() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_container();
  ::TSP::Reference* mutable_container();
  void set_allocated_container(::TSP::Reference* container);
  private:
  const ::TSP::Reference& _internal_container() const;
  ::TSP::Reference* _internal_mutable_container();
  public:
  void unsafe_arena_set_allocated_container(
      ::TSP::Reference* container);
  ::TSP::Reference* unsafe_arena_release_container();

  // optional uint64 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.ContainerInsertChildrenCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* container_;
    uint64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerReorderChildrenCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerReorderChildrenCommandArchive) */ {
 public:
  inline ContainerReorderChildrenCommandArchive() : ContainerReorderChildrenCommandArchive(nullptr) {}
  ~ContainerReorderChildrenCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ContainerReorderChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerReorderChildrenCommandArchive(const ContainerReorderChildrenCommandArchive& from);
  ContainerReorderChildrenCommandArchive(ContainerReorderChildrenCommandArchive&& from) noexcept
    : ContainerReorderChildrenCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerReorderChildrenCommandArchive& operator=(const ContainerReorderChildrenCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerReorderChildrenCommandArchive& operator=(ContainerReorderChildrenCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerReorderChildrenCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerReorderChildrenCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerReorderChildrenCommandArchive*>(
               &_ContainerReorderChildrenCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContainerReorderChildrenCommandArchive& a, ContainerReorderChildrenCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerReorderChildrenCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerReorderChildrenCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerReorderChildrenCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerReorderChildrenCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContainerReorderChildrenCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContainerReorderChildrenCommandArchive& from) {
    ContainerReorderChildrenCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerReorderChildrenCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerReorderChildrenCommandArchive";
  }
  protected:
  explicit ContainerReorderChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kSuperFieldNumber = 1,
    kContainerFieldNumber = 2,
    kChildrenIndicesFieldNumber = 4,
  };
  // repeated .TSP.Reference children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference container = 2;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const ::TSP::Reference& container() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_container();
  ::TSP::Reference* mutable_container();
  void set_allocated_container(::TSP::Reference* container);
  private:
  const ::TSP::Reference& _internal_container() const;
  ::TSP::Reference* _internal_mutable_container();
  public:
  void unsafe_arena_set_allocated_container(
      ::TSP::Reference* container);
  ::TSP::Reference* unsafe_arena_release_container();

  // optional .TSP.IndexSet children_indices = 4;
  bool has_children_indices() const;
  private:
  bool _internal_has_children_indices() const;
  public:
  void clear_children_indices();
  const ::TSP::IndexSet& children_indices() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_children_indices();
  ::TSP::IndexSet* mutable_children_indices();
  void set_allocated_children_indices(::TSP::IndexSet* children_indices);
  private:
  const ::TSP::IndexSet& _internal_children_indices() const;
  ::TSP::IndexSet* _internal_mutable_children_indices();
  public:
  void unsafe_arena_set_allocated_children_indices(
      ::TSP::IndexSet* children_indices);
  ::TSP::IndexSet* unsafe_arena_release_children_indices();

  // @@protoc_insertion_point(class_scope:TSD.ContainerReorderChildrenCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* container_;
    ::TSP::IndexSet* children_indices_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InfoGeometryCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InfoGeometryCommandArchive) */ {
 public:
  inline InfoGeometryCommandArchive() : InfoGeometryCommandArchive(nullptr) {}
  ~InfoGeometryCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR InfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoGeometryCommandArchive(const InfoGeometryCommandArchive& from);
  InfoGeometryCommandArchive(InfoGeometryCommandArchive&& from) noexcept
    : InfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline InfoGeometryCommandArchive& operator=(const InfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoGeometryCommandArchive& operator=(InfoGeometryCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InfoGeometryCommandArchive*>(
               &_InfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InfoGeometryCommandArchive& a, InfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoGeometryCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoGeometryCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoGeometryCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InfoGeometryCommandArchive& from) {
    InfoGeometryCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoGeometryCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InfoGeometryCommandArchive";
  }
  protected:
  explicit InfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kNewGeometryFieldNumber = 3,
    kOldGeometryFieldNumber = 4,
    kShouldClearObjectPlaceholderFlagFieldNumber = 5,
    kDidMatchObjectPlaceholderGeometryFieldNumber = 6,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSD.GeometryArchive newGeometry = 3;
  bool has_newgeometry() const;
  private:
  bool _internal_has_newgeometry() const;
  public:
  void clear_newgeometry();
  const ::TSD::GeometryArchive& newgeometry() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_newgeometry();
  ::TSD::GeometryArchive* mutable_newgeometry();
  void set_allocated_newgeometry(::TSD::GeometryArchive* newgeometry);
  private:
  const ::TSD::GeometryArchive& _internal_newgeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_newgeometry();
  public:
  void unsafe_arena_set_allocated_newgeometry(
      ::TSD::GeometryArchive* newgeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_newgeometry();

  // optional .TSD.GeometryArchive oldGeometry = 4;
  bool has_oldgeometry() const;
  private:
  bool _internal_has_oldgeometry() const;
  public:
  void clear_oldgeometry();
  const ::TSD::GeometryArchive& oldgeometry() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_oldgeometry();
  ::TSD::GeometryArchive* mutable_oldgeometry();
  void set_allocated_oldgeometry(::TSD::GeometryArchive* oldgeometry);
  private:
  const ::TSD::GeometryArchive& _internal_oldgeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_oldgeometry();
  public:
  void unsafe_arena_set_allocated_oldgeometry(
      ::TSD::GeometryArchive* oldgeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_oldgeometry();

  // optional bool shouldClearObjectPlaceholderFlag = 5;
  bool has_shouldclearobjectplaceholderflag() const;
  private:
  bool _internal_has_shouldclearobjectplaceholderflag() const;
  public:
  void clear_shouldclearobjectplaceholderflag();
  bool shouldclearobjectplaceholderflag() const;
  void set_shouldclearobjectplaceholderflag(bool value);
  private:
  bool _internal_shouldclearobjectplaceholderflag() const;
  void _internal_set_shouldclearobjectplaceholderflag(bool value);
  public:

  // optional bool didMatchObjectPlaceholderGeometry = 6;
  bool has_didmatchobjectplaceholdergeometry() const;
  private:
  bool _internal_has_didmatchobjectplaceholdergeometry() const;
  public:
  void clear_didmatchobjectplaceholdergeometry();
  bool didmatchobjectplaceholdergeometry() const;
  void set_didmatchobjectplaceholdergeometry(bool value);
  private:
  bool _internal_didmatchobjectplaceholdergeometry() const;
  void _internal_set_didmatchobjectplaceholdergeometry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.InfoGeometryCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSD::GeometryArchive* newgeometry_;
    ::TSD::GeometryArchive* oldgeometry_;
    bool shouldclearobjectplaceholderflag_;
    bool didmatchobjectplaceholdergeometry_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawablePathSourceCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawablePathSourceCommandArchive) */ {
 public:
  inline DrawablePathSourceCommandArchive() : DrawablePathSourceCommandArchive(nullptr) {}
  ~DrawablePathSourceCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawablePathSourceCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawablePathSourceCommandArchive(const DrawablePathSourceCommandArchive& from);
  DrawablePathSourceCommandArchive(DrawablePathSourceCommandArchive&& from) noexcept
    : DrawablePathSourceCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawablePathSourceCommandArchive& operator=(const DrawablePathSourceCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablePathSourceCommandArchive& operator=(DrawablePathSourceCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawablePathSourceCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawablePathSourceCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawablePathSourceCommandArchive*>(
               &_DrawablePathSourceCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DrawablePathSourceCommandArchive& a, DrawablePathSourceCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablePathSourceCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablePathSourceCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawablePathSourceCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawablePathSourceCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawablePathSourceCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawablePathSourceCommandArchive& from) {
    DrawablePathSourceCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablePathSourceCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawablePathSourceCommandArchive";
  }
  protected:
  explicit DrawablePathSourceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kOldpathsourceFieldNumber = 3,
    kNewpathsourceFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSD.PathSourceArchive oldpathsource = 3;
  bool has_oldpathsource() const;
  private:
  bool _internal_has_oldpathsource() const;
  public:
  void clear_oldpathsource();
  const ::TSD::PathSourceArchive& oldpathsource() const;
  PROTOBUF_NODISCARD ::TSD::PathSourceArchive* release_oldpathsource();
  ::TSD::PathSourceArchive* mutable_oldpathsource();
  void set_allocated_oldpathsource(::TSD::PathSourceArchive* oldpathsource);
  private:
  const ::TSD::PathSourceArchive& _internal_oldpathsource() const;
  ::TSD::PathSourceArchive* _internal_mutable_oldpathsource();
  public:
  void unsafe_arena_set_allocated_oldpathsource(
      ::TSD::PathSourceArchive* oldpathsource);
  ::TSD::PathSourceArchive* unsafe_arena_release_oldpathsource();

  // optional .TSD.PathSourceArchive newpathsource = 4;
  bool has_newpathsource() const;
  private:
  bool _internal_has_newpathsource() const;
  public:
  void clear_newpathsource();
  const ::TSD::PathSourceArchive& newpathsource() const;
  PROTOBUF_NODISCARD ::TSD::PathSourceArchive* release_newpathsource();
  ::TSD::PathSourceArchive* mutable_newpathsource();
  void set_allocated_newpathsource(::TSD::PathSourceArchive* newpathsource);
  private:
  const ::TSD::PathSourceArchive& _internal_newpathsource() const;
  ::TSD::PathSourceArchive* _internal_mutable_newpathsource();
  public:
  void unsafe_arena_set_allocated_newpathsource(
      ::TSD::PathSourceArchive* newpathsource);
  ::TSD::PathSourceArchive* unsafe_arena_release_newpathsource();

  // @@protoc_insertion_point(class_scope:TSD.DrawablePathSourceCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSD::PathSourceArchive* oldpathsource_;
    ::TSD::PathSourceArchive* newpathsource_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InstantAlphaCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InstantAlphaCommandArchive) */ {
 public:
  inline InstantAlphaCommandArchive() : InstantAlphaCommandArchive(nullptr) {}
  ~InstantAlphaCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR InstantAlphaCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstantAlphaCommandArchive(const InstantAlphaCommandArchive& from);
  InstantAlphaCommandArchive(InstantAlphaCommandArchive&& from) noexcept
    : InstantAlphaCommandArchive() {
    *this = ::std::move(from);
  }

  inline InstantAlphaCommandArchive& operator=(const InstantAlphaCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstantAlphaCommandArchive& operator=(InstantAlphaCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstantAlphaCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstantAlphaCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InstantAlphaCommandArchive*>(
               &_InstantAlphaCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InstantAlphaCommandArchive& a, InstantAlphaCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InstantAlphaCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstantAlphaCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstantAlphaCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstantAlphaCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstantAlphaCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstantAlphaCommandArchive& from) {
    InstantAlphaCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstantAlphaCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InstantAlphaCommandArchive";
  }
  protected:
  explicit InstantAlphaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kImageFieldNumber = 2,
    kOldpathFieldNumber = 3,
    kNewpathFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::TSP::Reference& image() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_image();
  ::TSP::Reference* mutable_image();
  void set_allocated_image(::TSP::Reference* image);
  private:
  const ::TSP::Reference& _internal_image() const;
  ::TSP::Reference* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::TSP::Reference* image);
  ::TSP::Reference* unsafe_arena_release_image();

  // optional .TSP.Path oldpath = 3;
  bool has_oldpath() const;
  private:
  bool _internal_has_oldpath() const;
  public:
  void clear_oldpath();
  const ::TSP::Path& oldpath() const;
  PROTOBUF_NODISCARD ::TSP::Path* release_oldpath();
  ::TSP::Path* mutable_oldpath();
  void set_allocated_oldpath(::TSP::Path* oldpath);
  private:
  const ::TSP::Path& _internal_oldpath() const;
  ::TSP::Path* _internal_mutable_oldpath();
  public:
  void unsafe_arena_set_allocated_oldpath(
      ::TSP::Path* oldpath);
  ::TSP::Path* unsafe_arena_release_oldpath();

  // optional .TSP.Path newpath = 4;
  bool has_newpath() const;
  private:
  bool _internal_has_newpath() const;
  public:
  void clear_newpath();
  const ::TSP::Path& newpath() const;
  PROTOBUF_NODISCARD ::TSP::Path* release_newpath();
  ::TSP::Path* mutable_newpath();
  void set_allocated_newpath(::TSP::Path* newpath);
  private:
  const ::TSP::Path& _internal_newpath() const;
  ::TSP::Path* _internal_mutable_newpath();
  public:
  void unsafe_arena_set_allocated_newpath(
      ::TSP::Path* newpath);
  ::TSP::Path* unsafe_arena_release_newpath();

  // @@protoc_insertion_point(class_scope:TSD.InstantAlphaCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* image_;
    ::TSP::Path* oldpath_;
    ::TSP::Path* newpath_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableShadowCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableShadowCommandArchive) */ {
 public:
  inline DrawableShadowCommandArchive() : DrawableShadowCommandArchive(nullptr) {}
  ~DrawableShadowCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawableShadowCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableShadowCommandArchive(const DrawableShadowCommandArchive& from);
  DrawableShadowCommandArchive(DrawableShadowCommandArchive&& from) noexcept
    : DrawableShadowCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableShadowCommandArchive& operator=(const DrawableShadowCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableShadowCommandArchive& operator=(DrawableShadowCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableShadowCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableShadowCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableShadowCommandArchive*>(
               &_DrawableShadowCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DrawableShadowCommandArchive& a, DrawableShadowCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableShadowCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableShadowCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableShadowCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableShadowCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableShadowCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawableShadowCommandArchive& from) {
    DrawableShadowCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableShadowCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableShadowCommandArchive";
  }
  protected:
  explicit DrawableShadowCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kOldshadowFieldNumber = 3,
    kNewshadowFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSD.ShadowArchive oldshadow = 3;
  bool has_oldshadow() const;
  private:
  bool _internal_has_oldshadow() const;
  public:
  void clear_oldshadow();
  const ::TSD::ShadowArchive& oldshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_oldshadow();
  ::TSD::ShadowArchive* mutable_oldshadow();
  void set_allocated_oldshadow(::TSD::ShadowArchive* oldshadow);
  private:
  const ::TSD::ShadowArchive& _internal_oldshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_oldshadow();
  public:
  void unsafe_arena_set_allocated_oldshadow(
      ::TSD::ShadowArchive* oldshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_oldshadow();

  // optional .TSD.ShadowArchive newshadow = 4;
  bool has_newshadow() const;
  private:
  bool _internal_has_newshadow() const;
  public:
  void clear_newshadow();
  const ::TSD::ShadowArchive& newshadow() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_newshadow();
  ::TSD::ShadowArchive* mutable_newshadow();
  void set_allocated_newshadow(::TSD::ShadowArchive* newshadow);
  private:
  const ::TSD::ShadowArchive& _internal_newshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_newshadow();
  public:
  void unsafe_arena_set_allocated_newshadow(
      ::TSD::ShadowArchive* newshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_newshadow();

  // @@protoc_insertion_point(class_scope:TSD.DrawableShadowCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSD::ShadowArchive* oldshadow_;
    ::TSD::ShadowArchive* newshadow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableApplyThemeCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableApplyThemeCommandArchive) */ {
 public:
  inline DrawableApplyThemeCommandArchive() : DrawableApplyThemeCommandArchive(nullptr) {}
  ~DrawableApplyThemeCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawableApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableApplyThemeCommandArchive(const DrawableApplyThemeCommandArchive& from);
  DrawableApplyThemeCommandArchive(DrawableApplyThemeCommandArchive&& from) noexcept
    : DrawableApplyThemeCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableApplyThemeCommandArchive& operator=(const DrawableApplyThemeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableApplyThemeCommandArchive& operator=(DrawableApplyThemeCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableApplyThemeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableApplyThemeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableApplyThemeCommandArchive*>(
               &_DrawableApplyThemeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DrawableApplyThemeCommandArchive& a, DrawableApplyThemeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableApplyThemeCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableApplyThemeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableApplyThemeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableApplyThemeCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableApplyThemeCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawableApplyThemeCommandArchive& from) {
    DrawableApplyThemeCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableApplyThemeCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableApplyThemeCommandArchive";
  }
  protected:
  explicit DrawableApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kStyleFieldNumber = 3,
  };
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ApplyThemeChildCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::ApplyThemeChildCommandArchive* release_super();
  ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);
  private:
  const ::TSS::ApplyThemeChildCommandArchive& _internal_super() const;
  ::TSS::ApplyThemeChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ApplyThemeChildCommandArchive* super);
  ::TSS::ApplyThemeChildCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSD.DrawableApplyThemeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::ApplyThemeChildCommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSP::Reference* style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyledInfoSetStyleCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.StyledInfoSetStyleCommandArchive) */ {
 public:
  inline StyledInfoSetStyleCommandArchive() : StyledInfoSetStyleCommandArchive(nullptr) {}
  ~StyledInfoSetStyleCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR StyledInfoSetStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyledInfoSetStyleCommandArchive(const StyledInfoSetStyleCommandArchive& from);
  StyledInfoSetStyleCommandArchive(StyledInfoSetStyleCommandArchive&& from) noexcept
    : StyledInfoSetStyleCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyledInfoSetStyleCommandArchive& operator=(const StyledInfoSetStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyledInfoSetStyleCommandArchive& operator=(StyledInfoSetStyleCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyledInfoSetStyleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyledInfoSetStyleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyledInfoSetStyleCommandArchive*>(
               &_StyledInfoSetStyleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StyledInfoSetStyleCommandArchive& a, StyledInfoSetStyleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyledInfoSetStyleCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyledInfoSetStyleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StyledInfoSetStyleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StyledInfoSetStyleCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyledInfoSetStyleCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StyledInfoSetStyleCommandArchive& from) {
    StyledInfoSetStyleCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyledInfoSetStyleCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.StyledInfoSetStyleCommandArchive";
  }
  protected:
  explicit StyledInfoSetStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kStyleFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSD.StyledInfoSetStyleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSP::Reference* style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapePathSourceFlipCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ShapePathSourceFlipCommandArchive) */ {
 public:
  inline ShapePathSourceFlipCommandArchive() : ShapePathSourceFlipCommandArchive(nullptr) {}
  ~ShapePathSourceFlipCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ShapePathSourceFlipCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapePathSourceFlipCommandArchive(const ShapePathSourceFlipCommandArchive& from);
  ShapePathSourceFlipCommandArchive(ShapePathSourceFlipCommandArchive&& from) noexcept
    : ShapePathSourceFlipCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapePathSourceFlipCommandArchive& operator=(const ShapePathSourceFlipCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapePathSourceFlipCommandArchive& operator=(ShapePathSourceFlipCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapePathSourceFlipCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapePathSourceFlipCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapePathSourceFlipCommandArchive*>(
               &_ShapePathSourceFlipCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ShapePathSourceFlipCommandArchive& a, ShapePathSourceFlipCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapePathSourceFlipCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapePathSourceFlipCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShapePathSourceFlipCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShapePathSourceFlipCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapePathSourceFlipCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShapePathSourceFlipCommandArchive& from) {
    ShapePathSourceFlipCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapePathSourceFlipCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ShapePathSourceFlipCommandArchive";
  }
  protected:
  explicit ShapePathSourceFlipCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kNewHorizontalFlipFieldNumber = 3,
    kNewVerticalFlipFieldNumber = 4,
    kOldHorizontalFlipFieldNumber = 5,
    kOldVerticalFlipFieldNumber = 6,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional bool newHorizontalFlip = 3;
  bool has_newhorizontalflip() const;
  private:
  bool _internal_has_newhorizontalflip() const;
  public:
  void clear_newhorizontalflip();
  bool newhorizontalflip() const;
  void set_newhorizontalflip(bool value);
  private:
  bool _internal_newhorizontalflip() const;
  void _internal_set_newhorizontalflip(bool value);
  public:

  // optional bool newVerticalFlip = 4;
  bool has_newverticalflip() const;
  private:
  bool _internal_has_newverticalflip() const;
  public:
  void clear_newverticalflip();
  bool newverticalflip() const;
  void set_newverticalflip(bool value);
  private:
  bool _internal_newverticalflip() const;
  void _internal_set_newverticalflip(bool value);
  public:

  // optional bool oldHorizontalFlip = 5;
  bool has_oldhorizontalflip() const;
  private:
  bool _internal_has_oldhorizontalflip() const;
  public:
  void clear_oldhorizontalflip();
  bool oldhorizontalflip() const;
  void set_oldhorizontalflip(bool value);
  private:
  bool _internal_oldhorizontalflip() const;
  void _internal_set_oldhorizontalflip(bool value);
  public:

  // optional bool oldVerticalFlip = 6;
  bool has_oldverticalflip() const;
  private:
  bool _internal_has_oldverticalflip() const;
  public:
  void clear_oldverticalflip();
  bool oldverticalflip() const;
  void set_oldverticalflip(bool value);
  private:
  bool _internal_oldverticalflip() const;
  void _internal_set_oldverticalflip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.ShapePathSourceFlipCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    bool newhorizontalflip_;
    bool newverticalflip_;
    bool oldhorizontalflip_;
    bool oldverticalflip_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeStyleSetValueCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ShapeStyleSetValueCommandArchive) */ {
 public:
  inline ShapeStyleSetValueCommandArchive() : ShapeStyleSetValueCommandArchive(nullptr) {}
  ~ShapeStyleSetValueCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeStyleSetValueCommandArchive(const ShapeStyleSetValueCommandArchive& from);
  ShapeStyleSetValueCommandArchive(ShapeStyleSetValueCommandArchive&& from) noexcept
    : ShapeStyleSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapeStyleSetValueCommandArchive& operator=(const ShapeStyleSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeStyleSetValueCommandArchive& operator=(ShapeStyleSetValueCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeStyleSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeStyleSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeStyleSetValueCommandArchive*>(
               &_ShapeStyleSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ShapeStyleSetValueCommandArchive& a, ShapeStyleSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeStyleSetValueCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeStyleSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShapeStyleSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShapeStyleSetValueCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapeStyleSetValueCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShapeStyleSetValueCommandArchive& from) {
    ShapeStyleSetValueCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeStyleSetValueCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ShapeStyleSetValueCommandArchive";
  }
  protected:
  explicit ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShapePropertiesFieldNumber = 4,
  };
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::StyledInfoSetStyleCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::StyledInfoSetStyleCommandArchive* release_super();
  ::TSD::StyledInfoSetStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super);
  private:
  const ::TSD::StyledInfoSetStyleCommandArchive& _internal_super() const;
  ::TSD::StyledInfoSetStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::StyledInfoSetStyleCommandArchive* super);
  ::TSD::StyledInfoSetStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSD.ShapeStylePropertiesArchive shape_properties = 4;
  bool has_shape_properties() const;
  private:
  bool _internal_has_shape_properties() const;
  public:
  void clear_shape_properties();
  const ::TSD::ShapeStylePropertiesArchive& shape_properties() const;
  PROTOBUF_NODISCARD ::TSD::ShapeStylePropertiesArchive* release_shape_properties();
  ::TSD::ShapeStylePropertiesArchive* mutable_shape_properties();
  void set_allocated_shape_properties(::TSD::ShapeStylePropertiesArchive* shape_properties);
  private:
  const ::TSD::ShapeStylePropertiesArchive& _internal_shape_properties() const;
  ::TSD::ShapeStylePropertiesArchive* _internal_mutable_shape_properties();
  public:
  void unsafe_arena_set_allocated_shape_properties(
      ::TSD::ShapeStylePropertiesArchive* shape_properties);
  ::TSD::ShapeStylePropertiesArchive* unsafe_arena_release_shape_properties();

  // @@protoc_insertion_point(class_scope:TSD.ShapeStyleSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::StyledInfoSetStyleCommandArchive* super_;
    ::TSD::ShapeStylePropertiesArchive* shape_properties_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeApplyPresetCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ShapeApplyPresetCommandArchive) */ {
 public:
  inline ShapeApplyPresetCommandArchive() : ShapeApplyPresetCommandArchive(nullptr) {}
  ~ShapeApplyPresetCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from);
  ShapeApplyPresetCommandArchive(ShapeApplyPresetCommandArchive&& from) noexcept
    : ShapeApplyPresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapeApplyPresetCommandArchive& operator=(const ShapeApplyPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeApplyPresetCommandArchive& operator=(ShapeApplyPresetCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeApplyPresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeApplyPresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeApplyPresetCommandArchive*>(
               &_ShapeApplyPresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ShapeApplyPresetCommandArchive& a, ShapeApplyPresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeApplyPresetCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeApplyPresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShapeApplyPresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShapeApplyPresetCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapeApplyPresetCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShapeApplyPresetCommandArchive& from) {
    ShapeApplyPresetCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeApplyPresetCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ShapeApplyPresetCommandArchive";
  }
  protected:
  explicit ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStylepresetFieldNumber = 10,
    kColorpresetFieldNumber = 11,
    kFillpresetFieldNumber = 12,
    kShadowpresetFieldNumber = 13,
  };
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::StyledInfoSetStyleCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::StyledInfoSetStyleCommandArchive* release_super();
  ::TSD::StyledInfoSetStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super);
  private:
  const ::TSD::StyledInfoSetStyleCommandArchive& _internal_super() const;
  ::TSD::StyledInfoSetStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::StyledInfoSetStyleCommandArchive* super);
  ::TSD::StyledInfoSetStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference stylepreset = 10;
  bool has_stylepreset() const;
  private:
  bool _internal_has_stylepreset() const;
  public:
  void clear_stylepreset();
  const ::TSP::Reference& stylepreset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_stylepreset();
  ::TSP::Reference* mutable_stylepreset();
  void set_allocated_stylepreset(::TSP::Reference* stylepreset);
  private:
  const ::TSP::Reference& _internal_stylepreset() const;
  ::TSP::Reference* _internal_mutable_stylepreset();
  public:
  void unsafe_arena_set_allocated_stylepreset(
      ::TSP::Reference* stylepreset);
  ::TSP::Reference* unsafe_arena_release_stylepreset();

  // optional .TSP.Color colorpreset = 11;
  bool has_colorpreset() const;
  private:
  bool _internal_has_colorpreset() const;
  public:
  void clear_colorpreset();
  const ::TSP::Color& colorpreset() const;
  PROTOBUF_NODISCARD ::TSP::Color* release_colorpreset();
  ::TSP::Color* mutable_colorpreset();
  void set_allocated_colorpreset(::TSP::Color* colorpreset);
  private:
  const ::TSP::Color& _internal_colorpreset() const;
  ::TSP::Color* _internal_mutable_colorpreset();
  public:
  void unsafe_arena_set_allocated_colorpreset(
      ::TSP::Color* colorpreset);
  ::TSP::Color* unsafe_arena_release_colorpreset();

  // optional .TSD.FillArchive fillpreset = 12;
  bool has_fillpreset() const;
  private:
  bool _internal_has_fillpreset() const;
  public:
  void clear_fillpreset();
  const ::TSD::FillArchive& fillpreset() const;
  PROTOBUF_NODISCARD ::TSD::FillArchive* release_fillpreset();
  ::TSD::FillArchive* mutable_fillpreset();
  void set_allocated_fillpreset(::TSD::FillArchive* fillpreset);
  private:
  const ::TSD::FillArchive& _internal_fillpreset() const;
  ::TSD::FillArchive* _internal_mutable_fillpreset();
  public:
  void unsafe_arena_set_allocated_fillpreset(
      ::TSD::FillArchive* fillpreset);
  ::TSD::FillArchive* unsafe_arena_release_fillpreset();

  // optional .TSD.ShadowArchive shadowpreset = 13;
  bool has_shadowpreset() const;
  private:
  bool _internal_has_shadowpreset() const;
  public:
  void clear_shadowpreset();
  const ::TSD::ShadowArchive& shadowpreset() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_shadowpreset();
  ::TSD::ShadowArchive* mutable_shadowpreset();
  void set_allocated_shadowpreset(::TSD::ShadowArchive* shadowpreset);
  private:
  const ::TSD::ShadowArchive& _internal_shadowpreset() const;
  ::TSD::ShadowArchive* _internal_mutable_shadowpreset();
  public:
  void unsafe_arena_set_allocated_shadowpreset(
      ::TSD::ShadowArchive* shadowpreset);
  ::TSD::ShadowArchive* unsafe_arena_release_shadowpreset();

  // @@protoc_insertion_point(class_scope:TSD.ShapeApplyPresetCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::StyledInfoSetStyleCommandArchive* super_;
    ::TSP::Reference* stylepreset_;
    ::TSP::Color* colorpreset_;
    ::TSD::FillArchive* fillpreset_;
    ::TSD::ShadowArchive* shadowpreset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeSetLineEndCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ShapeSetLineEndCommandArchive) */ {
 public:
  inline ShapeSetLineEndCommandArchive() : ShapeSetLineEndCommandArchive(nullptr) {}
  ~ShapeSetLineEndCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ShapeSetLineEndCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeSetLineEndCommandArchive(const ShapeSetLineEndCommandArchive& from);
  ShapeSetLineEndCommandArchive(ShapeSetLineEndCommandArchive&& from) noexcept
    : ShapeSetLineEndCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapeSetLineEndCommandArchive& operator=(const ShapeSetLineEndCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeSetLineEndCommandArchive& operator=(ShapeSetLineEndCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeSetLineEndCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeSetLineEndCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeSetLineEndCommandArchive*>(
               &_ShapeSetLineEndCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ShapeSetLineEndCommandArchive& a, ShapeSetLineEndCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeSetLineEndCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeSetLineEndCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShapeSetLineEndCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShapeSetLineEndCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShapeSetLineEndCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShapeSetLineEndCommandArchive& from) {
    ShapeSetLineEndCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeSetLineEndCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ShapeSetLineEndCommandArchive";
  }
  protected:
  explicit ShapeSetLineEndCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShapeFieldNumber = 2,
    kLineEndFieldNumber = 3,
    kIsHeadLineEndFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::TSP::Reference& shape() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_shape();
  ::TSP::Reference* mutable_shape();
  void set_allocated_shape(::TSP::Reference* shape);
  private:
  const ::TSP::Reference& _internal_shape() const;
  ::TSP::Reference* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::TSP::Reference* shape);
  ::TSP::Reference* unsafe_arena_release_shape();

  // optional .TSD.LineEndArchive line_end = 3;
  bool has_line_end() const;
  private:
  bool _internal_has_line_end() const;
  public:
  void clear_line_end();
  const ::TSD::LineEndArchive& line_end() const;
  PROTOBUF_NODISCARD ::TSD::LineEndArchive* release_line_end();
  ::TSD::LineEndArchive* mutable_line_end();
  void set_allocated_line_end(::TSD::LineEndArchive* line_end);
  private:
  const ::TSD::LineEndArchive& _internal_line_end() const;
  ::TSD::LineEndArchive* _internal_mutable_line_end();
  public:
  void unsafe_arena_set_allocated_line_end(
      ::TSD::LineEndArchive* line_end);
  ::TSD::LineEndArchive* unsafe_arena_release_line_end();

  // optional bool is_head_line_end = 4;
  bool has_is_head_line_end() const;
  private:
  bool _internal_has_is_head_line_end() const;
  public:
  void clear_is_head_line_end();
  bool is_head_line_end() const;
  void set_is_head_line_end(bool value);
  private:
  bool _internal_is_head_line_end() const;
  void _internal_set_is_head_line_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.ShapeSetLineEndCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* shape_;
    ::TSD::LineEndArchive* line_end_;
    bool is_head_line_end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MovieSetValueCommandArchive_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MovieSetValueCommandArchive.PropertyValue) */ {
 public:
  inline MovieSetValueCommandArchive_PropertyValue() : MovieSetValueCommandArchive_PropertyValue(nullptr) {}
  ~MovieSetValueCommandArchive_PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR MovieSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieSetValueCommandArchive_PropertyValue(const MovieSetValueCommandArchive_PropertyValue& from);
  MovieSetValueCommandArchive_PropertyValue(MovieSetValueCommandArchive_PropertyValue&& from) noexcept
    : MovieSetValueCommandArchive_PropertyValue() {
    *this = ::std::move(from);
  }

  inline MovieSetValueCommandArchive_PropertyValue& operator=(const MovieSetValueCommandArchive_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieSetValueCommandArchive_PropertyValue& operator=(MovieSetValueCommandArchive_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieSetValueCommandArchive_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieSetValueCommandArchive_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const MovieSetValueCommandArchive_PropertyValue*>(
               &_MovieSetValueCommandArchive_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MovieSetValueCommandArchive_PropertyValue& a, MovieSetValueCommandArchive_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieSetValueCommandArchive_PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieSetValueCommandArchive_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovieSetValueCommandArchive_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovieSetValueCommandArchive_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovieSetValueCommandArchive_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MovieSetValueCommandArchive_PropertyValue& from) {
    MovieSetValueCommandArchive_PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieSetValueCommandArchive_PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MovieSetValueCommandArchive.PropertyValue";
  }
  protected:
  explicit MovieSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosterimagedataFieldNumber = 4,
    kMediaFieldNumber = 8,
    kImportedauxiliarymediaFieldNumber = 9,
    kStarttimeFieldNumber = 1,
    kEndtimeFieldNumber = 2,
    kPostertimeFieldNumber = 3,
    kAutoplayFieldNumber = 5,
    kLoopOptionFieldNumber = 6,
    kVolumeFieldNumber = 7,
  };
  // optional .TSP.DataReference posterimagedata = 4;
  bool has_posterimagedata() const;
  private:
  bool _internal_has_posterimagedata() const;
  public:
  void clear_posterimagedata();
  const ::TSP::DataReference& posterimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_posterimagedata();
  ::TSP::DataReference* mutable_posterimagedata();
  void set_allocated_posterimagedata(::TSP::DataReference* posterimagedata);
  private:
  const ::TSP::DataReference& _internal_posterimagedata() const;
  ::TSP::DataReference* _internal_mutable_posterimagedata();
  public:
  void unsafe_arena_set_allocated_posterimagedata(
      ::TSP::DataReference* posterimagedata);
  ::TSP::DataReference* unsafe_arena_release_posterimagedata();

  // optional .TSP.DataReference media = 8;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::TSP::DataReference& media() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_media();
  ::TSP::DataReference* mutable_media();
  void set_allocated_media(::TSP::DataReference* media);
  private:
  const ::TSP::DataReference& _internal_media() const;
  ::TSP::DataReference* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::TSP::DataReference* media);
  ::TSP::DataReference* unsafe_arena_release_media();

  // optional .TSP.DataReference importedauxiliarymedia = 9;
  bool has_importedauxiliarymedia() const;
  private:
  bool _internal_has_importedauxiliarymedia() const;
  public:
  void clear_importedauxiliarymedia();
  const ::TSP::DataReference& importedauxiliarymedia() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_importedauxiliarymedia();
  ::TSP::DataReference* mutable_importedauxiliarymedia();
  void set_allocated_importedauxiliarymedia(::TSP::DataReference* importedauxiliarymedia);
  private:
  const ::TSP::DataReference& _internal_importedauxiliarymedia() const;
  ::TSP::DataReference* _internal_mutable_importedauxiliarymedia();
  public:
  void unsafe_arena_set_allocated_importedauxiliarymedia(
      ::TSP::DataReference* importedauxiliarymedia);
  ::TSP::DataReference* unsafe_arena_release_importedauxiliarymedia();

  // optional double starttime = 1;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // optional double endtime = 2;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // optional double postertime = 3;
  bool has_postertime() const;
  private:
  bool _internal_has_postertime() const;
  public:
  void clear_postertime();
  double postertime() const;
  void set_postertime(double value);
  private:
  double _internal_postertime() const;
  void _internal_set_postertime(double value);
  public:

  // optional bool autoplay = 5;
  bool has_autoplay() const;
  private:
  bool _internal_has_autoplay() const;
  public:
  void clear_autoplay();
  bool autoplay() const;
  void set_autoplay(bool value);
  private:
  bool _internal_autoplay() const;
  void _internal_set_autoplay(bool value);
  public:

  // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
  bool has_loopoption() const;
  private:
  bool _internal_has_loopoption() const;
  public:
  void clear_loopoption();
  ::TSD::MovieSetValueCommandArchive_LoopOption loopoption() const;
  void set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value);
  private:
  ::TSD::MovieSetValueCommandArchive_LoopOption _internal_loopoption() const;
  void _internal_set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value);
  public:

  // optional float volume = 7;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.MovieSetValueCommandArchive.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::DataReference* posterimagedata_;
    ::TSP::DataReference* media_;
    ::TSP::DataReference* importedauxiliarymedia_;
    double starttime_;
    double endtime_;
    double postertime_;
    bool autoplay_;
    int loopoption_;
    float volume_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MovieSetValueCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MovieSetValueCommandArchive) */ {
 public:
  inline MovieSetValueCommandArchive() : MovieSetValueCommandArchive(nullptr) {}
  ~MovieSetValueCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR MovieSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieSetValueCommandArchive(const MovieSetValueCommandArchive& from);
  MovieSetValueCommandArchive(MovieSetValueCommandArchive&& from) noexcept
    : MovieSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline MovieSetValueCommandArchive& operator=(const MovieSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieSetValueCommandArchive& operator=(MovieSetValueCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MovieSetValueCommandArchive*>(
               &_MovieSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MovieSetValueCommandArchive& a, MovieSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieSetValueCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovieSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovieSetValueCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovieSetValueCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MovieSetValueCommandArchive& from) {
    MovieSetValueCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieSetValueCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MovieSetValueCommandArchive";
  }
  protected:
  explicit MovieSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MovieSetValueCommandArchive_PropertyValue PropertyValue;

  typedef MovieSetValueCommandArchive_LoopOption LoopOption;
  static constexpr LoopOption None =
    MovieSetValueCommandArchive_LoopOption_None;
  static constexpr LoopOption Repeat =
    MovieSetValueCommandArchive_LoopOption_Repeat;
  static constexpr LoopOption BackAndForth =
    MovieSetValueCommandArchive_LoopOption_BackAndForth;
  static inline bool LoopOption_IsValid(int value) {
    return MovieSetValueCommandArchive_LoopOption_IsValid(value);
  }
  static constexpr LoopOption LoopOption_MIN =
    MovieSetValueCommandArchive_LoopOption_LoopOption_MIN;
  static constexpr LoopOption LoopOption_MAX =
    MovieSetValueCommandArchive_LoopOption_LoopOption_MAX;
  static constexpr int LoopOption_ARRAYSIZE =
    MovieSetValueCommandArchive_LoopOption_LoopOption_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoopOption_descriptor() {
    return MovieSetValueCommandArchive_LoopOption_descriptor();
  }
  template<typename T>
  static inline const std::string& LoopOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoopOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoopOption_Name.");
    return MovieSetValueCommandArchive_LoopOption_Name(enum_t_value);
  }
  static inline bool LoopOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LoopOption* value) {
    return MovieSetValueCommandArchive_LoopOption_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedPropertyFieldNumber = 3,
    kSuperFieldNumber = 1,
    kMovieFieldNumber = 2,
    kValueFieldNumber = 5,
    kPropertyFieldNumber = 4,
  };
  // optional string deprecated_property = 3;
  bool has_deprecated_property() const;
  private:
  bool _internal_has_deprecated_property() const;
  public:
  void clear_deprecated_property();
  const std::string& deprecated_property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deprecated_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deprecated_property();
  PROTOBUF_NODISCARD std::string* release_deprecated_property();
  void set_allocated_deprecated_property(std::string* deprecated_property);
  private:
  const std::string& _internal_deprecated_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated_property(const std::string& value);
  std::string* _internal_mutable_deprecated_property();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference movie = 2;
  bool has_movie() const;
  private:
  bool _internal_has_movie() const;
  public:
  void clear_movie();
  const ::TSP::Reference& movie() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_movie();
  ::TSP::Reference* mutable_movie();
  void set_allocated_movie(::TSP::Reference* movie);
  private:
  const ::TSP::Reference& _internal_movie() const;
  ::TSP::Reference* _internal_mutable_movie();
  public:
  void unsafe_arena_set_allocated_movie(
      ::TSP::Reference* movie);
  ::TSP::Reference* unsafe_arena_release_movie();

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TSD::MovieSetValueCommandArchive_PropertyValue& value() const;
  PROTOBUF_NODISCARD ::TSD::MovieSetValueCommandArchive_PropertyValue* release_value();
  ::TSD::MovieSetValueCommandArchive_PropertyValue* mutable_value();
  void set_allocated_value(::TSD::MovieSetValueCommandArchive_PropertyValue* value);
  private:
  const ::TSD::MovieSetValueCommandArchive_PropertyValue& _internal_value() const;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TSD::MovieSetValueCommandArchive_PropertyValue* value);
  ::TSD::MovieSetValueCommandArchive_PropertyValue* unsafe_arena_release_value();

  // optional int32 property = 4;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  int32_t property() const;
  void set_property(int32_t value);
  private:
  int32_t _internal_property() const;
  void _internal_set_property(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.MovieSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_property_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* movie_;
    ::TSD::MovieSetValueCommandArchive_PropertyValue* value_;
    int32_t property_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaStyleSetValueCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaStyleSetValueCommandArchive) */ {
 public:
  inline MediaStyleSetValueCommandArchive() : MediaStyleSetValueCommandArchive(nullptr) {}
  ~MediaStyleSetValueCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR MediaStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaStyleSetValueCommandArchive(const MediaStyleSetValueCommandArchive& from);
  MediaStyleSetValueCommandArchive(MediaStyleSetValueCommandArchive&& from) noexcept
    : MediaStyleSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaStyleSetValueCommandArchive& operator=(const MediaStyleSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaStyleSetValueCommandArchive& operator=(MediaStyleSetValueCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaStyleSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaStyleSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaStyleSetValueCommandArchive*>(
               &_MediaStyleSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MediaStyleSetValueCommandArchive& a, MediaStyleSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaStyleSetValueCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaStyleSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaStyleSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaStyleSetValueCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaStyleSetValueCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaStyleSetValueCommandArchive& from) {
    MediaStyleSetValueCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaStyleSetValueCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaStyleSetValueCommandArchive";
  }
  protected:
  explicit MediaStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMediaPropertiesFieldNumber = 4,
  };
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::StyledInfoSetStyleCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::StyledInfoSetStyleCommandArchive* release_super();
  ::TSD::StyledInfoSetStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super);
  private:
  const ::TSD::StyledInfoSetStyleCommandArchive& _internal_super() const;
  ::TSD::StyledInfoSetStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::StyledInfoSetStyleCommandArchive* super);
  ::TSD::StyledInfoSetStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSD.MediaStylePropertiesArchive media_properties = 4;
  bool has_media_properties() const;
  private:
  bool _internal_has_media_properties() const;
  public:
  void clear_media_properties();
  const ::TSD::MediaStylePropertiesArchive& media_properties() const;
  PROTOBUF_NODISCARD ::TSD::MediaStylePropertiesArchive* release_media_properties();
  ::TSD::MediaStylePropertiesArchive* mutable_media_properties();
  void set_allocated_media_properties(::TSD::MediaStylePropertiesArchive* media_properties);
  private:
  const ::TSD::MediaStylePropertiesArchive& _internal_media_properties() const;
  ::TSD::MediaStylePropertiesArchive* _internal_mutable_media_properties();
  public:
  void unsafe_arena_set_allocated_media_properties(
      ::TSD::MediaStylePropertiesArchive* media_properties);
  ::TSD::MediaStylePropertiesArchive* unsafe_arena_release_media_properties();

  // @@protoc_insertion_point(class_scope:TSD.MediaStyleSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::StyledInfoSetStyleCommandArchive* super_;
    ::TSD::MediaStylePropertiesArchive* media_properties_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageMediaCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageMediaCommandArchive) */ {
 public:
  inline ImageMediaCommandArchive() : ImageMediaCommandArchive(nullptr) {}
  ~ImageMediaCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ImageMediaCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMediaCommandArchive(const ImageMediaCommandArchive& from);
  ImageMediaCommandArchive(ImageMediaCommandArchive&& from) noexcept
    : ImageMediaCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageMediaCommandArchive& operator=(const ImageMediaCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMediaCommandArchive& operator=(ImageMediaCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMediaCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMediaCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageMediaCommandArchive*>(
               &_ImageMediaCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ImageMediaCommandArchive& a, ImageMediaCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMediaCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMediaCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageMediaCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageMediaCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageMediaCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageMediaCommandArchive& from) {
    ImageMediaCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMediaCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageMediaCommandArchive";
  }
  protected:
  explicit ImageMediaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kDatabaseNewImageDataFieldNumber = 3,
    kDatabaseOldImageDataFieldNumber = 4,
    kDatabaseOldOriginalImageDataFieldNumber = 5,
    kOldNaturalSizeFieldNumber = 6,
    kDatabaseNewOriginalImageDataFieldNumber = 7,
    kNewImageDataFieldNumber = 8,
    kOldImageDataFieldNumber = 9,
    kOldOriginalImageDataFieldNumber = 10,
    kNewOriginalImageDataFieldNumber = 11,
    kOldImageAdjustmentsFieldNumber = 12,
    kOldAdjustedImageDataFieldNumber = 13,
    kOldEnhancedImageDataFieldNumber = 14,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference database_newImageData = 3;
  bool has_database_newimagedata() const;
  private:
  bool _internal_has_database_newimagedata() const;
  public:
  void clear_database_newimagedata();
  const ::TSP::Reference& database_newimagedata() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_database_newimagedata();
  ::TSP::Reference* mutable_database_newimagedata();
  void set_allocated_database_newimagedata(::TSP::Reference* database_newimagedata);
  private:
  const ::TSP::Reference& _internal_database_newimagedata() const;
  ::TSP::Reference* _internal_mutable_database_newimagedata();
  public:
  void unsafe_arena_set_allocated_database_newimagedata(
      ::TSP::Reference* database_newimagedata);
  ::TSP::Reference* unsafe_arena_release_database_newimagedata();

  // optional .TSP.Reference database_oldImageData = 4;
  bool has_database_oldimagedata() const;
  private:
  bool _internal_has_database_oldimagedata() const;
  public:
  void clear_database_oldimagedata();
  const ::TSP::Reference& database_oldimagedata() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_database_oldimagedata();
  ::TSP::Reference* mutable_database_oldimagedata();
  void set_allocated_database_oldimagedata(::TSP::Reference* database_oldimagedata);
  private:
  const ::TSP::Reference& _internal_database_oldimagedata() const;
  ::TSP::Reference* _internal_mutable_database_oldimagedata();
  public:
  void unsafe_arena_set_allocated_database_oldimagedata(
      ::TSP::Reference* database_oldimagedata);
  ::TSP::Reference* unsafe_arena_release_database_oldimagedata();

  // optional .TSP.Reference database_oldOriginalImageData = 5;
  bool has_database_oldoriginalimagedata() const;
  private:
  bool _internal_has_database_oldoriginalimagedata() const;
  public:
  void clear_database_oldoriginalimagedata();
  const ::TSP::Reference& database_oldoriginalimagedata() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_database_oldoriginalimagedata();
  ::TSP::Reference* mutable_database_oldoriginalimagedata();
  void set_allocated_database_oldoriginalimagedata(::TSP::Reference* database_oldoriginalimagedata);
  private:
  const ::TSP::Reference& _internal_database_oldoriginalimagedata() const;
  ::TSP::Reference* _internal_mutable_database_oldoriginalimagedata();
  public:
  void unsafe_arena_set_allocated_database_oldoriginalimagedata(
      ::TSP::Reference* database_oldoriginalimagedata);
  ::TSP::Reference* unsafe_arena_release_database_oldoriginalimagedata();

  // optional .TSP.Size oldNaturalSize = 6;
  bool has_oldnaturalsize() const;
  private:
  bool _internal_has_oldnaturalsize() const;
  public:
  void clear_oldnaturalsize();
  const ::TSP::Size& oldnaturalsize() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_oldnaturalsize();
  ::TSP::Size* mutable_oldnaturalsize();
  void set_allocated_oldnaturalsize(::TSP::Size* oldnaturalsize);
  private:
  const ::TSP::Size& _internal_oldnaturalsize() const;
  ::TSP::Size* _internal_mutable_oldnaturalsize();
  public:
  void unsafe_arena_set_allocated_oldnaturalsize(
      ::TSP::Size* oldnaturalsize);
  ::TSP::Size* unsafe_arena_release_oldnaturalsize();

  // optional .TSP.Reference database_newOriginalImageData = 7;
  bool has_database_neworiginalimagedata() const;
  private:
  bool _internal_has_database_neworiginalimagedata() const;
  public:
  void clear_database_neworiginalimagedata();
  const ::TSP::Reference& database_neworiginalimagedata() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_database_neworiginalimagedata();
  ::TSP::Reference* mutable_database_neworiginalimagedata();
  void set_allocated_database_neworiginalimagedata(::TSP::Reference* database_neworiginalimagedata);
  private:
  const ::TSP::Reference& _internal_database_neworiginalimagedata() const;
  ::TSP::Reference* _internal_mutable_database_neworiginalimagedata();
  public:
  void unsafe_arena_set_allocated_database_neworiginalimagedata(
      ::TSP::Reference* database_neworiginalimagedata);
  ::TSP::Reference* unsafe_arena_release_database_neworiginalimagedata();

  // optional .TSP.DataReference newImageData = 8;
  bool has_newimagedata() const;
  private:
  bool _internal_has_newimagedata() const;
  public:
  void clear_newimagedata();
  const ::TSP::DataReference& newimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_newimagedata();
  ::TSP::DataReference* mutable_newimagedata();
  void set_allocated_newimagedata(::TSP::DataReference* newimagedata);
  private:
  const ::TSP::DataReference& _internal_newimagedata() const;
  ::TSP::DataReference* _internal_mutable_newimagedata();
  public:
  void unsafe_arena_set_allocated_newimagedata(
      ::TSP::DataReference* newimagedata);
  ::TSP::DataReference* unsafe_arena_release_newimagedata();

  // optional .TSP.DataReference oldImageData = 9;
  bool has_oldimagedata() const;
  private:
  bool _internal_has_oldimagedata() const;
  public:
  void clear_oldimagedata();
  const ::TSP::DataReference& oldimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_oldimagedata();
  ::TSP::DataReference* mutable_oldimagedata();
  void set_allocated_oldimagedata(::TSP::DataReference* oldimagedata);
  private:
  const ::TSP::DataReference& _internal_oldimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldimagedata();
  public:
  void unsafe_arena_set_allocated_oldimagedata(
      ::TSP::DataReference* oldimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldimagedata();

  // optional .TSP.DataReference oldOriginalImageData = 10;
  bool has_oldoriginalimagedata() const;
  private:
  bool _internal_has_oldoriginalimagedata() const;
  public:
  void clear_oldoriginalimagedata();
  const ::TSP::DataReference& oldoriginalimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_oldoriginalimagedata();
  ::TSP::DataReference* mutable_oldoriginalimagedata();
  void set_allocated_oldoriginalimagedata(::TSP::DataReference* oldoriginalimagedata);
  private:
  const ::TSP::DataReference& _internal_oldoriginalimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldoriginalimagedata();
  public:
  void unsafe_arena_set_allocated_oldoriginalimagedata(
      ::TSP::DataReference* oldoriginalimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldoriginalimagedata();

  // optional .TSP.DataReference newOriginalImageData = 11;
  bool has_neworiginalimagedata() const;
  private:
  bool _internal_has_neworiginalimagedata() const;
  public:
  void clear_neworiginalimagedata();
  const ::TSP::DataReference& neworiginalimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_neworiginalimagedata();
  ::TSP::DataReference* mutable_neworiginalimagedata();
  void set_allocated_neworiginalimagedata(::TSP::DataReference* neworiginalimagedata);
  private:
  const ::TSP::DataReference& _internal_neworiginalimagedata() const;
  ::TSP::DataReference* _internal_mutable_neworiginalimagedata();
  public:
  void unsafe_arena_set_allocated_neworiginalimagedata(
      ::TSP::DataReference* neworiginalimagedata);
  ::TSP::DataReference* unsafe_arena_release_neworiginalimagedata();

  // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
  bool has_oldimageadjustments() const;
  private:
  bool _internal_has_oldimageadjustments() const;
  public:
  void clear_oldimageadjustments();
  const ::TSD::ImageAdjustmentsArchive& oldimageadjustments() const;
  PROTOBUF_NODISCARD ::TSD::ImageAdjustmentsArchive* release_oldimageadjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_oldimageadjustments();
  void set_allocated_oldimageadjustments(::TSD::ImageAdjustmentsArchive* oldimageadjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_oldimageadjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_oldimageadjustments();
  public:
  void unsafe_arena_set_allocated_oldimageadjustments(
      ::TSD::ImageAdjustmentsArchive* oldimageadjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_oldimageadjustments();

  // optional .TSP.DataReference oldAdjustedImageData = 13;
  bool has_oldadjustedimagedata() const;
  private:
  bool _internal_has_oldadjustedimagedata() const;
  public:
  void clear_oldadjustedimagedata();
  const ::TSP::DataReference& oldadjustedimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_oldadjustedimagedata();
  ::TSP::DataReference* mutable_oldadjustedimagedata();
  void set_allocated_oldadjustedimagedata(::TSP::DataReference* oldadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_oldadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_oldadjustedimagedata(
      ::TSP::DataReference* oldadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldadjustedimagedata();

  // optional .TSP.DataReference oldEnhancedImageData = 14;
  bool has_oldenhancedimagedata() const;
  private:
  bool _internal_has_oldenhancedimagedata() const;
  public:
  void clear_oldenhancedimagedata();
  const ::TSP::DataReference& oldenhancedimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_oldenhancedimagedata();
  ::TSP::DataReference* mutable_oldenhancedimagedata();
  void set_allocated_oldenhancedimagedata(::TSP::DataReference* oldenhancedimagedata);
  private:
  const ::TSP::DataReference& _internal_oldenhancedimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldenhancedimagedata();
  public:
  void unsafe_arena_set_allocated_oldenhancedimagedata(
      ::TSP::DataReference* oldenhancedimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldenhancedimagedata();

  // @@protoc_insertion_point(class_scope:TSD.ImageMediaCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSP::Reference* database_newimagedata_;
    ::TSP::Reference* database_oldimagedata_;
    ::TSP::Reference* database_oldoriginalimagedata_;
    ::TSP::Size* oldnaturalsize_;
    ::TSP::Reference* database_neworiginalimagedata_;
    ::TSP::DataReference* newimagedata_;
    ::TSP::DataReference* oldimagedata_;
    ::TSP::DataReference* oldoriginalimagedata_;
    ::TSP::DataReference* neworiginalimagedata_;
    ::TSD::ImageAdjustmentsArchive* oldimageadjustments_;
    ::TSP::DataReference* oldadjustedimagedata_;
    ::TSP::DataReference* oldenhancedimagedata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaOriginalSizeCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaOriginalSizeCommandArchive) */ {
 public:
  inline MediaOriginalSizeCommandArchive() : MediaOriginalSizeCommandArchive(nullptr) {}
  ~MediaOriginalSizeCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR MediaOriginalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaOriginalSizeCommandArchive(const MediaOriginalSizeCommandArchive& from);
  MediaOriginalSizeCommandArchive(MediaOriginalSizeCommandArchive&& from) noexcept
    : MediaOriginalSizeCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaOriginalSizeCommandArchive& operator=(const MediaOriginalSizeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaOriginalSizeCommandArchive& operator=(MediaOriginalSizeCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaOriginalSizeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaOriginalSizeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaOriginalSizeCommandArchive*>(
               &_MediaOriginalSizeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MediaOriginalSizeCommandArchive& a, MediaOriginalSizeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaOriginalSizeCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaOriginalSizeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaOriginalSizeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaOriginalSizeCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaOriginalSizeCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaOriginalSizeCommandArchive& from) {
    MediaOriginalSizeCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaOriginalSizeCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaOriginalSizeCommandArchive";
  }
  protected:
  explicit MediaOriginalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kNewOriginalSizeFieldNumber = 3,
    kOldOriginalSizeFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Size newOriginalSize = 3;
  bool has_neworiginalsize() const;
  private:
  bool _internal_has_neworiginalsize() const;
  public:
  void clear_neworiginalsize();
  const ::TSP::Size& neworiginalsize() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_neworiginalsize();
  ::TSP::Size* mutable_neworiginalsize();
  void set_allocated_neworiginalsize(::TSP::Size* neworiginalsize);
  private:
  const ::TSP::Size& _internal_neworiginalsize() const;
  ::TSP::Size* _internal_mutable_neworiginalsize();
  public:
  void unsafe_arena_set_allocated_neworiginalsize(
      ::TSP::Size* neworiginalsize);
  ::TSP::Size* unsafe_arena_release_neworiginalsize();

  // optional .TSP.Size oldOriginalSize = 4;
  bool has_oldoriginalsize() const;
  private:
  bool _internal_has_oldoriginalsize() const;
  public:
  void clear_oldoriginalsize();
  const ::TSP::Size& oldoriginalsize() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_oldoriginalsize();
  ::TSP::Size* mutable_oldoriginalsize();
  void set_allocated_oldoriginalsize(::TSP::Size* oldoriginalsize);
  private:
  const ::TSP::Size& _internal_oldoriginalsize() const;
  ::TSP::Size* _internal_mutable_oldoriginalsize();
  public:
  void unsafe_arena_set_allocated_oldoriginalsize(
      ::TSP::Size* oldoriginalsize);
  ::TSP::Size* unsafe_arena_release_oldoriginalsize();

  // @@protoc_insertion_point(class_scope:TSD.MediaOriginalSizeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSP::Size* neworiginalsize_;
    ::TSP::Size* oldoriginalsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageMaskCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageMaskCommandArchive) */ {
 public:
  inline ImageMaskCommandArchive() : ImageMaskCommandArchive(nullptr) {}
  ~ImageMaskCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ImageMaskCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMaskCommandArchive(const ImageMaskCommandArchive& from);
  ImageMaskCommandArchive(ImageMaskCommandArchive&& from) noexcept
    : ImageMaskCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageMaskCommandArchive& operator=(const ImageMaskCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMaskCommandArchive& operator=(ImageMaskCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMaskCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMaskCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageMaskCommandArchive*>(
               &_ImageMaskCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ImageMaskCommandArchive& a, ImageMaskCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMaskCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMaskCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageMaskCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageMaskCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageMaskCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageMaskCommandArchive& from) {
    ImageMaskCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMaskCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageMaskCommandArchive";
  }
  protected:
  explicit ImageMaskCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kNewMaskInfoFieldNumber = 3,
    kOldMaskInfoFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference newMaskInfo = 3;
  bool has_newmaskinfo() const;
  private:
  bool _internal_has_newmaskinfo() const;
  public:
  void clear_newmaskinfo();
  const ::TSP::Reference& newmaskinfo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_newmaskinfo();
  ::TSP::Reference* mutable_newmaskinfo();
  void set_allocated_newmaskinfo(::TSP::Reference* newmaskinfo);
  private:
  const ::TSP::Reference& _internal_newmaskinfo() const;
  ::TSP::Reference* _internal_mutable_newmaskinfo();
  public:
  void unsafe_arena_set_allocated_newmaskinfo(
      ::TSP::Reference* newmaskinfo);
  ::TSP::Reference* unsafe_arena_release_newmaskinfo();

  // optional .TSP.Reference oldMaskInfo = 4;
  bool has_oldmaskinfo() const;
  private:
  bool _internal_has_oldmaskinfo() const;
  public:
  void clear_oldmaskinfo();
  const ::TSP::Reference& oldmaskinfo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_oldmaskinfo();
  ::TSP::Reference* mutable_oldmaskinfo();
  void set_allocated_oldmaskinfo(::TSP::Reference* oldmaskinfo);
  private:
  const ::TSP::Reference& _internal_oldmaskinfo() const;
  ::TSP::Reference* _internal_mutable_oldmaskinfo();
  public:
  void unsafe_arena_set_allocated_oldmaskinfo(
      ::TSP::Reference* oldmaskinfo);
  ::TSP::Reference* unsafe_arena_release_oldmaskinfo();

  // @@protoc_insertion_point(class_scope:TSD.ImageMaskCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSP::Reference* newmaskinfo_;
    ::TSP::Reference* oldmaskinfo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaApplyPresetCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaApplyPresetCommandArchive) */ {
 public:
  inline MediaApplyPresetCommandArchive() : MediaApplyPresetCommandArchive(nullptr) {}
  ~MediaApplyPresetCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR MediaApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaApplyPresetCommandArchive(const MediaApplyPresetCommandArchive& from);
  MediaApplyPresetCommandArchive(MediaApplyPresetCommandArchive&& from) noexcept
    : MediaApplyPresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaApplyPresetCommandArchive& operator=(const MediaApplyPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaApplyPresetCommandArchive& operator=(MediaApplyPresetCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaApplyPresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaApplyPresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaApplyPresetCommandArchive*>(
               &_MediaApplyPresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MediaApplyPresetCommandArchive& a, MediaApplyPresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaApplyPresetCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaApplyPresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaApplyPresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaApplyPresetCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaApplyPresetCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaApplyPresetCommandArchive& from) {
    MediaApplyPresetCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaApplyPresetCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaApplyPresetCommandArchive";
  }
  protected:
  explicit MediaApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStylepresetFieldNumber = 10,
    kShadowpresetFieldNumber = 11,
  };
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::StyledInfoSetStyleCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::StyledInfoSetStyleCommandArchive* release_super();
  ::TSD::StyledInfoSetStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super);
  private:
  const ::TSD::StyledInfoSetStyleCommandArchive& _internal_super() const;
  ::TSD::StyledInfoSetStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::StyledInfoSetStyleCommandArchive* super);
  ::TSD::StyledInfoSetStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference stylepreset = 10;
  bool has_stylepreset() const;
  private:
  bool _internal_has_stylepreset() const;
  public:
  void clear_stylepreset();
  const ::TSP::Reference& stylepreset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_stylepreset();
  ::TSP::Reference* mutable_stylepreset();
  void set_allocated_stylepreset(::TSP::Reference* stylepreset);
  private:
  const ::TSP::Reference& _internal_stylepreset() const;
  ::TSP::Reference* _internal_mutable_stylepreset();
  public:
  void unsafe_arena_set_allocated_stylepreset(
      ::TSP::Reference* stylepreset);
  ::TSP::Reference* unsafe_arena_release_stylepreset();

  // optional .TSD.ShadowArchive shadowpreset = 11;
  bool has_shadowpreset() const;
  private:
  bool _internal_has_shadowpreset() const;
  public:
  void clear_shadowpreset();
  const ::TSD::ShadowArchive& shadowpreset() const;
  PROTOBUF_NODISCARD ::TSD::ShadowArchive* release_shadowpreset();
  ::TSD::ShadowArchive* mutable_shadowpreset();
  void set_allocated_shadowpreset(::TSD::ShadowArchive* shadowpreset);
  private:
  const ::TSD::ShadowArchive& _internal_shadowpreset() const;
  ::TSD::ShadowArchive* _internal_mutable_shadowpreset();
  public:
  void unsafe_arena_set_allocated_shadowpreset(
      ::TSD::ShadowArchive* shadowpreset);
  ::TSD::ShadowArchive* unsafe_arena_release_shadowpreset();

  // @@protoc_insertion_point(class_scope:TSD.MediaApplyPresetCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::StyledInfoSetStyleCommandArchive* super_;
    ::TSP::Reference* stylepreset_;
    ::TSD::ShadowArchive* shadowpreset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageAdjustmentsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageAdjustmentsCommandArchive) */ {
 public:
  inline ImageAdjustmentsCommandArchive() : ImageAdjustmentsCommandArchive(nullptr) {}
  ~ImageAdjustmentsCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ImageAdjustmentsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageAdjustmentsCommandArchive(const ImageAdjustmentsCommandArchive& from);
  ImageAdjustmentsCommandArchive(ImageAdjustmentsCommandArchive&& from) noexcept
    : ImageAdjustmentsCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageAdjustmentsCommandArchive& operator=(const ImageAdjustmentsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageAdjustmentsCommandArchive& operator=(ImageAdjustmentsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageAdjustmentsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageAdjustmentsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageAdjustmentsCommandArchive*>(
               &_ImageAdjustmentsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ImageAdjustmentsCommandArchive& a, ImageAdjustmentsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageAdjustmentsCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageAdjustmentsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageAdjustmentsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageAdjustmentsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageAdjustmentsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageAdjustmentsCommandArchive& from) {
    ImageAdjustmentsCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageAdjustmentsCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageAdjustmentsCommandArchive";
  }
  protected:
  explicit ImageAdjustmentsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldImageAdjustmentsFieldNumber = 2,
    kNewImageAdjustmentsFieldNumber = 3,
    kAdjustedImageDataFieldNumber = 4,
    kReplacedAdjustedImageDataFieldNumber = 5,
    kEnhancedImageDataFieldNumber = 6,
    kReplacedEnhancedImageDataFieldNumber = 7,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
  bool has_old_image_adjustments() const;
  private:
  bool _internal_has_old_image_adjustments() const;
  public:
  void clear_old_image_adjustments();
  const ::TSD::ImageAdjustmentsArchive& old_image_adjustments() const;
  PROTOBUF_NODISCARD ::TSD::ImageAdjustmentsArchive* release_old_image_adjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_old_image_adjustments();
  void set_allocated_old_image_adjustments(::TSD::ImageAdjustmentsArchive* old_image_adjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_old_image_adjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_old_image_adjustments();
  public:
  void unsafe_arena_set_allocated_old_image_adjustments(
      ::TSD::ImageAdjustmentsArchive* old_image_adjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_old_image_adjustments();

  // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
  bool has_new_image_adjustments() const;
  private:
  bool _internal_has_new_image_adjustments() const;
  public:
  void clear_new_image_adjustments();
  const ::TSD::ImageAdjustmentsArchive& new_image_adjustments() const;
  PROTOBUF_NODISCARD ::TSD::ImageAdjustmentsArchive* release_new_image_adjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_new_image_adjustments();
  void set_allocated_new_image_adjustments(::TSD::ImageAdjustmentsArchive* new_image_adjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_new_image_adjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_new_image_adjustments();
  public:
  void unsafe_arena_set_allocated_new_image_adjustments(
      ::TSD::ImageAdjustmentsArchive* new_image_adjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_new_image_adjustments();

  // optional .TSP.DataReference adjustedImageData = 4;
  bool has_adjustedimagedata() const;
  private:
  bool _internal_has_adjustedimagedata() const;
  public:
  void clear_adjustedimagedata();
  const ::TSP::DataReference& adjustedimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_adjustedimagedata();
  ::TSP::DataReference* mutable_adjustedimagedata();
  void set_allocated_adjustedimagedata(::TSP::DataReference* adjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_adjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_adjustedimagedata();
  public:
  void unsafe_arena_set_allocated_adjustedimagedata(
      ::TSP::DataReference* adjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_adjustedimagedata();

  // optional .TSP.DataReference replacedAdjustedImageData = 5;
  bool has_replacedadjustedimagedata() const;
  private:
  bool _internal_has_replacedadjustedimagedata() const;
  public:
  void clear_replacedadjustedimagedata();
  const ::TSP::DataReference& replacedadjustedimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_replacedadjustedimagedata();
  ::TSP::DataReference* mutable_replacedadjustedimagedata();
  void set_allocated_replacedadjustedimagedata(::TSP::DataReference* replacedadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_replacedadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_replacedadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_replacedadjustedimagedata(
      ::TSP::DataReference* replacedadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_replacedadjustedimagedata();

  // optional .TSP.DataReference enhancedImageData = 6;
  bool has_enhancedimagedata() const;
  private:
  bool _internal_has_enhancedimagedata() const;
  public:
  void clear_enhancedimagedata();
  const ::TSP::DataReference& enhancedimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_enhancedimagedata();
  ::TSP::DataReference* mutable_enhancedimagedata();
  void set_allocated_enhancedimagedata(::TSP::DataReference* enhancedimagedata);
  private:
  const ::TSP::DataReference& _internal_enhancedimagedata() const;
  ::TSP::DataReference* _internal_mutable_enhancedimagedata();
  public:
  void unsafe_arena_set_allocated_enhancedimagedata(
      ::TSP::DataReference* enhancedimagedata);
  ::TSP::DataReference* unsafe_arena_release_enhancedimagedata();

  // optional .TSP.DataReference replacedEnhancedImageData = 7;
  bool has_replacedenhancedimagedata() const;
  private:
  bool _internal_has_replacedenhancedimagedata() const;
  public:
  void clear_replacedenhancedimagedata();
  const ::TSP::DataReference& replacedenhancedimagedata() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_replacedenhancedimagedata();
  ::TSP::DataReference* mutable_replacedenhancedimagedata();
  void set_allocated_replacedenhancedimagedata(::TSP::DataReference* replacedenhancedimagedata);
  private:
  const ::TSP::DataReference& _internal_replacedenhancedimagedata() const;
  ::TSP::DataReference* _internal_mutable_replacedenhancedimagedata();
  public:
  void unsafe_arena_set_allocated_replacedenhancedimagedata(
      ::TSP::DataReference* replacedenhancedimagedata);
  ::TSP::DataReference* unsafe_arena_release_replacedenhancedimagedata();

  // @@protoc_insertion_point(class_scope:TSD.ImageAdjustmentsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSD::ImageAdjustmentsArchive* old_image_adjustments_;
    ::TSD::ImageAdjustmentsArchive* new_image_adjustments_;
    ::TSP::DataReference* adjustedimagedata_;
    ::TSP::DataReference* replacedadjustedimagedata_;
    ::TSP::DataReference* enhancedimagedata_;
    ::TSP::DataReference* replacedenhancedimagedata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaFlagsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaFlagsCommandArchive) */ {
 public:
  inline MediaFlagsCommandArchive() : MediaFlagsCommandArchive(nullptr) {}
  ~MediaFlagsCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR MediaFlagsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaFlagsCommandArchive(const MediaFlagsCommandArchive& from);
  MediaFlagsCommandArchive(MediaFlagsCommandArchive&& from) noexcept
    : MediaFlagsCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaFlagsCommandArchive& operator=(const MediaFlagsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaFlagsCommandArchive& operator=(MediaFlagsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaFlagsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaFlagsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaFlagsCommandArchive*>(
               &_MediaFlagsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MediaFlagsCommandArchive& a, MediaFlagsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaFlagsCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaFlagsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaFlagsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaFlagsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaFlagsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaFlagsCommandArchive& from) {
    MediaFlagsCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaFlagsCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaFlagsCommandArchive";
  }
  protected:
  explicit MediaFlagsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional uint32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.MediaFlagsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawablesCommandGroupArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawablesCommandGroupArchive) */ {
 public:
  inline DrawablesCommandGroupArchive() : DrawablesCommandGroupArchive(nullptr) {}
  ~DrawablesCommandGroupArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawablesCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawablesCommandGroupArchive(const DrawablesCommandGroupArchive& from);
  DrawablesCommandGroupArchive(DrawablesCommandGroupArchive&& from) noexcept
    : DrawablesCommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline DrawablesCommandGroupArchive& operator=(const DrawablesCommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablesCommandGroupArchive& operator=(DrawablesCommandGroupArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawablesCommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawablesCommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const DrawablesCommandGroupArchive*>(
               &_DrawablesCommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DrawablesCommandGroupArchive& a, DrawablesCommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablesCommandGroupArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablesCommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawablesCommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawablesCommandGroupArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawablesCommandGroupArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawablesCommandGroupArchive& from) {
    DrawablesCommandGroupArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablesCommandGroupArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawablesCommandGroupArchive";
  }
  protected:
  explicit DrawablesCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupType;
  static constexpr DrawablesCommandGroupType Constructive =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_Constructive;
  static constexpr DrawablesCommandGroupType Destructive =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_Destructive;
  static constexpr DrawablesCommandGroupType InPlace =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_InPlace;
  static inline bool DrawablesCommandGroupType_IsValid(int value) {
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(value);
  }
  static constexpr DrawablesCommandGroupType DrawablesCommandGroupType_MIN =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MIN;
  static constexpr DrawablesCommandGroupType DrawablesCommandGroupType_MAX =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MAX;
  static constexpr int DrawablesCommandGroupType_ARRAYSIZE =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrawablesCommandGroupType_descriptor() {
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor();
  }
  template<typename T>
  static inline const std::string& DrawablesCommandGroupType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawablesCommandGroupType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawablesCommandGroupType_Name.");
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_Name(enum_t_value);
  }
  static inline bool DrawablesCommandGroupType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrawablesCommandGroupType* value) {
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kObsoleteSelectionFieldNumber = 2,
    kModelforselectionFieldNumber = 3,
    kArchivedselectionFieldNumber = 6,
    kForDragFieldNumber = 5,
    kTypeFieldNumber = 4,
  };
  // required .TSK.CommandGroupArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandGroupArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandGroupArchive* release_super();
  ::TSK::CommandGroupArchive* mutable_super();
  void set_allocated_super(::TSK::CommandGroupArchive* super);
  private:
  const ::TSK::CommandGroupArchive& _internal_super() const;
  ::TSK::CommandGroupArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandGroupArchive* super);
  ::TSK::CommandGroupArchive* unsafe_arena_release_super();

  // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
  bool has_obsolete_selection() const;
  private:
  bool _internal_has_obsolete_selection() const;
  public:
  void clear_obsolete_selection();
  const ::TSD::CanvasSelectionArchive& obsolete_selection() const;
  PROTOBUF_NODISCARD ::TSD::CanvasSelectionArchive* release_obsolete_selection();
  ::TSD::CanvasSelectionArchive* mutable_obsolete_selection();
  void set_allocated_obsolete_selection(::TSD::CanvasSelectionArchive* obsolete_selection);
  private:
  const ::TSD::CanvasSelectionArchive& _internal_obsolete_selection() const;
  ::TSD::CanvasSelectionArchive* _internal_mutable_obsolete_selection();
  public:
  void unsafe_arena_set_allocated_obsolete_selection(
      ::TSD::CanvasSelectionArchive* obsolete_selection);
  ::TSD::CanvasSelectionArchive* unsafe_arena_release_obsolete_selection();

  // optional .TSP.Reference modelforselection = 3;
  bool has_modelforselection() const;
  private:
  bool _internal_has_modelforselection() const;
  public:
  void clear_modelforselection();
  const ::TSP::Reference& modelforselection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_modelforselection();
  ::TSP::Reference* mutable_modelforselection();
  void set_allocated_modelforselection(::TSP::Reference* modelforselection);
  private:
  const ::TSP::Reference& _internal_modelforselection() const;
  ::TSP::Reference* _internal_mutable_modelforselection();
  public:
  void unsafe_arena_set_allocated_modelforselection(
      ::TSP::Reference* modelforselection);
  ::TSP::Reference* unsafe_arena_release_modelforselection();

  // optional .TSP.Reference archivedselection = 6;
  bool has_archivedselection() const;
  private:
  bool _internal_has_archivedselection() const;
  public:
  void clear_archivedselection();
  const ::TSP::Reference& archivedselection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archivedselection();
  ::TSP::Reference* mutable_archivedselection();
  void set_allocated_archivedselection(::TSP::Reference* archivedselection);
  private:
  const ::TSP::Reference& _internal_archivedselection() const;
  ::TSP::Reference* _internal_mutable_archivedselection();
  public:
  void unsafe_arena_set_allocated_archivedselection(
      ::TSP::Reference* archivedselection);
  ::TSP::Reference* unsafe_arena_release_archivedselection();

  // optional bool forDrag = 5;
  bool has_fordrag() const;
  private:
  bool _internal_has_fordrag() const;
  public:
  void clear_fordrag();
  bool fordrag() const;
  void set_fordrag(bool value);
  private:
  bool _internal_fordrag() const;
  void _internal_set_fordrag(bool value);
  public:

  // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType type() const;
  void set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value);
  private:
  ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType _internal_type() const;
  void _internal_set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.DrawablesCommandGroupArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandGroupArchive* super_;
    ::TSD::CanvasSelectionArchive* obsolete_selection_;
    ::TSP::Reference* modelforselection_;
    ::TSP::Reference* archivedselection_;
    bool fordrag_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ExteriorTextWrapCommandArchive_InfoAndWrap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap) */ {
 public:
  inline ExteriorTextWrapCommandArchive_InfoAndWrap() : ExteriorTextWrapCommandArchive_InfoAndWrap(nullptr) {}
  ~ExteriorTextWrapCommandArchive_InfoAndWrap() override;
  explicit PROTOBUF_CONSTEXPR ExteriorTextWrapCommandArchive_InfoAndWrap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExteriorTextWrapCommandArchive_InfoAndWrap(const ExteriorTextWrapCommandArchive_InfoAndWrap& from);
  ExteriorTextWrapCommandArchive_InfoAndWrap(ExteriorTextWrapCommandArchive_InfoAndWrap&& from) noexcept
    : ExteriorTextWrapCommandArchive_InfoAndWrap() {
    *this = ::std::move(from);
  }

  inline ExteriorTextWrapCommandArchive_InfoAndWrap& operator=(const ExteriorTextWrapCommandArchive_InfoAndWrap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExteriorTextWrapCommandArchive_InfoAndWrap& operator=(ExteriorTextWrapCommandArchive_InfoAndWrap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExteriorTextWrapCommandArchive_InfoAndWrap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExteriorTextWrapCommandArchive_InfoAndWrap* internal_default_instance() {
    return reinterpret_cast<const ExteriorTextWrapCommandArchive_InfoAndWrap*>(
               &_ExteriorTextWrapCommandArchive_InfoAndWrap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ExteriorTextWrapCommandArchive_InfoAndWrap& a, ExteriorTextWrapCommandArchive_InfoAndWrap& b) {
    a.Swap(&b);
  }
  inline void Swap(ExteriorTextWrapCommandArchive_InfoAndWrap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExteriorTextWrapCommandArchive_InfoAndWrap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExteriorTextWrapCommandArchive_InfoAndWrap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExteriorTextWrapCommandArchive_InfoAndWrap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExteriorTextWrapCommandArchive_InfoAndWrap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExteriorTextWrapCommandArchive_InfoAndWrap& from) {
    ExteriorTextWrapCommandArchive_InfoAndWrap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExteriorTextWrapCommandArchive_InfoAndWrap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ExteriorTextWrapCommandArchive.InfoAndWrap";
  }
  protected:
  explicit ExteriorTextWrapCommandArchive_InfoAndWrap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kExteriorTextWrapFieldNumber = 2,
  };
  // optional .TSP.Reference info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 2;
  bool has_exterior_text_wrap() const;
  private:
  bool _internal_has_exterior_text_wrap() const;
  public:
  void clear_exterior_text_wrap();
  const ::TSD::ExteriorTextWrapArchive& exterior_text_wrap() const;
  PROTOBUF_NODISCARD ::TSD::ExteriorTextWrapArchive* release_exterior_text_wrap();
  ::TSD::ExteriorTextWrapArchive* mutable_exterior_text_wrap();
  void set_allocated_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* exterior_text_wrap);
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_exterior_text_wrap() const;
  ::TSD::ExteriorTextWrapArchive* _internal_mutable_exterior_text_wrap();
  public:
  void unsafe_arena_set_allocated_exterior_text_wrap(
      ::TSD::ExteriorTextWrapArchive* exterior_text_wrap);
  ::TSD::ExteriorTextWrapArchive* unsafe_arena_release_exterior_text_wrap();

  // @@protoc_insertion_point(class_scope:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* info_;
    ::TSD::ExteriorTextWrapArchive* exterior_text_wrap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ExteriorTextWrapCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ExteriorTextWrapCommandArchive) */ {
 public:
  inline ExteriorTextWrapCommandArchive() : ExteriorTextWrapCommandArchive(nullptr) {}
  ~ExteriorTextWrapCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ExteriorTextWrapCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExteriorTextWrapCommandArchive(const ExteriorTextWrapCommandArchive& from);
  ExteriorTextWrapCommandArchive(ExteriorTextWrapCommandArchive&& from) noexcept
    : ExteriorTextWrapCommandArchive() {
    *this = ::std::move(from);
  }

  inline ExteriorTextWrapCommandArchive& operator=(const ExteriorTextWrapCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExteriorTextWrapCommandArchive& operator=(ExteriorTextWrapCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExteriorTextWrapCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExteriorTextWrapCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ExteriorTextWrapCommandArchive*>(
               &_ExteriorTextWrapCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ExteriorTextWrapCommandArchive& a, ExteriorTextWrapCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExteriorTextWrapCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExteriorTextWrapCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExteriorTextWrapCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExteriorTextWrapCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExteriorTextWrapCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExteriorTextWrapCommandArchive& from) {
    ExteriorTextWrapCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExteriorTextWrapCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ExteriorTextWrapCommandArchive";
  }
  protected:
  explicit ExteriorTextWrapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExteriorTextWrapCommandArchive_InfoAndWrap InfoAndWrap;

  // accessors -------------------------------------------------------

  enum : int {
    kInfoAndWrapFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSD.ExteriorTextWrapCommandArchive.InfoAndWrap info_and_wrap = 2;
  int info_and_wrap_size() const;
  private:
  int _internal_info_and_wrap_size() const;
  public:
  void clear_info_and_wrap();
  ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* mutable_info_and_wrap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap >*
      mutable_info_and_wrap();
  private:
  const ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap& _internal_info_and_wrap(int index) const;
  ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* _internal_add_info_and_wrap();
  public:
  const ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap& info_and_wrap(int index) const;
  ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* add_info_and_wrap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap >&
      info_and_wrap() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ExteriorTextWrapCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap > info_and_wrap_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableHyperlinkCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableHyperlinkCommandArchive) */ {
 public:
  inline DrawableHyperlinkCommandArchive() : DrawableHyperlinkCommandArchive(nullptr) {}
  ~DrawableHyperlinkCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawableHyperlinkCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableHyperlinkCommandArchive(const DrawableHyperlinkCommandArchive& from);
  DrawableHyperlinkCommandArchive(DrawableHyperlinkCommandArchive&& from) noexcept
    : DrawableHyperlinkCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableHyperlinkCommandArchive& operator=(const DrawableHyperlinkCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableHyperlinkCommandArchive& operator=(DrawableHyperlinkCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableHyperlinkCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableHyperlinkCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableHyperlinkCommandArchive*>(
               &_DrawableHyperlinkCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DrawableHyperlinkCommandArchive& a, DrawableHyperlinkCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableHyperlinkCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableHyperlinkCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableHyperlinkCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableHyperlinkCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableHyperlinkCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawableHyperlinkCommandArchive& from) {
    DrawableHyperlinkCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableHyperlinkCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableHyperlinkCommandArchive";
  }
  protected:
  explicit DrawableHyperlinkCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldhyperlinkUrlFieldNumber = 3,
    kNewhyperlinkUrlFieldNumber = 4,
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // optional string oldhyperlink_url = 3;
  bool has_oldhyperlink_url() const;
  private:
  bool _internal_has_oldhyperlink_url() const;
  public:
  void clear_oldhyperlink_url();
  const std::string& oldhyperlink_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldhyperlink_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldhyperlink_url();
  PROTOBUF_NODISCARD std::string* release_oldhyperlink_url();
  void set_allocated_oldhyperlink_url(std::string* oldhyperlink_url);
  private:
  const std::string& _internal_oldhyperlink_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldhyperlink_url(const std::string& value);
  std::string* _internal_mutable_oldhyperlink_url();
  public:

  // optional string newhyperlink_url = 4;
  bool has_newhyperlink_url() const;
  private:
  bool _internal_has_newhyperlink_url() const;
  public:
  void clear_newhyperlink_url();
  const std::string& newhyperlink_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newhyperlink_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newhyperlink_url();
  PROTOBUF_NODISCARD std::string* release_newhyperlink_url();
  void set_allocated_newhyperlink_url(std::string* newhyperlink_url);
  private:
  const std::string& _internal_newhyperlink_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newhyperlink_url(const std::string& value);
  std::string* _internal_mutable_newhyperlink_url();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:TSD.DrawableHyperlinkCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldhyperlink_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newhyperlink_url_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.CommandSelectionBehaviorArchive) */ {
 public:
  inline CommandSelectionBehaviorArchive() : CommandSelectionBehaviorArchive(nullptr) {}
  ~CommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSelectionBehaviorArchive(const CommandSelectionBehaviorArchive& from);
  CommandSelectionBehaviorArchive(CommandSelectionBehaviorArchive&& from) noexcept
    : CommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline CommandSelectionBehaviorArchive& operator=(const CommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSelectionBehaviorArchive& operator=(CommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSelectionBehaviorArchive*>(
               &_CommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandSelectionBehaviorArchive& a, CommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSelectionBehaviorArchive& from) {
    CommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.CommandSelectionBehaviorArchive";
  }
  protected:
  explicit CommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorType;
  static constexpr CommandSelectionBehaviorType Constructive =
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Constructive;
  static constexpr CommandSelectionBehaviorType Destructive =
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Destructive;
  static constexpr CommandSelectionBehaviorType InPlace =
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_InPlace;
  static constexpr CommandSelectionBehaviorType Replace =
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Replace;
  static inline bool CommandSelectionBehaviorType_IsValid(int value) {
    return CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_IsValid(value);
  }
  static constexpr CommandSelectionBehaviorType CommandSelectionBehaviorType_MIN =
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_CommandSelectionBehaviorType_MIN;
  static constexpr CommandSelectionBehaviorType CommandSelectionBehaviorType_MAX =
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_CommandSelectionBehaviorType_MAX;
  static constexpr int CommandSelectionBehaviorType_ARRAYSIZE =
    CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_CommandSelectionBehaviorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandSelectionBehaviorType_descriptor() {
    return CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandSelectionBehaviorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandSelectionBehaviorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandSelectionBehaviorType_Name.");
    return CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Name(enum_t_value);
  }
  static inline bool CommandSelectionBehaviorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandSelectionBehaviorType* value) {
    return CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModelForSelectionFieldNumber = 2,
    kArchivedSelectionFieldNumber = 4,
    kArchivedNewSelectionFieldNumber = 5,
    kTypeFieldNumber = 3,
  };
  // optional .TSP.Reference model_for_selection = 2;
  bool has_model_for_selection() const;
  private:
  bool _internal_has_model_for_selection() const;
  public:
  void clear_model_for_selection();
  const ::TSP::Reference& model_for_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_model_for_selection();
  ::TSP::Reference* mutable_model_for_selection();
  void set_allocated_model_for_selection(::TSP::Reference* model_for_selection);
  private:
  const ::TSP::Reference& _internal_model_for_selection() const;
  ::TSP::Reference* _internal_mutable_model_for_selection();
  public:
  void unsafe_arena_set_allocated_model_for_selection(
      ::TSP::Reference* model_for_selection);
  ::TSP::Reference* unsafe_arena_release_model_for_selection();

  // optional .TSP.Reference archived_selection = 4;
  bool has_archived_selection() const;
  private:
  bool _internal_has_archived_selection() const;
  public:
  void clear_archived_selection();
  const ::TSP::Reference& archived_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archived_selection();
  ::TSP::Reference* mutable_archived_selection();
  void set_allocated_archived_selection(::TSP::Reference* archived_selection);
  private:
  const ::TSP::Reference& _internal_archived_selection() const;
  ::TSP::Reference* _internal_mutable_archived_selection();
  public:
  void unsafe_arena_set_allocated_archived_selection(
      ::TSP::Reference* archived_selection);
  ::TSP::Reference* unsafe_arena_release_archived_selection();

  // optional .TSP.Reference archived_new_selection = 5;
  bool has_archived_new_selection() const;
  private:
  bool _internal_has_archived_new_selection() const;
  public:
  void clear_archived_new_selection();
  const ::TSP::Reference& archived_new_selection() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_archived_new_selection();
  ::TSP::Reference* mutable_archived_new_selection();
  void set_allocated_archived_new_selection(::TSP::Reference* archived_new_selection);
  private:
  const ::TSP::Reference& _internal_archived_new_selection() const;
  ::TSP::Reference* _internal_mutable_archived_new_selection();
  public:
  void unsafe_arena_set_allocated_archived_new_selection(
      ::TSP::Reference* archived_new_selection);
  ::TSP::Reference* unsafe_arena_release_archived_new_selection();

  // optional .TSD.CommandSelectionBehaviorArchive.CommandSelectionBehaviorType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType type() const;
  void set_type(::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType value);
  private:
  ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType _internal_type() const;
  void _internal_set_type(::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.CommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* model_for_selection_;
    ::TSP::Reference* archived_selection_;
    ::TSP::Reference* archived_new_selection_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageReplaceCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageReplaceCommandArchive) */ {
 public:
  inline ImageReplaceCommandArchive() : ImageReplaceCommandArchive(nullptr) {}
  ~ImageReplaceCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ImageReplaceCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageReplaceCommandArchive(const ImageReplaceCommandArchive& from);
  ImageReplaceCommandArchive(ImageReplaceCommandArchive&& from) noexcept
    : ImageReplaceCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageReplaceCommandArchive& operator=(const ImageReplaceCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageReplaceCommandArchive& operator=(ImageReplaceCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageReplaceCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageReplaceCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageReplaceCommandArchive*>(
               &_ImageReplaceCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ImageReplaceCommandArchive& a, ImageReplaceCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageReplaceCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageReplaceCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageReplaceCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageReplaceCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageReplaceCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageReplaceCommandArchive& from) {
    ImageReplaceCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageReplaceCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageReplaceCommandArchive";
  }
  protected:
  explicit ImageReplaceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ImageReplaceCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableLockCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableLockCommandArchive) */ {
 public:
  inline DrawableLockCommandArchive() : DrawableLockCommandArchive(nullptr) {}
  ~DrawableLockCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawableLockCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableLockCommandArchive(const DrawableLockCommandArchive& from);
  DrawableLockCommandArchive(DrawableLockCommandArchive&& from) noexcept
    : DrawableLockCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableLockCommandArchive& operator=(const DrawableLockCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableLockCommandArchive& operator=(DrawableLockCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableLockCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableLockCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableLockCommandArchive*>(
               &_DrawableLockCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DrawableLockCommandArchive& a, DrawableLockCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableLockCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableLockCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableLockCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableLockCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableLockCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawableLockCommandArchive& from) {
    DrawableLockCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableLockCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableLockCommandArchive";
  }
  protected:
  explicit DrawableLockCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kLockFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional bool lock = 3;
  bool has_lock() const;
  private:
  bool _internal_has_lock() const;
  public:
  void clear_lock();
  bool lock() const;
  void set_lock(bool value);
  private:
  bool _internal_lock() const;
  void _internal_set_lock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.DrawableLockCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    bool lock_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableInfoCommentCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableInfoCommentCommandArchive) */ {
 public:
  inline DrawableInfoCommentCommandArchive() : DrawableInfoCommentCommandArchive(nullptr) {}
  ~DrawableInfoCommentCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawableInfoCommentCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableInfoCommentCommandArchive(const DrawableInfoCommentCommandArchive& from);
  DrawableInfoCommentCommandArchive(DrawableInfoCommentCommandArchive&& from) noexcept
    : DrawableInfoCommentCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableInfoCommentCommandArchive& operator=(const DrawableInfoCommentCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableInfoCommentCommandArchive& operator=(DrawableInfoCommentCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableInfoCommentCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableInfoCommentCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableInfoCommentCommandArchive*>(
               &_DrawableInfoCommentCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DrawableInfoCommentCommandArchive& a, DrawableInfoCommentCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableInfoCommentCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableInfoCommentCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableInfoCommentCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableInfoCommentCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableInfoCommentCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawableInfoCommentCommandArchive& from) {
    DrawableInfoCommentCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableInfoCommentCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableInfoCommentCommandArchive";
  }
  protected:
  explicit DrawableInfoCommentCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kOldCommentFieldNumber = 3,
    kNewCommentFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference old_comment = 3;
  bool has_old_comment() const;
  private:
  bool _internal_has_old_comment() const;
  public:
  void clear_old_comment();
  const ::TSP::Reference& old_comment() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_comment();
  ::TSP::Reference* mutable_old_comment();
  void set_allocated_old_comment(::TSP::Reference* old_comment);
  private:
  const ::TSP::Reference& _internal_old_comment() const;
  ::TSP::Reference* _internal_mutable_old_comment();
  public:
  void unsafe_arena_set_allocated_old_comment(
      ::TSP::Reference* old_comment);
  ::TSP::Reference* unsafe_arena_release_old_comment();

  // optional .TSP.Reference new_comment = 4;
  bool has_new_comment() const;
  private:
  bool _internal_has_new_comment() const;
  public:
  void clear_new_comment();
  const ::TSP::Reference& new_comment() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_comment();
  ::TSP::Reference* mutable_new_comment();
  void set_allocated_new_comment(::TSP::Reference* new_comment);
  private:
  const ::TSP::Reference& _internal_new_comment() const;
  ::TSP::Reference* _internal_mutable_new_comment();
  public:
  void unsafe_arena_set_allocated_new_comment(
      ::TSP::Reference* new_comment);
  ::TSP::Reference* unsafe_arena_release_new_comment();

  // @@protoc_insertion_point(class_scope:TSD.DrawableInfoCommentCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    ::TSP::Reference* old_comment_;
    ::TSP::Reference* new_comment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommentStorageApplyCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.CommentStorageApplyCommandArchive) */ {
 public:
  inline CommentStorageApplyCommandArchive() : CommentStorageApplyCommandArchive(nullptr) {}
  ~CommentStorageApplyCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR CommentStorageApplyCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommentStorageApplyCommandArchive(const CommentStorageApplyCommandArchive& from);
  CommentStorageApplyCommandArchive(CommentStorageApplyCommandArchive&& from) noexcept
    : CommentStorageApplyCommandArchive() {
    *this = ::std::move(from);
  }

  inline CommentStorageApplyCommandArchive& operator=(const CommentStorageApplyCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentStorageApplyCommandArchive& operator=(CommentStorageApplyCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommentStorageApplyCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommentStorageApplyCommandArchive* internal_default_instance() {
    return reinterpret_cast<const CommentStorageApplyCommandArchive*>(
               &_CommentStorageApplyCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CommentStorageApplyCommandArchive& a, CommentStorageApplyCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentStorageApplyCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentStorageApplyCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommentStorageApplyCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommentStorageApplyCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommentStorageApplyCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommentStorageApplyCommandArchive& from) {
    CommentStorageApplyCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentStorageApplyCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.CommentStorageApplyCommandArchive";
  }
  protected:
  explicit CommentStorageApplyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentStringFieldNumber = 3,
    kOldCommentStringFieldNumber = 4,
    kSuperFieldNumber = 1,
    kCommentStorageFieldNumber = 2,
  };
  // required string comment_string = 3;
  bool has_comment_string() const;
  private:
  bool _internal_has_comment_string() const;
  public:
  void clear_comment_string();
  const std::string& comment_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment_string();
  PROTOBUF_NODISCARD std::string* release_comment_string();
  void set_allocated_comment_string(std::string* comment_string);
  private:
  const std::string& _internal_comment_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment_string(const std::string& value);
  std::string* _internal_mutable_comment_string();
  public:

  // required string old_comment_string = 4;
  bool has_old_comment_string() const;
  private:
  bool _internal_has_old_comment_string() const;
  public:
  void clear_old_comment_string();
  const std::string& old_comment_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_comment_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_comment_string();
  PROTOBUF_NODISCARD std::string* release_old_comment_string();
  void set_allocated_old_comment_string(std::string* old_comment_string);
  private:
  const std::string& _internal_old_comment_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_comment_string(const std::string& value);
  std::string* _internal_mutable_old_comment_string();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference comment_storage = 2;
  bool has_comment_storage() const;
  private:
  bool _internal_has_comment_storage() const;
  public:
  void clear_comment_storage();
  const ::TSP::Reference& comment_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_comment_storage();
  ::TSP::Reference* mutable_comment_storage();
  void set_allocated_comment_storage(::TSP::Reference* comment_storage);
  private:
  const ::TSP::Reference& _internal_comment_storage() const;
  ::TSP::Reference* _internal_mutable_comment_storage();
  public:
  void unsafe_arena_set_allocated_comment_storage(
      ::TSP::Reference* comment_storage);
  ::TSP::Reference* unsafe_arena_release_comment_storage();

  // @@protoc_insertion_point(class_scope:TSD.CommentStorageApplyCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_comment_string_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* comment_storage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class GuideCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.GuideCommandArchive) */ {
 public:
  inline GuideCommandArchive() : GuideCommandArchive(nullptr) {}
  ~GuideCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR GuideCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuideCommandArchive(const GuideCommandArchive& from);
  GuideCommandArchive(GuideCommandArchive&& from) noexcept
    : GuideCommandArchive() {
    *this = ::std::move(from);
  }

  inline GuideCommandArchive& operator=(const GuideCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuideCommandArchive& operator=(GuideCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuideCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuideCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GuideCommandArchive*>(
               &_GuideCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GuideCommandArchive& a, GuideCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GuideCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuideCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuideCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuideCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuideCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuideCommandArchive& from) {
    GuideCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuideCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.GuideCommandArchive";
  }
  protected:
  explicit GuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GuideCommandArchive_GuideCommandMode GuideCommandMode;
  static constexpr GuideCommandMode Add =
    GuideCommandArchive_GuideCommandMode_Add;
  static constexpr GuideCommandMode Replace =
    GuideCommandArchive_GuideCommandMode_Replace;
  static constexpr GuideCommandMode Delete =
    GuideCommandArchive_GuideCommandMode_Delete;
  static inline bool GuideCommandMode_IsValid(int value) {
    return GuideCommandArchive_GuideCommandMode_IsValid(value);
  }
  static constexpr GuideCommandMode GuideCommandMode_MIN =
    GuideCommandArchive_GuideCommandMode_GuideCommandMode_MIN;
  static constexpr GuideCommandMode GuideCommandMode_MAX =
    GuideCommandArchive_GuideCommandMode_GuideCommandMode_MAX;
  static constexpr int GuideCommandMode_ARRAYSIZE =
    GuideCommandArchive_GuideCommandMode_GuideCommandMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GuideCommandMode_descriptor() {
    return GuideCommandArchive_GuideCommandMode_descriptor();
  }
  template<typename T>
  static inline const std::string& GuideCommandMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GuideCommandMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GuideCommandMode_Name.");
    return GuideCommandArchive_GuideCommandMode_Name(enum_t_value);
  }
  static inline bool GuideCommandMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GuideCommandMode* value) {
    return GuideCommandArchive_GuideCommandMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kOldGuideFieldNumber = 3,
    kNewGuideFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSD.UserDefinedGuideArchive old_guide = 3;
  bool has_old_guide() const;
  private:
  bool _internal_has_old_guide() const;
  public:
  void clear_old_guide();
  const ::TSD::UserDefinedGuideArchive& old_guide() const;
  PROTOBUF_NODISCARD ::TSD::UserDefinedGuideArchive* release_old_guide();
  ::TSD::UserDefinedGuideArchive* mutable_old_guide();
  void set_allocated_old_guide(::TSD::UserDefinedGuideArchive* old_guide);
  private:
  const ::TSD::UserDefinedGuideArchive& _internal_old_guide() const;
  ::TSD::UserDefinedGuideArchive* _internal_mutable_old_guide();
  public:
  void unsafe_arena_set_allocated_old_guide(
      ::TSD::UserDefinedGuideArchive* old_guide);
  ::TSD::UserDefinedGuideArchive* unsafe_arena_release_old_guide();

  // optional .TSD.UserDefinedGuideArchive new_guide = 4;
  bool has_new_guide() const;
  private:
  bool _internal_has_new_guide() const;
  public:
  void clear_new_guide();
  const ::TSD::UserDefinedGuideArchive& new_guide() const;
  PROTOBUF_NODISCARD ::TSD::UserDefinedGuideArchive* release_new_guide();
  ::TSD::UserDefinedGuideArchive* mutable_new_guide();
  void set_allocated_new_guide(::TSD::UserDefinedGuideArchive* new_guide);
  private:
  const ::TSD::UserDefinedGuideArchive& _internal_new_guide() const;
  ::TSD::UserDefinedGuideArchive* _internal_mutable_new_guide();
  public:
  void unsafe_arena_set_allocated_new_guide(
      ::TSD::UserDefinedGuideArchive* new_guide);
  ::TSD::UserDefinedGuideArchive* unsafe_arena_release_new_guide();

  // optional .TSD.GuideCommandArchive.GuideCommandMode mode = 5;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::TSD::GuideCommandArchive_GuideCommandMode mode() const;
  void set_mode(::TSD::GuideCommandArchive_GuideCommandMode value);
  private:
  ::TSD::GuideCommandArchive_GuideCommandMode _internal_mode() const;
  void _internal_set_mode(::TSD::GuideCommandArchive_GuideCommandMode value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.GuideCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* storage_;
    ::TSD::UserDefinedGuideArchive* old_guide_;
    ::TSD::UserDefinedGuideArchive* new_guide_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableAspectRatioLockedCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableAspectRatioLockedCommandArchive) */ {
 public:
  inline DrawableAspectRatioLockedCommandArchive() : DrawableAspectRatioLockedCommandArchive(nullptr) {}
  ~DrawableAspectRatioLockedCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawableAspectRatioLockedCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableAspectRatioLockedCommandArchive(const DrawableAspectRatioLockedCommandArchive& from);
  DrawableAspectRatioLockedCommandArchive(DrawableAspectRatioLockedCommandArchive&& from) noexcept
    : DrawableAspectRatioLockedCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableAspectRatioLockedCommandArchive& operator=(const DrawableAspectRatioLockedCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableAspectRatioLockedCommandArchive& operator=(DrawableAspectRatioLockedCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableAspectRatioLockedCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableAspectRatioLockedCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableAspectRatioLockedCommandArchive*>(
               &_DrawableAspectRatioLockedCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DrawableAspectRatioLockedCommandArchive& a, DrawableAspectRatioLockedCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableAspectRatioLockedCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableAspectRatioLockedCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableAspectRatioLockedCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableAspectRatioLockedCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableAspectRatioLockedCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawableAspectRatioLockedCommandArchive& from) {
    DrawableAspectRatioLockedCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableAspectRatioLockedCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableAspectRatioLockedCommandArchive";
  }
  protected:
  explicit DrawableAspectRatioLockedCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kAspectRatioLockedFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional bool aspect_ratio_locked = 3;
  bool has_aspect_ratio_locked() const;
  private:
  bool _internal_has_aspect_ratio_locked() const;
  public:
  void clear_aspect_ratio_locked();
  bool aspect_ratio_locked() const;
  void set_aspect_ratio_locked(bool value);
  private:
  bool _internal_aspect_ratio_locked() const;
  void _internal_set_aspect_ratio_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.DrawableAspectRatioLockedCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
    bool aspect_ratio_locked_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableAccessibilityDescriptionCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableAccessibilityDescriptionCommandArchive) */ {
 public:
  inline DrawableAccessibilityDescriptionCommandArchive() : DrawableAccessibilityDescriptionCommandArchive(nullptr) {}
  ~DrawableAccessibilityDescriptionCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR DrawableAccessibilityDescriptionCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableAccessibilityDescriptionCommandArchive(const DrawableAccessibilityDescriptionCommandArchive& from);
  DrawableAccessibilityDescriptionCommandArchive(DrawableAccessibilityDescriptionCommandArchive&& from) noexcept
    : DrawableAccessibilityDescriptionCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableAccessibilityDescriptionCommandArchive& operator=(const DrawableAccessibilityDescriptionCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableAccessibilityDescriptionCommandArchive& operator=(DrawableAccessibilityDescriptionCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableAccessibilityDescriptionCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableAccessibilityDescriptionCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableAccessibilityDescriptionCommandArchive*>(
               &_DrawableAccessibilityDescriptionCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DrawableAccessibilityDescriptionCommandArchive& a, DrawableAccessibilityDescriptionCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableAccessibilityDescriptionCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableAccessibilityDescriptionCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrawableAccessibilityDescriptionCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrawableAccessibilityDescriptionCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrawableAccessibilityDescriptionCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrawableAccessibilityDescriptionCommandArchive& from) {
    DrawableAccessibilityDescriptionCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableAccessibilityDescriptionCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableAccessibilityDescriptionCommandArchive";
  }
  protected:
  explicit DrawableAccessibilityDescriptionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessibilityDescriptionFieldNumber = 3,
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // optional string accessibility_description = 3;
  bool has_accessibility_description() const;
  private:
  bool _internal_has_accessibility_description() const;
  public:
  void clear_accessibility_description();
  const std::string& accessibility_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accessibility_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accessibility_description();
  PROTOBUF_NODISCARD std::string* release_accessibility_description();
  void set_allocated_accessibility_description(std::string* accessibility_description);
  private:
  const std::string& _internal_accessibility_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accessibility_description(const std::string& value);
  std::string* _internal_mutable_accessibility_description();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:TSD.DrawableAccessibilityDescriptionCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_description_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PasteStyleCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.PasteStyleCommandArchive) */ {
 public:
  inline PasteStyleCommandArchive() : PasteStyleCommandArchive(nullptr) {}
  ~PasteStyleCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR PasteStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteStyleCommandArchive(const PasteStyleCommandArchive& from);
  PasteStyleCommandArchive(PasteStyleCommandArchive&& from) noexcept
    : PasteStyleCommandArchive() {
    *this = ::std::move(from);
  }

  inline PasteStyleCommandArchive& operator=(const PasteStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteStyleCommandArchive& operator=(PasteStyleCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteStyleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteStyleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const PasteStyleCommandArchive*>(
               &_PasteStyleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PasteStyleCommandArchive& a, PasteStyleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteStyleCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteStyleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasteStyleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasteStyleCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PasteStyleCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PasteStyleCommandArchive& from) {
    PasteStyleCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteStyleCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.PasteStyleCommandArchive";
  }
  protected:
  explicit PasteStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDestInfoFieldNumber = 2,
    kShapeStyleFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference dest_info = 2;
  bool has_dest_info() const;
  private:
  bool _internal_has_dest_info() const;
  public:
  void clear_dest_info();
  const ::TSP::Reference& dest_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_dest_info();
  ::TSP::Reference* mutable_dest_info();
  void set_allocated_dest_info(::TSP::Reference* dest_info);
  private:
  const ::TSP::Reference& _internal_dest_info() const;
  ::TSP::Reference* _internal_mutable_dest_info();
  public:
  void unsafe_arena_set_allocated_dest_info(
      ::TSP::Reference* dest_info);
  ::TSP::Reference* unsafe_arena_release_dest_info();

  // optional .TSP.Reference shape_style = 3;
  bool has_shape_style() const;
  private:
  bool _internal_has_shape_style() const;
  public:
  void clear_shape_style();
  const ::TSP::Reference& shape_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_shape_style();
  ::TSP::Reference* mutable_shape_style();
  void set_allocated_shape_style(::TSP::Reference* shape_style);
  private:
  const ::TSP::Reference& _internal_shape_style() const;
  ::TSP::Reference* _internal_mutable_shape_style();
  public:
  void unsafe_arena_set_allocated_shape_style(
      ::TSP::Reference* shape_style);
  ::TSP::Reference* unsafe_arena_release_shape_style();

  // @@protoc_insertion_point(class_scope:TSD.PasteStyleCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* dest_info_;
    ::TSP::Reference* shape_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionLineConnectCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ConnectionLineConnectCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ConnectionLineConnectCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ConnectionLineConnectCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.super)
  return _internal_super();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.super)
}
inline ::TSK::CommandArchive* ConnectionLineConnectCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ConnectionLineConnectCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ConnectionLineConnectCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ConnectionLineConnectCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.super)
  return _msg;
}
inline void ConnectionLineConnectCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.super)
}

// required .TSP.Reference connection_line = 2;
inline bool ConnectionLineConnectCommandArchive::_internal_has_connection_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_line_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_connection_line() const {
  return _internal_has_connection_line();
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::_internal_connection_line() const {
  const ::TSP::Reference* p = _impl_.connection_line_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::connection_line() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.connection_line)
  return _internal_connection_line();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_connection_line(
    ::TSP::Reference* connection_line) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_line_);
  }
  _impl_.connection_line_ = connection_line;
  if (connection_line) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.connection_line)
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::release_connection_line() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.connection_line_;
  _impl_.connection_line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::unsafe_arena_release_connection_line() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.connection_line)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.connection_line_;
  _impl_.connection_line_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::_internal_mutable_connection_line() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.connection_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.connection_line_ = p;
  }
  return _impl_.connection_line_;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::mutable_connection_line() {
  ::TSP::Reference* _msg = _internal_mutable_connection_line();
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.connection_line)
  return _msg;
}
inline void ConnectionLineConnectCommandArchive::set_allocated_connection_line(::TSP::Reference* connection_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_line_);
  }
  if (connection_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_line));
    if (message_arena != submessage_arena) {
      connection_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_line, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.connection_line_ = connection_line;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.connection_line)
}

// optional .TSP.Reference connect_to = 3;
inline bool ConnectionLineConnectCommandArchive::_internal_has_connect_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connect_to_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_connect_to() const {
  return _internal_has_connect_to();
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::_internal_connect_to() const {
  const ::TSP::Reference* p = _impl_.connect_to_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::connect_to() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.connect_to)
  return _internal_connect_to();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_connect_to(
    ::TSP::Reference* connect_to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connect_to_);
  }
  _impl_.connect_to_ = connect_to;
  if (connect_to) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.connect_to)
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::release_connect_to() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.connect_to_;
  _impl_.connect_to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::unsafe_arena_release_connect_to() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.connect_to)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.connect_to_;
  _impl_.connect_to_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::_internal_mutable_connect_to() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.connect_to_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.connect_to_ = p;
  }
  return _impl_.connect_to_;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::mutable_connect_to() {
  ::TSP::Reference* _msg = _internal_mutable_connect_to();
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.connect_to)
  return _msg;
}
inline void ConnectionLineConnectCommandArchive::set_allocated_connect_to(::TSP::Reference* connect_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connect_to_);
  }
  if (connect_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connect_to));
    if (message_arena != submessage_arena) {
      connect_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_to, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.connect_to_ = connect_to;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.connect_to)
}

// optional .TSP.Reference connect_from = 4;
inline bool ConnectionLineConnectCommandArchive::_internal_has_connect_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connect_from_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_connect_from() const {
  return _internal_has_connect_from();
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::_internal_connect_from() const {
  const ::TSP::Reference* p = _impl_.connect_from_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::connect_from() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.connect_from)
  return _internal_connect_from();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_connect_from(
    ::TSP::Reference* connect_from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connect_from_);
  }
  _impl_.connect_from_ = connect_from;
  if (connect_from) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.connect_from)
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::release_connect_from() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.connect_from_;
  _impl_.connect_from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::unsafe_arena_release_connect_from() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.connect_from)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.connect_from_;
  _impl_.connect_from_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::_internal_mutable_connect_from() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.connect_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.connect_from_ = p;
  }
  return _impl_.connect_from_;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::mutable_connect_from() {
  ::TSP::Reference* _msg = _internal_mutable_connect_from();
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.connect_from)
  return _msg;
}
inline void ConnectionLineConnectCommandArchive::set_allocated_connect_from(::TSP::Reference* connect_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connect_from_);
  }
  if (connect_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connect_from));
    if (message_arena != submessage_arena) {
      connect_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_from, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.connect_from_ = connect_from;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.connect_from)
}

// optional .TSP.Reference old_connect_to = 5;
inline bool ConnectionLineConnectCommandArchive::_internal_has_old_connect_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_connect_to_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_old_connect_to() const {
  return _internal_has_old_connect_to();
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::_internal_old_connect_to() const {
  const ::TSP::Reference* p = _impl_.old_connect_to_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::old_connect_to() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.old_connect_to)
  return _internal_old_connect_to();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_old_connect_to(
    ::TSP::Reference* old_connect_to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_connect_to_);
  }
  _impl_.old_connect_to_ = old_connect_to;
  if (old_connect_to) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connect_to)
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::release_old_connect_to() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.old_connect_to_;
  _impl_.old_connect_to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::unsafe_arena_release_old_connect_to() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.old_connect_to)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.old_connect_to_;
  _impl_.old_connect_to_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::_internal_mutable_old_connect_to() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.old_connect_to_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_connect_to_ = p;
  }
  return _impl_.old_connect_to_;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::mutable_old_connect_to() {
  ::TSP::Reference* _msg = _internal_mutable_old_connect_to();
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.old_connect_to)
  return _msg;
}
inline void ConnectionLineConnectCommandArchive::set_allocated_old_connect_to(::TSP::Reference* old_connect_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_connect_to_);
  }
  if (old_connect_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connect_to));
    if (message_arena != submessage_arena) {
      old_connect_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_connect_to, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.old_connect_to_ = old_connect_to;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connect_to)
}

// optional .TSP.Reference old_connect_from = 6;
inline bool ConnectionLineConnectCommandArchive::_internal_has_old_connect_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_connect_from_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_old_connect_from() const {
  return _internal_has_old_connect_from();
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::_internal_old_connect_from() const {
  const ::TSP::Reference* p = _impl_.old_connect_from_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ConnectionLineConnectCommandArchive::old_connect_from() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.old_connect_from)
  return _internal_old_connect_from();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_old_connect_from(
    ::TSP::Reference* old_connect_from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_connect_from_);
  }
  _impl_.old_connect_from_ = old_connect_from;
  if (old_connect_from) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connect_from)
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::release_old_connect_from() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_connect_from_;
  _impl_.old_connect_from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::unsafe_arena_release_old_connect_from() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.old_connect_from)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_connect_from_;
  _impl_.old_connect_from_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::_internal_mutable_old_connect_from() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.old_connect_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_connect_from_ = p;
  }
  return _impl_.old_connect_from_;
}
inline ::TSP::Reference* ConnectionLineConnectCommandArchive::mutable_old_connect_from() {
  ::TSP::Reference* _msg = _internal_mutable_old_connect_from();
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.old_connect_from)
  return _msg;
}
inline void ConnectionLineConnectCommandArchive::set_allocated_old_connect_from(::TSP::Reference* old_connect_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_connect_from_);
  }
  if (old_connect_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connect_from));
    if (message_arena != submessage_arena) {
      old_connect_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_connect_from, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.old_connect_from_ = old_connect_from;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connect_from)
}

// -------------------------------------------------------------------

// GroupDrawablesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool GroupDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GroupDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& GroupDrawablesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GroupDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.GroupDrawablesCommandArchive.super)
  return _internal_super();
}
inline void GroupDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GroupDrawablesCommandArchive.super)
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.GroupDrawablesCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.GroupDrawablesCommandArchive.super)
  return _msg;
}
inline void GroupDrawablesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.GroupDrawablesCommandArchive.super)
}

// repeated .TSP.Reference drawables = 2;
inline int GroupDrawablesCommandArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int GroupDrawablesCommandArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.GroupDrawablesCommandArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
GroupDrawablesCommandArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TSD.GroupDrawablesCommandArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TSD.GroupDrawablesCommandArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:TSD.GroupDrawablesCommandArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
GroupDrawablesCommandArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TSD.GroupDrawablesCommandArchive.drawables)
  return _impl_.drawables_;
}

// optional .TSP.Reference group = 3;
inline bool GroupDrawablesCommandArchive::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_ != nullptr);
  return value;
}
inline bool GroupDrawablesCommandArchive::has_group() const {
  return _internal_has_group();
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::_internal_group() const {
  const ::TSP::Reference* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::group() const {
  // @@protoc_insertion_point(field_get:TSD.GroupDrawablesCommandArchive.group)
  return _internal_group();
}
inline void GroupDrawablesCommandArchive::unsafe_arena_set_allocated_group(
    ::TSP::Reference* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = group;
  if (group) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GroupDrawablesCommandArchive.group)
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::release_group() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.group_;
  _impl_.group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:TSD.GroupDrawablesCommandArchive.group)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::_internal_mutable_group() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.group_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.group_ = p;
  }
  return _impl_.group_;
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::mutable_group() {
  ::TSP::Reference* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:TSD.GroupDrawablesCommandArchive.group)
  return _msg;
}
inline void GroupDrawablesCommandArchive::set_allocated_group(::TSP::Reference* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group));
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.group_ = group;
  // @@protoc_insertion_point(field_set_allocated:TSD.GroupDrawablesCommandArchive.group)
}

// -------------------------------------------------------------------

// UngroupGroupCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool UngroupGroupCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool UngroupGroupCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& UngroupGroupCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& UngroupGroupCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.UngroupGroupCommandArchive.super)
  return _internal_super();
}
inline void UngroupGroupCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.UngroupGroupCommandArchive.super)
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.UngroupGroupCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.UngroupGroupCommandArchive.super)
  return _msg;
}
inline void UngroupGroupCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.UngroupGroupCommandArchive.super)
}

// repeated .TSP.Reference drawables = 2;
inline int UngroupGroupCommandArchive::_internal_drawables_size() const {
  return _impl_.drawables_.size();
}
inline int UngroupGroupCommandArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* UngroupGroupCommandArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.UngroupGroupCommandArchive.drawables)
  return _impl_.drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UngroupGroupCommandArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TSD.UngroupGroupCommandArchive.drawables)
  return &_impl_.drawables_;
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::_internal_drawables(int index) const {
  return _impl_.drawables_.Get(index);
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TSD.UngroupGroupCommandArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* UngroupGroupCommandArchive::_internal_add_drawables() {
  return _impl_.drawables_.Add();
}
inline ::TSP::Reference* UngroupGroupCommandArchive::add_drawables() {
  ::TSP::Reference* _add = _internal_add_drawables();
  // @@protoc_insertion_point(field_add:TSD.UngroupGroupCommandArchive.drawables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UngroupGroupCommandArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TSD.UngroupGroupCommandArchive.drawables)
  return _impl_.drawables_;
}

// optional .TSP.Reference group = 3;
inline bool UngroupGroupCommandArchive::_internal_has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.group_ != nullptr);
  return value;
}
inline bool UngroupGroupCommandArchive::has_group() const {
  return _internal_has_group();
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::_internal_group() const {
  const ::TSP::Reference* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::group() const {
  // @@protoc_insertion_point(field_get:TSD.UngroupGroupCommandArchive.group)
  return _internal_group();
}
inline void UngroupGroupCommandArchive::unsafe_arena_set_allocated_group(
    ::TSP::Reference* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = group;
  if (group) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.UngroupGroupCommandArchive.group)
}
inline ::TSP::Reference* UngroupGroupCommandArchive::release_group() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.group_;
  _impl_.group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UngroupGroupCommandArchive::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:TSD.UngroupGroupCommandArchive.group)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UngroupGroupCommandArchive::_internal_mutable_group() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.group_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.group_ = p;
  }
  return _impl_.group_;
}
inline ::TSP::Reference* UngroupGroupCommandArchive::mutable_group() {
  ::TSP::Reference* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:TSD.UngroupGroupCommandArchive.group)
  return _msg;
}
inline void UngroupGroupCommandArchive::set_allocated_group(::TSP::Reference* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group));
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.group_ = group;
  // @@protoc_insertion_point(field_set_allocated:TSD.UngroupGroupCommandArchive.group)
}

// -------------------------------------------------------------------

// ContainerRemoveChildrenCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ContainerRemoveChildrenCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ContainerRemoveChildrenCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ContainerRemoveChildrenCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ContainerRemoveChildrenCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.super)
  return _internal_super();
}
inline void ContainerRemoveChildrenCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.super)
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerRemoveChildrenCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.super)
  return _msg;
}
inline void ContainerRemoveChildrenCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.super)
}

// optional .TSP.Reference container = 2;
inline bool ContainerRemoveChildrenCommandArchive::_internal_has_container() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.container_ != nullptr);
  return value;
}
inline bool ContainerRemoveChildrenCommandArchive::has_container() const {
  return _internal_has_container();
}
inline const ::TSP::Reference& ContainerRemoveChildrenCommandArchive::_internal_container() const {
  const ::TSP::Reference* p = _impl_.container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ContainerRemoveChildrenCommandArchive::container() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.container)
  return _internal_container();
}
inline void ContainerRemoveChildrenCommandArchive::unsafe_arena_set_allocated_container(
    ::TSP::Reference* container) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  _impl_.container_ = container;
  if (container) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.container)
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::release_container() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::unsafe_arena_release_container() {
  // @@protoc_insertion_point(field_release:TSD.ContainerRemoveChildrenCommandArchive.container)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::_internal_mutable_container() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.container_ = p;
  }
  return _impl_.container_;
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::mutable_container() {
  ::TSP::Reference* _msg = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.container)
  return _msg;
}
inline void ContainerRemoveChildrenCommandArchive::set_allocated_container(::TSP::Reference* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container));
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.container_ = container;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.container)
}

// repeated .TSP.Reference children = 3;
inline int ContainerRemoveChildrenCommandArchive::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int ContainerRemoveChildrenCommandArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ContainerRemoveChildrenCommandArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerRemoveChildrenCommandArchive.children)
  return &_impl_.children_;
}
inline const ::TSP::Reference& ContainerRemoveChildrenCommandArchive::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::TSP::Reference& ContainerRemoveChildrenCommandArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::add_children() {
  ::TSP::Reference* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:TSD.ContainerRemoveChildrenCommandArchive.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ContainerRemoveChildrenCommandArchive::children() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerRemoveChildrenCommandArchive.children)
  return _impl_.children_;
}

// optional .TSP.IndexSet children_indices = 4;
inline bool ContainerRemoveChildrenCommandArchive::_internal_has_children_indices() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.children_indices_ != nullptr);
  return value;
}
inline bool ContainerRemoveChildrenCommandArchive::has_children_indices() const {
  return _internal_has_children_indices();
}
inline const ::TSP::IndexSet& ContainerRemoveChildrenCommandArchive::_internal_children_indices() const {
  const ::TSP::IndexSet* p = _impl_.children_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& ContainerRemoveChildrenCommandArchive::children_indices() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.children_indices)
  return _internal_children_indices();
}
inline void ContainerRemoveChildrenCommandArchive::unsafe_arena_set_allocated_children_indices(
    ::TSP::IndexSet* children_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.children_indices_);
  }
  _impl_.children_indices_ = children_indices;
  if (children_indices) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.children_indices)
}
inline ::TSP::IndexSet* ContainerRemoveChildrenCommandArchive::release_children_indices() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.children_indices_;
  _impl_.children_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* ContainerRemoveChildrenCommandArchive::unsafe_arena_release_children_indices() {
  // @@protoc_insertion_point(field_release:TSD.ContainerRemoveChildrenCommandArchive.children_indices)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.children_indices_;
  _impl_.children_indices_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* ContainerRemoveChildrenCommandArchive::_internal_mutable_children_indices() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.children_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.children_indices_ = p;
  }
  return _impl_.children_indices_;
}
inline ::TSP::IndexSet* ContainerRemoveChildrenCommandArchive::mutable_children_indices() {
  ::TSP::IndexSet* _msg = _internal_mutable_children_indices();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.children_indices)
  return _msg;
}
inline void ContainerRemoveChildrenCommandArchive::set_allocated_children_indices(::TSP::IndexSet* children_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.children_indices_);
  }
  if (children_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(children_indices));
    if (message_arena != submessage_arena) {
      children_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, children_indices, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.children_indices_ = children_indices;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.children_indices)
}

// -------------------------------------------------------------------

// ContainerInsertChildrenCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ContainerInsertChildrenCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ContainerInsertChildrenCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ContainerInsertChildrenCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ContainerInsertChildrenCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.super)
  return _internal_super();
}
inline void ContainerInsertChildrenCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerInsertChildrenCommandArchive.super)
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerInsertChildrenCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.super)
  return _msg;
}
inline void ContainerInsertChildrenCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerInsertChildrenCommandArchive.super)
}

// optional .TSP.Reference container = 2;
inline bool ContainerInsertChildrenCommandArchive::_internal_has_container() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.container_ != nullptr);
  return value;
}
inline bool ContainerInsertChildrenCommandArchive::has_container() const {
  return _internal_has_container();
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::_internal_container() const {
  const ::TSP::Reference* p = _impl_.container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::container() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.container)
  return _internal_container();
}
inline void ContainerInsertChildrenCommandArchive::unsafe_arena_set_allocated_container(
    ::TSP::Reference* container) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  _impl_.container_ = container;
  if (container) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerInsertChildrenCommandArchive.container)
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::release_container() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::unsafe_arena_release_container() {
  // @@protoc_insertion_point(field_release:TSD.ContainerInsertChildrenCommandArchive.container)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::_internal_mutable_container() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.container_ = p;
  }
  return _impl_.container_;
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::mutable_container() {
  ::TSP::Reference* _msg = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.container)
  return _msg;
}
inline void ContainerInsertChildrenCommandArchive::set_allocated_container(::TSP::Reference* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container));
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.container_ = container;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerInsertChildrenCommandArchive.container)
}

// repeated .TSP.Reference children = 3;
inline int ContainerInsertChildrenCommandArchive::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int ContainerInsertChildrenCommandArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ContainerInsertChildrenCommandArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerInsertChildrenCommandArchive.children)
  return &_impl_.children_;
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::add_children() {
  ::TSP::Reference* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:TSD.ContainerInsertChildrenCommandArchive.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ContainerInsertChildrenCommandArchive::children() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerInsertChildrenCommandArchive.children)
  return _impl_.children_;
}

// optional uint64 index = 4;
inline bool ContainerInsertChildrenCommandArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContainerInsertChildrenCommandArchive::has_index() const {
  return _internal_has_index();
}
inline void ContainerInsertChildrenCommandArchive::clear_index() {
  _impl_.index_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ContainerInsertChildrenCommandArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t ContainerInsertChildrenCommandArchive::index() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.index)
  return _internal_index();
}
inline void ContainerInsertChildrenCommandArchive::_internal_set_index(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void ContainerInsertChildrenCommandArchive::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSD.ContainerInsertChildrenCommandArchive.index)
}

// -------------------------------------------------------------------

// ContainerReorderChildrenCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ContainerReorderChildrenCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ContainerReorderChildrenCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ContainerReorderChildrenCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ContainerReorderChildrenCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerReorderChildrenCommandArchive.super)
  return _internal_super();
}
inline void ContainerReorderChildrenCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerReorderChildrenCommandArchive.super)
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerReorderChildrenCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerReorderChildrenCommandArchive.super)
  return _msg;
}
inline void ContainerReorderChildrenCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerReorderChildrenCommandArchive.super)
}

// optional .TSP.Reference container = 2;
inline bool ContainerReorderChildrenCommandArchive::_internal_has_container() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.container_ != nullptr);
  return value;
}
inline bool ContainerReorderChildrenCommandArchive::has_container() const {
  return _internal_has_container();
}
inline const ::TSP::Reference& ContainerReorderChildrenCommandArchive::_internal_container() const {
  const ::TSP::Reference* p = _impl_.container_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ContainerReorderChildrenCommandArchive::container() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerReorderChildrenCommandArchive.container)
  return _internal_container();
}
inline void ContainerReorderChildrenCommandArchive::unsafe_arena_set_allocated_container(
    ::TSP::Reference* container) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  _impl_.container_ = container;
  if (container) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerReorderChildrenCommandArchive.container)
}
inline ::TSP::Reference* ContainerReorderChildrenCommandArchive::release_container() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ContainerReorderChildrenCommandArchive::unsafe_arena_release_container() {
  // @@protoc_insertion_point(field_release:TSD.ContainerReorderChildrenCommandArchive.container)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.container_;
  _impl_.container_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ContainerReorderChildrenCommandArchive::_internal_mutable_container() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.container_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.container_ = p;
  }
  return _impl_.container_;
}
inline ::TSP::Reference* ContainerReorderChildrenCommandArchive::mutable_container() {
  ::TSP::Reference* _msg = _internal_mutable_container();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerReorderChildrenCommandArchive.container)
  return _msg;
}
inline void ContainerReorderChildrenCommandArchive::set_allocated_container(::TSP::Reference* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container_);
  }
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container));
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.container_ = container;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerReorderChildrenCommandArchive.container)
}

// repeated .TSP.Reference children = 3;
inline int ContainerReorderChildrenCommandArchive::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int ContainerReorderChildrenCommandArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* ContainerReorderChildrenCommandArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerReorderChildrenCommandArchive.children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ContainerReorderChildrenCommandArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerReorderChildrenCommandArchive.children)
  return &_impl_.children_;
}
inline const ::TSP::Reference& ContainerReorderChildrenCommandArchive::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::TSP::Reference& ContainerReorderChildrenCommandArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerReorderChildrenCommandArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* ContainerReorderChildrenCommandArchive::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::TSP::Reference* ContainerReorderChildrenCommandArchive::add_children() {
  ::TSP::Reference* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:TSD.ContainerReorderChildrenCommandArchive.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ContainerReorderChildrenCommandArchive::children() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerReorderChildrenCommandArchive.children)
  return _impl_.children_;
}

// optional .TSP.IndexSet children_indices = 4;
inline bool ContainerReorderChildrenCommandArchive::_internal_has_children_indices() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.children_indices_ != nullptr);
  return value;
}
inline bool ContainerReorderChildrenCommandArchive::has_children_indices() const {
  return _internal_has_children_indices();
}
inline const ::TSP::IndexSet& ContainerReorderChildrenCommandArchive::_internal_children_indices() const {
  const ::TSP::IndexSet* p = _impl_.children_indices_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& ContainerReorderChildrenCommandArchive::children_indices() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerReorderChildrenCommandArchive.children_indices)
  return _internal_children_indices();
}
inline void ContainerReorderChildrenCommandArchive::unsafe_arena_set_allocated_children_indices(
    ::TSP::IndexSet* children_indices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.children_indices_);
  }
  _impl_.children_indices_ = children_indices;
  if (children_indices) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerReorderChildrenCommandArchive.children_indices)
}
inline ::TSP::IndexSet* ContainerReorderChildrenCommandArchive::release_children_indices() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.children_indices_;
  _impl_.children_indices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* ContainerReorderChildrenCommandArchive::unsafe_arena_release_children_indices() {
  // @@protoc_insertion_point(field_release:TSD.ContainerReorderChildrenCommandArchive.children_indices)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = _impl_.children_indices_;
  _impl_.children_indices_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* ContainerReorderChildrenCommandArchive::_internal_mutable_children_indices() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.children_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.children_indices_ = p;
  }
  return _impl_.children_indices_;
}
inline ::TSP::IndexSet* ContainerReorderChildrenCommandArchive::mutable_children_indices() {
  ::TSP::IndexSet* _msg = _internal_mutable_children_indices();
  // @@protoc_insertion_point(field_mutable:TSD.ContainerReorderChildrenCommandArchive.children_indices)
  return _msg;
}
inline void ContainerReorderChildrenCommandArchive::set_allocated_children_indices(::TSP::IndexSet* children_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.children_indices_);
  }
  if (children_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(children_indices));
    if (message_arena != submessage_arena) {
      children_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, children_indices, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.children_indices_ = children_indices;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerReorderChildrenCommandArchive.children_indices)
}

// -------------------------------------------------------------------

// InfoGeometryCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool InfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InfoGeometryCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void InfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoGeometryCommandArchive.super)
}
inline ::TSK::CommandArchive* InfoGeometryCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* InfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.InfoGeometryCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InfoGeometryCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* InfoGeometryCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.InfoGeometryCommandArchive.super)
  return _msg;
}
inline void InfoGeometryCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoGeometryCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool InfoGeometryCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool InfoGeometryCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& InfoGeometryCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InfoGeometryCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.info)
  return _internal_info();
}
inline void InfoGeometryCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoGeometryCommandArchive.info)
}
inline ::TSP::Reference* InfoGeometryCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* InfoGeometryCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.InfoGeometryCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InfoGeometryCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* InfoGeometryCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.InfoGeometryCommandArchive.info)
  return _msg;
}
inline void InfoGeometryCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoGeometryCommandArchive.info)
}

// optional .TSD.GeometryArchive newGeometry = 3;
inline bool InfoGeometryCommandArchive::_internal_has_newgeometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newgeometry_ != nullptr);
  return value;
}
inline bool InfoGeometryCommandArchive::has_newgeometry() const {
  return _internal_has_newgeometry();
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::_internal_newgeometry() const {
  const ::TSD::GeometryArchive* p = _impl_.newgeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::newgeometry() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.newGeometry)
  return _internal_newgeometry();
}
inline void InfoGeometryCommandArchive::unsafe_arena_set_allocated_newgeometry(
    ::TSD::GeometryArchive* newgeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newgeometry_);
  }
  _impl_.newgeometry_ = newgeometry;
  if (newgeometry) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoGeometryCommandArchive.newGeometry)
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::release_newgeometry() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::GeometryArchive* temp = _impl_.newgeometry_;
  _impl_.newgeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::unsafe_arena_release_newgeometry() {
  // @@protoc_insertion_point(field_release:TSD.InfoGeometryCommandArchive.newGeometry)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::GeometryArchive* temp = _impl_.newgeometry_;
  _impl_.newgeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::_internal_mutable_newgeometry() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.newgeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.newgeometry_ = p;
  }
  return _impl_.newgeometry_;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::mutable_newgeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_newgeometry();
  // @@protoc_insertion_point(field_mutable:TSD.InfoGeometryCommandArchive.newGeometry)
  return _msg;
}
inline void InfoGeometryCommandArchive::set_allocated_newgeometry(::TSD::GeometryArchive* newgeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newgeometry_);
  }
  if (newgeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newgeometry));
    if (message_arena != submessage_arena) {
      newgeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newgeometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.newgeometry_ = newgeometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoGeometryCommandArchive.newGeometry)
}

// optional .TSD.GeometryArchive oldGeometry = 4;
inline bool InfoGeometryCommandArchive::_internal_has_oldgeometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldgeometry_ != nullptr);
  return value;
}
inline bool InfoGeometryCommandArchive::has_oldgeometry() const {
  return _internal_has_oldgeometry();
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::_internal_oldgeometry() const {
  const ::TSD::GeometryArchive* p = _impl_.oldgeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::oldgeometry() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.oldGeometry)
  return _internal_oldgeometry();
}
inline void InfoGeometryCommandArchive::unsafe_arena_set_allocated_oldgeometry(
    ::TSD::GeometryArchive* oldgeometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldgeometry_);
  }
  _impl_.oldgeometry_ = oldgeometry;
  if (oldgeometry) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoGeometryCommandArchive.oldGeometry)
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::release_oldgeometry() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = _impl_.oldgeometry_;
  _impl_.oldgeometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::unsafe_arena_release_oldgeometry() {
  // @@protoc_insertion_point(field_release:TSD.InfoGeometryCommandArchive.oldGeometry)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = _impl_.oldgeometry_;
  _impl_.oldgeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::_internal_mutable_oldgeometry() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldgeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.oldgeometry_ = p;
  }
  return _impl_.oldgeometry_;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::mutable_oldgeometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_oldgeometry();
  // @@protoc_insertion_point(field_mutable:TSD.InfoGeometryCommandArchive.oldGeometry)
  return _msg;
}
inline void InfoGeometryCommandArchive::set_allocated_oldgeometry(::TSD::GeometryArchive* oldgeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldgeometry_);
  }
  if (oldgeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldgeometry));
    if (message_arena != submessage_arena) {
      oldgeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldgeometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldgeometry_ = oldgeometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoGeometryCommandArchive.oldGeometry)
}

// optional bool shouldClearObjectPlaceholderFlag = 5;
inline bool InfoGeometryCommandArchive::_internal_has_shouldclearobjectplaceholderflag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InfoGeometryCommandArchive::has_shouldclearobjectplaceholderflag() const {
  return _internal_has_shouldclearobjectplaceholderflag();
}
inline void InfoGeometryCommandArchive::clear_shouldclearobjectplaceholderflag() {
  _impl_.shouldclearobjectplaceholderflag_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool InfoGeometryCommandArchive::_internal_shouldclearobjectplaceholderflag() const {
  return _impl_.shouldclearobjectplaceholderflag_;
}
inline bool InfoGeometryCommandArchive::shouldclearobjectplaceholderflag() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.shouldClearObjectPlaceholderFlag)
  return _internal_shouldclearobjectplaceholderflag();
}
inline void InfoGeometryCommandArchive::_internal_set_shouldclearobjectplaceholderflag(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.shouldclearobjectplaceholderflag_ = value;
}
inline void InfoGeometryCommandArchive::set_shouldclearobjectplaceholderflag(bool value) {
  _internal_set_shouldclearobjectplaceholderflag(value);
  // @@protoc_insertion_point(field_set:TSD.InfoGeometryCommandArchive.shouldClearObjectPlaceholderFlag)
}

// optional bool didMatchObjectPlaceholderGeometry = 6;
inline bool InfoGeometryCommandArchive::_internal_has_didmatchobjectplaceholdergeometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InfoGeometryCommandArchive::has_didmatchobjectplaceholdergeometry() const {
  return _internal_has_didmatchobjectplaceholdergeometry();
}
inline void InfoGeometryCommandArchive::clear_didmatchobjectplaceholdergeometry() {
  _impl_.didmatchobjectplaceholdergeometry_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool InfoGeometryCommandArchive::_internal_didmatchobjectplaceholdergeometry() const {
  return _impl_.didmatchobjectplaceholdergeometry_;
}
inline bool InfoGeometryCommandArchive::didmatchobjectplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.didMatchObjectPlaceholderGeometry)
  return _internal_didmatchobjectplaceholdergeometry();
}
inline void InfoGeometryCommandArchive::_internal_set_didmatchobjectplaceholdergeometry(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.didmatchobjectplaceholdergeometry_ = value;
}
inline void InfoGeometryCommandArchive::set_didmatchobjectplaceholdergeometry(bool value) {
  _internal_set_didmatchobjectplaceholdergeometry(value);
  // @@protoc_insertion_point(field_set:TSD.InfoGeometryCommandArchive.didMatchObjectPlaceholderGeometry)
}

// -------------------------------------------------------------------

// DrawablePathSourceCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool DrawablePathSourceCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawablePathSourceCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& DrawablePathSourceCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& DrawablePathSourceCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePathSourceCommandArchive.super)
  return _internal_super();
}
inline void DrawablePathSourceCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePathSourceCommandArchive.super)
}
inline ::TSK::CommandArchive* DrawablePathSourceCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* DrawablePathSourceCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePathSourceCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* DrawablePathSourceCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* DrawablePathSourceCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePathSourceCommandArchive.super)
  return _msg;
}
inline void DrawablePathSourceCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePathSourceCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawablePathSourceCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawablePathSourceCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawablePathSourceCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawablePathSourceCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePathSourceCommandArchive.info)
  return _internal_info();
}
inline void DrawablePathSourceCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePathSourceCommandArchive.info)
}
inline ::TSP::Reference* DrawablePathSourceCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawablePathSourceCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePathSourceCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawablePathSourceCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawablePathSourceCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePathSourceCommandArchive.info)
  return _msg;
}
inline void DrawablePathSourceCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePathSourceCommandArchive.info)
}

// optional .TSD.PathSourceArchive oldpathsource = 3;
inline bool DrawablePathSourceCommandArchive::_internal_has_oldpathsource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldpathsource_ != nullptr);
  return value;
}
inline bool DrawablePathSourceCommandArchive::has_oldpathsource() const {
  return _internal_has_oldpathsource();
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::_internal_oldpathsource() const {
  const ::TSD::PathSourceArchive* p = _impl_.oldpathsource_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::oldpathsource() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePathSourceCommandArchive.oldpathsource)
  return _internal_oldpathsource();
}
inline void DrawablePathSourceCommandArchive::unsafe_arena_set_allocated_oldpathsource(
    ::TSD::PathSourceArchive* oldpathsource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldpathsource_);
  }
  _impl_.oldpathsource_ = oldpathsource;
  if (oldpathsource) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePathSourceCommandArchive.oldpathsource)
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::release_oldpathsource() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::PathSourceArchive* temp = _impl_.oldpathsource_;
  _impl_.oldpathsource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::unsafe_arena_release_oldpathsource() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePathSourceCommandArchive.oldpathsource)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::PathSourceArchive* temp = _impl_.oldpathsource_;
  _impl_.oldpathsource_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::_internal_mutable_oldpathsource() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.oldpathsource_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    _impl_.oldpathsource_ = p;
  }
  return _impl_.oldpathsource_;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::mutable_oldpathsource() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_oldpathsource();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePathSourceCommandArchive.oldpathsource)
  return _msg;
}
inline void DrawablePathSourceCommandArchive::set_allocated_oldpathsource(::TSD::PathSourceArchive* oldpathsource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldpathsource_);
  }
  if (oldpathsource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpathsource));
    if (message_arena != submessage_arena) {
      oldpathsource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldpathsource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.oldpathsource_ = oldpathsource;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePathSourceCommandArchive.oldpathsource)
}

// optional .TSD.PathSourceArchive newpathsource = 4;
inline bool DrawablePathSourceCommandArchive::_internal_has_newpathsource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newpathsource_ != nullptr);
  return value;
}
inline bool DrawablePathSourceCommandArchive::has_newpathsource() const {
  return _internal_has_newpathsource();
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::_internal_newpathsource() const {
  const ::TSD::PathSourceArchive* p = _impl_.newpathsource_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::newpathsource() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePathSourceCommandArchive.newpathsource)
  return _internal_newpathsource();
}
inline void DrawablePathSourceCommandArchive::unsafe_arena_set_allocated_newpathsource(
    ::TSD::PathSourceArchive* newpathsource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newpathsource_);
  }
  _impl_.newpathsource_ = newpathsource;
  if (newpathsource) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePathSourceCommandArchive.newpathsource)
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::release_newpathsource() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::PathSourceArchive* temp = _impl_.newpathsource_;
  _impl_.newpathsource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::unsafe_arena_release_newpathsource() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePathSourceCommandArchive.newpathsource)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::PathSourceArchive* temp = _impl_.newpathsource_;
  _impl_.newpathsource_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::_internal_mutable_newpathsource() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.newpathsource_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArenaForAllocation());
    _impl_.newpathsource_ = p;
  }
  return _impl_.newpathsource_;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::mutable_newpathsource() {
  ::TSD::PathSourceArchive* _msg = _internal_mutable_newpathsource();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePathSourceCommandArchive.newpathsource)
  return _msg;
}
inline void DrawablePathSourceCommandArchive::set_allocated_newpathsource(::TSD::PathSourceArchive* newpathsource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newpathsource_);
  }
  if (newpathsource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newpathsource));
    if (message_arena != submessage_arena) {
      newpathsource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newpathsource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.newpathsource_ = newpathsource;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePathSourceCommandArchive.newpathsource)
}

// -------------------------------------------------------------------

// InstantAlphaCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InstantAlphaCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool InstantAlphaCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InstantAlphaCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InstantAlphaCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.InstantAlphaCommandArchive.super)
  return _internal_super();
}
inline void InstantAlphaCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InstantAlphaCommandArchive.super)
}
inline ::TSK::CommandArchive* InstantAlphaCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* InstantAlphaCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.InstantAlphaCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InstantAlphaCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* InstantAlphaCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.InstantAlphaCommandArchive.super)
  return _msg;
}
inline void InstantAlphaCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.InstantAlphaCommandArchive.super)
}

// optional .TSP.Reference image = 2;
inline bool InstantAlphaCommandArchive::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool InstantAlphaCommandArchive::has_image() const {
  return _internal_has_image();
}
inline const ::TSP::Reference& InstantAlphaCommandArchive::_internal_image() const {
  const ::TSP::Reference* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InstantAlphaCommandArchive::image() const {
  // @@protoc_insertion_point(field_get:TSD.InstantAlphaCommandArchive.image)
  return _internal_image();
}
inline void InstantAlphaCommandArchive::unsafe_arena_set_allocated_image(
    ::TSP::Reference* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InstantAlphaCommandArchive.image)
}
inline ::TSP::Reference* InstantAlphaCommandArchive::release_image() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* InstantAlphaCommandArchive::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:TSD.InstantAlphaCommandArchive.image)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InstantAlphaCommandArchive::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::TSP::Reference* InstantAlphaCommandArchive::mutable_image() {
  ::TSP::Reference* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:TSD.InstantAlphaCommandArchive.image)
  return _msg;
}
inline void InstantAlphaCommandArchive::set_allocated_image(::TSP::Reference* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:TSD.InstantAlphaCommandArchive.image)
}

// optional .TSP.Path oldpath = 3;
inline bool InstantAlphaCommandArchive::_internal_has_oldpath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldpath_ != nullptr);
  return value;
}
inline bool InstantAlphaCommandArchive::has_oldpath() const {
  return _internal_has_oldpath();
}
inline const ::TSP::Path& InstantAlphaCommandArchive::_internal_oldpath() const {
  const ::TSP::Path* p = _impl_.oldpath_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Path&>(
      ::TSP::_Path_default_instance_);
}
inline const ::TSP::Path& InstantAlphaCommandArchive::oldpath() const {
  // @@protoc_insertion_point(field_get:TSD.InstantAlphaCommandArchive.oldpath)
  return _internal_oldpath();
}
inline void InstantAlphaCommandArchive::unsafe_arena_set_allocated_oldpath(
    ::TSP::Path* oldpath) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldpath_);
  }
  _impl_.oldpath_ = oldpath;
  if (oldpath) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InstantAlphaCommandArchive.oldpath)
}
inline ::TSP::Path* InstantAlphaCommandArchive::release_oldpath() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Path* temp = _impl_.oldpath_;
  _impl_.oldpath_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::unsafe_arena_release_oldpath() {
  // @@protoc_insertion_point(field_release:TSD.InstantAlphaCommandArchive.oldpath)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Path* temp = _impl_.oldpath_;
  _impl_.oldpath_ = nullptr;
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::_internal_mutable_oldpath() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.oldpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Path>(GetArenaForAllocation());
    _impl_.oldpath_ = p;
  }
  return _impl_.oldpath_;
}
inline ::TSP::Path* InstantAlphaCommandArchive::mutable_oldpath() {
  ::TSP::Path* _msg = _internal_mutable_oldpath();
  // @@protoc_insertion_point(field_mutable:TSD.InstantAlphaCommandArchive.oldpath)
  return _msg;
}
inline void InstantAlphaCommandArchive::set_allocated_oldpath(::TSP::Path* oldpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldpath_);
  }
  if (oldpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpath));
    if (message_arena != submessage_arena) {
      oldpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldpath, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.oldpath_ = oldpath;
  // @@protoc_insertion_point(field_set_allocated:TSD.InstantAlphaCommandArchive.oldpath)
}

// optional .TSP.Path newpath = 4;
inline bool InstantAlphaCommandArchive::_internal_has_newpath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newpath_ != nullptr);
  return value;
}
inline bool InstantAlphaCommandArchive::has_newpath() const {
  return _internal_has_newpath();
}
inline const ::TSP::Path& InstantAlphaCommandArchive::_internal_newpath() const {
  const ::TSP::Path* p = _impl_.newpath_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Path&>(
      ::TSP::_Path_default_instance_);
}
inline const ::TSP::Path& InstantAlphaCommandArchive::newpath() const {
  // @@protoc_insertion_point(field_get:TSD.InstantAlphaCommandArchive.newpath)
  return _internal_newpath();
}
inline void InstantAlphaCommandArchive::unsafe_arena_set_allocated_newpath(
    ::TSP::Path* newpath) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newpath_);
  }
  _impl_.newpath_ = newpath;
  if (newpath) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InstantAlphaCommandArchive.newpath)
}
inline ::TSP::Path* InstantAlphaCommandArchive::release_newpath() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Path* temp = _impl_.newpath_;
  _impl_.newpath_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::unsafe_arena_release_newpath() {
  // @@protoc_insertion_point(field_release:TSD.InstantAlphaCommandArchive.newpath)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Path* temp = _impl_.newpath_;
  _impl_.newpath_ = nullptr;
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::_internal_mutable_newpath() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.newpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Path>(GetArenaForAllocation());
    _impl_.newpath_ = p;
  }
  return _impl_.newpath_;
}
inline ::TSP::Path* InstantAlphaCommandArchive::mutable_newpath() {
  ::TSP::Path* _msg = _internal_mutable_newpath();
  // @@protoc_insertion_point(field_mutable:TSD.InstantAlphaCommandArchive.newpath)
  return _msg;
}
inline void InstantAlphaCommandArchive::set_allocated_newpath(::TSP::Path* newpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newpath_);
  }
  if (newpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newpath));
    if (message_arena != submessage_arena) {
      newpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newpath, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.newpath_ = newpath;
  // @@protoc_insertion_point(field_set_allocated:TSD.InstantAlphaCommandArchive.newpath)
}

// -------------------------------------------------------------------

// DrawableShadowCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool DrawableShadowCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawableShadowCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& DrawableShadowCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& DrawableShadowCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableShadowCommandArchive.super)
  return _internal_super();
}
inline void DrawableShadowCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableShadowCommandArchive.super)
}
inline ::TSK::CommandArchive* DrawableShadowCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* DrawableShadowCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableShadowCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* DrawableShadowCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* DrawableShadowCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableShadowCommandArchive.super)
  return _msg;
}
inline void DrawableShadowCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableShadowCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableShadowCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawableShadowCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableShadowCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableShadowCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableShadowCommandArchive.info)
  return _internal_info();
}
inline void DrawableShadowCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableShadowCommandArchive.info)
}
inline ::TSP::Reference* DrawableShadowCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableShadowCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableShadowCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableShadowCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawableShadowCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableShadowCommandArchive.info)
  return _msg;
}
inline void DrawableShadowCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableShadowCommandArchive.info)
}

// optional .TSD.ShadowArchive oldshadow = 3;
inline bool DrawableShadowCommandArchive::_internal_has_oldshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldshadow_ != nullptr);
  return value;
}
inline bool DrawableShadowCommandArchive::has_oldshadow() const {
  return _internal_has_oldshadow();
}
inline const ::TSD::ShadowArchive& DrawableShadowCommandArchive::_internal_oldshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.oldshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& DrawableShadowCommandArchive::oldshadow() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableShadowCommandArchive.oldshadow)
  return _internal_oldshadow();
}
inline void DrawableShadowCommandArchive::unsafe_arena_set_allocated_oldshadow(
    ::TSD::ShadowArchive* oldshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldshadow_);
  }
  _impl_.oldshadow_ = oldshadow;
  if (oldshadow) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableShadowCommandArchive.oldshadow)
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::release_oldshadow() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.oldshadow_;
  _impl_.oldshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::unsafe_arena_release_oldshadow() {
  // @@protoc_insertion_point(field_release:TSD.DrawableShadowCommandArchive.oldshadow)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.oldshadow_;
  _impl_.oldshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::_internal_mutable_oldshadow() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.oldshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.oldshadow_ = p;
  }
  return _impl_.oldshadow_;
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::mutable_oldshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_oldshadow();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableShadowCommandArchive.oldshadow)
  return _msg;
}
inline void DrawableShadowCommandArchive::set_allocated_oldshadow(::TSD::ShadowArchive* oldshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldshadow_);
  }
  if (oldshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldshadow));
    if (message_arena != submessage_arena) {
      oldshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.oldshadow_ = oldshadow;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableShadowCommandArchive.oldshadow)
}

// optional .TSD.ShadowArchive newshadow = 4;
inline bool DrawableShadowCommandArchive::_internal_has_newshadow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newshadow_ != nullptr);
  return value;
}
inline bool DrawableShadowCommandArchive::has_newshadow() const {
  return _internal_has_newshadow();
}
inline const ::TSD::ShadowArchive& DrawableShadowCommandArchive::_internal_newshadow() const {
  const ::TSD::ShadowArchive* p = _impl_.newshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& DrawableShadowCommandArchive::newshadow() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableShadowCommandArchive.newshadow)
  return _internal_newshadow();
}
inline void DrawableShadowCommandArchive::unsafe_arena_set_allocated_newshadow(
    ::TSD::ShadowArchive* newshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newshadow_);
  }
  _impl_.newshadow_ = newshadow;
  if (newshadow) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableShadowCommandArchive.newshadow)
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::release_newshadow() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = _impl_.newshadow_;
  _impl_.newshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::unsafe_arena_release_newshadow() {
  // @@protoc_insertion_point(field_release:TSD.DrawableShadowCommandArchive.newshadow)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = _impl_.newshadow_;
  _impl_.newshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::_internal_mutable_newshadow() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.newshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.newshadow_ = p;
  }
  return _impl_.newshadow_;
}
inline ::TSD::ShadowArchive* DrawableShadowCommandArchive::mutable_newshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_newshadow();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableShadowCommandArchive.newshadow)
  return _msg;
}
inline void DrawableShadowCommandArchive::set_allocated_newshadow(::TSD::ShadowArchive* newshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newshadow_);
  }
  if (newshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newshadow));
    if (message_arena != submessage_arena) {
      newshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newshadow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.newshadow_ = newshadow;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableShadowCommandArchive.newshadow)
}

// -------------------------------------------------------------------

// DrawableApplyThemeCommandArchive

// required .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool DrawableApplyThemeCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawableApplyThemeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& DrawableApplyThemeCommandArchive::_internal_super() const {
  const ::TSS::ApplyThemeChildCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ApplyThemeChildCommandArchive&>(
      ::TSS::_ApplyThemeChildCommandArchive_default_instance_);
}
inline const ::TSS::ApplyThemeChildCommandArchive& DrawableApplyThemeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableApplyThemeCommandArchive.super)
  return _internal_super();
}
inline void DrawableApplyThemeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSS::ApplyThemeChildCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableApplyThemeCommandArchive.super)
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableApplyThemeCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::mutable_super() {
  ::TSS::ApplyThemeChildCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableApplyThemeCommandArchive.super)
  return _msg;
}
inline void DrawableApplyThemeCommandArchive::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableApplyThemeCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableApplyThemeCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawableApplyThemeCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableApplyThemeCommandArchive.info)
  return _internal_info();
}
inline void DrawableApplyThemeCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableApplyThemeCommandArchive.info)
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableApplyThemeCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableApplyThemeCommandArchive.info)
  return _msg;
}
inline void DrawableApplyThemeCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableApplyThemeCommandArchive.info)
}

// optional .TSP.Reference style = 3;
inline bool DrawableApplyThemeCommandArchive::_internal_has_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_ != nullptr);
  return value;
}
inline bool DrawableApplyThemeCommandArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::_internal_style() const {
  const ::TSP::Reference* p = _impl_.style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::style() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableApplyThemeCommandArchive.style)
  return _internal_style();
}
inline void DrawableApplyThemeCommandArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  _impl_.style_ = style;
  if (style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableApplyThemeCommandArchive.style)
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::release_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSD.DrawableApplyThemeCommandArchive.style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::_internal_mutable_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.style_ = p;
  }
  return _impl_.style_;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableApplyThemeCommandArchive.style)
  return _msg;
}
inline void DrawableApplyThemeCommandArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableApplyThemeCommandArchive.style)
}

// -------------------------------------------------------------------

// StyledInfoSetStyleCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool StyledInfoSetStyleCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool StyledInfoSetStyleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& StyledInfoSetStyleCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& StyledInfoSetStyleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.StyledInfoSetStyleCommandArchive.super)
  return _internal_super();
}
inline void StyledInfoSetStyleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.StyledInfoSetStyleCommandArchive.super)
}
inline ::TSK::CommandArchive* StyledInfoSetStyleCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* StyledInfoSetStyleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.StyledInfoSetStyleCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* StyledInfoSetStyleCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* StyledInfoSetStyleCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.StyledInfoSetStyleCommandArchive.super)
  return _msg;
}
inline void StyledInfoSetStyleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.StyledInfoSetStyleCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool StyledInfoSetStyleCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool StyledInfoSetStyleCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.StyledInfoSetStyleCommandArchive.info)
  return _internal_info();
}
inline void StyledInfoSetStyleCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.StyledInfoSetStyleCommandArchive.info)
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.StyledInfoSetStyleCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.StyledInfoSetStyleCommandArchive.info)
  return _msg;
}
inline void StyledInfoSetStyleCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.StyledInfoSetStyleCommandArchive.info)
}

// optional .TSP.Reference style = 3;
inline bool StyledInfoSetStyleCommandArchive::_internal_has_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_ != nullptr);
  return value;
}
inline bool StyledInfoSetStyleCommandArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::_internal_style() const {
  const ::TSP::Reference* p = _impl_.style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::style() const {
  // @@protoc_insertion_point(field_get:TSD.StyledInfoSetStyleCommandArchive.style)
  return _internal_style();
}
inline void StyledInfoSetStyleCommandArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  _impl_.style_ = style;
  if (style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.StyledInfoSetStyleCommandArchive.style)
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::release_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSD.StyledInfoSetStyleCommandArchive.style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::_internal_mutable_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.style_ = p;
  }
  return _impl_.style_;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSD.StyledInfoSetStyleCommandArchive.style)
  return _msg;
}
inline void StyledInfoSetStyleCommandArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSD.StyledInfoSetStyleCommandArchive.style)
}

// -------------------------------------------------------------------

// ShapePathSourceFlipCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ShapePathSourceFlipCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ShapePathSourceFlipCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ShapePathSourceFlipCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ShapePathSourceFlipCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ShapePathSourceFlipCommandArchive.super)
  return _internal_super();
}
inline void ShapePathSourceFlipCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapePathSourceFlipCommandArchive.super)
}
inline ::TSK::CommandArchive* ShapePathSourceFlipCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ShapePathSourceFlipCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ShapePathSourceFlipCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ShapePathSourceFlipCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ShapePathSourceFlipCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ShapePathSourceFlipCommandArchive.super)
  return _msg;
}
inline void ShapePathSourceFlipCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapePathSourceFlipCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool ShapePathSourceFlipCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ShapePathSourceFlipCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ShapePathSourceFlipCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapePathSourceFlipCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.ShapePathSourceFlipCommandArchive.info)
  return _internal_info();
}
inline void ShapePathSourceFlipCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapePathSourceFlipCommandArchive.info)
}
inline ::TSP::Reference* ShapePathSourceFlipCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShapePathSourceFlipCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.ShapePathSourceFlipCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapePathSourceFlipCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* ShapePathSourceFlipCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.ShapePathSourceFlipCommandArchive.info)
  return _msg;
}
inline void ShapePathSourceFlipCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapePathSourceFlipCommandArchive.info)
}

// optional bool newHorizontalFlip = 3;
inline bool ShapePathSourceFlipCommandArchive::_internal_has_newhorizontalflip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShapePathSourceFlipCommandArchive::has_newhorizontalflip() const {
  return _internal_has_newhorizontalflip();
}
inline void ShapePathSourceFlipCommandArchive::clear_newhorizontalflip() {
  _impl_.newhorizontalflip_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ShapePathSourceFlipCommandArchive::_internal_newhorizontalflip() const {
  return _impl_.newhorizontalflip_;
}
inline bool ShapePathSourceFlipCommandArchive::newhorizontalflip() const {
  // @@protoc_insertion_point(field_get:TSD.ShapePathSourceFlipCommandArchive.newHorizontalFlip)
  return _internal_newhorizontalflip();
}
inline void ShapePathSourceFlipCommandArchive::_internal_set_newhorizontalflip(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.newhorizontalflip_ = value;
}
inline void ShapePathSourceFlipCommandArchive::set_newhorizontalflip(bool value) {
  _internal_set_newhorizontalflip(value);
  // @@protoc_insertion_point(field_set:TSD.ShapePathSourceFlipCommandArchive.newHorizontalFlip)
}

// optional bool newVerticalFlip = 4;
inline bool ShapePathSourceFlipCommandArchive::_internal_has_newverticalflip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShapePathSourceFlipCommandArchive::has_newverticalflip() const {
  return _internal_has_newverticalflip();
}
inline void ShapePathSourceFlipCommandArchive::clear_newverticalflip() {
  _impl_.newverticalflip_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ShapePathSourceFlipCommandArchive::_internal_newverticalflip() const {
  return _impl_.newverticalflip_;
}
inline bool ShapePathSourceFlipCommandArchive::newverticalflip() const {
  // @@protoc_insertion_point(field_get:TSD.ShapePathSourceFlipCommandArchive.newVerticalFlip)
  return _internal_newverticalflip();
}
inline void ShapePathSourceFlipCommandArchive::_internal_set_newverticalflip(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.newverticalflip_ = value;
}
inline void ShapePathSourceFlipCommandArchive::set_newverticalflip(bool value) {
  _internal_set_newverticalflip(value);
  // @@protoc_insertion_point(field_set:TSD.ShapePathSourceFlipCommandArchive.newVerticalFlip)
}

// optional bool oldHorizontalFlip = 5;
inline bool ShapePathSourceFlipCommandArchive::_internal_has_oldhorizontalflip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShapePathSourceFlipCommandArchive::has_oldhorizontalflip() const {
  return _internal_has_oldhorizontalflip();
}
inline void ShapePathSourceFlipCommandArchive::clear_oldhorizontalflip() {
  _impl_.oldhorizontalflip_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ShapePathSourceFlipCommandArchive::_internal_oldhorizontalflip() const {
  return _impl_.oldhorizontalflip_;
}
inline bool ShapePathSourceFlipCommandArchive::oldhorizontalflip() const {
  // @@protoc_insertion_point(field_get:TSD.ShapePathSourceFlipCommandArchive.oldHorizontalFlip)
  return _internal_oldhorizontalflip();
}
inline void ShapePathSourceFlipCommandArchive::_internal_set_oldhorizontalflip(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.oldhorizontalflip_ = value;
}
inline void ShapePathSourceFlipCommandArchive::set_oldhorizontalflip(bool value) {
  _internal_set_oldhorizontalflip(value);
  // @@protoc_insertion_point(field_set:TSD.ShapePathSourceFlipCommandArchive.oldHorizontalFlip)
}

// optional bool oldVerticalFlip = 6;
inline bool ShapePathSourceFlipCommandArchive::_internal_has_oldverticalflip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShapePathSourceFlipCommandArchive::has_oldverticalflip() const {
  return _internal_has_oldverticalflip();
}
inline void ShapePathSourceFlipCommandArchive::clear_oldverticalflip() {
  _impl_.oldverticalflip_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ShapePathSourceFlipCommandArchive::_internal_oldverticalflip() const {
  return _impl_.oldverticalflip_;
}
inline bool ShapePathSourceFlipCommandArchive::oldverticalflip() const {
  // @@protoc_insertion_point(field_get:TSD.ShapePathSourceFlipCommandArchive.oldVerticalFlip)
  return _internal_oldverticalflip();
}
inline void ShapePathSourceFlipCommandArchive::_internal_set_oldverticalflip(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.oldverticalflip_ = value;
}
inline void ShapePathSourceFlipCommandArchive::set_oldverticalflip(bool value) {
  _internal_set_oldverticalflip(value);
  // @@protoc_insertion_point(field_set:TSD.ShapePathSourceFlipCommandArchive.oldVerticalFlip)
}

// -------------------------------------------------------------------

// ShapeStyleSetValueCommandArchive

// required .TSD.StyledInfoSetStyleCommandArchive super = 1;
inline bool ShapeStyleSetValueCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ShapeStyleSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ShapeStyleSetValueCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& ShapeStyleSetValueCommandArchive::_internal_super() const {
  const ::TSD::StyledInfoSetStyleCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StyledInfoSetStyleCommandArchive&>(
      ::TSD::_StyledInfoSetStyleCommandArchive_default_instance_);
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& ShapeStyleSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeStyleSetValueCommandArchive.super)
  return _internal_super();
}
inline void ShapeStyleSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::StyledInfoSetStyleCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeStyleSetValueCommandArchive.super)
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeStyleSetValueCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeStyleSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ShapeStyleSetValueCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeStyleSetValueCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StyledInfoSetStyleCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeStyleSetValueCommandArchive::mutable_super() {
  ::TSD::StyledInfoSetStyleCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeStyleSetValueCommandArchive.super)
  return _msg;
}
inline void ShapeStyleSetValueCommandArchive::set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeStyleSetValueCommandArchive.super)
}

// optional .TSD.ShapeStylePropertiesArchive shape_properties = 4;
inline bool ShapeStyleSetValueCommandArchive::_internal_has_shape_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_properties_ != nullptr);
  return value;
}
inline bool ShapeStyleSetValueCommandArchive::has_shape_properties() const {
  return _internal_has_shape_properties();
}
inline const ::TSD::ShapeStylePropertiesArchive& ShapeStyleSetValueCommandArchive::_internal_shape_properties() const {
  const ::TSD::ShapeStylePropertiesArchive* p = _impl_.shape_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShapeStylePropertiesArchive&>(
      ::TSD::_ShapeStylePropertiesArchive_default_instance_);
}
inline const ::TSD::ShapeStylePropertiesArchive& ShapeStyleSetValueCommandArchive::shape_properties() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeStyleSetValueCommandArchive.shape_properties)
  return _internal_shape_properties();
}
inline void ShapeStyleSetValueCommandArchive::unsafe_arena_set_allocated_shape_properties(
    ::TSD::ShapeStylePropertiesArchive* shape_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_properties_);
  }
  _impl_.shape_properties_ = shape_properties;
  if (shape_properties) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeStyleSetValueCommandArchive.shape_properties)
}
inline ::TSD::ShapeStylePropertiesArchive* ShapeStyleSetValueCommandArchive::release_shape_properties() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ShapeStylePropertiesArchive* temp = _impl_.shape_properties_;
  _impl_.shape_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShapeStylePropertiesArchive* ShapeStyleSetValueCommandArchive::unsafe_arena_release_shape_properties() {
  // @@protoc_insertion_point(field_release:TSD.ShapeStyleSetValueCommandArchive.shape_properties)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ShapeStylePropertiesArchive* temp = _impl_.shape_properties_;
  _impl_.shape_properties_ = nullptr;
  return temp;
}
inline ::TSD::ShapeStylePropertiesArchive* ShapeStyleSetValueCommandArchive::_internal_mutable_shape_properties() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shape_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShapeStylePropertiesArchive>(GetArenaForAllocation());
    _impl_.shape_properties_ = p;
  }
  return _impl_.shape_properties_;
}
inline ::TSD::ShapeStylePropertiesArchive* ShapeStyleSetValueCommandArchive::mutable_shape_properties() {
  ::TSD::ShapeStylePropertiesArchive* _msg = _internal_mutable_shape_properties();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeStyleSetValueCommandArchive.shape_properties)
  return _msg;
}
inline void ShapeStyleSetValueCommandArchive::set_allocated_shape_properties(::TSD::ShapeStylePropertiesArchive* shape_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_properties_);
  }
  if (shape_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_properties));
    if (message_arena != submessage_arena) {
      shape_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_properties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.shape_properties_ = shape_properties;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeStyleSetValueCommandArchive.shape_properties)
}

// -------------------------------------------------------------------

// ShapeApplyPresetCommandArchive

// required .TSD.StyledInfoSetStyleCommandArchive super = 1;
inline bool ShapeApplyPresetCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ShapeApplyPresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& ShapeApplyPresetCommandArchive::_internal_super() const {
  const ::TSD::StyledInfoSetStyleCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StyledInfoSetStyleCommandArchive&>(
      ::TSD::_StyledInfoSetStyleCommandArchive_default_instance_);
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& ShapeApplyPresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeApplyPresetCommandArchive.super)
  return _internal_super();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::StyledInfoSetStyleCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeApplyPresetCommandArchive.super)
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeApplyPresetCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeApplyPresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ShapeApplyPresetCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeApplyPresetCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StyledInfoSetStyleCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* ShapeApplyPresetCommandArchive::mutable_super() {
  ::TSD::StyledInfoSetStyleCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeApplyPresetCommandArchive.super)
  return _msg;
}
inline void ShapeApplyPresetCommandArchive::set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeApplyPresetCommandArchive.super)
}

// optional .TSP.Reference stylepreset = 10;
inline bool ShapeApplyPresetCommandArchive::_internal_has_stylepreset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stylepreset_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_stylepreset() const {
  return _internal_has_stylepreset();
}
inline const ::TSP::Reference& ShapeApplyPresetCommandArchive::_internal_stylepreset() const {
  const ::TSP::Reference* p = _impl_.stylepreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapeApplyPresetCommandArchive::stylepreset() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeApplyPresetCommandArchive.stylepreset)
  return _internal_stylepreset();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_stylepreset(
    ::TSP::Reference* stylepreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylepreset_);
  }
  _impl_.stylepreset_ = stylepreset;
  if (stylepreset) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeApplyPresetCommandArchive.stylepreset)
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::release_stylepreset() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.stylepreset_;
  _impl_.stylepreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::unsafe_arena_release_stylepreset() {
  // @@protoc_insertion_point(field_release:TSD.ShapeApplyPresetCommandArchive.stylepreset)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.stylepreset_;
  _impl_.stylepreset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::_internal_mutable_stylepreset() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stylepreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.stylepreset_ = p;
  }
  return _impl_.stylepreset_;
}
inline ::TSP::Reference* ShapeApplyPresetCommandArchive::mutable_stylepreset() {
  ::TSP::Reference* _msg = _internal_mutable_stylepreset();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeApplyPresetCommandArchive.stylepreset)
  return _msg;
}
inline void ShapeApplyPresetCommandArchive::set_allocated_stylepreset(::TSP::Reference* stylepreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylepreset_);
  }
  if (stylepreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylepreset));
    if (message_arena != submessage_arena) {
      stylepreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylepreset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stylepreset_ = stylepreset;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeApplyPresetCommandArchive.stylepreset)
}

// optional .TSP.Color colorpreset = 11;
inline bool ShapeApplyPresetCommandArchive::_internal_has_colorpreset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.colorpreset_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_colorpreset() const {
  return _internal_has_colorpreset();
}
inline const ::TSP::Color& ShapeApplyPresetCommandArchive::_internal_colorpreset() const {
  const ::TSP::Color* p = _impl_.colorpreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ShapeApplyPresetCommandArchive::colorpreset() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeApplyPresetCommandArchive.colorpreset)
  return _internal_colorpreset();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_colorpreset(
    ::TSP::Color* colorpreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.colorpreset_);
  }
  _impl_.colorpreset_ = colorpreset;
  if (colorpreset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeApplyPresetCommandArchive.colorpreset)
}
inline ::TSP::Color* ShapeApplyPresetCommandArchive::release_colorpreset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = _impl_.colorpreset_;
  _impl_.colorpreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* ShapeApplyPresetCommandArchive::unsafe_arena_release_colorpreset() {
  // @@protoc_insertion_point(field_release:TSD.ShapeApplyPresetCommandArchive.colorpreset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = _impl_.colorpreset_;
  _impl_.colorpreset_ = nullptr;
  return temp;
}
inline ::TSP::Color* ShapeApplyPresetCommandArchive::_internal_mutable_colorpreset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.colorpreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    _impl_.colorpreset_ = p;
  }
  return _impl_.colorpreset_;
}
inline ::TSP::Color* ShapeApplyPresetCommandArchive::mutable_colorpreset() {
  ::TSP::Color* _msg = _internal_mutable_colorpreset();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeApplyPresetCommandArchive.colorpreset)
  return _msg;
}
inline void ShapeApplyPresetCommandArchive::set_allocated_colorpreset(::TSP::Color* colorpreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.colorpreset_);
  }
  if (colorpreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(colorpreset));
    if (message_arena != submessage_arena) {
      colorpreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colorpreset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.colorpreset_ = colorpreset;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeApplyPresetCommandArchive.colorpreset)
}

// optional .TSD.FillArchive fillpreset = 12;
inline bool ShapeApplyPresetCommandArchive::_internal_has_fillpreset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fillpreset_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_fillpreset() const {
  return _internal_has_fillpreset();
}
inline const ::TSD::FillArchive& ShapeApplyPresetCommandArchive::_internal_fillpreset() const {
  const ::TSD::FillArchive* p = _impl_.fillpreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ShapeApplyPresetCommandArchive::fillpreset() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeApplyPresetCommandArchive.fillpreset)
  return _internal_fillpreset();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_fillpreset(
    ::TSD::FillArchive* fillpreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fillpreset_);
  }
  _impl_.fillpreset_ = fillpreset;
  if (fillpreset) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeApplyPresetCommandArchive.fillpreset)
}
inline ::TSD::FillArchive* ShapeApplyPresetCommandArchive::release_fillpreset() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = _impl_.fillpreset_;
  _impl_.fillpreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ShapeApplyPresetCommandArchive::unsafe_arena_release_fillpreset() {
  // @@protoc_insertion_point(field_release:TSD.ShapeApplyPresetCommandArchive.fillpreset)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::FillArchive* temp = _impl_.fillpreset_;
  _impl_.fillpreset_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ShapeApplyPresetCommandArchive::_internal_mutable_fillpreset() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.fillpreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    _impl_.fillpreset_ = p;
  }
  return _impl_.fillpreset_;
}
inline ::TSD::FillArchive* ShapeApplyPresetCommandArchive::mutable_fillpreset() {
  ::TSD::FillArchive* _msg = _internal_mutable_fillpreset();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeApplyPresetCommandArchive.fillpreset)
  return _msg;
}
inline void ShapeApplyPresetCommandArchive::set_allocated_fillpreset(::TSD::FillArchive* fillpreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fillpreset_);
  }
  if (fillpreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fillpreset));
    if (message_arena != submessage_arena) {
      fillpreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fillpreset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.fillpreset_ = fillpreset;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeApplyPresetCommandArchive.fillpreset)
}

// optional .TSD.ShadowArchive shadowpreset = 13;
inline bool ShapeApplyPresetCommandArchive::_internal_has_shadowpreset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shadowpreset_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_shadowpreset() const {
  return _internal_has_shadowpreset();
}
inline const ::TSD::ShadowArchive& ShapeApplyPresetCommandArchive::_internal_shadowpreset() const {
  const ::TSD::ShadowArchive* p = _impl_.shadowpreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ShapeApplyPresetCommandArchive::shadowpreset() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeApplyPresetCommandArchive.shadowpreset)
  return _internal_shadowpreset();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_shadowpreset(
    ::TSD::ShadowArchive* shadowpreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shadowpreset_);
  }
  _impl_.shadowpreset_ = shadowpreset;
  if (shadowpreset) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeApplyPresetCommandArchive.shadowpreset)
}
inline ::TSD::ShadowArchive* ShapeApplyPresetCommandArchive::release_shadowpreset() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::ShadowArchive* temp = _impl_.shadowpreset_;
  _impl_.shadowpreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ShapeApplyPresetCommandArchive::unsafe_arena_release_shadowpreset() {
  // @@protoc_insertion_point(field_release:TSD.ShapeApplyPresetCommandArchive.shadowpreset)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::ShadowArchive* temp = _impl_.shadowpreset_;
  _impl_.shadowpreset_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ShapeApplyPresetCommandArchive::_internal_mutable_shadowpreset() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.shadowpreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.shadowpreset_ = p;
  }
  return _impl_.shadowpreset_;
}
inline ::TSD::ShadowArchive* ShapeApplyPresetCommandArchive::mutable_shadowpreset() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_shadowpreset();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeApplyPresetCommandArchive.shadowpreset)
  return _msg;
}
inline void ShapeApplyPresetCommandArchive::set_allocated_shadowpreset(::TSD::ShadowArchive* shadowpreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shadowpreset_);
  }
  if (shadowpreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadowpreset));
    if (message_arena != submessage_arena) {
      shadowpreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadowpreset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.shadowpreset_ = shadowpreset;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeApplyPresetCommandArchive.shadowpreset)
}

// -------------------------------------------------------------------

// ShapeSetLineEndCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ShapeSetLineEndCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ShapeSetLineEndCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ShapeSetLineEndCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ShapeSetLineEndCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeSetLineEndCommandArchive.super)
  return _internal_super();
}
inline void ShapeSetLineEndCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeSetLineEndCommandArchive.super)
}
inline ::TSK::CommandArchive* ShapeSetLineEndCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ShapeSetLineEndCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ShapeSetLineEndCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ShapeSetLineEndCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ShapeSetLineEndCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeSetLineEndCommandArchive.super)
  return _msg;
}
inline void ShapeSetLineEndCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeSetLineEndCommandArchive.super)
}

// optional .TSP.Reference shape = 2;
inline bool ShapeSetLineEndCommandArchive::_internal_has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline bool ShapeSetLineEndCommandArchive::has_shape() const {
  return _internal_has_shape();
}
inline const ::TSP::Reference& ShapeSetLineEndCommandArchive::_internal_shape() const {
  const ::TSP::Reference* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShapeSetLineEndCommandArchive::shape() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeSetLineEndCommandArchive.shape)
  return _internal_shape();
}
inline void ShapeSetLineEndCommandArchive::unsafe_arena_set_allocated_shape(
    ::TSP::Reference* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = shape;
  if (shape) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeSetLineEndCommandArchive.shape)
}
inline ::TSP::Reference* ShapeSetLineEndCommandArchive::release_shape() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShapeSetLineEndCommandArchive::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:TSD.ShapeSetLineEndCommandArchive.shape)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShapeSetLineEndCommandArchive::_internal_mutable_shape() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.shape_ = p;
  }
  return _impl_.shape_;
}
inline ::TSP::Reference* ShapeSetLineEndCommandArchive::mutable_shape() {
  ::TSP::Reference* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeSetLineEndCommandArchive.shape)
  return _msg;
}
inline void ShapeSetLineEndCommandArchive::set_allocated_shape(::TSP::Reference* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_);
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape));
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeSetLineEndCommandArchive.shape)
}

// optional .TSD.LineEndArchive line_end = 3;
inline bool ShapeSetLineEndCommandArchive::_internal_has_line_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.line_end_ != nullptr);
  return value;
}
inline bool ShapeSetLineEndCommandArchive::has_line_end() const {
  return _internal_has_line_end();
}
inline const ::TSD::LineEndArchive& ShapeSetLineEndCommandArchive::_internal_line_end() const {
  const ::TSD::LineEndArchive* p = _impl_.line_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ShapeSetLineEndCommandArchive::line_end() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeSetLineEndCommandArchive.line_end)
  return _internal_line_end();
}
inline void ShapeSetLineEndCommandArchive::unsafe_arena_set_allocated_line_end(
    ::TSD::LineEndArchive* line_end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.line_end_);
  }
  _impl_.line_end_ = line_end;
  if (line_end) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeSetLineEndCommandArchive.line_end)
}
inline ::TSD::LineEndArchive* ShapeSetLineEndCommandArchive::release_line_end() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::LineEndArchive* temp = _impl_.line_end_;
  _impl_.line_end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ShapeSetLineEndCommandArchive::unsafe_arena_release_line_end() {
  // @@protoc_insertion_point(field_release:TSD.ShapeSetLineEndCommandArchive.line_end)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::LineEndArchive* temp = _impl_.line_end_;
  _impl_.line_end_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ShapeSetLineEndCommandArchive::_internal_mutable_line_end() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.line_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    _impl_.line_end_ = p;
  }
  return _impl_.line_end_;
}
inline ::TSD::LineEndArchive* ShapeSetLineEndCommandArchive::mutable_line_end() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_line_end();
  // @@protoc_insertion_point(field_mutable:TSD.ShapeSetLineEndCommandArchive.line_end)
  return _msg;
}
inline void ShapeSetLineEndCommandArchive::set_allocated_line_end(::TSD::LineEndArchive* line_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.line_end_);
  }
  if (line_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_end));
    if (message_arena != submessage_arena) {
      line_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line_end, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.line_end_ = line_end;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeSetLineEndCommandArchive.line_end)
}

// optional bool is_head_line_end = 4;
inline bool ShapeSetLineEndCommandArchive::_internal_has_is_head_line_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShapeSetLineEndCommandArchive::has_is_head_line_end() const {
  return _internal_has_is_head_line_end();
}
inline void ShapeSetLineEndCommandArchive::clear_is_head_line_end() {
  _impl_.is_head_line_end_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ShapeSetLineEndCommandArchive::_internal_is_head_line_end() const {
  return _impl_.is_head_line_end_;
}
inline bool ShapeSetLineEndCommandArchive::is_head_line_end() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeSetLineEndCommandArchive.is_head_line_end)
  return _internal_is_head_line_end();
}
inline void ShapeSetLineEndCommandArchive::_internal_set_is_head_line_end(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_head_line_end_ = value;
}
inline void ShapeSetLineEndCommandArchive::set_is_head_line_end(bool value) {
  _internal_set_is_head_line_end(value);
  // @@protoc_insertion_point(field_set:TSD.ShapeSetLineEndCommandArchive.is_head_line_end)
}

// -------------------------------------------------------------------

// MovieSetValueCommandArchive_PropertyValue

// optional double starttime = 1;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_starttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_starttime() const {
  return _internal_has_starttime();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_starttime() {
  _impl_.starttime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double MovieSetValueCommandArchive_PropertyValue::_internal_starttime() const {
  return _impl_.starttime_;
}
inline double MovieSetValueCommandArchive_PropertyValue::starttime() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.starttime)
  return _internal_starttime();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_starttime(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.starttime_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.starttime)
}

// optional double endtime = 2;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_endtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_endtime() const {
  return _internal_has_endtime();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_endtime() {
  _impl_.endtime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double MovieSetValueCommandArchive_PropertyValue::_internal_endtime() const {
  return _impl_.endtime_;
}
inline double MovieSetValueCommandArchive_PropertyValue::endtime() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.endtime)
  return _internal_endtime();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_endtime(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.endtime_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.endtime)
}

// optional double postertime = 3;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_postertime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_postertime() const {
  return _internal_has_postertime();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_postertime() {
  _impl_.postertime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double MovieSetValueCommandArchive_PropertyValue::_internal_postertime() const {
  return _impl_.postertime_;
}
inline double MovieSetValueCommandArchive_PropertyValue::postertime() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.postertime)
  return _internal_postertime();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_postertime(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.postertime_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_postertime(double value) {
  _internal_set_postertime(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.postertime)
}

// optional .TSP.DataReference posterimagedata = 4;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_posterimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.posterimagedata_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_posterimagedata() const {
  return _internal_has_posterimagedata();
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::_internal_posterimagedata() const {
  const ::TSP::DataReference* p = _impl_.posterimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::posterimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
  return _internal_posterimagedata();
}
inline void MovieSetValueCommandArchive_PropertyValue::unsafe_arena_set_allocated_posterimagedata(
    ::TSP::DataReference* posterimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posterimagedata_);
  }
  _impl_.posterimagedata_ = posterimagedata;
  if (posterimagedata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::release_posterimagedata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::DataReference* temp = _impl_.posterimagedata_;
  _impl_.posterimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::unsafe_arena_release_posterimagedata() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::DataReference* temp = _impl_.posterimagedata_;
  _impl_.posterimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::_internal_mutable_posterimagedata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.posterimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.posterimagedata_ = p;
  }
  return _impl_.posterimagedata_;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::mutable_posterimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_posterimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
  return _msg;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_allocated_posterimagedata(::TSP::DataReference* posterimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.posterimagedata_);
  }
  if (posterimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posterimagedata));
    if (message_arena != submessage_arena) {
      posterimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posterimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.posterimagedata_ = posterimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
}

// optional bool autoplay = 5;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_autoplay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_autoplay() const {
  return _internal_has_autoplay();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_autoplay() {
  _impl_.autoplay_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_autoplay() const {
  return _impl_.autoplay_;
}
inline bool MovieSetValueCommandArchive_PropertyValue::autoplay() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.autoplay)
  return _internal_autoplay();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_autoplay(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.autoplay_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_autoplay(bool value) {
  _internal_set_autoplay(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.autoplay)
}

// optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_loopoption() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_loopoption() const {
  return _internal_has_loopoption();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_loopoption() {
  _impl_.loopoption_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::TSD::MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_PropertyValue::_internal_loopoption() const {
  return static_cast< ::TSD::MovieSetValueCommandArchive_LoopOption >(_impl_.loopoption_);
}
inline ::TSD::MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_PropertyValue::loopoption() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.loopOption)
  return _internal_loopoption();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value) {
  assert(::TSD::MovieSetValueCommandArchive_LoopOption_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.loopoption_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value) {
  _internal_set_loopoption(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.loopOption)
}

// optional float volume = 7;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_volume() const {
  return _internal_has_volume();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_volume() {
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float MovieSetValueCommandArchive_PropertyValue::_internal_volume() const {
  return _impl_.volume_;
}
inline float MovieSetValueCommandArchive_PropertyValue::volume() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.volume)
  return _internal_volume();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_volume(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.volume_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.volume)
}

// optional .TSP.DataReference media = 8;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_media() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_media() const {
  return _internal_has_media();
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::_internal_media() const {
  const ::TSP::DataReference* p = _impl_.media_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::media() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.media)
  return _internal_media();
}
inline void MovieSetValueCommandArchive_PropertyValue::unsafe_arena_set_allocated_media(
    ::TSP::DataReference* media) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_);
  }
  _impl_.media_ = media;
  if (media) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.media)
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::release_media() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.media_;
  _impl_.media_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.PropertyValue.media)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.media_;
  _impl_.media_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::_internal_mutable_media() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.media_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.media_ = p;
  }
  return _impl_.media_;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::mutable_media() {
  ::TSP::DataReference* _msg = _internal_mutable_media();
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.PropertyValue.media)
  return _msg;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_allocated_media(::TSP::DataReference* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_);
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media));
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.media_ = media;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.media)
}

// optional .TSP.DataReference importedauxiliarymedia = 9;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_importedauxiliarymedia() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.importedauxiliarymedia_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_importedauxiliarymedia() const {
  return _internal_has_importedauxiliarymedia();
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::_internal_importedauxiliarymedia() const {
  const ::TSP::DataReference* p = _impl_.importedauxiliarymedia_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::importedauxiliarymedia() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.importedauxiliarymedia)
  return _internal_importedauxiliarymedia();
}
inline void MovieSetValueCommandArchive_PropertyValue::unsafe_arena_set_allocated_importedauxiliarymedia(
    ::TSP::DataReference* importedauxiliarymedia) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.importedauxiliarymedia_);
  }
  _impl_.importedauxiliarymedia_ = importedauxiliarymedia;
  if (importedauxiliarymedia) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.importedauxiliarymedia)
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::release_importedauxiliarymedia() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = _impl_.importedauxiliarymedia_;
  _impl_.importedauxiliarymedia_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::unsafe_arena_release_importedauxiliarymedia() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.PropertyValue.importedauxiliarymedia)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = _impl_.importedauxiliarymedia_;
  _impl_.importedauxiliarymedia_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::_internal_mutable_importedauxiliarymedia() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.importedauxiliarymedia_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.importedauxiliarymedia_ = p;
  }
  return _impl_.importedauxiliarymedia_;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::mutable_importedauxiliarymedia() {
  ::TSP::DataReference* _msg = _internal_mutable_importedauxiliarymedia();
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.PropertyValue.importedauxiliarymedia)
  return _msg;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_allocated_importedauxiliarymedia(::TSP::DataReference* importedauxiliarymedia) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.importedauxiliarymedia_);
  }
  if (importedauxiliarymedia) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(importedauxiliarymedia));
    if (message_arena != submessage_arena) {
      importedauxiliarymedia = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, importedauxiliarymedia, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.importedauxiliarymedia_ = importedauxiliarymedia;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.importedauxiliarymedia)
}

// -------------------------------------------------------------------

// MovieSetValueCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool MovieSetValueCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MovieSetValueCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MovieSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.super)
  return _internal_super();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.super)
}
inline ::TSK::CommandArchive* MovieSetValueCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* MovieSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MovieSetValueCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* MovieSetValueCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.super)
  return _msg;
}
inline void MovieSetValueCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.super)
}

// optional .TSP.Reference movie = 2;
inline bool MovieSetValueCommandArchive::_internal_has_movie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movie_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_movie() const {
  return _internal_has_movie();
}
inline const ::TSP::Reference& MovieSetValueCommandArchive::_internal_movie() const {
  const ::TSP::Reference* p = _impl_.movie_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MovieSetValueCommandArchive::movie() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.movie)
  return _internal_movie();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_movie(
    ::TSP::Reference* movie) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_);
  }
  _impl_.movie_ = movie;
  if (movie) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.movie)
}
inline ::TSP::Reference* MovieSetValueCommandArchive::release_movie() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.movie_;
  _impl_.movie_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MovieSetValueCommandArchive::unsafe_arena_release_movie() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.movie)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.movie_;
  _impl_.movie_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MovieSetValueCommandArchive::_internal_mutable_movie() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.movie_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.movie_ = p;
  }
  return _impl_.movie_;
}
inline ::TSP::Reference* MovieSetValueCommandArchive::mutable_movie() {
  ::TSP::Reference* _msg = _internal_mutable_movie();
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.movie)
  return _msg;
}
inline void MovieSetValueCommandArchive::set_allocated_movie(::TSP::Reference* movie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movie_);
  }
  if (movie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movie));
    if (message_arena != submessage_arena) {
      movie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movie, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.movie_ = movie;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.movie)
}

// optional string deprecated_property = 3;
inline bool MovieSetValueCommandArchive::_internal_has_deprecated_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive::has_deprecated_property() const {
  return _internal_has_deprecated_property();
}
inline void MovieSetValueCommandArchive::clear_deprecated_property() {
  _impl_.deprecated_property_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MovieSetValueCommandArchive::deprecated_property() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.deprecated_property)
  return _internal_deprecated_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MovieSetValueCommandArchive::set_deprecated_property(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.deprecated_property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.deprecated_property)
}
inline std::string* MovieSetValueCommandArchive::mutable_deprecated_property() {
  std::string* _s = _internal_mutable_deprecated_property();
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.deprecated_property)
  return _s;
}
inline const std::string& MovieSetValueCommandArchive::_internal_deprecated_property() const {
  return _impl_.deprecated_property_.Get();
}
inline void MovieSetValueCommandArchive::_internal_set_deprecated_property(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deprecated_property_.Set(value, GetArenaForAllocation());
}
inline std::string* MovieSetValueCommandArchive::_internal_mutable_deprecated_property() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deprecated_property_.Mutable(GetArenaForAllocation());
}
inline std::string* MovieSetValueCommandArchive::release_deprecated_property() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.deprecated_property)
  if (!_internal_has_deprecated_property()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.deprecated_property_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deprecated_property_.IsDefault()) {
    _impl_.deprecated_property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MovieSetValueCommandArchive::set_allocated_deprecated_property(std::string* deprecated_property) {
  if (deprecated_property != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deprecated_property_.SetAllocated(deprecated_property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deprecated_property_.IsDefault()) {
    _impl_.deprecated_property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.deprecated_property)
}

// optional int32 property = 4;
inline bool MovieSetValueCommandArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive::has_property() const {
  return _internal_has_property();
}
inline void MovieSetValueCommandArchive::clear_property() {
  _impl_.property_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t MovieSetValueCommandArchive::_internal_property() const {
  return _impl_.property_;
}
inline int32_t MovieSetValueCommandArchive::property() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.property)
  return _internal_property();
}
inline void MovieSetValueCommandArchive::_internal_set_property(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.property_ = value;
}
inline void MovieSetValueCommandArchive::set_property(int32_t value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.property)
}

// optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 5;
inline bool MovieSetValueCommandArchive::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_value() const {
  return _internal_has_value();
}
inline void MovieSetValueCommandArchive::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSD::MovieSetValueCommandArchive_PropertyValue& MovieSetValueCommandArchive::_internal_value() const {
  const ::TSD::MovieSetValueCommandArchive_PropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::MovieSetValueCommandArchive_PropertyValue&>(
      ::TSD::_MovieSetValueCommandArchive_PropertyValue_default_instance_);
}
inline const ::TSD::MovieSetValueCommandArchive_PropertyValue& MovieSetValueCommandArchive::value() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.value)
  return _internal_value();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_value(
    ::TSD::MovieSetValueCommandArchive_PropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.value)
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::release_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::MovieSetValueCommandArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::mutable_value() {
  ::TSD::MovieSetValueCommandArchive_PropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.value)
  return _msg;
}
inline void MovieSetValueCommandArchive::set_allocated_value(::TSD::MovieSetValueCommandArchive_PropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.value)
}

// -------------------------------------------------------------------

// MediaStyleSetValueCommandArchive

// required .TSD.StyledInfoSetStyleCommandArchive super = 1;
inline bool MediaStyleSetValueCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool MediaStyleSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MediaStyleSetValueCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& MediaStyleSetValueCommandArchive::_internal_super() const {
  const ::TSD::StyledInfoSetStyleCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StyledInfoSetStyleCommandArchive&>(
      ::TSD::_StyledInfoSetStyleCommandArchive_default_instance_);
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& MediaStyleSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaStyleSetValueCommandArchive.super)
  return _internal_super();
}
inline void MediaStyleSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::StyledInfoSetStyleCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaStyleSetValueCommandArchive.super)
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaStyleSetValueCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaStyleSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaStyleSetValueCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaStyleSetValueCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StyledInfoSetStyleCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaStyleSetValueCommandArchive::mutable_super() {
  ::TSD::StyledInfoSetStyleCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.MediaStyleSetValueCommandArchive.super)
  return _msg;
}
inline void MediaStyleSetValueCommandArchive::set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaStyleSetValueCommandArchive.super)
}

// optional .TSD.MediaStylePropertiesArchive media_properties = 4;
inline bool MediaStyleSetValueCommandArchive::_internal_has_media_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_properties_ != nullptr);
  return value;
}
inline bool MediaStyleSetValueCommandArchive::has_media_properties() const {
  return _internal_has_media_properties();
}
inline const ::TSD::MediaStylePropertiesArchive& MediaStyleSetValueCommandArchive::_internal_media_properties() const {
  const ::TSD::MediaStylePropertiesArchive* p = _impl_.media_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::MediaStylePropertiesArchive&>(
      ::TSD::_MediaStylePropertiesArchive_default_instance_);
}
inline const ::TSD::MediaStylePropertiesArchive& MediaStyleSetValueCommandArchive::media_properties() const {
  // @@protoc_insertion_point(field_get:TSD.MediaStyleSetValueCommandArchive.media_properties)
  return _internal_media_properties();
}
inline void MediaStyleSetValueCommandArchive::unsafe_arena_set_allocated_media_properties(
    ::TSD::MediaStylePropertiesArchive* media_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_properties_);
  }
  _impl_.media_properties_ = media_properties;
  if (media_properties) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaStyleSetValueCommandArchive.media_properties)
}
inline ::TSD::MediaStylePropertiesArchive* MediaStyleSetValueCommandArchive::release_media_properties() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::MediaStylePropertiesArchive* temp = _impl_.media_properties_;
  _impl_.media_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::MediaStylePropertiesArchive* MediaStyleSetValueCommandArchive::unsafe_arena_release_media_properties() {
  // @@protoc_insertion_point(field_release:TSD.MediaStyleSetValueCommandArchive.media_properties)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::MediaStylePropertiesArchive* temp = _impl_.media_properties_;
  _impl_.media_properties_ = nullptr;
  return temp;
}
inline ::TSD::MediaStylePropertiesArchive* MediaStyleSetValueCommandArchive::_internal_mutable_media_properties() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.media_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::MediaStylePropertiesArchive>(GetArenaForAllocation());
    _impl_.media_properties_ = p;
  }
  return _impl_.media_properties_;
}
inline ::TSD::MediaStylePropertiesArchive* MediaStyleSetValueCommandArchive::mutable_media_properties() {
  ::TSD::MediaStylePropertiesArchive* _msg = _internal_mutable_media_properties();
  // @@protoc_insertion_point(field_mutable:TSD.MediaStyleSetValueCommandArchive.media_properties)
  return _msg;
}
inline void MediaStyleSetValueCommandArchive::set_allocated_media_properties(::TSD::MediaStylePropertiesArchive* media_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_properties_);
  }
  if (media_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_properties));
    if (message_arena != submessage_arena) {
      media_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_properties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.media_properties_ = media_properties;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaStyleSetValueCommandArchive.media_properties)
}

// -------------------------------------------------------------------

// ImageMediaCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ImageMediaCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ImageMediaCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ImageMediaCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.super)
  return _internal_super();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.super)
}
inline ::TSK::CommandArchive* ImageMediaCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ImageMediaCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ImageMediaCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ImageMediaCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.super)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool ImageMediaCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.info)
  return _internal_info();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.info)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.info)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.info)
}

// optional .TSP.DataReference newImageData = 8;
inline bool ImageMediaCommandArchive::_internal_has_newimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_newimagedata() const {
  return _internal_has_newimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_newimagedata() const {
  const ::TSP::DataReference* p = _impl_.newimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::newimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.newImageData)
  return _internal_newimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_newimagedata(
    ::TSP::DataReference* newimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newimagedata_);
  }
  _impl_.newimagedata_ = newimagedata;
  if (newimagedata) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.newImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_newimagedata() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::DataReference* temp = _impl_.newimagedata_;
  _impl_.newimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_newimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.newImageData)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::DataReference* temp = _impl_.newimagedata_;
  _impl_.newimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_newimagedata() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.newimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.newimagedata_ = p;
  }
  return _impl_.newimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_newimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_newimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.newImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_newimagedata(::TSP::DataReference* newimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newimagedata_);
  }
  if (newimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newimagedata));
    if (message_arena != submessage_arena) {
      newimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.newimagedata_ = newimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.newImageData)
}

// optional .TSP.DataReference oldImageData = 9;
inline bool ImageMediaCommandArchive::_internal_has_oldimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldimagedata() const {
  return _internal_has_oldimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldimagedata() const {
  const ::TSP::DataReference* p = _impl_.oldimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldImageData)
  return _internal_oldimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldimagedata(
    ::TSP::DataReference* oldimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldimagedata_);
  }
  _impl_.oldimagedata_ = oldimagedata;
  if (oldimagedata) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldimagedata() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::DataReference* temp = _impl_.oldimagedata_;
  _impl_.oldimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldImageData)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::DataReference* temp = _impl_.oldimagedata_;
  _impl_.oldimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldimagedata() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.oldimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.oldimagedata_ = p;
  }
  return _impl_.oldimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_oldimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_oldimagedata(::TSP::DataReference* oldimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldimagedata_);
  }
  if (oldimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimagedata));
    if (message_arena != submessage_arena) {
      oldimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.oldimagedata_ = oldimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldImageData)
}

// optional .TSP.DataReference oldOriginalImageData = 10;
inline bool ImageMediaCommandArchive::_internal_has_oldoriginalimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldoriginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldoriginalimagedata() const {
  return _internal_has_oldoriginalimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldoriginalimagedata() const {
  const ::TSP::DataReference* p = _impl_.oldoriginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldoriginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldOriginalImageData)
  return _internal_oldoriginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldoriginalimagedata(
    ::TSP::DataReference* oldoriginalimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldoriginalimagedata_);
  }
  _impl_.oldoriginalimagedata_ = oldoriginalimagedata;
  if (oldoriginalimagedata) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldOriginalImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldoriginalimagedata() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::DataReference* temp = _impl_.oldoriginalimagedata_;
  _impl_.oldoriginalimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldoriginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldOriginalImageData)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::DataReference* temp = _impl_.oldoriginalimagedata_;
  _impl_.oldoriginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldoriginalimagedata() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.oldoriginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.oldoriginalimagedata_ = p;
  }
  return _impl_.oldoriginalimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldoriginalimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_oldoriginalimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldOriginalImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_oldoriginalimagedata(::TSP::DataReference* oldoriginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldoriginalimagedata_);
  }
  if (oldoriginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalimagedata));
    if (message_arena != submessage_arena) {
      oldoriginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldoriginalimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.oldoriginalimagedata_ = oldoriginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldOriginalImageData)
}

// optional .TSP.Size oldNaturalSize = 6;
inline bool ImageMediaCommandArchive::_internal_has_oldnaturalsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldnaturalsize_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldnaturalsize() const {
  return _internal_has_oldnaturalsize();
}
inline const ::TSP::Size& ImageMediaCommandArchive::_internal_oldnaturalsize() const {
  const ::TSP::Size* p = _impl_.oldnaturalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageMediaCommandArchive::oldnaturalsize() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldNaturalSize)
  return _internal_oldnaturalsize();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldnaturalsize(
    ::TSP::Size* oldnaturalsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldnaturalsize_);
  }
  _impl_.oldnaturalsize_ = oldnaturalsize;
  if (oldnaturalsize) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldNaturalSize)
}
inline ::TSP::Size* ImageMediaCommandArchive::release_oldnaturalsize() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Size* temp = _impl_.oldnaturalsize_;
  _impl_.oldnaturalsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* ImageMediaCommandArchive::unsafe_arena_release_oldnaturalsize() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldNaturalSize)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Size* temp = _impl_.oldnaturalsize_;
  _impl_.oldnaturalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageMediaCommandArchive::_internal_mutable_oldnaturalsize() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.oldnaturalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.oldnaturalsize_ = p;
  }
  return _impl_.oldnaturalsize_;
}
inline ::TSP::Size* ImageMediaCommandArchive::mutable_oldnaturalsize() {
  ::TSP::Size* _msg = _internal_mutable_oldnaturalsize();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldNaturalSize)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_oldnaturalsize(::TSP::Size* oldnaturalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldnaturalsize_);
  }
  if (oldnaturalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldnaturalsize));
    if (message_arena != submessage_arena) {
      oldnaturalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldnaturalsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.oldnaturalsize_ = oldnaturalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldNaturalSize)
}

// optional .TSP.DataReference newOriginalImageData = 11;
inline bool ImageMediaCommandArchive::_internal_has_neworiginalimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.neworiginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_neworiginalimagedata() const {
  return _internal_has_neworiginalimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_neworiginalimagedata() const {
  const ::TSP::DataReference* p = _impl_.neworiginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::neworiginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.newOriginalImageData)
  return _internal_neworiginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_neworiginalimagedata(
    ::TSP::DataReference* neworiginalimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.neworiginalimagedata_);
  }
  _impl_.neworiginalimagedata_ = neworiginalimagedata;
  if (neworiginalimagedata) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.newOriginalImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_neworiginalimagedata() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::DataReference* temp = _impl_.neworiginalimagedata_;
  _impl_.neworiginalimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_neworiginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.newOriginalImageData)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::DataReference* temp = _impl_.neworiginalimagedata_;
  _impl_.neworiginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_neworiginalimagedata() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.neworiginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.neworiginalimagedata_ = p;
  }
  return _impl_.neworiginalimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_neworiginalimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_neworiginalimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.newOriginalImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_neworiginalimagedata(::TSP::DataReference* neworiginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.neworiginalimagedata_);
  }
  if (neworiginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalimagedata));
    if (message_arena != submessage_arena) {
      neworiginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neworiginalimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.neworiginalimagedata_ = neworiginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.newOriginalImageData)
}

// optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
inline bool ImageMediaCommandArchive::_internal_has_oldimageadjustments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldimageadjustments_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldimageadjustments() const {
  return _internal_has_oldimageadjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageMediaCommandArchive::_internal_oldimageadjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = _impl_.oldimageadjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageMediaCommandArchive::oldimageadjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldImageAdjustments)
  return _internal_oldimageadjustments();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldimageadjustments(
    ::TSD::ImageAdjustmentsArchive* oldimageadjustments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldimageadjustments_);
  }
  _impl_.oldimageadjustments_ = oldimageadjustments;
  if (oldimageadjustments) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldImageAdjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::release_oldimageadjustments() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.oldimageadjustments_;
  _impl_.oldimageadjustments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::unsafe_arena_release_oldimageadjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldImageAdjustments)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.oldimageadjustments_;
  _impl_.oldimageadjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::_internal_mutable_oldimageadjustments() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.oldimageadjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArenaForAllocation());
    _impl_.oldimageadjustments_ = p;
  }
  return _impl_.oldimageadjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::mutable_oldimageadjustments() {
  ::TSD::ImageAdjustmentsArchive* _msg = _internal_mutable_oldimageadjustments();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldImageAdjustments)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_oldimageadjustments(::TSD::ImageAdjustmentsArchive* oldimageadjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldimageadjustments_);
  }
  if (oldimageadjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimageadjustments));
    if (message_arena != submessage_arena) {
      oldimageadjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldimageadjustments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.oldimageadjustments_ = oldimageadjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldImageAdjustments)
}

// optional .TSP.DataReference oldAdjustedImageData = 13;
inline bool ImageMediaCommandArchive::_internal_has_oldadjustedimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldadjustedimagedata() const {
  return _internal_has_oldadjustedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldadjustedimagedata() const {
  const ::TSP::DataReference* p = _impl_.oldadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
  return _internal_oldadjustedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldadjustedimagedata(
    ::TSP::DataReference* oldadjustedimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldadjustedimagedata_);
  }
  _impl_.oldadjustedimagedata_ = oldadjustedimagedata;
  if (oldadjustedimagedata) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldadjustedimagedata() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::DataReference* temp = _impl_.oldadjustedimagedata_;
  _impl_.oldadjustedimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::TSP::DataReference* temp = _impl_.oldadjustedimagedata_;
  _impl_.oldadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldadjustedimagedata() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.oldadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.oldadjustedimagedata_ = p;
  }
  return _impl_.oldadjustedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldadjustedimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_oldadjustedimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_oldadjustedimagedata(::TSP::DataReference* oldadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldadjustedimagedata_);
  }
  if (oldadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldadjustedimagedata));
    if (message_arena != submessage_arena) {
      oldadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldadjustedimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.oldadjustedimagedata_ = oldadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
}

// optional .TSP.DataReference oldEnhancedImageData = 14;
inline bool ImageMediaCommandArchive::_internal_has_oldenhancedimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldenhancedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldenhancedimagedata() const {
  return _internal_has_oldenhancedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldenhancedimagedata() const {
  const ::TSP::DataReference* p = _impl_.oldenhancedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldenhancedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
  return _internal_oldenhancedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldenhancedimagedata(
    ::TSP::DataReference* oldenhancedimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldenhancedimagedata_);
  }
  _impl_.oldenhancedimagedata_ = oldenhancedimagedata;
  if (oldenhancedimagedata) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldenhancedimagedata() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSP::DataReference* temp = _impl_.oldenhancedimagedata_;
  _impl_.oldenhancedimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldenhancedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::TSP::DataReference* temp = _impl_.oldenhancedimagedata_;
  _impl_.oldenhancedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldenhancedimagedata() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.oldenhancedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.oldenhancedimagedata_ = p;
  }
  return _impl_.oldenhancedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldenhancedimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_oldenhancedimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_oldenhancedimagedata(::TSP::DataReference* oldenhancedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldenhancedimagedata_);
  }
  if (oldenhancedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldenhancedimagedata));
    if (message_arena != submessage_arena) {
      oldenhancedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldenhancedimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.oldenhancedimagedata_ = oldenhancedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
}

// optional .TSP.Reference database_newImageData = 3;
inline bool ImageMediaCommandArchive::_internal_has_database_newimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_newimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_newimagedata() const {
  return _internal_has_database_newimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_newimagedata() const {
  const ::TSP::Reference* p = _impl_.database_newimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_newimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_newImageData)
  return _internal_database_newimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_newimagedata(
    ::TSP::Reference* database_newimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_newimagedata_);
  }
  _impl_.database_newimagedata_ = database_newimagedata;
  if (database_newimagedata) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_newImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_newimagedata() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.database_newimagedata_;
  _impl_.database_newimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_newimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_newImageData)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.database_newimagedata_;
  _impl_.database_newimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_newimagedata() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.database_newimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.database_newimagedata_ = p;
  }
  return _impl_.database_newimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_newimagedata() {
  ::TSP::Reference* _msg = _internal_mutable_database_newimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_newImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_database_newimagedata(::TSP::Reference* database_newimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_newimagedata_);
  }
  if (database_newimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_newimagedata));
    if (message_arena != submessage_arena) {
      database_newimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_newimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.database_newimagedata_ = database_newimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_newImageData)
}

// optional .TSP.Reference database_oldImageData = 4;
inline bool ImageMediaCommandArchive::_internal_has_database_oldimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_oldimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_oldimagedata() const {
  return _internal_has_database_oldimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_oldimagedata() const {
  const ::TSP::Reference* p = _impl_.database_oldimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_oldimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_oldImageData)
  return _internal_database_oldimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_oldimagedata(
    ::TSP::Reference* database_oldimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_oldimagedata_);
  }
  _impl_.database_oldimagedata_ = database_oldimagedata;
  if (database_oldimagedata) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_oldImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_oldimagedata() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.database_oldimagedata_;
  _impl_.database_oldimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_oldimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_oldImageData)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.database_oldimagedata_;
  _impl_.database_oldimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_oldimagedata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.database_oldimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.database_oldimagedata_ = p;
  }
  return _impl_.database_oldimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_oldimagedata() {
  ::TSP::Reference* _msg = _internal_mutable_database_oldimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_oldImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_database_oldimagedata(::TSP::Reference* database_oldimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_oldimagedata_);
  }
  if (database_oldimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldimagedata));
    if (message_arena != submessage_arena) {
      database_oldimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_oldimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.database_oldimagedata_ = database_oldimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_oldImageData)
}

// optional .TSP.Reference database_oldOriginalImageData = 5;
inline bool ImageMediaCommandArchive::_internal_has_database_oldoriginalimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_oldoriginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_oldoriginalimagedata() const {
  return _internal_has_database_oldoriginalimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_oldoriginalimagedata() const {
  const ::TSP::Reference* p = _impl_.database_oldoriginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_oldoriginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
  return _internal_database_oldoriginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_oldoriginalimagedata(
    ::TSP::Reference* database_oldoriginalimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_oldoriginalimagedata_);
  }
  _impl_.database_oldoriginalimagedata_ = database_oldoriginalimagedata;
  if (database_oldoriginalimagedata) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_oldoriginalimagedata() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.database_oldoriginalimagedata_;
  _impl_.database_oldoriginalimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_oldoriginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.database_oldoriginalimagedata_;
  _impl_.database_oldoriginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_oldoriginalimagedata() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.database_oldoriginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.database_oldoriginalimagedata_ = p;
  }
  return _impl_.database_oldoriginalimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_oldoriginalimagedata() {
  ::TSP::Reference* _msg = _internal_mutable_database_oldoriginalimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_database_oldoriginalimagedata(::TSP::Reference* database_oldoriginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_oldoriginalimagedata_);
  }
  if (database_oldoriginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldoriginalimagedata));
    if (message_arena != submessage_arena) {
      database_oldoriginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_oldoriginalimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.database_oldoriginalimagedata_ = database_oldoriginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
}

// optional .TSP.Reference database_newOriginalImageData = 7;
inline bool ImageMediaCommandArchive::_internal_has_database_neworiginalimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_neworiginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_neworiginalimagedata() const {
  return _internal_has_database_neworiginalimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_neworiginalimagedata() const {
  const ::TSP::Reference* p = _impl_.database_neworiginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_neworiginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
  return _internal_database_neworiginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_neworiginalimagedata(
    ::TSP::Reference* database_neworiginalimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_neworiginalimagedata_);
  }
  _impl_.database_neworiginalimagedata_ = database_neworiginalimagedata;
  if (database_neworiginalimagedata) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_neworiginalimagedata() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.database_neworiginalimagedata_;
  _impl_.database_neworiginalimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_neworiginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.database_neworiginalimagedata_;
  _impl_.database_neworiginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_neworiginalimagedata() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.database_neworiginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.database_neworiginalimagedata_ = p;
  }
  return _impl_.database_neworiginalimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_neworiginalimagedata() {
  ::TSP::Reference* _msg = _internal_mutable_database_neworiginalimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
  return _msg;
}
inline void ImageMediaCommandArchive::set_allocated_database_neworiginalimagedata(::TSP::Reference* database_neworiginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.database_neworiginalimagedata_);
  }
  if (database_neworiginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_neworiginalimagedata));
    if (message_arena != submessage_arena) {
      database_neworiginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_neworiginalimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.database_neworiginalimagedata_ = database_neworiginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
}

// -------------------------------------------------------------------

// MediaOriginalSizeCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool MediaOriginalSizeCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MediaOriginalSizeCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MediaOriginalSizeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.super)
  return _internal_super();
}
inline void MediaOriginalSizeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaOriginalSizeCommandArchive.super)
}
inline ::TSK::CommandArchive* MediaOriginalSizeCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* MediaOriginalSizeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MediaOriginalSizeCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* MediaOriginalSizeCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.super)
  return _msg;
}
inline void MediaOriginalSizeCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool MediaOriginalSizeCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& MediaOriginalSizeCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MediaOriginalSizeCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.info)
  return _internal_info();
}
inline void MediaOriginalSizeCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaOriginalSizeCommandArchive.info)
}
inline ::TSP::Reference* MediaOriginalSizeCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MediaOriginalSizeCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MediaOriginalSizeCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* MediaOriginalSizeCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.info)
  return _msg;
}
inline void MediaOriginalSizeCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.info)
}

// optional .TSP.Size newOriginalSize = 3;
inline bool MediaOriginalSizeCommandArchive::_internal_has_neworiginalsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.neworiginalsize_ != nullptr);
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_neworiginalsize() const {
  return _internal_has_neworiginalsize();
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::_internal_neworiginalsize() const {
  const ::TSP::Size* p = _impl_.neworiginalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::neworiginalsize() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
  return _internal_neworiginalsize();
}
inline void MediaOriginalSizeCommandArchive::unsafe_arena_set_allocated_neworiginalsize(
    ::TSP::Size* neworiginalsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.neworiginalsize_);
  }
  _impl_.neworiginalsize_ = neworiginalsize;
  if (neworiginalsize) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::release_neworiginalsize() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = _impl_.neworiginalsize_;
  _impl_.neworiginalsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::unsafe_arena_release_neworiginalsize() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = _impl_.neworiginalsize_;
  _impl_.neworiginalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::_internal_mutable_neworiginalsize() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.neworiginalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.neworiginalsize_ = p;
  }
  return _impl_.neworiginalsize_;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::mutable_neworiginalsize() {
  ::TSP::Size* _msg = _internal_mutable_neworiginalsize();
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
  return _msg;
}
inline void MediaOriginalSizeCommandArchive::set_allocated_neworiginalsize(::TSP::Size* neworiginalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.neworiginalsize_);
  }
  if (neworiginalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalsize));
    if (message_arena != submessage_arena) {
      neworiginalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neworiginalsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.neworiginalsize_ = neworiginalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
}

// optional .TSP.Size oldOriginalSize = 4;
inline bool MediaOriginalSizeCommandArchive::_internal_has_oldoriginalsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldoriginalsize_ != nullptr);
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_oldoriginalsize() const {
  return _internal_has_oldoriginalsize();
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::_internal_oldoriginalsize() const {
  const ::TSP::Size* p = _impl_.oldoriginalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::oldoriginalsize() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
  return _internal_oldoriginalsize();
}
inline void MediaOriginalSizeCommandArchive::unsafe_arena_set_allocated_oldoriginalsize(
    ::TSP::Size* oldoriginalsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldoriginalsize_);
  }
  _impl_.oldoriginalsize_ = oldoriginalsize;
  if (oldoriginalsize) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::release_oldoriginalsize() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = _impl_.oldoriginalsize_;
  _impl_.oldoriginalsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::unsafe_arena_release_oldoriginalsize() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = _impl_.oldoriginalsize_;
  _impl_.oldoriginalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::_internal_mutable_oldoriginalsize() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldoriginalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.oldoriginalsize_ = p;
  }
  return _impl_.oldoriginalsize_;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::mutable_oldoriginalsize() {
  ::TSP::Size* _msg = _internal_mutable_oldoriginalsize();
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
  return _msg;
}
inline void MediaOriginalSizeCommandArchive::set_allocated_oldoriginalsize(::TSP::Size* oldoriginalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldoriginalsize_);
  }
  if (oldoriginalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalsize));
    if (message_arena != submessage_arena) {
      oldoriginalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldoriginalsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldoriginalsize_ = oldoriginalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
}

// -------------------------------------------------------------------

// ImageMaskCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ImageMaskCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ImageMaskCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ImageMaskCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ImageMaskCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMaskCommandArchive.super)
  return _internal_super();
}
inline void ImageMaskCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMaskCommandArchive.super)
}
inline ::TSK::CommandArchive* ImageMaskCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ImageMaskCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageMaskCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ImageMaskCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ImageMaskCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMaskCommandArchive.super)
  return _msg;
}
inline void ImageMaskCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMaskCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool ImageMaskCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ImageMaskCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ImageMaskCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMaskCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMaskCommandArchive.info)
  return _internal_info();
}
inline void ImageMaskCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMaskCommandArchive.info)
}
inline ::TSP::Reference* ImageMaskCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.ImageMaskCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* ImageMaskCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMaskCommandArchive.info)
  return _msg;
}
inline void ImageMaskCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMaskCommandArchive.info)
}

// optional .TSP.Reference newMaskInfo = 3;
inline bool ImageMaskCommandArchive::_internal_has_newmaskinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newmaskinfo_ != nullptr);
  return value;
}
inline bool ImageMaskCommandArchive::has_newmaskinfo() const {
  return _internal_has_newmaskinfo();
}
inline const ::TSP::Reference& ImageMaskCommandArchive::_internal_newmaskinfo() const {
  const ::TSP::Reference* p = _impl_.newmaskinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMaskCommandArchive::newmaskinfo() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMaskCommandArchive.newMaskInfo)
  return _internal_newmaskinfo();
}
inline void ImageMaskCommandArchive::unsafe_arena_set_allocated_newmaskinfo(
    ::TSP::Reference* newmaskinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newmaskinfo_);
  }
  _impl_.newmaskinfo_ = newmaskinfo;
  if (newmaskinfo) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMaskCommandArchive.newMaskInfo)
}
inline ::TSP::Reference* ImageMaskCommandArchive::release_newmaskinfo() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.newmaskinfo_;
  _impl_.newmaskinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::unsafe_arena_release_newmaskinfo() {
  // @@protoc_insertion_point(field_release:TSD.ImageMaskCommandArchive.newMaskInfo)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.newmaskinfo_;
  _impl_.newmaskinfo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::_internal_mutable_newmaskinfo() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.newmaskinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.newmaskinfo_ = p;
  }
  return _impl_.newmaskinfo_;
}
inline ::TSP::Reference* ImageMaskCommandArchive::mutable_newmaskinfo() {
  ::TSP::Reference* _msg = _internal_mutable_newmaskinfo();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMaskCommandArchive.newMaskInfo)
  return _msg;
}
inline void ImageMaskCommandArchive::set_allocated_newmaskinfo(::TSP::Reference* newmaskinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newmaskinfo_);
  }
  if (newmaskinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newmaskinfo));
    if (message_arena != submessage_arena) {
      newmaskinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newmaskinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.newmaskinfo_ = newmaskinfo;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMaskCommandArchive.newMaskInfo)
}

// optional .TSP.Reference oldMaskInfo = 4;
inline bool ImageMaskCommandArchive::_internal_has_oldmaskinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldmaskinfo_ != nullptr);
  return value;
}
inline bool ImageMaskCommandArchive::has_oldmaskinfo() const {
  return _internal_has_oldmaskinfo();
}
inline const ::TSP::Reference& ImageMaskCommandArchive::_internal_oldmaskinfo() const {
  const ::TSP::Reference* p = _impl_.oldmaskinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMaskCommandArchive::oldmaskinfo() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMaskCommandArchive.oldMaskInfo)
  return _internal_oldmaskinfo();
}
inline void ImageMaskCommandArchive::unsafe_arena_set_allocated_oldmaskinfo(
    ::TSP::Reference* oldmaskinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldmaskinfo_);
  }
  _impl_.oldmaskinfo_ = oldmaskinfo;
  if (oldmaskinfo) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMaskCommandArchive.oldMaskInfo)
}
inline ::TSP::Reference* ImageMaskCommandArchive::release_oldmaskinfo() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.oldmaskinfo_;
  _impl_.oldmaskinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::unsafe_arena_release_oldmaskinfo() {
  // @@protoc_insertion_point(field_release:TSD.ImageMaskCommandArchive.oldMaskInfo)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.oldmaskinfo_;
  _impl_.oldmaskinfo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::_internal_mutable_oldmaskinfo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldmaskinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.oldmaskinfo_ = p;
  }
  return _impl_.oldmaskinfo_;
}
inline ::TSP::Reference* ImageMaskCommandArchive::mutable_oldmaskinfo() {
  ::TSP::Reference* _msg = _internal_mutable_oldmaskinfo();
  // @@protoc_insertion_point(field_mutable:TSD.ImageMaskCommandArchive.oldMaskInfo)
  return _msg;
}
inline void ImageMaskCommandArchive::set_allocated_oldmaskinfo(::TSP::Reference* oldmaskinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldmaskinfo_);
  }
  if (oldmaskinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldmaskinfo));
    if (message_arena != submessage_arena) {
      oldmaskinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldmaskinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldmaskinfo_ = oldmaskinfo;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMaskCommandArchive.oldMaskInfo)
}

// -------------------------------------------------------------------

// MediaApplyPresetCommandArchive

// required .TSD.StyledInfoSetStyleCommandArchive super = 1;
inline bool MediaApplyPresetCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool MediaApplyPresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MediaApplyPresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& MediaApplyPresetCommandArchive::_internal_super() const {
  const ::TSD::StyledInfoSetStyleCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StyledInfoSetStyleCommandArchive&>(
      ::TSD::_StyledInfoSetStyleCommandArchive_default_instance_);
}
inline const ::TSD::StyledInfoSetStyleCommandArchive& MediaApplyPresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaApplyPresetCommandArchive.super)
  return _internal_super();
}
inline void MediaApplyPresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::StyledInfoSetStyleCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaApplyPresetCommandArchive.super)
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaApplyPresetCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaApplyPresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaApplyPresetCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::StyledInfoSetStyleCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaApplyPresetCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StyledInfoSetStyleCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::StyledInfoSetStyleCommandArchive* MediaApplyPresetCommandArchive::mutable_super() {
  ::TSD::StyledInfoSetStyleCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.MediaApplyPresetCommandArchive.super)
  return _msg;
}
inline void MediaApplyPresetCommandArchive::set_allocated_super(::TSD::StyledInfoSetStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaApplyPresetCommandArchive.super)
}

// optional .TSP.Reference stylepreset = 10;
inline bool MediaApplyPresetCommandArchive::_internal_has_stylepreset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stylepreset_ != nullptr);
  return value;
}
inline bool MediaApplyPresetCommandArchive::has_stylepreset() const {
  return _internal_has_stylepreset();
}
inline const ::TSP::Reference& MediaApplyPresetCommandArchive::_internal_stylepreset() const {
  const ::TSP::Reference* p = _impl_.stylepreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MediaApplyPresetCommandArchive::stylepreset() const {
  // @@protoc_insertion_point(field_get:TSD.MediaApplyPresetCommandArchive.stylepreset)
  return _internal_stylepreset();
}
inline void MediaApplyPresetCommandArchive::unsafe_arena_set_allocated_stylepreset(
    ::TSP::Reference* stylepreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylepreset_);
  }
  _impl_.stylepreset_ = stylepreset;
  if (stylepreset) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaApplyPresetCommandArchive.stylepreset)
}
inline ::TSP::Reference* MediaApplyPresetCommandArchive::release_stylepreset() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.stylepreset_;
  _impl_.stylepreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MediaApplyPresetCommandArchive::unsafe_arena_release_stylepreset() {
  // @@protoc_insertion_point(field_release:TSD.MediaApplyPresetCommandArchive.stylepreset)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.stylepreset_;
  _impl_.stylepreset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MediaApplyPresetCommandArchive::_internal_mutable_stylepreset() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stylepreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.stylepreset_ = p;
  }
  return _impl_.stylepreset_;
}
inline ::TSP::Reference* MediaApplyPresetCommandArchive::mutable_stylepreset() {
  ::TSP::Reference* _msg = _internal_mutable_stylepreset();
  // @@protoc_insertion_point(field_mutable:TSD.MediaApplyPresetCommandArchive.stylepreset)
  return _msg;
}
inline void MediaApplyPresetCommandArchive::set_allocated_stylepreset(::TSP::Reference* stylepreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stylepreset_);
  }
  if (stylepreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylepreset));
    if (message_arena != submessage_arena) {
      stylepreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylepreset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stylepreset_ = stylepreset;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaApplyPresetCommandArchive.stylepreset)
}

// optional .TSD.ShadowArchive shadowpreset = 11;
inline bool MediaApplyPresetCommandArchive::_internal_has_shadowpreset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shadowpreset_ != nullptr);
  return value;
}
inline bool MediaApplyPresetCommandArchive::has_shadowpreset() const {
  return _internal_has_shadowpreset();
}
inline const ::TSD::ShadowArchive& MediaApplyPresetCommandArchive::_internal_shadowpreset() const {
  const ::TSD::ShadowArchive* p = _impl_.shadowpreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& MediaApplyPresetCommandArchive::shadowpreset() const {
  // @@protoc_insertion_point(field_get:TSD.MediaApplyPresetCommandArchive.shadowpreset)
  return _internal_shadowpreset();
}
inline void MediaApplyPresetCommandArchive::unsafe_arena_set_allocated_shadowpreset(
    ::TSD::ShadowArchive* shadowpreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shadowpreset_);
  }
  _impl_.shadowpreset_ = shadowpreset;
  if (shadowpreset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaApplyPresetCommandArchive.shadowpreset)
}
inline ::TSD::ShadowArchive* MediaApplyPresetCommandArchive::release_shadowpreset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.shadowpreset_;
  _impl_.shadowpreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* MediaApplyPresetCommandArchive::unsafe_arena_release_shadowpreset() {
  // @@protoc_insertion_point(field_release:TSD.MediaApplyPresetCommandArchive.shadowpreset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = _impl_.shadowpreset_;
  _impl_.shadowpreset_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* MediaApplyPresetCommandArchive::_internal_mutable_shadowpreset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.shadowpreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    _impl_.shadowpreset_ = p;
  }
  return _impl_.shadowpreset_;
}
inline ::TSD::ShadowArchive* MediaApplyPresetCommandArchive::mutable_shadowpreset() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_shadowpreset();
  // @@protoc_insertion_point(field_mutable:TSD.MediaApplyPresetCommandArchive.shadowpreset)
  return _msg;
}
inline void MediaApplyPresetCommandArchive::set_allocated_shadowpreset(::TSD::ShadowArchive* shadowpreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shadowpreset_);
  }
  if (shadowpreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shadowpreset));
    if (message_arena != submessage_arena) {
      shadowpreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadowpreset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.shadowpreset_ = shadowpreset;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaApplyPresetCommandArchive.shadowpreset)
}

// -------------------------------------------------------------------

// ImageAdjustmentsCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ImageAdjustmentsCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ImageAdjustmentsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ImageAdjustmentsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.super)
  return _internal_super();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.super)
}
inline ::TSK::CommandArchive* ImageAdjustmentsCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ImageAdjustmentsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ImageAdjustmentsCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ImageAdjustmentsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.super)
  return _msg;
}
inline void ImageAdjustmentsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.super)
}

// optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
inline bool ImageAdjustmentsCommandArchive::_internal_has_old_image_adjustments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_image_adjustments_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_old_image_adjustments() const {
  return _internal_has_old_image_adjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::_internal_old_image_adjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = _impl_.old_image_adjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::old_image_adjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
  return _internal_old_image_adjustments();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_old_image_adjustments(
    ::TSD::ImageAdjustmentsArchive* old_image_adjustments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_image_adjustments_);
  }
  _impl_.old_image_adjustments_ = old_image_adjustments;
  if (old_image_adjustments) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::release_old_image_adjustments() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.old_image_adjustments_;
  _impl_.old_image_adjustments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::unsafe_arena_release_old_image_adjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.old_image_adjustments_;
  _impl_.old_image_adjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::_internal_mutable_old_image_adjustments() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_image_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArenaForAllocation());
    _impl_.old_image_adjustments_ = p;
  }
  return _impl_.old_image_adjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::mutable_old_image_adjustments() {
  ::TSD::ImageAdjustmentsArchive* _msg = _internal_mutable_old_image_adjustments();
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
  return _msg;
}
inline void ImageAdjustmentsCommandArchive::set_allocated_old_image_adjustments(::TSD::ImageAdjustmentsArchive* old_image_adjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_image_adjustments_);
  }
  if (old_image_adjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_adjustments));
    if (message_arena != submessage_arena) {
      old_image_adjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_image_adjustments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_image_adjustments_ = old_image_adjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
}

// optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
inline bool ImageAdjustmentsCommandArchive::_internal_has_new_image_adjustments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_image_adjustments_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_new_image_adjustments() const {
  return _internal_has_new_image_adjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::_internal_new_image_adjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = _impl_.new_image_adjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::new_image_adjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
  return _internal_new_image_adjustments();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_new_image_adjustments(
    ::TSD::ImageAdjustmentsArchive* new_image_adjustments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_image_adjustments_);
  }
  _impl_.new_image_adjustments_ = new_image_adjustments;
  if (new_image_adjustments) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::release_new_image_adjustments() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.new_image_adjustments_;
  _impl_.new_image_adjustments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::unsafe_arena_release_new_image_adjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.new_image_adjustments_;
  _impl_.new_image_adjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::_internal_mutable_new_image_adjustments() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_image_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArenaForAllocation());
    _impl_.new_image_adjustments_ = p;
  }
  return _impl_.new_image_adjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::mutable_new_image_adjustments() {
  ::TSD::ImageAdjustmentsArchive* _msg = _internal_mutable_new_image_adjustments();
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
  return _msg;
}
inline void ImageAdjustmentsCommandArchive::set_allocated_new_image_adjustments(::TSD::ImageAdjustmentsArchive* new_image_adjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_image_adjustments_);
  }
  if (new_image_adjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_adjustments));
    if (message_arena != submessage_arena) {
      new_image_adjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_image_adjustments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_image_adjustments_ = new_image_adjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
}

// optional .TSP.DataReference adjustedImageData = 4;
inline bool ImageAdjustmentsCommandArchive::_internal_has_adjustedimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.adjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_adjustedimagedata() const {
  return _internal_has_adjustedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_adjustedimagedata() const {
  const ::TSP::DataReference* p = _impl_.adjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::adjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
  return _internal_adjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_adjustedimagedata(
    ::TSP::DataReference* adjustedimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adjustedimagedata_);
  }
  _impl_.adjustedimagedata_ = adjustedimagedata;
  if (adjustedimagedata) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_adjustedimagedata() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = _impl_.adjustedimagedata_;
  _impl_.adjustedimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_adjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = _impl_.adjustedimagedata_;
  _impl_.adjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_adjustedimagedata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.adjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.adjustedimagedata_ = p;
  }
  return _impl_.adjustedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_adjustedimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_adjustedimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
  return _msg;
}
inline void ImageAdjustmentsCommandArchive::set_allocated_adjustedimagedata(::TSP::DataReference* adjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adjustedimagedata_);
  }
  if (adjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustedimagedata));
    if (message_arena != submessage_arena) {
      adjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjustedimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.adjustedimagedata_ = adjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
}

// optional .TSP.DataReference replacedAdjustedImageData = 5;
inline bool ImageAdjustmentsCommandArchive::_internal_has_replacedadjustedimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replacedadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_replacedadjustedimagedata() const {
  return _internal_has_replacedadjustedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_replacedadjustedimagedata() const {
  const ::TSP::DataReference* p = _impl_.replacedadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::replacedadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
  return _internal_replacedadjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_replacedadjustedimagedata(
    ::TSP::DataReference* replacedadjustedimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacedadjustedimagedata_);
  }
  _impl_.replacedadjustedimagedata_ = replacedadjustedimagedata;
  if (replacedadjustedimagedata) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_replacedadjustedimagedata() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = _impl_.replacedadjustedimagedata_;
  _impl_.replacedadjustedimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_replacedadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = _impl_.replacedadjustedimagedata_;
  _impl_.replacedadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_replacedadjustedimagedata() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.replacedadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.replacedadjustedimagedata_ = p;
  }
  return _impl_.replacedadjustedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_replacedadjustedimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_replacedadjustedimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
  return _msg;
}
inline void ImageAdjustmentsCommandArchive::set_allocated_replacedadjustedimagedata(::TSP::DataReference* replacedadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacedadjustedimagedata_);
  }
  if (replacedadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedadjustedimagedata));
    if (message_arena != submessage_arena) {
      replacedadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacedadjustedimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.replacedadjustedimagedata_ = replacedadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
}

// optional .TSP.DataReference enhancedImageData = 6;
inline bool ImageAdjustmentsCommandArchive::_internal_has_enhancedimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enhancedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_enhancedimagedata() const {
  return _internal_has_enhancedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_enhancedimagedata() const {
  const ::TSP::DataReference* p = _impl_.enhancedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::enhancedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
  return _internal_enhancedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_enhancedimagedata(
    ::TSP::DataReference* enhancedimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enhancedimagedata_);
  }
  _impl_.enhancedimagedata_ = enhancedimagedata;
  if (enhancedimagedata) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_enhancedimagedata() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::DataReference* temp = _impl_.enhancedimagedata_;
  _impl_.enhancedimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_enhancedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::DataReference* temp = _impl_.enhancedimagedata_;
  _impl_.enhancedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_enhancedimagedata() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.enhancedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.enhancedimagedata_ = p;
  }
  return _impl_.enhancedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_enhancedimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_enhancedimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
  return _msg;
}
inline void ImageAdjustmentsCommandArchive::set_allocated_enhancedimagedata(::TSP::DataReference* enhancedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enhancedimagedata_);
  }
  if (enhancedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhancedimagedata));
    if (message_arena != submessage_arena) {
      enhancedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enhancedimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.enhancedimagedata_ = enhancedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
}

// optional .TSP.DataReference replacedEnhancedImageData = 7;
inline bool ImageAdjustmentsCommandArchive::_internal_has_replacedenhancedimagedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replacedenhancedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_replacedenhancedimagedata() const {
  return _internal_has_replacedenhancedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_replacedenhancedimagedata() const {
  const ::TSP::DataReference* p = _impl_.replacedenhancedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::replacedenhancedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
  return _internal_replacedenhancedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_replacedenhancedimagedata(
    ::TSP::DataReference* replacedenhancedimagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacedenhancedimagedata_);
  }
  _impl_.replacedenhancedimagedata_ = replacedenhancedimagedata;
  if (replacedenhancedimagedata) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_replacedenhancedimagedata() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = _impl_.replacedenhancedimagedata_;
  _impl_.replacedenhancedimagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_replacedenhancedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = _impl_.replacedenhancedimagedata_;
  _impl_.replacedenhancedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_replacedenhancedimagedata() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.replacedenhancedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.replacedenhancedimagedata_ = p;
  }
  return _impl_.replacedenhancedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_replacedenhancedimagedata() {
  ::TSP::DataReference* _msg = _internal_mutable_replacedenhancedimagedata();
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
  return _msg;
}
inline void ImageAdjustmentsCommandArchive::set_allocated_replacedenhancedimagedata(::TSP::DataReference* replacedenhancedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacedenhancedimagedata_);
  }
  if (replacedenhancedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedenhancedimagedata));
    if (message_arena != submessage_arena) {
      replacedenhancedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacedenhancedimagedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.replacedenhancedimagedata_ = replacedenhancedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
}

// -------------------------------------------------------------------

// MediaFlagsCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool MediaFlagsCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool MediaFlagsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& MediaFlagsCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& MediaFlagsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.super)
  return _internal_super();
}
inline void MediaFlagsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaFlagsCommandArchive.super)
}
inline ::TSK::CommandArchive* MediaFlagsCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* MediaFlagsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaFlagsCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* MediaFlagsCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* MediaFlagsCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.MediaFlagsCommandArchive.super)
  return _msg;
}
inline void MediaFlagsCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaFlagsCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool MediaFlagsCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool MediaFlagsCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& MediaFlagsCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& MediaFlagsCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.info)
  return _internal_info();
}
inline void MediaFlagsCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaFlagsCommandArchive.info)
}
inline ::TSP::Reference* MediaFlagsCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* MediaFlagsCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.MediaFlagsCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* MediaFlagsCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* MediaFlagsCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.MediaFlagsCommandArchive.info)
  return _msg;
}
inline void MediaFlagsCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaFlagsCommandArchive.info)
}

// optional uint32 flags = 3;
inline bool MediaFlagsCommandArchive::_internal_has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MediaFlagsCommandArchive::has_flags() const {
  return _internal_has_flags();
}
inline void MediaFlagsCommandArchive::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t MediaFlagsCommandArchive::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t MediaFlagsCommandArchive::flags() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.flags)
  return _internal_flags();
}
inline void MediaFlagsCommandArchive::_internal_set_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.flags_ = value;
}
inline void MediaFlagsCommandArchive::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:TSD.MediaFlagsCommandArchive.flags)
}

// -------------------------------------------------------------------

// DrawablesCommandGroupArchive

// required .TSK.CommandGroupArchive super = 1;
inline bool DrawablesCommandGroupArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandGroupArchive& DrawablesCommandGroupArchive::_internal_super() const {
  const ::TSK::CommandGroupArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandGroupArchive&>(
      ::TSK::_CommandGroupArchive_default_instance_);
}
inline const ::TSK::CommandGroupArchive& DrawablesCommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.super)
  return _internal_super();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandGroupArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.super)
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandGroupArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::mutable_super() {
  ::TSK::CommandGroupArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.super)
  return _msg;
}
inline void DrawablesCommandGroupArchive::set_allocated_super(::TSK::CommandGroupArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.super)
}

// optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
inline bool DrawablesCommandGroupArchive::_internal_has_obsolete_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.obsolete_selection_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_obsolete_selection() const {
  return _internal_has_obsolete_selection();
}
inline const ::TSD::CanvasSelectionArchive& DrawablesCommandGroupArchive::_internal_obsolete_selection() const {
  const ::TSD::CanvasSelectionArchive* p = _impl_.obsolete_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::CanvasSelectionArchive&>(
      ::TSD::_CanvasSelectionArchive_default_instance_);
}
inline const ::TSD::CanvasSelectionArchive& DrawablesCommandGroupArchive::obsolete_selection() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.obsolete_selection)
  return _internal_obsolete_selection();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_obsolete_selection(
    ::TSD::CanvasSelectionArchive* obsolete_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obsolete_selection_);
  }
  _impl_.obsolete_selection_ = obsolete_selection;
  if (obsolete_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.obsolete_selection)
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::release_obsolete_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::CanvasSelectionArchive* temp = _impl_.obsolete_selection_;
  _impl_.obsolete_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::unsafe_arena_release_obsolete_selection() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.obsolete_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::CanvasSelectionArchive* temp = _impl_.obsolete_selection_;
  _impl_.obsolete_selection_ = nullptr;
  return temp;
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::_internal_mutable_obsolete_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.obsolete_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::CanvasSelectionArchive>(GetArenaForAllocation());
    _impl_.obsolete_selection_ = p;
  }
  return _impl_.obsolete_selection_;
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::mutable_obsolete_selection() {
  ::TSD::CanvasSelectionArchive* _msg = _internal_mutable_obsolete_selection();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.obsolete_selection)
  return _msg;
}
inline void DrawablesCommandGroupArchive::set_allocated_obsolete_selection(::TSD::CanvasSelectionArchive* obsolete_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obsolete_selection_);
  }
  if (obsolete_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_selection));
    if (message_arena != submessage_arena) {
      obsolete_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsolete_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.obsolete_selection_ = obsolete_selection;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.obsolete_selection)
}

// optional .TSP.Reference modelforselection = 3;
inline bool DrawablesCommandGroupArchive::_internal_has_modelforselection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.modelforselection_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_modelforselection() const {
  return _internal_has_modelforselection();
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::_internal_modelforselection() const {
  const ::TSP::Reference* p = _impl_.modelforselection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::modelforselection() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.modelforselection)
  return _internal_modelforselection();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_modelforselection(
    ::TSP::Reference* modelforselection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modelforselection_);
  }
  _impl_.modelforselection_ = modelforselection;
  if (modelforselection) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.modelforselection)
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::release_modelforselection() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.modelforselection_;
  _impl_.modelforselection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::unsafe_arena_release_modelforselection() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.modelforselection)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.modelforselection_;
  _impl_.modelforselection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::_internal_mutable_modelforselection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.modelforselection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.modelforselection_ = p;
  }
  return _impl_.modelforselection_;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::mutable_modelforselection() {
  ::TSP::Reference* _msg = _internal_mutable_modelforselection();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.modelforselection)
  return _msg;
}
inline void DrawablesCommandGroupArchive::set_allocated_modelforselection(::TSP::Reference* modelforselection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modelforselection_);
  }
  if (modelforselection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modelforselection));
    if (message_arena != submessage_arena) {
      modelforselection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modelforselection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.modelforselection_ = modelforselection;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.modelforselection)
}

// optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
inline bool DrawablesCommandGroupArchive::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DrawablesCommandGroupArchive::has_type() const {
  return _internal_has_type();
}
inline void DrawablesCommandGroupArchive::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::_internal_type() const {
  return static_cast< ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType >(_impl_.type_);
}
inline ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::type() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.type)
  return _internal_type();
}
inline void DrawablesCommandGroupArchive::_internal_set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value) {
  assert(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_ = value;
}
inline void DrawablesCommandGroupArchive::set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSD.DrawablesCommandGroupArchive.type)
}

// optional bool forDrag = 5;
inline bool DrawablesCommandGroupArchive::_internal_has_fordrag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrawablesCommandGroupArchive::has_fordrag() const {
  return _internal_has_fordrag();
}
inline void DrawablesCommandGroupArchive::clear_fordrag() {
  _impl_.fordrag_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool DrawablesCommandGroupArchive::_internal_fordrag() const {
  return _impl_.fordrag_;
}
inline bool DrawablesCommandGroupArchive::fordrag() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.forDrag)
  return _internal_fordrag();
}
inline void DrawablesCommandGroupArchive::_internal_set_fordrag(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fordrag_ = value;
}
inline void DrawablesCommandGroupArchive::set_fordrag(bool value) {
  _internal_set_fordrag(value);
  // @@protoc_insertion_point(field_set:TSD.DrawablesCommandGroupArchive.forDrag)
}

// optional .TSP.Reference archivedselection = 6;
inline bool DrawablesCommandGroupArchive::_internal_has_archivedselection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archivedselection_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_archivedselection() const {
  return _internal_has_archivedselection();
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::_internal_archivedselection() const {
  const ::TSP::Reference* p = _impl_.archivedselection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::archivedselection() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.archivedselection)
  return _internal_archivedselection();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_archivedselection(
    ::TSP::Reference* archivedselection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archivedselection_);
  }
  _impl_.archivedselection_ = archivedselection;
  if (archivedselection) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.archivedselection)
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::release_archivedselection() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.archivedselection_;
  _impl_.archivedselection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::unsafe_arena_release_archivedselection() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.archivedselection)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.archivedselection_;
  _impl_.archivedselection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::_internal_mutable_archivedselection() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.archivedselection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archivedselection_ = p;
  }
  return _impl_.archivedselection_;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::mutable_archivedselection() {
  ::TSP::Reference* _msg = _internal_mutable_archivedselection();
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.archivedselection)
  return _msg;
}
inline void DrawablesCommandGroupArchive::set_allocated_archivedselection(::TSP::Reference* archivedselection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archivedselection_);
  }
  if (archivedselection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archivedselection));
    if (message_arena != submessage_arena) {
      archivedselection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archivedselection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.archivedselection_ = archivedselection;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.archivedselection)
}

// -------------------------------------------------------------------

// ExteriorTextWrapCommandArchive_InfoAndWrap

// optional .TSP.Reference info = 1;
inline bool ExteriorTextWrapCommandArchive_InfoAndWrap::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ExteriorTextWrapCommandArchive_InfoAndWrap::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ExteriorTextWrapCommandArchive_InfoAndWrap::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ExteriorTextWrapCommandArchive_InfoAndWrap::info() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.info)
  return _internal_info();
}
inline void ExteriorTextWrapCommandArchive_InfoAndWrap::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.info)
}
inline ::TSP::Reference* ExteriorTextWrapCommandArchive_InfoAndWrap::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ExteriorTextWrapCommandArchive_InfoAndWrap::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ExteriorTextWrapCommandArchive_InfoAndWrap::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* ExteriorTextWrapCommandArchive_InfoAndWrap::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.info)
  return _msg;
}
inline void ExteriorTextWrapCommandArchive_InfoAndWrap::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.info)
}

// optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 2;
inline bool ExteriorTextWrapCommandArchive_InfoAndWrap::_internal_has_exterior_text_wrap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exterior_text_wrap_ != nullptr);
  return value;
}
inline bool ExteriorTextWrapCommandArchive_InfoAndWrap::has_exterior_text_wrap() const {
  return _internal_has_exterior_text_wrap();
}
inline const ::TSD::ExteriorTextWrapArchive& ExteriorTextWrapCommandArchive_InfoAndWrap::_internal_exterior_text_wrap() const {
  const ::TSD::ExteriorTextWrapArchive* p = _impl_.exterior_text_wrap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ExteriorTextWrapArchive&>(
      ::TSD::_ExteriorTextWrapArchive_default_instance_);
}
inline const ::TSD::ExteriorTextWrapArchive& ExteriorTextWrapCommandArchive_InfoAndWrap::exterior_text_wrap() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.exterior_text_wrap)
  return _internal_exterior_text_wrap();
}
inline void ExteriorTextWrapCommandArchive_InfoAndWrap::unsafe_arena_set_allocated_exterior_text_wrap(
    ::TSD::ExteriorTextWrapArchive* exterior_text_wrap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exterior_text_wrap_);
  }
  _impl_.exterior_text_wrap_ = exterior_text_wrap;
  if (exterior_text_wrap) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.exterior_text_wrap)
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive_InfoAndWrap::release_exterior_text_wrap() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ExteriorTextWrapArchive* temp = _impl_.exterior_text_wrap_;
  _impl_.exterior_text_wrap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive_InfoAndWrap::unsafe_arena_release_exterior_text_wrap() {
  // @@protoc_insertion_point(field_release:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.exterior_text_wrap)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::ExteriorTextWrapArchive* temp = _impl_.exterior_text_wrap_;
  _impl_.exterior_text_wrap_ = nullptr;
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive_InfoAndWrap::_internal_mutable_exterior_text_wrap() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.exterior_text_wrap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ExteriorTextWrapArchive>(GetArenaForAllocation());
    _impl_.exterior_text_wrap_ = p;
  }
  return _impl_.exterior_text_wrap_;
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive_InfoAndWrap::mutable_exterior_text_wrap() {
  ::TSD::ExteriorTextWrapArchive* _msg = _internal_mutable_exterior_text_wrap();
  // @@protoc_insertion_point(field_mutable:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.exterior_text_wrap)
  return _msg;
}
inline void ExteriorTextWrapCommandArchive_InfoAndWrap::set_allocated_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* exterior_text_wrap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exterior_text_wrap_);
  }
  if (exterior_text_wrap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exterior_text_wrap));
    if (message_arena != submessage_arena) {
      exterior_text_wrap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exterior_text_wrap, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.exterior_text_wrap_ = exterior_text_wrap;
  // @@protoc_insertion_point(field_set_allocated:TSD.ExteriorTextWrapCommandArchive.InfoAndWrap.exterior_text_wrap)
}

// -------------------------------------------------------------------

// ExteriorTextWrapCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ExteriorTextWrapCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ExteriorTextWrapCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ExteriorTextWrapCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.super)
  return _internal_super();
}
inline void ExteriorTextWrapCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ExteriorTextWrapCommandArchive.super)
}
inline ::TSK::CommandArchive* ExteriorTextWrapCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ExteriorTextWrapCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ExteriorTextWrapCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ExteriorTextWrapCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ExteriorTextWrapCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ExteriorTextWrapCommandArchive.super)
  return _msg;
}
inline void ExteriorTextWrapCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ExteriorTextWrapCommandArchive.super)
}

// repeated .TSD.ExteriorTextWrapCommandArchive.InfoAndWrap info_and_wrap = 2;
inline int ExteriorTextWrapCommandArchive::_internal_info_and_wrap_size() const {
  return _impl_.info_and_wrap_.size();
}
inline int ExteriorTextWrapCommandArchive::info_and_wrap_size() const {
  return _internal_info_and_wrap_size();
}
inline void ExteriorTextWrapCommandArchive::clear_info_and_wrap() {
  _impl_.info_and_wrap_.Clear();
}
inline ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* ExteriorTextWrapCommandArchive::mutable_info_and_wrap(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ExteriorTextWrapCommandArchive.info_and_wrap)
  return _impl_.info_and_wrap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap >*
ExteriorTextWrapCommandArchive::mutable_info_and_wrap() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ExteriorTextWrapCommandArchive.info_and_wrap)
  return &_impl_.info_and_wrap_;
}
inline const ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap& ExteriorTextWrapCommandArchive::_internal_info_and_wrap(int index) const {
  return _impl_.info_and_wrap_.Get(index);
}
inline const ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap& ExteriorTextWrapCommandArchive::info_and_wrap(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.info_and_wrap)
  return _internal_info_and_wrap(index);
}
inline ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* ExteriorTextWrapCommandArchive::_internal_add_info_and_wrap() {
  return _impl_.info_and_wrap_.Add();
}
inline ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* ExteriorTextWrapCommandArchive::add_info_and_wrap() {
  ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap* _add = _internal_add_info_and_wrap();
  // @@protoc_insertion_point(field_add:TSD.ExteriorTextWrapCommandArchive.info_and_wrap)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::ExteriorTextWrapCommandArchive_InfoAndWrap >&
ExteriorTextWrapCommandArchive::info_and_wrap() const {
  // @@protoc_insertion_point(field_list:TSD.ExteriorTextWrapCommandArchive.info_and_wrap)
  return _impl_.info_and_wrap_;
}

// -------------------------------------------------------------------

// DrawableHyperlinkCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool DrawableHyperlinkCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawableHyperlinkCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& DrawableHyperlinkCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& DrawableHyperlinkCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableHyperlinkCommandArchive.super)
  return _internal_super();
}
inline void DrawableHyperlinkCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableHyperlinkCommandArchive.super)
}
inline ::TSK::CommandArchive* DrawableHyperlinkCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* DrawableHyperlinkCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableHyperlinkCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* DrawableHyperlinkCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* DrawableHyperlinkCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableHyperlinkCommandArchive.super)
  return _msg;
}
inline void DrawableHyperlinkCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableHyperlinkCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableHyperlinkCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawableHyperlinkCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableHyperlinkCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableHyperlinkCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableHyperlinkCommandArchive.info)
  return _internal_info();
}
inline void DrawableHyperlinkCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableHyperlinkCommandArchive.info)
}
inline ::TSP::Reference* DrawableHyperlinkCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableHyperlinkCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableHyperlinkCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableHyperlinkCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawableHyperlinkCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableHyperlinkCommandArchive.info)
  return _msg;
}
inline void DrawableHyperlinkCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableHyperlinkCommandArchive.info)
}

// optional string oldhyperlink_url = 3;
inline bool DrawableHyperlinkCommandArchive::_internal_has_oldhyperlink_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawableHyperlinkCommandArchive::has_oldhyperlink_url() const {
  return _internal_has_oldhyperlink_url();
}
inline void DrawableHyperlinkCommandArchive::clear_oldhyperlink_url() {
  _impl_.oldhyperlink_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawableHyperlinkCommandArchive::oldhyperlink_url() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
  return _internal_oldhyperlink_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DrawableHyperlinkCommandArchive::set_oldhyperlink_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.oldhyperlink_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
}
inline std::string* DrawableHyperlinkCommandArchive::mutable_oldhyperlink_url() {
  std::string* _s = _internal_mutable_oldhyperlink_url();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
  return _s;
}
inline const std::string& DrawableHyperlinkCommandArchive::_internal_oldhyperlink_url() const {
  return _impl_.oldhyperlink_url_.Get();
}
inline void DrawableHyperlinkCommandArchive::_internal_set_oldhyperlink_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.oldhyperlink_url_.Set(value, GetArenaForAllocation());
}
inline std::string* DrawableHyperlinkCommandArchive::_internal_mutable_oldhyperlink_url() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.oldhyperlink_url_.Mutable(GetArenaForAllocation());
}
inline std::string* DrawableHyperlinkCommandArchive::release_oldhyperlink_url() {
  // @@protoc_insertion_point(field_release:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
  if (!_internal_has_oldhyperlink_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.oldhyperlink_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldhyperlink_url_.IsDefault()) {
    _impl_.oldhyperlink_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DrawableHyperlinkCommandArchive::set_allocated_oldhyperlink_url(std::string* oldhyperlink_url) {
  if (oldhyperlink_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.oldhyperlink_url_.SetAllocated(oldhyperlink_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldhyperlink_url_.IsDefault()) {
    _impl_.oldhyperlink_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
}

// optional string newhyperlink_url = 4;
inline bool DrawableHyperlinkCommandArchive::_internal_has_newhyperlink_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawableHyperlinkCommandArchive::has_newhyperlink_url() const {
  return _internal_has_newhyperlink_url();
}
inline void DrawableHyperlinkCommandArchive::clear_newhyperlink_url() {
  _impl_.newhyperlink_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DrawableHyperlinkCommandArchive::newhyperlink_url() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
  return _internal_newhyperlink_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DrawableHyperlinkCommandArchive::set_newhyperlink_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.newhyperlink_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
}
inline std::string* DrawableHyperlinkCommandArchive::mutable_newhyperlink_url() {
  std::string* _s = _internal_mutable_newhyperlink_url();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
  return _s;
}
inline const std::string& DrawableHyperlinkCommandArchive::_internal_newhyperlink_url() const {
  return _impl_.newhyperlink_url_.Get();
}
inline void DrawableHyperlinkCommandArchive::_internal_set_newhyperlink_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.newhyperlink_url_.Set(value, GetArenaForAllocation());
}
inline std::string* DrawableHyperlinkCommandArchive::_internal_mutable_newhyperlink_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.newhyperlink_url_.Mutable(GetArenaForAllocation());
}
inline std::string* DrawableHyperlinkCommandArchive::release_newhyperlink_url() {
  // @@protoc_insertion_point(field_release:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
  if (!_internal_has_newhyperlink_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.newhyperlink_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newhyperlink_url_.IsDefault()) {
    _impl_.newhyperlink_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DrawableHyperlinkCommandArchive::set_allocated_newhyperlink_url(std::string* newhyperlink_url) {
  if (newhyperlink_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newhyperlink_url_.SetAllocated(newhyperlink_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newhyperlink_url_.IsDefault()) {
    _impl_.newhyperlink_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
}

// -------------------------------------------------------------------

// CommandSelectionBehaviorArchive

// optional .TSP.Reference model_for_selection = 2;
inline bool CommandSelectionBehaviorArchive::_internal_has_model_for_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.model_for_selection_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_model_for_selection() const {
  return _internal_has_model_for_selection();
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::_internal_model_for_selection() const {
  const ::TSP::Reference* p = _impl_.model_for_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::model_for_selection() const {
  // @@protoc_insertion_point(field_get:TSD.CommandSelectionBehaviorArchive.model_for_selection)
  return _internal_model_for_selection();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_model_for_selection(
    ::TSP::Reference* model_for_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_for_selection_);
  }
  _impl_.model_for_selection_ = model_for_selection;
  if (model_for_selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CommandSelectionBehaviorArchive.model_for_selection)
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::release_model_for_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.model_for_selection_;
  _impl_.model_for_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::unsafe_arena_release_model_for_selection() {
  // @@protoc_insertion_point(field_release:TSD.CommandSelectionBehaviorArchive.model_for_selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.model_for_selection_;
  _impl_.model_for_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::_internal_mutable_model_for_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.model_for_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.model_for_selection_ = p;
  }
  return _impl_.model_for_selection_;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::mutable_model_for_selection() {
  ::TSP::Reference* _msg = _internal_mutable_model_for_selection();
  // @@protoc_insertion_point(field_mutable:TSD.CommandSelectionBehaviorArchive.model_for_selection)
  return _msg;
}
inline void CommandSelectionBehaviorArchive::set_allocated_model_for_selection(::TSP::Reference* model_for_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_for_selection_);
  }
  if (model_for_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_for_selection));
    if (message_arena != submessage_arena) {
      model_for_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_for_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_for_selection_ = model_for_selection;
  // @@protoc_insertion_point(field_set_allocated:TSD.CommandSelectionBehaviorArchive.model_for_selection)
}

// optional .TSD.CommandSelectionBehaviorArchive.CommandSelectionBehaviorType type = 3;
inline bool CommandSelectionBehaviorArchive::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_type() const {
  return _internal_has_type();
}
inline void CommandSelectionBehaviorArchive::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::_internal_type() const {
  return static_cast< ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType >(_impl_.type_);
}
inline ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::type() const {
  // @@protoc_insertion_point(field_get:TSD.CommandSelectionBehaviorArchive.type)
  return _internal_type();
}
inline void CommandSelectionBehaviorArchive::_internal_set_type(::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType value) {
  assert(::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void CommandSelectionBehaviorArchive::set_type(::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSD.CommandSelectionBehaviorArchive.type)
}

// optional .TSP.Reference archived_selection = 4;
inline bool CommandSelectionBehaviorArchive::_internal_has_archived_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_selection_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_archived_selection() const {
  return _internal_has_archived_selection();
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::_internal_archived_selection() const {
  const ::TSP::Reference* p = _impl_.archived_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::archived_selection() const {
  // @@protoc_insertion_point(field_get:TSD.CommandSelectionBehaviorArchive.archived_selection)
  return _internal_archived_selection();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_archived_selection(
    ::TSP::Reference* archived_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  _impl_.archived_selection_ = archived_selection;
  if (archived_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CommandSelectionBehaviorArchive.archived_selection)
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::release_archived_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::unsafe_arena_release_archived_selection() {
  // @@protoc_insertion_point(field_release:TSD.CommandSelectionBehaviorArchive.archived_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.archived_selection_;
  _impl_.archived_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::_internal_mutable_archived_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.archived_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archived_selection_ = p;
  }
  return _impl_.archived_selection_;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::mutable_archived_selection() {
  ::TSP::Reference* _msg = _internal_mutable_archived_selection();
  // @@protoc_insertion_point(field_mutable:TSD.CommandSelectionBehaviorArchive.archived_selection)
  return _msg;
}
inline void CommandSelectionBehaviorArchive::set_allocated_archived_selection(::TSP::Reference* archived_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_selection_);
  }
  if (archived_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_selection));
    if (message_arena != submessage_arena) {
      archived_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.archived_selection_ = archived_selection;
  // @@protoc_insertion_point(field_set_allocated:TSD.CommandSelectionBehaviorArchive.archived_selection)
}

// optional .TSP.Reference archived_new_selection = 5;
inline bool CommandSelectionBehaviorArchive::_internal_has_archived_new_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.archived_new_selection_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_archived_new_selection() const {
  return _internal_has_archived_new_selection();
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::_internal_archived_new_selection() const {
  const ::TSP::Reference* p = _impl_.archived_new_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::archived_new_selection() const {
  // @@protoc_insertion_point(field_get:TSD.CommandSelectionBehaviorArchive.archived_new_selection)
  return _internal_archived_new_selection();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_archived_new_selection(
    ::TSP::Reference* archived_new_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_new_selection_);
  }
  _impl_.archived_new_selection_ = archived_new_selection;
  if (archived_new_selection) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CommandSelectionBehaviorArchive.archived_new_selection)
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::release_archived_new_selection() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.archived_new_selection_;
  _impl_.archived_new_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::unsafe_arena_release_archived_new_selection() {
  // @@protoc_insertion_point(field_release:TSD.CommandSelectionBehaviorArchive.archived_new_selection)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.archived_new_selection_;
  _impl_.archived_new_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::_internal_mutable_archived_new_selection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.archived_new_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.archived_new_selection_ = p;
  }
  return _impl_.archived_new_selection_;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::mutable_archived_new_selection() {
  ::TSP::Reference* _msg = _internal_mutable_archived_new_selection();
  // @@protoc_insertion_point(field_mutable:TSD.CommandSelectionBehaviorArchive.archived_new_selection)
  return _msg;
}
inline void CommandSelectionBehaviorArchive::set_allocated_archived_new_selection(::TSP::Reference* archived_new_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.archived_new_selection_);
  }
  if (archived_new_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_new_selection));
    if (message_arena != submessage_arena) {
      archived_new_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_new_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.archived_new_selection_ = archived_new_selection;
  // @@protoc_insertion_point(field_set_allocated:TSD.CommandSelectionBehaviorArchive.archived_new_selection)
}

// -------------------------------------------------------------------

// ImageReplaceCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ImageReplaceCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ImageReplaceCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ImageReplaceCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.super)
  return _internal_super();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.super)
}
inline ::TSK::CommandArchive* ImageReplaceCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ImageReplaceCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ImageReplaceCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ImageReplaceCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.super)
  return _msg;
}
inline void ImageReplaceCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.super)
}

// -------------------------------------------------------------------

// DrawableLockCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool DrawableLockCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawableLockCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& DrawableLockCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& DrawableLockCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableLockCommandArchive.super)
  return _internal_super();
}
inline void DrawableLockCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableLockCommandArchive.super)
}
inline ::TSK::CommandArchive* DrawableLockCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* DrawableLockCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableLockCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* DrawableLockCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* DrawableLockCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableLockCommandArchive.super)
  return _msg;
}
inline void DrawableLockCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableLockCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableLockCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawableLockCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableLockCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableLockCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableLockCommandArchive.info)
  return _internal_info();
}
inline void DrawableLockCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableLockCommandArchive.info)
}
inline ::TSP::Reference* DrawableLockCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableLockCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableLockCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableLockCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawableLockCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableLockCommandArchive.info)
  return _msg;
}
inline void DrawableLockCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableLockCommandArchive.info)
}

// optional bool lock = 3;
inline bool DrawableLockCommandArchive::_internal_has_lock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawableLockCommandArchive::has_lock() const {
  return _internal_has_lock();
}
inline void DrawableLockCommandArchive::clear_lock() {
  _impl_.lock_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DrawableLockCommandArchive::_internal_lock() const {
  return _impl_.lock_;
}
inline bool DrawableLockCommandArchive::lock() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableLockCommandArchive.lock)
  return _internal_lock();
}
inline void DrawableLockCommandArchive::_internal_set_lock(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lock_ = value;
}
inline void DrawableLockCommandArchive::set_lock(bool value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableLockCommandArchive.lock)
}

// -------------------------------------------------------------------

// DrawableInfoCommentCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool DrawableInfoCommentCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& DrawableInfoCommentCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& DrawableInfoCommentCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.super)
  return _internal_super();
}
inline void DrawableInfoCommentCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableInfoCommentCommandArchive.super)
}
inline ::TSK::CommandArchive* DrawableInfoCommentCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* DrawableInfoCommentCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableInfoCommentCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* DrawableInfoCommentCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* DrawableInfoCommentCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableInfoCommentCommandArchive.super)
  return _msg;
}
inline void DrawableInfoCommentCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableInfoCommentCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableInfoCommentCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.info)
  return _internal_info();
}
inline void DrawableInfoCommentCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableInfoCommentCommandArchive.info)
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableInfoCommentCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableInfoCommentCommandArchive.info)
  return _msg;
}
inline void DrawableInfoCommentCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableInfoCommentCommandArchive.info)
}

// optional .TSP.Reference old_comment = 3;
inline bool DrawableInfoCommentCommandArchive::_internal_has_old_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_comment_ != nullptr);
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_old_comment() const {
  return _internal_has_old_comment();
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::_internal_old_comment() const {
  const ::TSP::Reference* p = _impl_.old_comment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::old_comment() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.old_comment)
  return _internal_old_comment();
}
inline void DrawableInfoCommentCommandArchive::unsafe_arena_set_allocated_old_comment(
    ::TSP::Reference* old_comment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_comment_);
  }
  _impl_.old_comment_ = old_comment;
  if (old_comment) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableInfoCommentCommandArchive.old_comment)
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::release_old_comment() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_comment_;
  _impl_.old_comment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::unsafe_arena_release_old_comment() {
  // @@protoc_insertion_point(field_release:TSD.DrawableInfoCommentCommandArchive.old_comment)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_comment_;
  _impl_.old_comment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::_internal_mutable_old_comment() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_comment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_comment_ = p;
  }
  return _impl_.old_comment_;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::mutable_old_comment() {
  ::TSP::Reference* _msg = _internal_mutable_old_comment();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableInfoCommentCommandArchive.old_comment)
  return _msg;
}
inline void DrawableInfoCommentCommandArchive::set_allocated_old_comment(::TSP::Reference* old_comment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_comment_);
  }
  if (old_comment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_comment));
    if (message_arena != submessage_arena) {
      old_comment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_comment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_comment_ = old_comment;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableInfoCommentCommandArchive.old_comment)
}

// optional .TSP.Reference new_comment = 4;
inline bool DrawableInfoCommentCommandArchive::_internal_has_new_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_comment_ != nullptr);
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_new_comment() const {
  return _internal_has_new_comment();
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::_internal_new_comment() const {
  const ::TSP::Reference* p = _impl_.new_comment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::new_comment() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.new_comment)
  return _internal_new_comment();
}
inline void DrawableInfoCommentCommandArchive::unsafe_arena_set_allocated_new_comment(
    ::TSP::Reference* new_comment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_comment_);
  }
  _impl_.new_comment_ = new_comment;
  if (new_comment) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableInfoCommentCommandArchive.new_comment)
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::release_new_comment() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_comment_;
  _impl_.new_comment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::unsafe_arena_release_new_comment() {
  // @@protoc_insertion_point(field_release:TSD.DrawableInfoCommentCommandArchive.new_comment)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_comment_;
  _impl_.new_comment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::_internal_mutable_new_comment() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_comment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_comment_ = p;
  }
  return _impl_.new_comment_;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::mutable_new_comment() {
  ::TSP::Reference* _msg = _internal_mutable_new_comment();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableInfoCommentCommandArchive.new_comment)
  return _msg;
}
inline void DrawableInfoCommentCommandArchive::set_allocated_new_comment(::TSP::Reference* new_comment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_comment_);
  }
  if (new_comment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_comment));
    if (message_arena != submessage_arena) {
      new_comment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_comment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_comment_ = new_comment;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableInfoCommentCommandArchive.new_comment)
}

// -------------------------------------------------------------------

// CommentStorageApplyCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool CommentStorageApplyCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommentStorageApplyCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommentStorageApplyCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommentStorageApplyCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.CommentStorageApplyCommandArchive.super)
  return _internal_super();
}
inline void CommentStorageApplyCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CommentStorageApplyCommandArchive.super)
}
inline ::TSK::CommandArchive* CommentStorageApplyCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommentStorageApplyCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.CommentStorageApplyCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommentStorageApplyCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommentStorageApplyCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.CommentStorageApplyCommandArchive.super)
  return _msg;
}
inline void CommentStorageApplyCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.CommentStorageApplyCommandArchive.super)
}

// required .TSP.Reference comment_storage = 2;
inline bool CommentStorageApplyCommandArchive::_internal_has_comment_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.comment_storage_ != nullptr);
  return value;
}
inline bool CommentStorageApplyCommandArchive::has_comment_storage() const {
  return _internal_has_comment_storage();
}
inline const ::TSP::Reference& CommentStorageApplyCommandArchive::_internal_comment_storage() const {
  const ::TSP::Reference* p = _impl_.comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommentStorageApplyCommandArchive::comment_storage() const {
  // @@protoc_insertion_point(field_get:TSD.CommentStorageApplyCommandArchive.comment_storage)
  return _internal_comment_storage();
}
inline void CommentStorageApplyCommandArchive::unsafe_arena_set_allocated_comment_storage(
    ::TSP::Reference* comment_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.comment_storage_);
  }
  _impl_.comment_storage_ = comment_storage;
  if (comment_storage) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CommentStorageApplyCommandArchive.comment_storage)
}
inline ::TSP::Reference* CommentStorageApplyCommandArchive::release_comment_storage() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.comment_storage_;
  _impl_.comment_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommentStorageApplyCommandArchive::unsafe_arena_release_comment_storage() {
  // @@protoc_insertion_point(field_release:TSD.CommentStorageApplyCommandArchive.comment_storage)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.comment_storage_;
  _impl_.comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommentStorageApplyCommandArchive::_internal_mutable_comment_storage() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.comment_storage_ = p;
  }
  return _impl_.comment_storage_;
}
inline ::TSP::Reference* CommentStorageApplyCommandArchive::mutable_comment_storage() {
  ::TSP::Reference* _msg = _internal_mutable_comment_storage();
  // @@protoc_insertion_point(field_mutable:TSD.CommentStorageApplyCommandArchive.comment_storage)
  return _msg;
}
inline void CommentStorageApplyCommandArchive::set_allocated_comment_storage(::TSP::Reference* comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.comment_storage_);
  }
  if (comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage));
    if (message_arena != submessage_arena) {
      comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comment_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.comment_storage_ = comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TSD.CommentStorageApplyCommandArchive.comment_storage)
}

// required string comment_string = 3;
inline bool CommentStorageApplyCommandArchive::_internal_has_comment_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommentStorageApplyCommandArchive::has_comment_string() const {
  return _internal_has_comment_string();
}
inline void CommentStorageApplyCommandArchive::clear_comment_string() {
  _impl_.comment_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommentStorageApplyCommandArchive::comment_string() const {
  // @@protoc_insertion_point(field_get:TSD.CommentStorageApplyCommandArchive.comment_string)
  return _internal_comment_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommentStorageApplyCommandArchive::set_comment_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.comment_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSD.CommentStorageApplyCommandArchive.comment_string)
}
inline std::string* CommentStorageApplyCommandArchive::mutable_comment_string() {
  std::string* _s = _internal_mutable_comment_string();
  // @@protoc_insertion_point(field_mutable:TSD.CommentStorageApplyCommandArchive.comment_string)
  return _s;
}
inline const std::string& CommentStorageApplyCommandArchive::_internal_comment_string() const {
  return _impl_.comment_string_.Get();
}
inline void CommentStorageApplyCommandArchive::_internal_set_comment_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comment_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CommentStorageApplyCommandArchive::_internal_mutable_comment_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comment_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CommentStorageApplyCommandArchive::release_comment_string() {
  // @@protoc_insertion_point(field_release:TSD.CommentStorageApplyCommandArchive.comment_string)
  if (!_internal_has_comment_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.comment_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_string_.IsDefault()) {
    _impl_.comment_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommentStorageApplyCommandArchive::set_allocated_comment_string(std::string* comment_string) {
  if (comment_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comment_string_.SetAllocated(comment_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_string_.IsDefault()) {
    _impl_.comment_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSD.CommentStorageApplyCommandArchive.comment_string)
}

// required string old_comment_string = 4;
inline bool CommentStorageApplyCommandArchive::_internal_has_old_comment_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommentStorageApplyCommandArchive::has_old_comment_string() const {
  return _internal_has_old_comment_string();
}
inline void CommentStorageApplyCommandArchive::clear_old_comment_string() {
  _impl_.old_comment_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommentStorageApplyCommandArchive::old_comment_string() const {
  // @@protoc_insertion_point(field_get:TSD.CommentStorageApplyCommandArchive.old_comment_string)
  return _internal_old_comment_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommentStorageApplyCommandArchive::set_old_comment_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.old_comment_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSD.CommentStorageApplyCommandArchive.old_comment_string)
}
inline std::string* CommentStorageApplyCommandArchive::mutable_old_comment_string() {
  std::string* _s = _internal_mutable_old_comment_string();
  // @@protoc_insertion_point(field_mutable:TSD.CommentStorageApplyCommandArchive.old_comment_string)
  return _s;
}
inline const std::string& CommentStorageApplyCommandArchive::_internal_old_comment_string() const {
  return _impl_.old_comment_string_.Get();
}
inline void CommentStorageApplyCommandArchive::_internal_set_old_comment_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_comment_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CommentStorageApplyCommandArchive::_internal_mutable_old_comment_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.old_comment_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CommentStorageApplyCommandArchive::release_old_comment_string() {
  // @@protoc_insertion_point(field_release:TSD.CommentStorageApplyCommandArchive.old_comment_string)
  if (!_internal_has_old_comment_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.old_comment_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_comment_string_.IsDefault()) {
    _impl_.old_comment_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommentStorageApplyCommandArchive::set_allocated_old_comment_string(std::string* old_comment_string) {
  if (old_comment_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_comment_string_.SetAllocated(old_comment_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_comment_string_.IsDefault()) {
    _impl_.old_comment_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSD.CommentStorageApplyCommandArchive.old_comment_string)
}

// -------------------------------------------------------------------

// GuideCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool GuideCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GuideCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& GuideCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GuideCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.GuideCommandArchive.super)
  return _internal_super();
}
inline void GuideCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GuideCommandArchive.super)
}
inline ::TSK::CommandArchive* GuideCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* GuideCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.GuideCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GuideCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* GuideCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.GuideCommandArchive.super)
  return _msg;
}
inline void GuideCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.GuideCommandArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool GuideCommandArchive::_internal_has_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.storage_ != nullptr);
  return value;
}
inline bool GuideCommandArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& GuideCommandArchive::_internal_storage() const {
  const ::TSP::Reference* p = _impl_.storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& GuideCommandArchive::storage() const {
  // @@protoc_insertion_point(field_get:TSD.GuideCommandArchive.storage)
  return _internal_storage();
}
inline void GuideCommandArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  _impl_.storage_ = storage;
  if (storage) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GuideCommandArchive.storage)
}
inline ::TSP::Reference* GuideCommandArchive::release_storage() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* GuideCommandArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TSD.GuideCommandArchive.storage)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* GuideCommandArchive::_internal_mutable_storage() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.storage_ = p;
  }
  return _impl_.storage_;
}
inline ::TSP::Reference* GuideCommandArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TSD.GuideCommandArchive.storage)
  return _msg;
}
inline void GuideCommandArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TSD.GuideCommandArchive.storage)
}

// optional .TSD.UserDefinedGuideArchive old_guide = 3;
inline bool GuideCommandArchive::_internal_has_old_guide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_guide_ != nullptr);
  return value;
}
inline bool GuideCommandArchive::has_old_guide() const {
  return _internal_has_old_guide();
}
inline const ::TSD::UserDefinedGuideArchive& GuideCommandArchive::_internal_old_guide() const {
  const ::TSD::UserDefinedGuideArchive* p = _impl_.old_guide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::UserDefinedGuideArchive&>(
      ::TSD::_UserDefinedGuideArchive_default_instance_);
}
inline const ::TSD::UserDefinedGuideArchive& GuideCommandArchive::old_guide() const {
  // @@protoc_insertion_point(field_get:TSD.GuideCommandArchive.old_guide)
  return _internal_old_guide();
}
inline void GuideCommandArchive::unsafe_arena_set_allocated_old_guide(
    ::TSD::UserDefinedGuideArchive* old_guide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_guide_);
  }
  _impl_.old_guide_ = old_guide;
  if (old_guide) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GuideCommandArchive.old_guide)
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::release_old_guide() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::UserDefinedGuideArchive* temp = _impl_.old_guide_;
  _impl_.old_guide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::unsafe_arena_release_old_guide() {
  // @@protoc_insertion_point(field_release:TSD.GuideCommandArchive.old_guide)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::UserDefinedGuideArchive* temp = _impl_.old_guide_;
  _impl_.old_guide_ = nullptr;
  return temp;
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::_internal_mutable_old_guide() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_guide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::UserDefinedGuideArchive>(GetArenaForAllocation());
    _impl_.old_guide_ = p;
  }
  return _impl_.old_guide_;
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::mutable_old_guide() {
  ::TSD::UserDefinedGuideArchive* _msg = _internal_mutable_old_guide();
  // @@protoc_insertion_point(field_mutable:TSD.GuideCommandArchive.old_guide)
  return _msg;
}
inline void GuideCommandArchive::set_allocated_old_guide(::TSD::UserDefinedGuideArchive* old_guide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_guide_);
  }
  if (old_guide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_guide));
    if (message_arena != submessage_arena) {
      old_guide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_guide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_guide_ = old_guide;
  // @@protoc_insertion_point(field_set_allocated:TSD.GuideCommandArchive.old_guide)
}

// optional .TSD.UserDefinedGuideArchive new_guide = 4;
inline bool GuideCommandArchive::_internal_has_new_guide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_guide_ != nullptr);
  return value;
}
inline bool GuideCommandArchive::has_new_guide() const {
  return _internal_has_new_guide();
}
inline const ::TSD::UserDefinedGuideArchive& GuideCommandArchive::_internal_new_guide() const {
  const ::TSD::UserDefinedGuideArchive* p = _impl_.new_guide_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::UserDefinedGuideArchive&>(
      ::TSD::_UserDefinedGuideArchive_default_instance_);
}
inline const ::TSD::UserDefinedGuideArchive& GuideCommandArchive::new_guide() const {
  // @@protoc_insertion_point(field_get:TSD.GuideCommandArchive.new_guide)
  return _internal_new_guide();
}
inline void GuideCommandArchive::unsafe_arena_set_allocated_new_guide(
    ::TSD::UserDefinedGuideArchive* new_guide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_guide_);
  }
  _impl_.new_guide_ = new_guide;
  if (new_guide) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GuideCommandArchive.new_guide)
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::release_new_guide() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::UserDefinedGuideArchive* temp = _impl_.new_guide_;
  _impl_.new_guide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::unsafe_arena_release_new_guide() {
  // @@protoc_insertion_point(field_release:TSD.GuideCommandArchive.new_guide)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::UserDefinedGuideArchive* temp = _impl_.new_guide_;
  _impl_.new_guide_ = nullptr;
  return temp;
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::_internal_mutable_new_guide() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_guide_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::UserDefinedGuideArchive>(GetArenaForAllocation());
    _impl_.new_guide_ = p;
  }
  return _impl_.new_guide_;
}
inline ::TSD::UserDefinedGuideArchive* GuideCommandArchive::mutable_new_guide() {
  ::TSD::UserDefinedGuideArchive* _msg = _internal_mutable_new_guide();
  // @@protoc_insertion_point(field_mutable:TSD.GuideCommandArchive.new_guide)
  return _msg;
}
inline void GuideCommandArchive::set_allocated_new_guide(::TSD::UserDefinedGuideArchive* new_guide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_guide_);
  }
  if (new_guide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_guide));
    if (message_arena != submessage_arena) {
      new_guide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_guide, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_guide_ = new_guide;
  // @@protoc_insertion_point(field_set_allocated:TSD.GuideCommandArchive.new_guide)
}

// optional .TSD.GuideCommandArchive.GuideCommandMode mode = 5;
inline bool GuideCommandArchive::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GuideCommandArchive::has_mode() const {
  return _internal_has_mode();
}
inline void GuideCommandArchive::clear_mode() {
  _impl_.mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSD::GuideCommandArchive_GuideCommandMode GuideCommandArchive::_internal_mode() const {
  return static_cast< ::TSD::GuideCommandArchive_GuideCommandMode >(_impl_.mode_);
}
inline ::TSD::GuideCommandArchive_GuideCommandMode GuideCommandArchive::mode() const {
  // @@protoc_insertion_point(field_get:TSD.GuideCommandArchive.mode)
  return _internal_mode();
}
inline void GuideCommandArchive::_internal_set_mode(::TSD::GuideCommandArchive_GuideCommandMode value) {
  assert(::TSD::GuideCommandArchive_GuideCommandMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}
inline void GuideCommandArchive::set_mode(::TSD::GuideCommandArchive_GuideCommandMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:TSD.GuideCommandArchive.mode)
}

// -------------------------------------------------------------------

// DrawableAspectRatioLockedCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool DrawableAspectRatioLockedCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawableAspectRatioLockedCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& DrawableAspectRatioLockedCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& DrawableAspectRatioLockedCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAspectRatioLockedCommandArchive.super)
  return _internal_super();
}
inline void DrawableAspectRatioLockedCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableAspectRatioLockedCommandArchive.super)
}
inline ::TSK::CommandArchive* DrawableAspectRatioLockedCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* DrawableAspectRatioLockedCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAspectRatioLockedCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* DrawableAspectRatioLockedCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* DrawableAspectRatioLockedCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAspectRatioLockedCommandArchive.super)
  return _msg;
}
inline void DrawableAspectRatioLockedCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAspectRatioLockedCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableAspectRatioLockedCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawableAspectRatioLockedCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableAspectRatioLockedCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableAspectRatioLockedCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAspectRatioLockedCommandArchive.info)
  return _internal_info();
}
inline void DrawableAspectRatioLockedCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableAspectRatioLockedCommandArchive.info)
}
inline ::TSP::Reference* DrawableAspectRatioLockedCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableAspectRatioLockedCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAspectRatioLockedCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableAspectRatioLockedCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawableAspectRatioLockedCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAspectRatioLockedCommandArchive.info)
  return _msg;
}
inline void DrawableAspectRatioLockedCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAspectRatioLockedCommandArchive.info)
}

// optional bool aspect_ratio_locked = 3;
inline bool DrawableAspectRatioLockedCommandArchive::_internal_has_aspect_ratio_locked() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawableAspectRatioLockedCommandArchive::has_aspect_ratio_locked() const {
  return _internal_has_aspect_ratio_locked();
}
inline void DrawableAspectRatioLockedCommandArchive::clear_aspect_ratio_locked() {
  _impl_.aspect_ratio_locked_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DrawableAspectRatioLockedCommandArchive::_internal_aspect_ratio_locked() const {
  return _impl_.aspect_ratio_locked_;
}
inline bool DrawableAspectRatioLockedCommandArchive::aspect_ratio_locked() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAspectRatioLockedCommandArchive.aspect_ratio_locked)
  return _internal_aspect_ratio_locked();
}
inline void DrawableAspectRatioLockedCommandArchive::_internal_set_aspect_ratio_locked(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.aspect_ratio_locked_ = value;
}
inline void DrawableAspectRatioLockedCommandArchive::set_aspect_ratio_locked(bool value) {
  _internal_set_aspect_ratio_locked(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableAspectRatioLockedCommandArchive.aspect_ratio_locked)
}

// -------------------------------------------------------------------

// DrawableAccessibilityDescriptionCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool DrawableAccessibilityDescriptionCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DrawableAccessibilityDescriptionCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& DrawableAccessibilityDescriptionCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& DrawableAccessibilityDescriptionCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
  return _internal_super();
}
inline void DrawableAccessibilityDescriptionCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
}
inline ::TSK::CommandArchive* DrawableAccessibilityDescriptionCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* DrawableAccessibilityDescriptionCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* DrawableAccessibilityDescriptionCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* DrawableAccessibilityDescriptionCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
  return _msg;
}
inline void DrawableAccessibilityDescriptionCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableAccessibilityDescriptionCommandArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool DrawableAccessibilityDescriptionCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableAccessibilityDescriptionCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableAccessibilityDescriptionCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAccessibilityDescriptionCommandArchive.info)
  return _internal_info();
}
inline void DrawableAccessibilityDescriptionCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.info)
}
inline ::TSP::Reference* DrawableAccessibilityDescriptionCommandArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DrawableAccessibilityDescriptionCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAccessibilityDescriptionCommandArchive.info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableAccessibilityDescriptionCommandArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* DrawableAccessibilityDescriptionCommandArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAccessibilityDescriptionCommandArchive.info)
  return _msg;
}
inline void DrawableAccessibilityDescriptionCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.info)
}

// optional string accessibility_description = 3;
inline bool DrawableAccessibilityDescriptionCommandArchive::_internal_has_accessibility_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawableAccessibilityDescriptionCommandArchive::has_accessibility_description() const {
  return _internal_has_accessibility_description();
}
inline void DrawableAccessibilityDescriptionCommandArchive::clear_accessibility_description() {
  _impl_.accessibility_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawableAccessibilityDescriptionCommandArchive::accessibility_description() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
  return _internal_accessibility_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DrawableAccessibilityDescriptionCommandArchive::set_accessibility_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.accessibility_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::mutable_accessibility_description() {
  std::string* _s = _internal_mutable_accessibility_description();
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
  return _s;
}
inline const std::string& DrawableAccessibilityDescriptionCommandArchive::_internal_accessibility_description() const {
  return _impl_.accessibility_description_.Get();
}
inline void DrawableAccessibilityDescriptionCommandArchive::_internal_set_accessibility_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accessibility_description_.Set(value, GetArenaForAllocation());
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::_internal_mutable_accessibility_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.accessibility_description_.Mutable(GetArenaForAllocation());
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::release_accessibility_description() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
  if (!_internal_has_accessibility_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.accessibility_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accessibility_description_.IsDefault()) {
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DrawableAccessibilityDescriptionCommandArchive::set_allocated_accessibility_description(std::string* accessibility_description) {
  if (accessibility_description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accessibility_description_.SetAllocated(accessibility_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accessibility_description_.IsDefault()) {
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
}

// -------------------------------------------------------------------

// PasteStyleCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool PasteStyleCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool PasteStyleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& PasteStyleCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& PasteStyleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.PasteStyleCommandArchive.super)
  return _internal_super();
}
inline void PasteStyleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.PasteStyleCommandArchive.super)
}
inline ::TSK::CommandArchive* PasteStyleCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* PasteStyleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.PasteStyleCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* PasteStyleCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* PasteStyleCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSD.PasteStyleCommandArchive.super)
  return _msg;
}
inline void PasteStyleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.PasteStyleCommandArchive.super)
}

// required .TSP.Reference dest_info = 2;
inline bool PasteStyleCommandArchive::_internal_has_dest_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dest_info_ != nullptr);
  return value;
}
inline bool PasteStyleCommandArchive::has_dest_info() const {
  return _internal_has_dest_info();
}
inline const ::TSP::Reference& PasteStyleCommandArchive::_internal_dest_info() const {
  const ::TSP::Reference* p = _impl_.dest_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteStyleCommandArchive::dest_info() const {
  // @@protoc_insertion_point(field_get:TSD.PasteStyleCommandArchive.dest_info)
  return _internal_dest_info();
}
inline void PasteStyleCommandArchive::unsafe_arena_set_allocated_dest_info(
    ::TSP::Reference* dest_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dest_info_);
  }
  _impl_.dest_info_ = dest_info;
  if (dest_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.PasteStyleCommandArchive.dest_info)
}
inline ::TSP::Reference* PasteStyleCommandArchive::release_dest_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.dest_info_;
  _impl_.dest_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::unsafe_arena_release_dest_info() {
  // @@protoc_insertion_point(field_release:TSD.PasteStyleCommandArchive.dest_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.dest_info_;
  _impl_.dest_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::_internal_mutable_dest_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dest_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.dest_info_ = p;
  }
  return _impl_.dest_info_;
}
inline ::TSP::Reference* PasteStyleCommandArchive::mutable_dest_info() {
  ::TSP::Reference* _msg = _internal_mutable_dest_info();
  // @@protoc_insertion_point(field_mutable:TSD.PasteStyleCommandArchive.dest_info)
  return _msg;
}
inline void PasteStyleCommandArchive::set_allocated_dest_info(::TSP::Reference* dest_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dest_info_);
  }
  if (dest_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_info));
    if (message_arena != submessage_arena) {
      dest_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dest_info_ = dest_info;
  // @@protoc_insertion_point(field_set_allocated:TSD.PasteStyleCommandArchive.dest_info)
}

// optional .TSP.Reference shape_style = 3;
inline bool PasteStyleCommandArchive::_internal_has_shape_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_style_ != nullptr);
  return value;
}
inline bool PasteStyleCommandArchive::has_shape_style() const {
  return _internal_has_shape_style();
}
inline const ::TSP::Reference& PasteStyleCommandArchive::_internal_shape_style() const {
  const ::TSP::Reference* p = _impl_.shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteStyleCommandArchive::shape_style() const {
  // @@protoc_insertion_point(field_get:TSD.PasteStyleCommandArchive.shape_style)
  return _internal_shape_style();
}
inline void PasteStyleCommandArchive::unsafe_arena_set_allocated_shape_style(
    ::TSP::Reference* shape_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_style_);
  }
  _impl_.shape_style_ = shape_style;
  if (shape_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.PasteStyleCommandArchive.shape_style)
}
inline ::TSP::Reference* PasteStyleCommandArchive::release_shape_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.shape_style_;
  _impl_.shape_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::unsafe_arena_release_shape_style() {
  // @@protoc_insertion_point(field_release:TSD.PasteStyleCommandArchive.shape_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.shape_style_;
  _impl_.shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::_internal_mutable_shape_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.shape_style_ = p;
  }
  return _impl_.shape_style_;
}
inline ::TSP::Reference* PasteStyleCommandArchive::mutable_shape_style() {
  ::TSP::Reference* _msg = _internal_mutable_shape_style();
  // @@protoc_insertion_point(field_mutable:TSD.PasteStyleCommandArchive.shape_style)
  return _msg;
}
inline void PasteStyleCommandArchive::set_allocated_shape_style(::TSP::Reference* shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_style_);
  }
  if (shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_style));
    if (message_arena != submessage_arena) {
      shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.shape_style_ = shape_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.PasteStyleCommandArchive.shape_style)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSD::MovieSetValueCommandArchive_LoopOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::MovieSetValueCommandArchive_LoopOption>() {
  return ::TSD::MovieSetValueCommandArchive_LoopOption_descriptor();
}
template <> struct is_proto_enum< ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType>() {
  return ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor();
}
template <> struct is_proto_enum< ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType>() {
  return ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor();
}
template <> struct is_proto_enum< ::TSD::GuideCommandArchive_GuideCommandMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::GuideCommandArchive_GuideCommandMode>() {
  return ::TSD::GuideCommandArchive_GuideCommandMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSDCommandArchives_2eproto
