// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSTCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSTCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCEArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSTArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSTCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSTCommandArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSTCommandArchives_2eproto;
namespace TST {
class CommandAddQuickFilterRulesArchive;
struct CommandAddQuickFilterRulesArchiveDefaultTypeInternal;
extern CommandAddQuickFilterRulesArchiveDefaultTypeInternal _CommandAddQuickFilterRulesArchive_default_instance_;
class CommandApplyCellCommentArchive;
struct CommandApplyCellCommentArchiveDefaultTypeInternal;
extern CommandApplyCellCommentArchiveDefaultTypeInternal _CommandApplyCellCommentArchive_default_instance_;
class CommandApplyConditionalStyleSetArchive;
struct CommandApplyConditionalStyleSetArchiveDefaultTypeInternal;
extern CommandApplyConditionalStyleSetArchiveDefaultTypeInternal _CommandApplyConditionalStyleSetArchive_default_instance_;
class CommandApplyStrokePresetArchive;
struct CommandApplyStrokePresetArchiveDefaultTypeInternal;
extern CommandApplyStrokePresetArchiveDefaultTypeInternal _CommandApplyStrokePresetArchive_default_instance_;
class CommandApplyTableStylePresetArchive;
struct CommandApplyTableStylePresetArchiveDefaultTypeInternal;
extern CommandApplyTableStylePresetArchiveDefaultTypeInternal _CommandApplyTableStylePresetArchive_default_instance_;
class CommandApplyTableStylePresetArchive_StyleIndexTuple;
struct CommandApplyTableStylePresetArchive_StyleIndexTupleDefaultTypeInternal;
extern CommandApplyTableStylePresetArchive_StyleIndexTupleDefaultTypeInternal _CommandApplyTableStylePresetArchive_StyleIndexTuple_default_instance_;
class CommandApplyThemeChildForTableArchive;
struct CommandApplyThemeChildForTableArchiveDefaultTypeInternal;
extern CommandApplyThemeChildForTableArchiveDefaultTypeInternal _CommandApplyThemeChildForTableArchive_default_instance_;
class CommandApplyThemeToTableArchive;
struct CommandApplyThemeToTableArchiveDefaultTypeInternal;
extern CommandApplyThemeToTableArchiveDefaultTypeInternal _CommandApplyThemeToTableArchive_default_instance_;
class CommandChangeFreezeHeaderStateArchive;
struct CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal;
extern CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal _CommandChangeFreezeHeaderStateArchive_default_instance_;
class CommandCoerceMultipleCellsArchive;
struct CommandCoerceMultipleCellsArchiveDefaultTypeInternal;
extern CommandCoerceMultipleCellsArchiveDefaultTypeInternal _CommandCoerceMultipleCellsArchive_default_instance_;
class CommandDeleteCellContentsArchive;
struct CommandDeleteCellContentsArchiveDefaultTypeInternal;
extern CommandDeleteCellContentsArchiveDefaultTypeInternal _CommandDeleteCellContentsArchive_default_instance_;
class CommandDeleteCellsArchive;
struct CommandDeleteCellsArchiveDefaultTypeInternal;
extern CommandDeleteCellsArchiveDefaultTypeInternal _CommandDeleteCellsArchive_default_instance_;
class CommandDeleteFilterRulesArchive;
struct CommandDeleteFilterRulesArchiveDefaultTypeInternal;
extern CommandDeleteFilterRulesArchiveDefaultTypeInternal _CommandDeleteFilterRulesArchive_default_instance_;
class CommandDisableFilterRulesForColumnArchive;
struct CommandDisableFilterRulesForColumnArchiveDefaultTypeInternal;
extern CommandDisableFilterRulesForColumnArchiveDefaultTypeInternal _CommandDisableFilterRulesForColumnArchive_default_instance_;
class CommandFillCellsArchive;
struct CommandFillCellsArchiveDefaultTypeInternal;
extern CommandFillCellsArchiveDefaultTypeInternal _CommandFillCellsArchive_default_instance_;
class CommandFixStylesInHeadersOrFootersArchive;
struct CommandFixStylesInHeadersOrFootersArchiveDefaultTypeInternal;
extern CommandFixStylesInHeadersOrFootersArchiveDefaultTypeInternal _CommandFixStylesInHeadersOrFootersArchive_default_instance_;
class CommandFixWPStylesInRowsOrColumnsArchive;
struct CommandFixWPStylesInRowsOrColumnsArchiveDefaultTypeInternal;
extern CommandFixWPStylesInRowsOrColumnsArchiveDefaultTypeInternal _CommandFixWPStylesInRowsOrColumnsArchive_default_instance_;
class CommandHideShowArchive;
struct CommandHideShowArchiveDefaultTypeInternal;
extern CommandHideShowArchiveDefaultTypeInternal _CommandHideShowArchive_default_instance_;
class CommandInsertColumnsOrRowsArchive;
struct CommandInsertColumnsOrRowsArchiveDefaultTypeInternal;
extern CommandInsertColumnsOrRowsArchiveDefaultTypeInternal _CommandInsertColumnsOrRowsArchive_default_instance_;
class CommandInsertColumnsOrRowsArchive_StyleIndexPair;
struct CommandInsertColumnsOrRowsArchive_StyleIndexPairDefaultTypeInternal;
extern CommandInsertColumnsOrRowsArchive_StyleIndexPairDefaultTypeInternal _CommandInsertColumnsOrRowsArchive_StyleIndexPair_default_instance_;
class CommandMergeUnmergeArchive;
struct CommandMergeUnmergeArchiveDefaultTypeInternal;
extern CommandMergeUnmergeArchiveDefaultTypeInternal _CommandMergeUnmergeArchive_default_instance_;
class CommandModifyFilterRuleArchive;
struct CommandModifyFilterRuleArchiveDefaultTypeInternal;
extern CommandModifyFilterRuleArchiveDefaultTypeInternal _CommandModifyFilterRuleArchive_default_instance_;
class CommandMoveColumnsArchive;
struct CommandMoveColumnsArchiveDefaultTypeInternal;
extern CommandMoveColumnsArchiveDefaultTypeInternal _CommandMoveColumnsArchive_default_instance_;
class CommandMoveRowsArchive;
struct CommandMoveRowsArchiveDefaultTypeInternal;
extern CommandMoveRowsArchiveDefaultTypeInternal _CommandMoveRowsArchive_default_instance_;
class CommandMutateCellsArchive;
struct CommandMutateCellsArchiveDefaultTypeInternal;
extern CommandMutateCellsArchiveDefaultTypeInternal _CommandMutateCellsArchive_default_instance_;
class CommandNotifyForTransformingArchive;
struct CommandNotifyForTransformingArchiveDefaultTypeInternal;
extern CommandNotifyForTransformingArchiveDefaultTypeInternal _CommandNotifyForTransformingArchive_default_instance_;
class CommandPasteArchive;
struct CommandPasteArchiveDefaultTypeInternal;
extern CommandPasteArchiveDefaultTypeInternal _CommandPasteArchive_default_instance_;
class CommandPostflightSetCellArchive;
struct CommandPostflightSetCellArchiveDefaultTypeInternal;
extern CommandPostflightSetCellArchiveDefaultTypeInternal _CommandPostflightSetCellArchive_default_instance_;
class CommandRemoveColumnsOrRowsArchive;
struct CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal;
extern CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal _CommandRemoveColumnsOrRowsArchive_default_instance_;
class CommandReplaceAllTextArchive;
struct CommandReplaceAllTextArchiveDefaultTypeInternal;
extern CommandReplaceAllTextArchiveDefaultTypeInternal _CommandReplaceAllTextArchive_default_instance_;
class CommandReplaceTextArchive;
struct CommandReplaceTextArchiveDefaultTypeInternal;
extern CommandReplaceTextArchiveDefaultTypeInternal _CommandReplaceTextArchive_default_instance_;
class CommandResetFillPropertyToDefault;
struct CommandResetFillPropertyToDefaultDefaultTypeInternal;
extern CommandResetFillPropertyToDefaultDefaultTypeInternal _CommandResetFillPropertyToDefault_default_instance_;
class CommandResizeColumnOrRowArchive;
struct CommandResizeColumnOrRowArchiveDefaultTypeInternal;
extern CommandResizeColumnOrRowArchiveDefaultTypeInternal _CommandResizeColumnOrRowArchive_default_instance_;
class CommandRewriteConditionalStylesForCellMergeArchive;
struct CommandRewriteConditionalStylesForCellMergeArchiveDefaultTypeInternal;
extern CommandRewriteConditionalStylesForCellMergeArchiveDefaultTypeInternal _CommandRewriteConditionalStylesForCellMergeArchive_default_instance_;
class CommandRewriteConditionalStylesForRangeMoveArchive;
struct CommandRewriteConditionalStylesForRangeMoveArchiveDefaultTypeInternal;
extern CommandRewriteConditionalStylesForRangeMoveArchiveDefaultTypeInternal _CommandRewriteConditionalStylesForRangeMoveArchive_default_instance_;
class CommandRewriteConditionalStylesForSortArchive;
struct CommandRewriteConditionalStylesForSortArchiveDefaultTypeInternal;
extern CommandRewriteConditionalStylesForSortArchiveDefaultTypeInternal _CommandRewriteConditionalStylesForSortArchive_default_instance_;
class CommandRewriteConditionalStylesForTectonicShiftArchive;
struct CommandRewriteConditionalStylesForTectonicShiftArchiveDefaultTypeInternal;
extern CommandRewriteConditionalStylesForTectonicShiftArchiveDefaultTypeInternal _CommandRewriteConditionalStylesForTectonicShiftArchive_default_instance_;
class CommandRewriteFilterFormulasForSortArchive;
struct CommandRewriteFilterFormulasForSortArchiveDefaultTypeInternal;
extern CommandRewriteFilterFormulasForSortArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForSortArchive_default_instance_;
class CommandRewriteFilterFormulasForTableResizeArchive;
struct CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal;
extern CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForTableResizeArchive_default_instance_;
class CommandRewriteFilterFormulasForTectonicShiftArchive;
struct CommandRewriteFilterFormulasForTectonicShiftArchiveDefaultTypeInternal;
extern CommandRewriteFilterFormulasForTectonicShiftArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForTectonicShiftArchive_default_instance_;
class CommandRewriteFormulasForCellMergeArchive;
struct CommandRewriteFormulasForCellMergeArchiveDefaultTypeInternal;
extern CommandRewriteFormulasForCellMergeArchiveDefaultTypeInternal _CommandRewriteFormulasForCellMergeArchive_default_instance_;
class CommandRewriteFormulasForMoveArchive;
struct CommandRewriteFormulasForMoveArchiveDefaultTypeInternal;
extern CommandRewriteFormulasForMoveArchiveDefaultTypeInternal _CommandRewriteFormulasForMoveArchive_default_instance_;
class CommandRewriteFormulasForSortArchive;
struct CommandRewriteFormulasForSortArchiveDefaultTypeInternal;
extern CommandRewriteFormulasForSortArchiveDefaultTypeInternal _CommandRewriteFormulasForSortArchive_default_instance_;
class CommandRewriteFormulasForTectonicShiftArchive;
struct CommandRewriteFormulasForTectonicShiftArchiveDefaultTypeInternal;
extern CommandRewriteFormulasForTectonicShiftArchiveDefaultTypeInternal _CommandRewriteFormulasForTectonicShiftArchive_default_instance_;
class CommandSetAutomaticDurationUnitsArchive;
struct CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal;
extern CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal _CommandSetAutomaticDurationUnitsArchive_default_instance_;
class CommandSetAutomaticFormatArchive;
struct CommandSetAutomaticFormatArchiveDefaultTypeInternal;
extern CommandSetAutomaticFormatArchiveDefaultTypeInternal _CommandSetAutomaticFormatArchive_default_instance_;
class CommandSetBaseArchive;
struct CommandSetBaseArchiveDefaultTypeInternal;
extern CommandSetBaseArchiveDefaultTypeInternal _CommandSetBaseArchive_default_instance_;
class CommandSetBasePlacesArchive;
struct CommandSetBasePlacesArchiveDefaultTypeInternal;
extern CommandSetBasePlacesArchiveDefaultTypeInternal _CommandSetBasePlacesArchive_default_instance_;
class CommandSetBaseUseMinusSignArchive;
struct CommandSetBaseUseMinusSignArchiveDefaultTypeInternal;
extern CommandSetBaseUseMinusSignArchiveDefaultTypeInternal _CommandSetBaseUseMinusSignArchive_default_instance_;
class CommandSetCellArchive;
struct CommandSetCellArchiveDefaultTypeInternal;
extern CommandSetCellArchiveDefaultTypeInternal _CommandSetCellArchive_default_instance_;
class CommandSetControlCellsDisplayNumberFormatArchive;
struct CommandSetControlCellsDisplayNumberFormatArchiveDefaultTypeInternal;
extern CommandSetControlCellsDisplayNumberFormatArchiveDefaultTypeInternal _CommandSetControlCellsDisplayNumberFormatArchive_default_instance_;
class CommandSetControlIncrementArchive;
struct CommandSetControlIncrementArchiveDefaultTypeInternal;
extern CommandSetControlIncrementArchiveDefaultTypeInternal _CommandSetControlIncrementArchive_default_instance_;
class CommandSetControlMaximumArchive;
struct CommandSetControlMaximumArchiveDefaultTypeInternal;
extern CommandSetControlMaximumArchiveDefaultTypeInternal _CommandSetControlMaximumArchive_default_instance_;
class CommandSetControlMinimumArchive;
struct CommandSetControlMinimumArchiveDefaultTypeInternal;
extern CommandSetControlMinimumArchiveDefaultTypeInternal _CommandSetControlMinimumArchive_default_instance_;
class CommandSetCurrencyCodeArchive;
struct CommandSetCurrencyCodeArchiveDefaultTypeInternal;
extern CommandSetCurrencyCodeArchiveDefaultTypeInternal _CommandSetCurrencyCodeArchive_default_instance_;
class CommandSetDateTimeFormatArchive;
struct CommandSetDateTimeFormatArchiveDefaultTypeInternal;
extern CommandSetDateTimeFormatArchiveDefaultTypeInternal _CommandSetDateTimeFormatArchive_default_instance_;
class CommandSetExplicitFormatArchive;
struct CommandSetExplicitFormatArchiveDefaultTypeInternal;
extern CommandSetExplicitFormatArchiveDefaultTypeInternal _CommandSetExplicitFormatArchive_default_instance_;
class CommandSetFilterEnabledArchive;
struct CommandSetFilterEnabledArchiveDefaultTypeInternal;
extern CommandSetFilterEnabledArchiveDefaultTypeInternal _CommandSetFilterEnabledArchive_default_instance_;
class CommandSetFilterRuleEnabledArchive;
struct CommandSetFilterRuleEnabledArchiveDefaultTypeInternal;
extern CommandSetFilterRuleEnabledArchiveDefaultTypeInternal _CommandSetFilterRuleEnabledArchive_default_instance_;
class CommandSetFilterSetTypeArchive;
struct CommandSetFilterSetTypeArchiveDefaultTypeInternal;
extern CommandSetFilterSetTypeArchiveDefaultTypeInternal _CommandSetFilterSetTypeArchive_default_instance_;
class CommandSetFiltersEnabledArchive;
struct CommandSetFiltersEnabledArchiveDefaultTypeInternal;
extern CommandSetFiltersEnabledArchiveDefaultTypeInternal _CommandSetFiltersEnabledArchive_default_instance_;
class CommandSetFormulaTokenizationArchive;
struct CommandSetFormulaTokenizationArchiveDefaultTypeInternal;
extern CommandSetFormulaTokenizationArchiveDefaultTypeInternal _CommandSetFormulaTokenizationArchive_default_instance_;
class CommandSetFractionAccuracyArchive;
struct CommandSetFractionAccuracyArchiveDefaultTypeInternal;
extern CommandSetFractionAccuracyArchiveDefaultTypeInternal _CommandSetFractionAccuracyArchive_default_instance_;
class CommandSetMultipleCellsArchive;
struct CommandSetMultipleCellsArchiveDefaultTypeInternal;
extern CommandSetMultipleCellsArchiveDefaultTypeInternal _CommandSetMultipleCellsArchive_default_instance_;
class CommandSetMultipleCellsCustomArchive;
struct CommandSetMultipleCellsCustomArchiveDefaultTypeInternal;
extern CommandSetMultipleCellsCustomArchiveDefaultTypeInternal _CommandSetMultipleCellsCustomArchive_default_instance_;
class CommandSetMultipleCellsMultipleChoiceListArchive;
struct CommandSetMultipleCellsMultipleChoiceListArchiveDefaultTypeInternal;
extern CommandSetMultipleCellsMultipleChoiceListArchiveDefaultTypeInternal _CommandSetMultipleCellsMultipleChoiceListArchive_default_instance_;
class CommandSetMultipleChoiceListFormatForDeleteItemArchive;
struct CommandSetMultipleChoiceListFormatForDeleteItemArchiveDefaultTypeInternal;
extern CommandSetMultipleChoiceListFormatForDeleteItemArchiveDefaultTypeInternal _CommandSetMultipleChoiceListFormatForDeleteItemArchive_default_instance_;
class CommandSetMultipleChoiceListFormatForEditedItemArchive;
struct CommandSetMultipleChoiceListFormatForEditedItemArchiveDefaultTypeInternal;
extern CommandSetMultipleChoiceListFormatForEditedItemArchiveDefaultTypeInternal _CommandSetMultipleChoiceListFormatForEditedItemArchive_default_instance_;
class CommandSetMultipleChoiceListFormatForInitialValueArchive;
struct CommandSetMultipleChoiceListFormatForInitialValueArchiveDefaultTypeInternal;
extern CommandSetMultipleChoiceListFormatForInitialValueArchiveDefaultTypeInternal _CommandSetMultipleChoiceListFormatForInitialValueArchive_default_instance_;
class CommandSetMultipleChoiceListFormatForReorderItemArchive;
struct CommandSetMultipleChoiceListFormatForReorderItemArchiveDefaultTypeInternal;
extern CommandSetMultipleChoiceListFormatForReorderItemArchiveDefaultTypeInternal _CommandSetMultipleChoiceListFormatForReorderItemArchive_default_instance_;
class CommandSetNegativeNumberStyleArchive;
struct CommandSetNegativeNumberStyleArchiveDefaultTypeInternal;
extern CommandSetNegativeNumberStyleArchiveDefaultTypeInternal _CommandSetNegativeNumberStyleArchive_default_instance_;
class CommandSetNumberOfDecimalPlacesArchive;
struct CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal;
extern CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal _CommandSetNumberOfDecimalPlacesArchive_default_instance_;
class CommandSetNumberOfHeadersOrFootersArchive;
struct CommandSetNumberOfHeadersOrFootersArchiveDefaultTypeInternal;
extern CommandSetNumberOfHeadersOrFootersArchiveDefaultTypeInternal _CommandSetNumberOfHeadersOrFootersArchive_default_instance_;
class CommandSetRepeatingHeaderEnabledArchive;
struct CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal;
extern CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal _CommandSetRepeatingHeaderEnabledArchive_default_instance_;
class CommandSetShowThousandsSeparatorArchive;
struct CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal;
extern CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal _CommandSetShowThousandsSeparatorArchive_default_instance_;
class CommandSetSingleNumberFormatParameterArchive;
struct CommandSetSingleNumberFormatParameterArchiveDefaultTypeInternal;
extern CommandSetSingleNumberFormatParameterArchiveDefaultTypeInternal _CommandSetSingleNumberFormatParameterArchive_default_instance_;
class CommandSetStorageLanguageArchive;
struct CommandSetStorageLanguageArchiveDefaultTypeInternal;
extern CommandSetStorageLanguageArchiveDefaultTypeInternal _CommandSetStorageLanguageArchive_default_instance_;
class CommandSetStyleApplyClearsAllFlagArchive;
struct CommandSetStyleApplyClearsAllFlagArchiveDefaultTypeInternal;
extern CommandSetStyleApplyClearsAllFlagArchiveDefaultTypeInternal _CommandSetStyleApplyClearsAllFlagArchive_default_instance_;
class CommandSetStyleNetworkArchive;
struct CommandSetStyleNetworkArchiveDefaultTypeInternal;
extern CommandSetStyleNetworkArchiveDefaultTypeInternal _CommandSetStyleNetworkArchive_default_instance_;
class CommandSetTableFontNameArchive;
struct CommandSetTableFontNameArchiveDefaultTypeInternal;
extern CommandSetTableFontNameArchiveDefaultTypeInternal _CommandSetTableFontNameArchive_default_instance_;
class CommandSetTableFontSizeArchive;
struct CommandSetTableFontSizeArchiveDefaultTypeInternal;
extern CommandSetTableFontSizeArchiveDefaultTypeInternal _CommandSetTableFontSizeArchive_default_instance_;
class CommandSetTableNameArchive;
struct CommandSetTableNameArchiveDefaultTypeInternal;
extern CommandSetTableNameArchiveDefaultTypeInternal _CommandSetTableNameArchive_default_instance_;
class CommandSetTableNameEnabledArchive;
struct CommandSetTableNameEnabledArchiveDefaultTypeInternal;
extern CommandSetTableNameEnabledArchiveDefaultTypeInternal _CommandSetTableNameEnabledArchive_default_instance_;
class CommandSetTableNameHeightArchive;
struct CommandSetTableNameHeightArchiveDefaultTypeInternal;
extern CommandSetTableNameHeightArchiveDefaultTypeInternal _CommandSetTableNameHeightArchive_default_instance_;
class CommandSetTextStyleArchive;
struct CommandSetTextStyleArchiveDefaultTypeInternal;
extern CommandSetTextStyleArchiveDefaultTypeInternal _CommandSetTextStyleArchive_default_instance_;
class CommandSetUseAccountingStyleArchive;
struct CommandSetUseAccountingStyleArchiveDefaultTypeInternal;
extern CommandSetUseAccountingStyleArchiveDefaultTypeInternal _CommandSetUseAccountingStyleArchive_default_instance_;
class CommandSortArchive;
struct CommandSortArchiveDefaultTypeInternal;
extern CommandSortArchiveDefaultTypeInternal _CommandSortArchive_default_instance_;
class CommandStyleCellsArchive;
struct CommandStyleCellsArchiveDefaultTypeInternal;
extern CommandStyleCellsArchiveDefaultTypeInternal _CommandStyleCellsArchive_default_instance_;
class CommandStyleTableArchive;
struct CommandStyleTableArchiveDefaultTypeInternal;
extern CommandStyleTableArchiveDefaultTypeInternal _CommandStyleTableArchive_default_instance_;
class CommandTextPreflightInsertCellArchive;
struct CommandTextPreflightInsertCellArchiveDefaultTypeInternal;
extern CommandTextPreflightInsertCellArchiveDefaultTypeInternal _CommandTextPreflightInsertCellArchive_default_instance_;
class CommandToggleTextPropertyArchive;
struct CommandToggleTextPropertyArchiveDefaultTypeInternal;
extern CommandToggleTextPropertyArchiveDefaultTypeInternal _CommandToggleTextPropertyArchive_default_instance_;
class DisableTableNameSelectionBehaviorArchive;
struct DisableTableNameSelectionBehaviorArchiveDefaultTypeInternal;
extern DisableTableNameSelectionBehaviorArchiveDefaultTypeInternal _DisableTableNameSelectionBehaviorArchive_default_instance_;
class FormulaEditingCommandGroupArchive;
struct FormulaEditingCommandGroupArchiveDefaultTypeInternal;
extern FormulaEditingCommandGroupArchiveDefaultTypeInternal _FormulaEditingCommandGroupArchive_default_instance_;
class FormulaEditingCommandSelectionBehaviorArchive;
struct FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal _FormulaEditingCommandSelectionBehaviorArchive_default_instance_;
class TableCommandArchive;
struct TableCommandArchiveDefaultTypeInternal;
extern TableCommandArchiveDefaultTypeInternal _TableCommandArchive_default_instance_;
class TableCommandSelectionBehaviorArchive;
struct TableCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern TableCommandSelectionBehaviorArchiveDefaultTypeInternal _TableCommandSelectionBehaviorArchive_default_instance_;
class TableInfoGeometryCommandArchive;
struct TableInfoGeometryCommandArchiveDefaultTypeInternal;
extern TableInfoGeometryCommandArchiveDefaultTypeInternal _TableInfoGeometryCommandArchive_default_instance_;
class UndoRedoStateCommandSelectionBehaviorArchive;
struct UndoRedoStateCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern UndoRedoStateCommandSelectionBehaviorArchiveDefaultTypeInternal _UndoRedoStateCommandSelectionBehaviorArchive_default_instance_;
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> ::TST::CommandAddQuickFilterRulesArchive* Arena::CreateMaybeMessage<::TST::CommandAddQuickFilterRulesArchive>(Arena*);
template<> ::TST::CommandApplyCellCommentArchive* Arena::CreateMaybeMessage<::TST::CommandApplyCellCommentArchive>(Arena*);
template<> ::TST::CommandApplyConditionalStyleSetArchive* Arena::CreateMaybeMessage<::TST::CommandApplyConditionalStyleSetArchive>(Arena*);
template<> ::TST::CommandApplyStrokePresetArchive* Arena::CreateMaybeMessage<::TST::CommandApplyStrokePresetArchive>(Arena*);
template<> ::TST::CommandApplyTableStylePresetArchive* Arena::CreateMaybeMessage<::TST::CommandApplyTableStylePresetArchive>(Arena*);
template<> ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* Arena::CreateMaybeMessage<::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple>(Arena*);
template<> ::TST::CommandApplyThemeChildForTableArchive* Arena::CreateMaybeMessage<::TST::CommandApplyThemeChildForTableArchive>(Arena*);
template<> ::TST::CommandApplyThemeToTableArchive* Arena::CreateMaybeMessage<::TST::CommandApplyThemeToTableArchive>(Arena*);
template<> ::TST::CommandChangeFreezeHeaderStateArchive* Arena::CreateMaybeMessage<::TST::CommandChangeFreezeHeaderStateArchive>(Arena*);
template<> ::TST::CommandCoerceMultipleCellsArchive* Arena::CreateMaybeMessage<::TST::CommandCoerceMultipleCellsArchive>(Arena*);
template<> ::TST::CommandDeleteCellContentsArchive* Arena::CreateMaybeMessage<::TST::CommandDeleteCellContentsArchive>(Arena*);
template<> ::TST::CommandDeleteCellsArchive* Arena::CreateMaybeMessage<::TST::CommandDeleteCellsArchive>(Arena*);
template<> ::TST::CommandDeleteFilterRulesArchive* Arena::CreateMaybeMessage<::TST::CommandDeleteFilterRulesArchive>(Arena*);
template<> ::TST::CommandDisableFilterRulesForColumnArchive* Arena::CreateMaybeMessage<::TST::CommandDisableFilterRulesForColumnArchive>(Arena*);
template<> ::TST::CommandFillCellsArchive* Arena::CreateMaybeMessage<::TST::CommandFillCellsArchive>(Arena*);
template<> ::TST::CommandFixStylesInHeadersOrFootersArchive* Arena::CreateMaybeMessage<::TST::CommandFixStylesInHeadersOrFootersArchive>(Arena*);
template<> ::TST::CommandFixWPStylesInRowsOrColumnsArchive* Arena::CreateMaybeMessage<::TST::CommandFixWPStylesInRowsOrColumnsArchive>(Arena*);
template<> ::TST::CommandHideShowArchive* Arena::CreateMaybeMessage<::TST::CommandHideShowArchive>(Arena*);
template<> ::TST::CommandInsertColumnsOrRowsArchive* Arena::CreateMaybeMessage<::TST::CommandInsertColumnsOrRowsArchive>(Arena*);
template<> ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* Arena::CreateMaybeMessage<::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair>(Arena*);
template<> ::TST::CommandMergeUnmergeArchive* Arena::CreateMaybeMessage<::TST::CommandMergeUnmergeArchive>(Arena*);
template<> ::TST::CommandModifyFilterRuleArchive* Arena::CreateMaybeMessage<::TST::CommandModifyFilterRuleArchive>(Arena*);
template<> ::TST::CommandMoveColumnsArchive* Arena::CreateMaybeMessage<::TST::CommandMoveColumnsArchive>(Arena*);
template<> ::TST::CommandMoveRowsArchive* Arena::CreateMaybeMessage<::TST::CommandMoveRowsArchive>(Arena*);
template<> ::TST::CommandMutateCellsArchive* Arena::CreateMaybeMessage<::TST::CommandMutateCellsArchive>(Arena*);
template<> ::TST::CommandNotifyForTransformingArchive* Arena::CreateMaybeMessage<::TST::CommandNotifyForTransformingArchive>(Arena*);
template<> ::TST::CommandPasteArchive* Arena::CreateMaybeMessage<::TST::CommandPasteArchive>(Arena*);
template<> ::TST::CommandPostflightSetCellArchive* Arena::CreateMaybeMessage<::TST::CommandPostflightSetCellArchive>(Arena*);
template<> ::TST::CommandRemoveColumnsOrRowsArchive* Arena::CreateMaybeMessage<::TST::CommandRemoveColumnsOrRowsArchive>(Arena*);
template<> ::TST::CommandReplaceAllTextArchive* Arena::CreateMaybeMessage<::TST::CommandReplaceAllTextArchive>(Arena*);
template<> ::TST::CommandReplaceTextArchive* Arena::CreateMaybeMessage<::TST::CommandReplaceTextArchive>(Arena*);
template<> ::TST::CommandResetFillPropertyToDefault* Arena::CreateMaybeMessage<::TST::CommandResetFillPropertyToDefault>(Arena*);
template<> ::TST::CommandResizeColumnOrRowArchive* Arena::CreateMaybeMessage<::TST::CommandResizeColumnOrRowArchive>(Arena*);
template<> ::TST::CommandRewriteConditionalStylesForCellMergeArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteConditionalStylesForCellMergeArchive>(Arena*);
template<> ::TST::CommandRewriteConditionalStylesForRangeMoveArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteConditionalStylesForRangeMoveArchive>(Arena*);
template<> ::TST::CommandRewriteConditionalStylesForSortArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteConditionalStylesForSortArchive>(Arena*);
template<> ::TST::CommandRewriteConditionalStylesForTectonicShiftArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteConditionalStylesForTectonicShiftArchive>(Arena*);
template<> ::TST::CommandRewriteFilterFormulasForSortArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFilterFormulasForSortArchive>(Arena*);
template<> ::TST::CommandRewriteFilterFormulasForTableResizeArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFilterFormulasForTableResizeArchive>(Arena*);
template<> ::TST::CommandRewriteFilterFormulasForTectonicShiftArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFilterFormulasForTectonicShiftArchive>(Arena*);
template<> ::TST::CommandRewriteFormulasForCellMergeArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFormulasForCellMergeArchive>(Arena*);
template<> ::TST::CommandRewriteFormulasForMoveArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFormulasForMoveArchive>(Arena*);
template<> ::TST::CommandRewriteFormulasForSortArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFormulasForSortArchive>(Arena*);
template<> ::TST::CommandRewriteFormulasForTectonicShiftArchive* Arena::CreateMaybeMessage<::TST::CommandRewriteFormulasForTectonicShiftArchive>(Arena*);
template<> ::TST::CommandSetAutomaticDurationUnitsArchive* Arena::CreateMaybeMessage<::TST::CommandSetAutomaticDurationUnitsArchive>(Arena*);
template<> ::TST::CommandSetAutomaticFormatArchive* Arena::CreateMaybeMessage<::TST::CommandSetAutomaticFormatArchive>(Arena*);
template<> ::TST::CommandSetBaseArchive* Arena::CreateMaybeMessage<::TST::CommandSetBaseArchive>(Arena*);
template<> ::TST::CommandSetBasePlacesArchive* Arena::CreateMaybeMessage<::TST::CommandSetBasePlacesArchive>(Arena*);
template<> ::TST::CommandSetBaseUseMinusSignArchive* Arena::CreateMaybeMessage<::TST::CommandSetBaseUseMinusSignArchive>(Arena*);
template<> ::TST::CommandSetCellArchive* Arena::CreateMaybeMessage<::TST::CommandSetCellArchive>(Arena*);
template<> ::TST::CommandSetControlCellsDisplayNumberFormatArchive* Arena::CreateMaybeMessage<::TST::CommandSetControlCellsDisplayNumberFormatArchive>(Arena*);
template<> ::TST::CommandSetControlIncrementArchive* Arena::CreateMaybeMessage<::TST::CommandSetControlIncrementArchive>(Arena*);
template<> ::TST::CommandSetControlMaximumArchive* Arena::CreateMaybeMessage<::TST::CommandSetControlMaximumArchive>(Arena*);
template<> ::TST::CommandSetControlMinimumArchive* Arena::CreateMaybeMessage<::TST::CommandSetControlMinimumArchive>(Arena*);
template<> ::TST::CommandSetCurrencyCodeArchive* Arena::CreateMaybeMessage<::TST::CommandSetCurrencyCodeArchive>(Arena*);
template<> ::TST::CommandSetDateTimeFormatArchive* Arena::CreateMaybeMessage<::TST::CommandSetDateTimeFormatArchive>(Arena*);
template<> ::TST::CommandSetExplicitFormatArchive* Arena::CreateMaybeMessage<::TST::CommandSetExplicitFormatArchive>(Arena*);
template<> ::TST::CommandSetFilterEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetFilterEnabledArchive>(Arena*);
template<> ::TST::CommandSetFilterRuleEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetFilterRuleEnabledArchive>(Arena*);
template<> ::TST::CommandSetFilterSetTypeArchive* Arena::CreateMaybeMessage<::TST::CommandSetFilterSetTypeArchive>(Arena*);
template<> ::TST::CommandSetFiltersEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetFiltersEnabledArchive>(Arena*);
template<> ::TST::CommandSetFormulaTokenizationArchive* Arena::CreateMaybeMessage<::TST::CommandSetFormulaTokenizationArchive>(Arena*);
template<> ::TST::CommandSetFractionAccuracyArchive* Arena::CreateMaybeMessage<::TST::CommandSetFractionAccuracyArchive>(Arena*);
template<> ::TST::CommandSetMultipleCellsArchive* Arena::CreateMaybeMessage<::TST::CommandSetMultipleCellsArchive>(Arena*);
template<> ::TST::CommandSetMultipleCellsCustomArchive* Arena::CreateMaybeMessage<::TST::CommandSetMultipleCellsCustomArchive>(Arena*);
template<> ::TST::CommandSetMultipleCellsMultipleChoiceListArchive* Arena::CreateMaybeMessage<::TST::CommandSetMultipleCellsMultipleChoiceListArchive>(Arena*);
template<> ::TST::CommandSetMultipleChoiceListFormatForDeleteItemArchive* Arena::CreateMaybeMessage<::TST::CommandSetMultipleChoiceListFormatForDeleteItemArchive>(Arena*);
template<> ::TST::CommandSetMultipleChoiceListFormatForEditedItemArchive* Arena::CreateMaybeMessage<::TST::CommandSetMultipleChoiceListFormatForEditedItemArchive>(Arena*);
template<> ::TST::CommandSetMultipleChoiceListFormatForInitialValueArchive* Arena::CreateMaybeMessage<::TST::CommandSetMultipleChoiceListFormatForInitialValueArchive>(Arena*);
template<> ::TST::CommandSetMultipleChoiceListFormatForReorderItemArchive* Arena::CreateMaybeMessage<::TST::CommandSetMultipleChoiceListFormatForReorderItemArchive>(Arena*);
template<> ::TST::CommandSetNegativeNumberStyleArchive* Arena::CreateMaybeMessage<::TST::CommandSetNegativeNumberStyleArchive>(Arena*);
template<> ::TST::CommandSetNumberOfDecimalPlacesArchive* Arena::CreateMaybeMessage<::TST::CommandSetNumberOfDecimalPlacesArchive>(Arena*);
template<> ::TST::CommandSetNumberOfHeadersOrFootersArchive* Arena::CreateMaybeMessage<::TST::CommandSetNumberOfHeadersOrFootersArchive>(Arena*);
template<> ::TST::CommandSetRepeatingHeaderEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetRepeatingHeaderEnabledArchive>(Arena*);
template<> ::TST::CommandSetShowThousandsSeparatorArchive* Arena::CreateMaybeMessage<::TST::CommandSetShowThousandsSeparatorArchive>(Arena*);
template<> ::TST::CommandSetSingleNumberFormatParameterArchive* Arena::CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(Arena*);
template<> ::TST::CommandSetStorageLanguageArchive* Arena::CreateMaybeMessage<::TST::CommandSetStorageLanguageArchive>(Arena*);
template<> ::TST::CommandSetStyleApplyClearsAllFlagArchive* Arena::CreateMaybeMessage<::TST::CommandSetStyleApplyClearsAllFlagArchive>(Arena*);
template<> ::TST::CommandSetStyleNetworkArchive* Arena::CreateMaybeMessage<::TST::CommandSetStyleNetworkArchive>(Arena*);
template<> ::TST::CommandSetTableFontNameArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableFontNameArchive>(Arena*);
template<> ::TST::CommandSetTableFontSizeArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableFontSizeArchive>(Arena*);
template<> ::TST::CommandSetTableNameArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableNameArchive>(Arena*);
template<> ::TST::CommandSetTableNameEnabledArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableNameEnabledArchive>(Arena*);
template<> ::TST::CommandSetTableNameHeightArchive* Arena::CreateMaybeMessage<::TST::CommandSetTableNameHeightArchive>(Arena*);
template<> ::TST::CommandSetTextStyleArchive* Arena::CreateMaybeMessage<::TST::CommandSetTextStyleArchive>(Arena*);
template<> ::TST::CommandSetUseAccountingStyleArchive* Arena::CreateMaybeMessage<::TST::CommandSetUseAccountingStyleArchive>(Arena*);
template<> ::TST::CommandSortArchive* Arena::CreateMaybeMessage<::TST::CommandSortArchive>(Arena*);
template<> ::TST::CommandStyleCellsArchive* Arena::CreateMaybeMessage<::TST::CommandStyleCellsArchive>(Arena*);
template<> ::TST::CommandStyleTableArchive* Arena::CreateMaybeMessage<::TST::CommandStyleTableArchive>(Arena*);
template<> ::TST::CommandTextPreflightInsertCellArchive* Arena::CreateMaybeMessage<::TST::CommandTextPreflightInsertCellArchive>(Arena*);
template<> ::TST::CommandToggleTextPropertyArchive* Arena::CreateMaybeMessage<::TST::CommandToggleTextPropertyArchive>(Arena*);
template<> ::TST::DisableTableNameSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TST::DisableTableNameSelectionBehaviorArchive>(Arena*);
template<> ::TST::FormulaEditingCommandGroupArchive* Arena::CreateMaybeMessage<::TST::FormulaEditingCommandGroupArchive>(Arena*);
template<> ::TST::FormulaEditingCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TST::FormulaEditingCommandSelectionBehaviorArchive>(Arena*);
template<> ::TST::TableCommandArchive* Arena::CreateMaybeMessage<::TST::TableCommandArchive>(Arena*);
template<> ::TST::TableCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TST::TableCommandSelectionBehaviorArchive>(Arena*);
template<> ::TST::TableInfoGeometryCommandArchive* Arena::CreateMaybeMessage<::TST::TableInfoGeometryCommandArchive>(Arena*);
template<> ::TST::UndoRedoStateCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TST::UndoRedoStateCommandSelectionBehaviorArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TST {

enum CommandDirectionArchive : int {
  directionRow = 0,
  directionColumn = 1
};
bool CommandDirectionArchive_IsValid(int value);
constexpr CommandDirectionArchive CommandDirectionArchive_MIN = directionRow;
constexpr CommandDirectionArchive CommandDirectionArchive_MAX = directionColumn;
constexpr int CommandDirectionArchive_ARRAYSIZE = CommandDirectionArchive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandDirectionArchive_descriptor();
template<typename T>
inline const std::string& CommandDirectionArchive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandDirectionArchive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandDirectionArchive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandDirectionArchive_descriptor(), enum_t_value);
}
inline bool CommandDirectionArchive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandDirectionArchive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandDirectionArchive>(
    CommandDirectionArchive_descriptor(), name, value);
}
enum CommandRegionArchive : int {
  bodyRegion = 0,
  headerRowRegion = 1,
  headerColumnRegion = 2,
  footerRowRegion = 3
};
bool CommandRegionArchive_IsValid(int value);
constexpr CommandRegionArchive CommandRegionArchive_MIN = bodyRegion;
constexpr CommandRegionArchive CommandRegionArchive_MAX = footerRowRegion;
constexpr int CommandRegionArchive_ARRAYSIZE = CommandRegionArchive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandRegionArchive_descriptor();
template<typename T>
inline const std::string& CommandRegionArchive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandRegionArchive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandRegionArchive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandRegionArchive_descriptor(), enum_t_value);
}
inline bool CommandRegionArchive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandRegionArchive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandRegionArchive>(
    CommandRegionArchive_descriptor(), name, value);
}
// ===================================================================

class TableCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableCommandArchive) */ {
 public:
  inline TableCommandArchive() : TableCommandArchive(nullptr) {}
  ~TableCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR TableCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableCommandArchive(const TableCommandArchive& from);
  TableCommandArchive(TableCommandArchive&& from) noexcept
    : TableCommandArchive() {
    *this = ::std::move(from);
  }

  inline TableCommandArchive& operator=(const TableCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCommandArchive& operator=(TableCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TableCommandArchive*>(
               &_TableCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TableCommandArchive& a, TableCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableCommandArchive& from) {
    TableCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableCommandArchive";
  }
  protected:
  explicit TableCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandnameFieldNumber = 2,
    kTableInfoFieldNumber = 1,
    kSuperFieldNumber = 3,
    kEditingModeAtStartFieldNumber = 4,
  };
  // optional string commandname = 2;
  bool has_commandname() const;
  private:
  bool _internal_has_commandname() const;
  public:
  void clear_commandname();
  const std::string& commandname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commandname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commandname();
  PROTOBUF_NODISCARD std::string* release_commandname();
  void set_allocated_commandname(std::string* commandname);
  private:
  const std::string& _internal_commandname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commandname(const std::string& value);
  std::string* _internal_mutable_commandname();
  public:

  // required .TSP.Reference tableInfo = 1;
  bool has_tableinfo() const;
  private:
  bool _internal_has_tableinfo() const;
  public:
  void clear_tableinfo();
  const ::TSP::Reference& tableinfo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_tableinfo();
  ::TSP::Reference* mutable_tableinfo();
  void set_allocated_tableinfo(::TSP::Reference* tableinfo);
  private:
  const ::TSP::Reference& _internal_tableinfo() const;
  ::TSP::Reference* _internal_mutable_tableinfo();
  public:
  void unsafe_arena_set_allocated_tableinfo(
      ::TSP::Reference* tableinfo);
  ::TSP::Reference* unsafe_arena_release_tableinfo();

  // required .TSK.CommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional uint32 editing_mode_at_start = 4;
  bool has_editing_mode_at_start() const;
  private:
  bool _internal_has_editing_mode_at_start() const;
  public:
  void clear_editing_mode_at_start();
  uint32_t editing_mode_at_start() const;
  void set_editing_mode_at_start(uint32_t value);
  private:
  uint32_t _internal_editing_mode_at_start() const;
  void _internal_set_editing_mode_at_start(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandname_;
    ::TSP::Reference* tableinfo_;
    ::TSK::CommandArchive* super_;
    uint32_t editing_mode_at_start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandChangeFreezeHeaderStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandChangeFreezeHeaderStateArchive) */ {
 public:
  inline CommandChangeFreezeHeaderStateArchive() : CommandChangeFreezeHeaderStateArchive(nullptr) {}
  ~CommandChangeFreezeHeaderStateArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandChangeFreezeHeaderStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandChangeFreezeHeaderStateArchive(const CommandChangeFreezeHeaderStateArchive& from);
  CommandChangeFreezeHeaderStateArchive(CommandChangeFreezeHeaderStateArchive&& from) noexcept
    : CommandChangeFreezeHeaderStateArchive() {
    *this = ::std::move(from);
  }

  inline CommandChangeFreezeHeaderStateArchive& operator=(const CommandChangeFreezeHeaderStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandChangeFreezeHeaderStateArchive& operator=(CommandChangeFreezeHeaderStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandChangeFreezeHeaderStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandChangeFreezeHeaderStateArchive* internal_default_instance() {
    return reinterpret_cast<const CommandChangeFreezeHeaderStateArchive*>(
               &_CommandChangeFreezeHeaderStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandChangeFreezeHeaderStateArchive& a, CommandChangeFreezeHeaderStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandChangeFreezeHeaderStateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandChangeFreezeHeaderStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandChangeFreezeHeaderStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandChangeFreezeHeaderStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandChangeFreezeHeaderStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandChangeFreezeHeaderStateArchive& from) {
    CommandChangeFreezeHeaderStateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandChangeFreezeHeaderStateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandChangeFreezeHeaderStateArchive";
  }
  protected:
  explicit CommandChangeFreezeHeaderStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 3,
    kDirectionFieldNumber = 1,
    kNewFreezeStateFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CommandDirectionArchive direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::CommandDirectionArchive direction() const;
  void set_direction(::TST::CommandDirectionArchive value);
  private:
  ::TST::CommandDirectionArchive _internal_direction() const;
  void _internal_set_direction(::TST::CommandDirectionArchive value);
  public:

  // required bool new_freeze_state = 2;
  bool has_new_freeze_state() const;
  private:
  bool _internal_has_new_freeze_state() const;
  public:
  void clear_new_freeze_state();
  bool new_freeze_state() const;
  void set_new_freeze_state(bool value);
  private:
  bool _internal_new_freeze_state() const;
  void _internal_set_new_freeze_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandChangeFreezeHeaderStateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    int direction_;
    bool new_freeze_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandDeleteCellsArchive) */ {
 public:
  inline CommandDeleteCellsArchive() : CommandDeleteCellsArchive(nullptr) {}
  ~CommandDeleteCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteCellsArchive(const CommandDeleteCellsArchive& from);
  CommandDeleteCellsArchive(CommandDeleteCellsArchive&& from) noexcept
    : CommandDeleteCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteCellsArchive& operator=(const CommandDeleteCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteCellsArchive& operator=(CommandDeleteCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteCellsArchive*>(
               &_CommandDeleteCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandDeleteCellsArchive& a, CommandDeleteCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteCellsArchive& from) {
    CommandDeleteCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandDeleteCellsArchive";
  }
  protected:
  explicit CommandDeleteCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kSuperFieldNumber = 3,
    kRedoMapFieldNumber = 4,
    kInvalidateCommentsFieldNumber = 5,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellMapArchive redo_map = 4;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required bool invalidate_comments = 5;
  bool has_invalidate_comments() const;
  private:
  bool _internal_has_invalidate_comments() const;
  public:
  void clear_invalidate_comments();
  bool invalidate_comments() const;
  void set_invalidate_comments(bool value);
  private:
  bool _internal_invalidate_comments() const;
  void _internal_set_invalidate_comments(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandDeleteCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* redo_map_;
    bool invalidate_comments_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteCellContentsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandDeleteCellContentsArchive) */ {
 public:
  inline CommandDeleteCellContentsArchive() : CommandDeleteCellContentsArchive(nullptr) {}
  ~CommandDeleteCellContentsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteCellContentsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteCellContentsArchive(const CommandDeleteCellContentsArchive& from);
  CommandDeleteCellContentsArchive(CommandDeleteCellContentsArchive&& from) noexcept
    : CommandDeleteCellContentsArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteCellContentsArchive& operator=(const CommandDeleteCellContentsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteCellContentsArchive& operator=(CommandDeleteCellContentsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteCellContentsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteCellContentsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteCellContentsArchive*>(
               &_CommandDeleteCellContentsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandDeleteCellContentsArchive& a, CommandDeleteCellContentsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteCellContentsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteCellContentsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteCellContentsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteCellContentsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteCellContentsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteCellContentsArchive& from) {
    CommandDeleteCellContentsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteCellContentsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandDeleteCellContentsArchive";
  }
  protected:
  explicit CommandDeleteCellContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kSuperFieldNumber = 3,
    kRedoMapFieldNumber = 4,
    kInvalidateCommentsFieldNumber = 5,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellMapArchive redo_map = 4;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required bool invalidate_comments = 5;
  bool has_invalidate_comments() const;
  private:
  bool _internal_has_invalidate_comments() const;
  public:
  void clear_invalidate_comments();
  bool invalidate_comments() const;
  void set_invalidate_comments(bool value);
  private:
  bool _internal_invalidate_comments() const;
  void _internal_set_invalidate_comments(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandDeleteCellContentsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* redo_map_;
    bool invalidate_comments_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultipleCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetMultipleCellsArchive) */ {
 public:
  inline CommandSetMultipleCellsArchive() : CommandSetMultipleCellsArchive(nullptr) {}
  ~CommandSetMultipleCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultipleCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultipleCellsArchive(const CommandSetMultipleCellsArchive& from);
  CommandSetMultipleCellsArchive(CommandSetMultipleCellsArchive&& from) noexcept
    : CommandSetMultipleCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultipleCellsArchive& operator=(const CommandSetMultipleCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultipleCellsArchive& operator=(CommandSetMultipleCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultipleCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultipleCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultipleCellsArchive*>(
               &_CommandSetMultipleCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandSetMultipleCellsArchive& a, CommandSetMultipleCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultipleCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultipleCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultipleCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultipleCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultipleCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultipleCellsArchive& from) {
    CommandSetMultipleCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultipleCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetMultipleCellsArchive";
  }
  protected:
  explicit CommandSetMultipleCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kRedoMapFieldNumber = 3,
    kSourceCellFieldNumber = 4,
    kSuperFieldNumber = 7,
    kOnlyIfFormatDiffersFieldNumber = 6,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.CellMapArchive redo_map = 3;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // optional .TST.Cell source_cell = 4;
  bool has_source_cell() const;
  private:
  bool _internal_has_source_cell() const;
  public:
  void clear_source_cell();
  const ::TST::Cell& source_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_source_cell();
  ::TST::Cell* mutable_source_cell();
  void set_allocated_source_cell(::TST::Cell* source_cell);
  private:
  const ::TST::Cell& _internal_source_cell() const;
  ::TST::Cell* _internal_mutable_source_cell();
  public:
  void unsafe_arena_set_allocated_source_cell(
      ::TST::Cell* source_cell);
  ::TST::Cell* unsafe_arena_release_source_cell();

  // required .TST.TableCommandArchive super = 7;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional bool only_if_format_differs = 6;
  bool has_only_if_format_differs() const;
  private:
  bool _internal_has_only_if_format_differs() const;
  public:
  void clear_only_if_format_differs();
  bool only_if_format_differs() const;
  void set_only_if_format_differs(bool value);
  private:
  bool _internal_only_if_format_differs() const;
  void _internal_set_only_if_format_differs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetMultipleCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::CellMapArchive* redo_map_;
    ::TST::Cell* source_cell_;
    ::TST::TableCommandArchive* super_;
    bool only_if_format_differs_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultipleCellsCustomArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetMultipleCellsCustomArchive) */ {
 public:
  inline CommandSetMultipleCellsCustomArchive() : CommandSetMultipleCellsCustomArchive(nullptr) {}
  ~CommandSetMultipleCellsCustomArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultipleCellsCustomArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultipleCellsCustomArchive(const CommandSetMultipleCellsCustomArchive& from);
  CommandSetMultipleCellsCustomArchive(CommandSetMultipleCellsCustomArchive&& from) noexcept
    : CommandSetMultipleCellsCustomArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultipleCellsCustomArchive& operator=(const CommandSetMultipleCellsCustomArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultipleCellsCustomArchive& operator=(CommandSetMultipleCellsCustomArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultipleCellsCustomArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultipleCellsCustomArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultipleCellsCustomArchive*>(
               &_CommandSetMultipleCellsCustomArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandSetMultipleCellsCustomArchive& a, CommandSetMultipleCellsCustomArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultipleCellsCustomArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultipleCellsCustomArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultipleCellsCustomArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultipleCellsCustomArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultipleCellsCustomArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultipleCellsCustomArchive& from) {
    CommandSetMultipleCellsCustomArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultipleCellsCustomArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetMultipleCellsCustomArchive";
  }
  protected:
  explicit CommandSetMultipleCellsCustomArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kRedoMapFieldNumber = 3,
    kCellFormatFieldNumber = 4,
    kSuperFieldNumber = 7,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.CellMapArchive redo_map = 3;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required .TSK.FormatStructArchive cell_format = 4;
  bool has_cell_format() const;
  private:
  bool _internal_has_cell_format() const;
  public:
  void clear_cell_format();
  const ::TSK::FormatStructArchive& cell_format() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_cell_format();
  ::TSK::FormatStructArchive* mutable_cell_format();
  void set_allocated_cell_format(::TSK::FormatStructArchive* cell_format);
  private:
  const ::TSK::FormatStructArchive& _internal_cell_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_cell_format();
  public:
  void unsafe_arena_set_allocated_cell_format(
      ::TSK::FormatStructArchive* cell_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_cell_format();

  // required .TST.TableCommandArchive super = 7;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetMultipleCellsCustomArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::CellMapArchive* redo_map_;
    ::TSK::FormatStructArchive* cell_format_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultipleCellsMultipleChoiceListArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetMultipleCellsMultipleChoiceListArchive) */ {
 public:
  inline CommandSetMultipleCellsMultipleChoiceListArchive() : CommandSetMultipleCellsMultipleChoiceListArchive(nullptr) {}
  ~CommandSetMultipleCellsMultipleChoiceListArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultipleCellsMultipleChoiceListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultipleCellsMultipleChoiceListArchive(const CommandSetMultipleCellsMultipleChoiceListArchive& from);
  CommandSetMultipleCellsMultipleChoiceListArchive(CommandSetMultipleCellsMultipleChoiceListArchive&& from) noexcept
    : CommandSetMultipleCellsMultipleChoiceListArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultipleCellsMultipleChoiceListArchive& operator=(const CommandSetMultipleCellsMultipleChoiceListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultipleCellsMultipleChoiceListArchive& operator=(CommandSetMultipleCellsMultipleChoiceListArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultipleCellsMultipleChoiceListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultipleCellsMultipleChoiceListArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultipleCellsMultipleChoiceListArchive*>(
               &_CommandSetMultipleCellsMultipleChoiceListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandSetMultipleCellsMultipleChoiceListArchive& a, CommandSetMultipleCellsMultipleChoiceListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultipleCellsMultipleChoiceListArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultipleCellsMultipleChoiceListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultipleCellsMultipleChoiceListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultipleCellsMultipleChoiceListArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultipleCellsMultipleChoiceListArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultipleCellsMultipleChoiceListArchive& from) {
    CommandSetMultipleCellsMultipleChoiceListArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultipleCellsMultipleChoiceListArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetMultipleCellsMultipleChoiceListArchive";
  }
  protected:
  explicit CommandSetMultipleCellsMultipleChoiceListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kRedoMapFieldNumber = 3,
    kSuperFieldNumber = 5,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.CellMapArchive redo_map = 3;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required .TST.TableCommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetMultipleCellsMultipleChoiceListArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::CellMapArchive* redo_map_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandCoerceMultipleCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandCoerceMultipleCellsArchive) */ {
 public:
  inline CommandCoerceMultipleCellsArchive() : CommandCoerceMultipleCellsArchive(nullptr) {}
  ~CommandCoerceMultipleCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandCoerceMultipleCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandCoerceMultipleCellsArchive(const CommandCoerceMultipleCellsArchive& from);
  CommandCoerceMultipleCellsArchive(CommandCoerceMultipleCellsArchive&& from) noexcept
    : CommandCoerceMultipleCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandCoerceMultipleCellsArchive& operator=(const CommandCoerceMultipleCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandCoerceMultipleCellsArchive& operator=(CommandCoerceMultipleCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandCoerceMultipleCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandCoerceMultipleCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandCoerceMultipleCellsArchive*>(
               &_CommandCoerceMultipleCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandCoerceMultipleCellsArchive& a, CommandCoerceMultipleCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandCoerceMultipleCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandCoerceMultipleCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandCoerceMultipleCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandCoerceMultipleCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandCoerceMultipleCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandCoerceMultipleCellsArchive& from) {
    CommandCoerceMultipleCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandCoerceMultipleCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandCoerceMultipleCellsArchive";
  }
  protected:
  explicit CommandCoerceMultipleCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kRedoMapFieldNumber = 3,
    kSuperFieldNumber = 6,
    kDesiredFormatFieldNumber = 4,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.CellMapArchive redo_map = 3;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required int32 desired_format = 4;
  bool has_desired_format() const;
  private:
  bool _internal_has_desired_format() const;
  public:
  void clear_desired_format();
  int32_t desired_format() const;
  void set_desired_format(int32_t value);
  private:
  int32_t _internal_desired_format() const;
  void _internal_set_desired_format(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandCoerceMultipleCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::CellMapArchive* redo_map_;
    ::TST::TableCommandArchive* super_;
    int32_t desired_format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetControlCellsDisplayNumberFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetControlCellsDisplayNumberFormatArchive) */ {
 public:
  inline CommandSetControlCellsDisplayNumberFormatArchive() : CommandSetControlCellsDisplayNumberFormatArchive(nullptr) {}
  ~CommandSetControlCellsDisplayNumberFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetControlCellsDisplayNumberFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetControlCellsDisplayNumberFormatArchive(const CommandSetControlCellsDisplayNumberFormatArchive& from);
  CommandSetControlCellsDisplayNumberFormatArchive(CommandSetControlCellsDisplayNumberFormatArchive&& from) noexcept
    : CommandSetControlCellsDisplayNumberFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetControlCellsDisplayNumberFormatArchive& operator=(const CommandSetControlCellsDisplayNumberFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetControlCellsDisplayNumberFormatArchive& operator=(CommandSetControlCellsDisplayNumberFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetControlCellsDisplayNumberFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetControlCellsDisplayNumberFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetControlCellsDisplayNumberFormatArchive*>(
               &_CommandSetControlCellsDisplayNumberFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommandSetControlCellsDisplayNumberFormatArchive& a, CommandSetControlCellsDisplayNumberFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetControlCellsDisplayNumberFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetControlCellsDisplayNumberFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetControlCellsDisplayNumberFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetControlCellsDisplayNumberFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetControlCellsDisplayNumberFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetControlCellsDisplayNumberFormatArchive& from) {
    CommandSetControlCellsDisplayNumberFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetControlCellsDisplayNumberFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetControlCellsDisplayNumberFormatArchive";
  }
  protected:
  explicit CommandSetControlCellsDisplayNumberFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kRedoMapFieldNumber = 3,
    kSuperFieldNumber = 6,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.CellMapArchive redo_map = 3;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetControlCellsDisplayNumberFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::CellMapArchive* redo_map_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetAutomaticFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetAutomaticFormatArchive) */ {
 public:
  inline CommandSetAutomaticFormatArchive() : CommandSetAutomaticFormatArchive(nullptr) {}
  ~CommandSetAutomaticFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetAutomaticFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetAutomaticFormatArchive(const CommandSetAutomaticFormatArchive& from);
  CommandSetAutomaticFormatArchive(CommandSetAutomaticFormatArchive&& from) noexcept
    : CommandSetAutomaticFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetAutomaticFormatArchive& operator=(const CommandSetAutomaticFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetAutomaticFormatArchive& operator=(CommandSetAutomaticFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetAutomaticFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetAutomaticFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetAutomaticFormatArchive*>(
               &_CommandSetAutomaticFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandSetAutomaticFormatArchive& a, CommandSetAutomaticFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetAutomaticFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetAutomaticFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetAutomaticFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetAutomaticFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetAutomaticFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetAutomaticFormatArchive& from) {
    CommandSetAutomaticFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetAutomaticFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetAutomaticFormatArchive";
  }
  protected:
  explicit CommandSetAutomaticFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kRedoMapFieldNumber = 3,
    kSuperFieldNumber = 6,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.CellMapArchive redo_map = 3;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetAutomaticFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::CellMapArchive* redo_map_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetAutomaticDurationUnitsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetAutomaticDurationUnitsArchive) */ {
 public:
  inline CommandSetAutomaticDurationUnitsArchive() : CommandSetAutomaticDurationUnitsArchive(nullptr) {}
  ~CommandSetAutomaticDurationUnitsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetAutomaticDurationUnitsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetAutomaticDurationUnitsArchive(const CommandSetAutomaticDurationUnitsArchive& from);
  CommandSetAutomaticDurationUnitsArchive(CommandSetAutomaticDurationUnitsArchive&& from) noexcept
    : CommandSetAutomaticDurationUnitsArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetAutomaticDurationUnitsArchive& operator=(const CommandSetAutomaticDurationUnitsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetAutomaticDurationUnitsArchive& operator=(CommandSetAutomaticDurationUnitsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetAutomaticDurationUnitsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetAutomaticDurationUnitsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetAutomaticDurationUnitsArchive*>(
               &_CommandSetAutomaticDurationUnitsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandSetAutomaticDurationUnitsArchive& a, CommandSetAutomaticDurationUnitsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetAutomaticDurationUnitsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetAutomaticDurationUnitsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetAutomaticDurationUnitsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetAutomaticDurationUnitsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetAutomaticDurationUnitsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetAutomaticDurationUnitsArchive& from) {
    CommandSetAutomaticDurationUnitsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetAutomaticDurationUnitsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetAutomaticDurationUnitsArchive";
  }
  protected:
  explicit CommandSetAutomaticDurationUnitsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kUndoMapFieldNumber = 2,
    kRedoMapFieldNumber = 3,
    kSuperFieldNumber = 6,
    kAutomaticUnitsFieldNumber = 4,
  };
  // required .TST.SelectionArchive selection = 1;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_map = 2;
  bool has_undo_map() const;
  private:
  bool _internal_has_undo_map() const;
  public:
  void clear_undo_map();
  const ::TST::CellMapArchive& undo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_map();
  ::TST::CellMapArchive* mutable_undo_map();
  void set_allocated_undo_map(::TST::CellMapArchive* undo_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_map();
  public:
  void unsafe_arena_set_allocated_undo_map(
      ::TST::CellMapArchive* undo_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_map();

  // required .TST.CellMapArchive redo_map = 3;
  bool has_redo_map() const;
  private:
  bool _internal_has_redo_map() const;
  public:
  void clear_redo_map();
  const ::TST::CellMapArchive& redo_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_map();
  ::TST::CellMapArchive* mutable_redo_map();
  void set_allocated_redo_map(::TST::CellMapArchive* redo_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_map();
  public:
  void unsafe_arena_set_allocated_redo_map(
      ::TST::CellMapArchive* redo_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_map();

  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional bool automatic_units = 4;
  bool has_automatic_units() const;
  private:
  bool _internal_has_automatic_units() const;
  public:
  void clear_automatic_units();
  bool automatic_units() const;
  void set_automatic_units(bool value);
  private:
  bool _internal_automatic_units() const;
  void _internal_set_automatic_units(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetAutomaticDurationUnitsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_map_;
    ::TST::CellMapArchive* redo_map_;
    ::TST::TableCommandArchive* super_;
    bool automatic_units_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInsertColumnsOrRowsArchive_StyleIndexPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair) */ {
 public:
  inline CommandInsertColumnsOrRowsArchive_StyleIndexPair() : CommandInsertColumnsOrRowsArchive_StyleIndexPair(nullptr) {}
  ~CommandInsertColumnsOrRowsArchive_StyleIndexPair() override;
  explicit PROTOBUF_CONSTEXPR CommandInsertColumnsOrRowsArchive_StyleIndexPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInsertColumnsOrRowsArchive_StyleIndexPair(const CommandInsertColumnsOrRowsArchive_StyleIndexPair& from);
  CommandInsertColumnsOrRowsArchive_StyleIndexPair(CommandInsertColumnsOrRowsArchive_StyleIndexPair&& from) noexcept
    : CommandInsertColumnsOrRowsArchive_StyleIndexPair() {
    *this = ::std::move(from);
  }

  inline CommandInsertColumnsOrRowsArchive_StyleIndexPair& operator=(const CommandInsertColumnsOrRowsArchive_StyleIndexPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInsertColumnsOrRowsArchive_StyleIndexPair& operator=(CommandInsertColumnsOrRowsArchive_StyleIndexPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInsertColumnsOrRowsArchive_StyleIndexPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInsertColumnsOrRowsArchive_StyleIndexPair* internal_default_instance() {
    return reinterpret_cast<const CommandInsertColumnsOrRowsArchive_StyleIndexPair*>(
               &_CommandInsertColumnsOrRowsArchive_StyleIndexPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandInsertColumnsOrRowsArchive_StyleIndexPair& a, CommandInsertColumnsOrRowsArchive_StyleIndexPair& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInsertColumnsOrRowsArchive_StyleIndexPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInsertColumnsOrRowsArchive_StyleIndexPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandInsertColumnsOrRowsArchive_StyleIndexPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandInsertColumnsOrRowsArchive_StyleIndexPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInsertColumnsOrRowsArchive_StyleIndexPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandInsertColumnsOrRowsArchive_StyleIndexPair& from) {
    CommandInsertColumnsOrRowsArchive_StyleIndexPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInsertColumnsOrRowsArchive_StyleIndexPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair";
  }
  protected:
  explicit CommandInsertColumnsOrRowsArchive_StyleIndexPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // required .TSP.Reference style = 1;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* style_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandInsertColumnsOrRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandInsertColumnsOrRowsArchive) */ {
 public:
  inline CommandInsertColumnsOrRowsArchive() : CommandInsertColumnsOrRowsArchive(nullptr) {}
  ~CommandInsertColumnsOrRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandInsertColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInsertColumnsOrRowsArchive(const CommandInsertColumnsOrRowsArchive& from);
  CommandInsertColumnsOrRowsArchive(CommandInsertColumnsOrRowsArchive&& from) noexcept
    : CommandInsertColumnsOrRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandInsertColumnsOrRowsArchive& operator=(const CommandInsertColumnsOrRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInsertColumnsOrRowsArchive& operator=(CommandInsertColumnsOrRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInsertColumnsOrRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInsertColumnsOrRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandInsertColumnsOrRowsArchive*>(
               &_CommandInsertColumnsOrRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommandInsertColumnsOrRowsArchive& a, CommandInsertColumnsOrRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInsertColumnsOrRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInsertColumnsOrRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandInsertColumnsOrRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandInsertColumnsOrRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInsertColumnsOrRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandInsertColumnsOrRowsArchive& from) {
    CommandInsertColumnsOrRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInsertColumnsOrRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandInsertColumnsOrRowsArchive";
  }
  protected:
  explicit CommandInsertColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandInsertColumnsOrRowsArchive_StyleIndexPair StyleIndexPair;

  // accessors -------------------------------------------------------

  enum : int {
    kCellStyleIndexPairsFieldNumber = 21,
    kTextStyleIndexPairsFieldNumber = 22,
    kSizesFieldNumber = 23,
    kRowColumnStyleFieldNumber = 8,
    kCellStyleRedoFieldNumber = 9,
    kSuperFieldNumber = 10,
    kFormulaRewriteCommandFieldNumber = 15,
    kDirectionFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCountFieldNumber = 3,
    kSizeFieldNumber = 4,
    kHeaderCountFieldNumber = 11,
    kHeadersAddedFieldNumber = 12,
    kFooterCountFieldNumber = 13,
    kFootersAddedFieldNumber = 14,
    kBeforeFieldNumber = 5,
    kAllowHorizontalAutosizeFieldNumber = 18,
    kInheritStylesFieldNumber = 19,
    kInheritFormatsFieldNumber = 20,
    kWidthFactorFieldNumber = 16,
    kHeightFactorFieldNumber = 17,
    kInheritFormulasFieldNumber = 24,
  };
  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair cell_style_index_pairs = 21;
  int cell_style_index_pairs_size() const;
  private:
  int _internal_cell_style_index_pairs_size() const;
  public:
  void clear_cell_style_index_pairs();
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* mutable_cell_style_index_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >*
      mutable_cell_style_index_pairs();
  private:
  const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& _internal_cell_style_index_pairs(int index) const;
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* _internal_add_cell_style_index_pairs();
  public:
  const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& cell_style_index_pairs(int index) const;
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* add_cell_style_index_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >&
      cell_style_index_pairs() const;

  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair text_style_index_pairs = 22;
  int text_style_index_pairs_size() const;
  private:
  int _internal_text_style_index_pairs_size() const;
  public:
  void clear_text_style_index_pairs();
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* mutable_text_style_index_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >*
      mutable_text_style_index_pairs();
  private:
  const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& _internal_text_style_index_pairs(int index) const;
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* _internal_add_text_style_index_pairs();
  public:
  const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& text_style_index_pairs(int index) const;
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* add_text_style_index_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >&
      text_style_index_pairs() const;

  // repeated double sizes = 23;
  int sizes_size() const;
  private:
  int _internal_sizes_size() const;
  public:
  void clear_sizes();
  private:
  double _internal_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_sizes() const;
  void _internal_add_sizes(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_sizes();
  public:
  double sizes(int index) const;
  void set_sizes(int index, double value);
  void add_sizes(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_sizes();

  // optional .TSP.Reference row_column_style = 8;
  bool has_row_column_style() const;
  private:
  bool _internal_has_row_column_style() const;
  public:
  void clear_row_column_style();
  const ::TSP::Reference& row_column_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_row_column_style();
  ::TSP::Reference* mutable_row_column_style();
  void set_allocated_row_column_style(::TSP::Reference* row_column_style);
  private:
  const ::TSP::Reference& _internal_row_column_style() const;
  ::TSP::Reference* _internal_mutable_row_column_style();
  public:
  void unsafe_arena_set_allocated_row_column_style(
      ::TSP::Reference* row_column_style);
  ::TSP::Reference* unsafe_arena_release_row_column_style();

  // optional .TST.CellMapArchive cell_style_redo = 9;
  bool has_cell_style_redo() const;
  private:
  bool _internal_has_cell_style_redo() const;
  public:
  void clear_cell_style_redo();
  const ::TST::CellMapArchive& cell_style_redo() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_cell_style_redo();
  ::TST::CellMapArchive* mutable_cell_style_redo();
  void set_allocated_cell_style_redo(::TST::CellMapArchive* cell_style_redo);
  private:
  const ::TST::CellMapArchive& _internal_cell_style_redo() const;
  ::TST::CellMapArchive* _internal_mutable_cell_style_redo();
  public:
  void unsafe_arena_set_allocated_cell_style_redo(
      ::TST::CellMapArchive* cell_style_redo);
  ::TST::CellMapArchive* unsafe_arena_release_cell_style_redo();

  // required .TST.TableCommandArchive super = 10;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference formula_rewrite_command = 15;
  bool has_formula_rewrite_command() const;
  private:
  bool _internal_has_formula_rewrite_command() const;
  public:
  void clear_formula_rewrite_command();
  const ::TSP::Reference& formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command();
  ::TSP::Reference* mutable_formula_rewrite_command();
  void set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command(
      ::TSP::Reference* formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command();

  // required .TST.CommandDirectionArchive direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::CommandDirectionArchive direction() const;
  void set_direction(::TST::CommandDirectionArchive value);
  private:
  ::TST::CommandDirectionArchive _internal_direction() const;
  void _internal_set_direction(::TST::CommandDirectionArchive value);
  public:

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // required uint32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // required float size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // required uint32 header_count = 11;
  bool has_header_count() const;
  private:
  bool _internal_has_header_count() const;
  public:
  void clear_header_count();
  uint32_t header_count() const;
  void set_header_count(uint32_t value);
  private:
  uint32_t _internal_header_count() const;
  void _internal_set_header_count(uint32_t value);
  public:

  // required uint32 headers_added = 12;
  bool has_headers_added() const;
  private:
  bool _internal_has_headers_added() const;
  public:
  void clear_headers_added();
  uint32_t headers_added() const;
  void set_headers_added(uint32_t value);
  private:
  uint32_t _internal_headers_added() const;
  void _internal_set_headers_added(uint32_t value);
  public:

  // required uint32 footer_count = 13;
  bool has_footer_count() const;
  private:
  bool _internal_has_footer_count() const;
  public:
  void clear_footer_count();
  uint32_t footer_count() const;
  void set_footer_count(uint32_t value);
  private:
  uint32_t _internal_footer_count() const;
  void _internal_set_footer_count(uint32_t value);
  public:

  // required uint32 footers_added = 14;
  bool has_footers_added() const;
  private:
  bool _internal_has_footers_added() const;
  public:
  void clear_footers_added();
  uint32_t footers_added() const;
  void set_footers_added(uint32_t value);
  private:
  uint32_t _internal_footers_added() const;
  void _internal_set_footers_added(uint32_t value);
  public:

  // required bool before = 5;
  bool has_before() const;
  private:
  bool _internal_has_before() const;
  public:
  void clear_before();
  bool before() const;
  void set_before(bool value);
  private:
  bool _internal_before() const;
  void _internal_set_before(bool value);
  public:

  // optional bool allow_horizontal_autosize = 18;
  bool has_allow_horizontal_autosize() const;
  private:
  bool _internal_has_allow_horizontal_autosize() const;
  public:
  void clear_allow_horizontal_autosize();
  bool allow_horizontal_autosize() const;
  void set_allow_horizontal_autosize(bool value);
  private:
  bool _internal_allow_horizontal_autosize() const;
  void _internal_set_allow_horizontal_autosize(bool value);
  public:

  // optional bool inherit_styles = 19;
  bool has_inherit_styles() const;
  private:
  bool _internal_has_inherit_styles() const;
  public:
  void clear_inherit_styles();
  bool inherit_styles() const;
  void set_inherit_styles(bool value);
  private:
  bool _internal_inherit_styles() const;
  void _internal_set_inherit_styles(bool value);
  public:

  // optional bool inherit_formats = 20;
  bool has_inherit_formats() const;
  private:
  bool _internal_has_inherit_formats() const;
  public:
  void clear_inherit_formats();
  bool inherit_formats() const;
  void set_inherit_formats(bool value);
  private:
  bool _internal_inherit_formats() const;
  void _internal_set_inherit_formats(bool value);
  public:

  // required float width_factor = 16;
  bool has_width_factor() const;
  private:
  bool _internal_has_width_factor() const;
  public:
  void clear_width_factor();
  float width_factor() const;
  void set_width_factor(float value);
  private:
  float _internal_width_factor() const;
  void _internal_set_width_factor(float value);
  public:

  // required float height_factor = 17;
  bool has_height_factor() const;
  private:
  bool _internal_has_height_factor() const;
  public:
  void clear_height_factor();
  float height_factor() const;
  void set_height_factor(float value);
  private:
  float _internal_height_factor() const;
  void _internal_set_height_factor(float value);
  public:

  // optional bool inherit_formulas = 24;
  bool has_inherit_formulas() const;
  private:
  bool _internal_has_inherit_formulas() const;
  public:
  void clear_inherit_formulas();
  bool inherit_formulas() const;
  void set_inherit_formulas(bool value);
  private:
  bool _internal_inherit_formulas() const;
  void _internal_set_inherit_formulas(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandInsertColumnsOrRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair > cell_style_index_pairs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair > text_style_index_pairs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > sizes_;
    ::TSP::Reference* row_column_style_;
    ::TST::CellMapArchive* cell_style_redo_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* formula_rewrite_command_;
    int direction_;
    uint32_t index_;
    uint32_t count_;
    float size_;
    uint32_t header_count_;
    uint32_t headers_added_;
    uint32_t footer_count_;
    uint32_t footers_added_;
    bool before_;
    bool allow_horizontal_autosize_;
    bool inherit_styles_;
    bool inherit_formats_;
    float width_factor_;
    float height_factor_;
    bool inherit_formulas_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPasteArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandPasteArchive) */ {
 public:
  inline CommandPasteArchive() : CommandPasteArchive(nullptr) {}
  ~CommandPasteArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPasteArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPasteArchive(const CommandPasteArchive& from);
  CommandPasteArchive(CommandPasteArchive&& from) noexcept
    : CommandPasteArchive() {
    *this = ::std::move(from);
  }

  inline CommandPasteArchive& operator=(const CommandPasteArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPasteArchive& operator=(CommandPasteArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPasteArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPasteArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPasteArchive*>(
               &_CommandPasteArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommandPasteArchive& a, CommandPasteArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPasteArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPasteArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPasteArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPasteArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPasteArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPasteArchive& from) {
    CommandPasteArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPasteArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandPasteArchive";
  }
  protected:
  explicit CommandPasteArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaRewriteCommandsFieldNumber = 15,
    kUserSelectionFieldNumber = 1,
    kFinalSelectionFieldNumber = 2,
    kUndoCellMapFieldNumber = 3,
    kRedoCellMapFieldNumber = 4,
    kCommandUndoFieldNumber = 6,
    kSuperFieldNumber = 11,
    kInvalidateCommentsFieldNumber = 7,
  };
  // repeated .TSP.Reference formula_rewrite_commands = 15;
  int formula_rewrite_commands_size() const;
  private:
  int _internal_formula_rewrite_commands_size() const;
  public:
  void clear_formula_rewrite_commands();
  ::TSP::Reference* mutable_formula_rewrite_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_formula_rewrite_commands();
  private:
  const ::TSP::Reference& _internal_formula_rewrite_commands(int index) const;
  ::TSP::Reference* _internal_add_formula_rewrite_commands();
  public:
  const ::TSP::Reference& formula_rewrite_commands(int index) const;
  ::TSP::Reference* add_formula_rewrite_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      formula_rewrite_commands() const;

  // required .TST.SelectionArchive user_selection = 1;
  bool has_user_selection() const;
  private:
  bool _internal_has_user_selection() const;
  public:
  void clear_user_selection();
  const ::TST::SelectionArchive& user_selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_user_selection();
  ::TST::SelectionArchive* mutable_user_selection();
  void set_allocated_user_selection(::TST::SelectionArchive* user_selection);
  private:
  const ::TST::SelectionArchive& _internal_user_selection() const;
  ::TST::SelectionArchive* _internal_mutable_user_selection();
  public:
  void unsafe_arena_set_allocated_user_selection(
      ::TST::SelectionArchive* user_selection);
  ::TST::SelectionArchive* unsafe_arena_release_user_selection();

  // required .TST.SelectionArchive final_selection = 2;
  bool has_final_selection() const;
  private:
  bool _internal_has_final_selection() const;
  public:
  void clear_final_selection();
  const ::TST::SelectionArchive& final_selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_final_selection();
  ::TST::SelectionArchive* mutable_final_selection();
  void set_allocated_final_selection(::TST::SelectionArchive* final_selection);
  private:
  const ::TST::SelectionArchive& _internal_final_selection() const;
  ::TST::SelectionArchive* _internal_mutable_final_selection();
  public:
  void unsafe_arena_set_allocated_final_selection(
      ::TST::SelectionArchive* final_selection);
  ::TST::SelectionArchive* unsafe_arena_release_final_selection();

  // required .TST.CellMapArchive undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference command_undo = 6;
  bool has_command_undo() const;
  private:
  bool _internal_has_command_undo() const;
  public:
  void clear_command_undo();
  const ::TSP::Reference& command_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_command_undo();
  ::TSP::Reference* mutable_command_undo();
  void set_allocated_command_undo(::TSP::Reference* command_undo);
  private:
  const ::TSP::Reference& _internal_command_undo() const;
  ::TSP::Reference* _internal_mutable_command_undo();
  public:
  void unsafe_arena_set_allocated_command_undo(
      ::TSP::Reference* command_undo);
  ::TSP::Reference* unsafe_arena_release_command_undo();

  // required .TST.TableCommandArchive super = 11;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool invalidate_comments = 7;
  bool has_invalidate_comments() const;
  private:
  bool _internal_has_invalidate_comments() const;
  public:
  void clear_invalidate_comments();
  bool invalidate_comments() const;
  void set_invalidate_comments(bool value);
  private:
  bool _internal_invalidate_comments() const;
  void _internal_set_invalidate_comments(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandPasteArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > formula_rewrite_commands_;
    ::TST::SelectionArchive* user_selection_;
    ::TST::SelectionArchive* final_selection_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TSP::Reference* command_undo_;
    ::TST::TableCommandArchive* super_;
    bool invalidate_comments_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRemoveColumnsOrRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRemoveColumnsOrRowsArchive) */ {
 public:
  inline CommandRemoveColumnsOrRowsArchive() : CommandRemoveColumnsOrRowsArchive(nullptr) {}
  ~CommandRemoveColumnsOrRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRemoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRemoveColumnsOrRowsArchive(const CommandRemoveColumnsOrRowsArchive& from);
  CommandRemoveColumnsOrRowsArchive(CommandRemoveColumnsOrRowsArchive&& from) noexcept
    : CommandRemoveColumnsOrRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandRemoveColumnsOrRowsArchive& operator=(const CommandRemoveColumnsOrRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRemoveColumnsOrRowsArchive& operator=(CommandRemoveColumnsOrRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRemoveColumnsOrRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRemoveColumnsOrRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRemoveColumnsOrRowsArchive*>(
               &_CommandRemoveColumnsOrRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CommandRemoveColumnsOrRowsArchive& a, CommandRemoveColumnsOrRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRemoveColumnsOrRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRemoveColumnsOrRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRemoveColumnsOrRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRemoveColumnsOrRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRemoveColumnsOrRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRemoveColumnsOrRowsArchive& from) {
    CommandRemoveColumnsOrRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRemoveColumnsOrRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRemoveColumnsOrRowsArchive";
  }
  protected:
  explicit CommandRemoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsizesFieldNumber = 7,
    kHidingActionsFieldNumber = 14,
    kUndoCommandCollectorFieldNumber = 16,
    kSuperFieldNumber = 1,
    kIndicesToRemoveFieldNumber = 3,
    kCellMapFieldNumber = 4,
    kOldgeomFieldNumber = 5,
    kNewgeomFieldNumber = 6,
    kFormulaRewriteCommandFieldNumber = 8,
    kUndoMergeMapFieldNumber = 12,
    kRedoMergeMapFieldNumber = 13,
    kOrigFilterSetFieldNumber = 15,
    kDirectionFieldNumber = 2,
    kWidthFactorFieldNumber = 9,
    kHeightFactorFieldNumber = 10,
    kAllowHorizontalAutosizeFieldNumber = 11,
  };
  // repeated float subsizes = 7;
  int subsizes_size() const;
  private:
  int _internal_subsizes_size() const;
  public:
  void clear_subsizes();
  private:
  float _internal_subsizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_subsizes() const;
  void _internal_add_subsizes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_subsizes();
  public:
  float subsizes(int index) const;
  void set_subsizes(int index, float value);
  void add_subsizes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      subsizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_subsizes();

  // repeated uint32 hiding_actions = 14;
  int hiding_actions_size() const;
  private:
  int _internal_hiding_actions_size() const;
  public:
  void clear_hiding_actions();
  private:
  uint32_t _internal_hiding_actions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hiding_actions() const;
  void _internal_add_hiding_actions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hiding_actions();
  public:
  uint32_t hiding_actions(int index) const;
  void set_hiding_actions(int index, uint32_t value);
  void add_hiding_actions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hiding_actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hiding_actions();

  // repeated .TSP.Reference undo_command_collector = 16;
  int undo_command_collector_size() const;
  private:
  int _internal_undo_command_collector_size() const;
  public:
  void clear_undo_command_collector();
  ::TSP::Reference* mutable_undo_command_collector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_undo_command_collector();
  private:
  const ::TSP::Reference& _internal_undo_command_collector(int index) const;
  ::TSP::Reference* _internal_add_undo_command_collector();
  public:
  const ::TSP::Reference& undo_command_collector(int index) const;
  ::TSP::Reference* add_undo_command_collector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      undo_command_collector() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.IndexSet indices_to_remove = 3;
  bool has_indices_to_remove() const;
  private:
  bool _internal_has_indices_to_remove() const;
  public:
  void clear_indices_to_remove();
  const ::TSP::IndexSet& indices_to_remove() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_indices_to_remove();
  ::TSP::IndexSet* mutable_indices_to_remove();
  void set_allocated_indices_to_remove(::TSP::IndexSet* indices_to_remove);
  private:
  const ::TSP::IndexSet& _internal_indices_to_remove() const;
  ::TSP::IndexSet* _internal_mutable_indices_to_remove();
  public:
  void unsafe_arena_set_allocated_indices_to_remove(
      ::TSP::IndexSet* indices_to_remove);
  ::TSP::IndexSet* unsafe_arena_release_indices_to_remove();

  // optional .TST.CellMapArchive cellMap = 4;
  bool has_cellmap() const;
  private:
  bool _internal_has_cellmap() const;
  public:
  void clear_cellmap();
  const ::TST::CellMapArchive& cellmap() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_cellmap();
  ::TST::CellMapArchive* mutable_cellmap();
  void set_allocated_cellmap(::TST::CellMapArchive* cellmap);
  private:
  const ::TST::CellMapArchive& _internal_cellmap() const;
  ::TST::CellMapArchive* _internal_mutable_cellmap();
  public:
  void unsafe_arena_set_allocated_cellmap(
      ::TST::CellMapArchive* cellmap);
  ::TST::CellMapArchive* unsafe_arena_release_cellmap();

  // required .TSD.GeometryArchive oldgeom = 5;
  bool has_oldgeom() const;
  private:
  bool _internal_has_oldgeom() const;
  public:
  void clear_oldgeom();
  const ::TSD::GeometryArchive& oldgeom() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_oldgeom();
  ::TSD::GeometryArchive* mutable_oldgeom();
  void set_allocated_oldgeom(::TSD::GeometryArchive* oldgeom);
  private:
  const ::TSD::GeometryArchive& _internal_oldgeom() const;
  ::TSD::GeometryArchive* _internal_mutable_oldgeom();
  public:
  void unsafe_arena_set_allocated_oldgeom(
      ::TSD::GeometryArchive* oldgeom);
  ::TSD::GeometryArchive* unsafe_arena_release_oldgeom();

  // required .TSD.GeometryArchive newgeom = 6;
  bool has_newgeom() const;
  private:
  bool _internal_has_newgeom() const;
  public:
  void clear_newgeom();
  const ::TSD::GeometryArchive& newgeom() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_newgeom();
  ::TSD::GeometryArchive* mutable_newgeom();
  void set_allocated_newgeom(::TSD::GeometryArchive* newgeom);
  private:
  const ::TSD::GeometryArchive& _internal_newgeom() const;
  ::TSD::GeometryArchive* _internal_mutable_newgeom();
  public:
  void unsafe_arena_set_allocated_newgeom(
      ::TSD::GeometryArchive* newgeom);
  ::TSD::GeometryArchive* unsafe_arena_release_newgeom();

  // optional .TSP.Reference formula_rewrite_command = 8;
  bool has_formula_rewrite_command() const;
  private:
  bool _internal_has_formula_rewrite_command() const;
  public:
  void clear_formula_rewrite_command();
  const ::TSP::Reference& formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command();
  ::TSP::Reference* mutable_formula_rewrite_command();
  void set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command(
      ::TSP::Reference* formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command();

  // optional .TSP.Reference undo_merge_map = 12;
  bool has_undo_merge_map() const;
  private:
  bool _internal_has_undo_merge_map() const;
  public:
  void clear_undo_merge_map();
  const ::TSP::Reference& undo_merge_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_merge_map();
  ::TSP::Reference* mutable_undo_merge_map();
  void set_allocated_undo_merge_map(::TSP::Reference* undo_merge_map);
  private:
  const ::TSP::Reference& _internal_undo_merge_map() const;
  ::TSP::Reference* _internal_mutable_undo_merge_map();
  public:
  void unsafe_arena_set_allocated_undo_merge_map(
      ::TSP::Reference* undo_merge_map);
  ::TSP::Reference* unsafe_arena_release_undo_merge_map();

  // optional .TSP.Reference redo_merge_map = 13;
  bool has_redo_merge_map() const;
  private:
  bool _internal_has_redo_merge_map() const;
  public:
  void clear_redo_merge_map();
  const ::TSP::Reference& redo_merge_map() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_redo_merge_map();
  ::TSP::Reference* mutable_redo_merge_map();
  void set_allocated_redo_merge_map(::TSP::Reference* redo_merge_map);
  private:
  const ::TSP::Reference& _internal_redo_merge_map() const;
  ::TSP::Reference* _internal_mutable_redo_merge_map();
  public:
  void unsafe_arena_set_allocated_redo_merge_map(
      ::TSP::Reference* redo_merge_map);
  ::TSP::Reference* unsafe_arena_release_redo_merge_map();

  // optional .TSP.Reference orig_filter_set = 15;
  bool has_orig_filter_set() const;
  private:
  bool _internal_has_orig_filter_set() const;
  public:
  void clear_orig_filter_set();
  const ::TSP::Reference& orig_filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_orig_filter_set();
  ::TSP::Reference* mutable_orig_filter_set();
  void set_allocated_orig_filter_set(::TSP::Reference* orig_filter_set);
  private:
  const ::TSP::Reference& _internal_orig_filter_set() const;
  ::TSP::Reference* _internal_mutable_orig_filter_set();
  public:
  void unsafe_arena_set_allocated_orig_filter_set(
      ::TSP::Reference* orig_filter_set);
  ::TSP::Reference* unsafe_arena_release_orig_filter_set();

  // required .TST.CommandDirectionArchive direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::CommandDirectionArchive direction() const;
  void set_direction(::TST::CommandDirectionArchive value);
  private:
  ::TST::CommandDirectionArchive _internal_direction() const;
  void _internal_set_direction(::TST::CommandDirectionArchive value);
  public:

  // required float width_factor = 9;
  bool has_width_factor() const;
  private:
  bool _internal_has_width_factor() const;
  public:
  void clear_width_factor();
  float width_factor() const;
  void set_width_factor(float value);
  private:
  float _internal_width_factor() const;
  void _internal_set_width_factor(float value);
  public:

  // required float height_factor = 10;
  bool has_height_factor() const;
  private:
  bool _internal_has_height_factor() const;
  public:
  void clear_height_factor();
  float height_factor() const;
  void set_height_factor(float value);
  private:
  float _internal_height_factor() const;
  void _internal_set_height_factor(float value);
  public:

  // optional bool allow_horizontal_autosize = 11;
  bool has_allow_horizontal_autosize() const;
  private:
  bool _internal_has_allow_horizontal_autosize() const;
  public:
  void clear_allow_horizontal_autosize();
  bool allow_horizontal_autosize() const;
  void set_allow_horizontal_autosize(bool value);
  private:
  bool _internal_allow_horizontal_autosize() const;
  void _internal_set_allow_horizontal_autosize(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandRemoveColumnsOrRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > subsizes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hiding_actions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > undo_command_collector_;
    ::TST::TableCommandArchive* super_;
    ::TSP::IndexSet* indices_to_remove_;
    ::TST::CellMapArchive* cellmap_;
    ::TSD::GeometryArchive* oldgeom_;
    ::TSD::GeometryArchive* newgeom_;
    ::TSP::Reference* formula_rewrite_command_;
    ::TSP::Reference* undo_merge_map_;
    ::TSP::Reference* redo_merge_map_;
    ::TSP::Reference* orig_filter_set_;
    int direction_;
    float width_factor_;
    float height_factor_;
    bool allow_horizontal_autosize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandResizeColumnOrRowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandResizeColumnOrRowArchive) */ {
 public:
  inline CommandResizeColumnOrRowArchive() : CommandResizeColumnOrRowArchive(nullptr) {}
  ~CommandResizeColumnOrRowArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResizeColumnOrRowArchive(const CommandResizeColumnOrRowArchive& from);
  CommandResizeColumnOrRowArchive(CommandResizeColumnOrRowArchive&& from) noexcept
    : CommandResizeColumnOrRowArchive() {
    *this = ::std::move(from);
  }

  inline CommandResizeColumnOrRowArchive& operator=(const CommandResizeColumnOrRowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResizeColumnOrRowArchive& operator=(CommandResizeColumnOrRowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResizeColumnOrRowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResizeColumnOrRowArchive* internal_default_instance() {
    return reinterpret_cast<const CommandResizeColumnOrRowArchive*>(
               &_CommandResizeColumnOrRowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandResizeColumnOrRowArchive& a, CommandResizeColumnOrRowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResizeColumnOrRowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResizeColumnOrRowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResizeColumnOrRowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandResizeColumnOrRowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResizeColumnOrRowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandResizeColumnOrRowArchive& from) {
    CommandResizeColumnOrRowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResizeColumnOrRowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandResizeColumnOrRowArchive";
  }
  protected:
  explicit CommandResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubsizesFieldNumber = 7,
    kOldgeomFieldNumber = 5,
    kNewgeomFieldNumber = 6,
    kSuperFieldNumber = 11,
    kDirectionFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCountFieldNumber = 3,
    kNewsizeFieldNumber = 4,
    kOldDefaultFieldNumber = 8,
    kUniformsizesFieldNumber = 9,
    kResizemodeFieldNumber = 10,
  };
  // repeated float subsizes = 7;
  int subsizes_size() const;
  private:
  int _internal_subsizes_size() const;
  public:
  void clear_subsizes();
  private:
  float _internal_subsizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_subsizes() const;
  void _internal_add_subsizes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_subsizes();
  public:
  float subsizes(int index) const;
  void set_subsizes(int index, float value);
  void add_subsizes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      subsizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_subsizes();

  // optional .TSD.GeometryArchive oldgeom = 5;
  bool has_oldgeom() const;
  private:
  bool _internal_has_oldgeom() const;
  public:
  void clear_oldgeom();
  const ::TSD::GeometryArchive& oldgeom() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_oldgeom();
  ::TSD::GeometryArchive* mutable_oldgeom();
  void set_allocated_oldgeom(::TSD::GeometryArchive* oldgeom);
  private:
  const ::TSD::GeometryArchive& _internal_oldgeom() const;
  ::TSD::GeometryArchive* _internal_mutable_oldgeom();
  public:
  void unsafe_arena_set_allocated_oldgeom(
      ::TSD::GeometryArchive* oldgeom);
  ::TSD::GeometryArchive* unsafe_arena_release_oldgeom();

  // optional .TSD.GeometryArchive newgeom = 6;
  bool has_newgeom() const;
  private:
  bool _internal_has_newgeom() const;
  public:
  void clear_newgeom();
  const ::TSD::GeometryArchive& newgeom() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_newgeom();
  ::TSD::GeometryArchive* mutable_newgeom();
  void set_allocated_newgeom(::TSD::GeometryArchive* newgeom);
  private:
  const ::TSD::GeometryArchive& _internal_newgeom() const;
  ::TSD::GeometryArchive* _internal_mutable_newgeom();
  public:
  void unsafe_arena_set_allocated_newgeom(
      ::TSD::GeometryArchive* newgeom);
  ::TSD::GeometryArchive* unsafe_arena_release_newgeom();

  // required .TST.TableCommandArchive super = 11;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CommandDirectionArchive direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::CommandDirectionArchive direction() const;
  void set_direction(::TST::CommandDirectionArchive value);
  private:
  ::TST::CommandDirectionArchive _internal_direction() const;
  void _internal_set_direction(::TST::CommandDirectionArchive value);
  public:

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // required uint32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // required float newsize = 4;
  bool has_newsize() const;
  private:
  bool _internal_has_newsize() const;
  public:
  void clear_newsize();
  float newsize() const;
  void set_newsize(float value);
  private:
  float _internal_newsize() const;
  void _internal_set_newsize(float value);
  public:

  // optional float old_default = 8;
  bool has_old_default() const;
  private:
  bool _internal_has_old_default() const;
  public:
  void clear_old_default();
  float old_default() const;
  void set_old_default(float value);
  private:
  float _internal_old_default() const;
  void _internal_set_old_default(float value);
  public:

  // optional bool uniformsizes = 9;
  bool has_uniformsizes() const;
  private:
  bool _internal_has_uniformsizes() const;
  public:
  void clear_uniformsizes();
  bool uniformsizes() const;
  void set_uniformsizes(bool value);
  private:
  bool _internal_uniformsizes() const;
  void _internal_set_uniformsizes(bool value);
  public:

  // optional uint32 resizemode = 10;
  bool has_resizemode() const;
  private:
  bool _internal_has_resizemode() const;
  public:
  void clear_resizemode();
  uint32_t resizemode() const;
  void set_resizemode(uint32_t value);
  private:
  uint32_t _internal_resizemode() const;
  void _internal_set_resizemode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandResizeColumnOrRowArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > subsizes_;
    ::TSD::GeometryArchive* oldgeom_;
    ::TSD::GeometryArchive* newgeom_;
    ::TST::TableCommandArchive* super_;
    int direction_;
    uint32_t index_;
    uint32_t count_;
    float newsize_;
    float old_default_;
    bool uniformsizes_;
    uint32_t resizemode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetCellArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetCellArchive) */ {
 public:
  inline CommandSetCellArchive() : CommandSetCellArchive(nullptr) {}
  ~CommandSetCellArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetCellArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetCellArchive(const CommandSetCellArchive& from);
  CommandSetCellArchive(CommandSetCellArchive&& from) noexcept
    : CommandSetCellArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetCellArchive& operator=(const CommandSetCellArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetCellArchive& operator=(CommandSetCellArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetCellArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetCellArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetCellArchive*>(
               &_CommandSetCellArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CommandSetCellArchive& a, CommandSetCellArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetCellArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetCellArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetCellArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetCellArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetCellArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetCellArchive& from) {
    CommandSetCellArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetCellArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetCellArchive";
  }
  protected:
  explicit CommandSetCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIDFieldNumber = 1,
    kNewcellFieldNumber = 2,
    kOldcellFieldNumber = 3,
    kSuperFieldNumber = 5,
    kPostUndoRedoSelectionFieldNumber = 6,
  };
  // required .TST.CellID cellID = 1;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  const ::TST::CellID& cellid() const;
  PROTOBUF_NODISCARD ::TST::CellID* release_cellid();
  ::TST::CellID* mutable_cellid();
  void set_allocated_cellid(::TST::CellID* cellid);
  private:
  const ::TST::CellID& _internal_cellid() const;
  ::TST::CellID* _internal_mutable_cellid();
  public:
  void unsafe_arena_set_allocated_cellid(
      ::TST::CellID* cellid);
  ::TST::CellID* unsafe_arena_release_cellid();

  // optional .TST.Cell newcell = 2;
  bool has_newcell() const;
  private:
  bool _internal_has_newcell() const;
  public:
  void clear_newcell();
  const ::TST::Cell& newcell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_newcell();
  ::TST::Cell* mutable_newcell();
  void set_allocated_newcell(::TST::Cell* newcell);
  private:
  const ::TST::Cell& _internal_newcell() const;
  ::TST::Cell* _internal_mutable_newcell();
  public:
  void unsafe_arena_set_allocated_newcell(
      ::TST::Cell* newcell);
  ::TST::Cell* unsafe_arena_release_newcell();

  // optional .TST.Cell oldcell = 3;
  bool has_oldcell() const;
  private:
  bool _internal_has_oldcell() const;
  public:
  void clear_oldcell();
  const ::TST::Cell& oldcell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_oldcell();
  ::TST::Cell* mutable_oldcell();
  void set_allocated_oldcell(::TST::Cell* oldcell);
  private:
  const ::TST::Cell& _internal_oldcell() const;
  ::TST::Cell* _internal_mutable_oldcell();
  public:
  void unsafe_arena_set_allocated_oldcell(
      ::TST::Cell* oldcell);
  ::TST::Cell* unsafe_arena_release_oldcell();

  // required .TST.TableCommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional bool post_undo_redo_selection = 6;
  bool has_post_undo_redo_selection() const;
  private:
  bool _internal_has_post_undo_redo_selection() const;
  public:
  void clear_post_undo_redo_selection();
  bool post_undo_redo_selection() const;
  void set_post_undo_redo_selection(bool value);
  private:
  bool _internal_post_undo_redo_selection() const;
  void _internal_set_post_undo_redo_selection(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetCellArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CellID* cellid_;
    ::TST::Cell* newcell_;
    ::TST::Cell* oldcell_;
    ::TST::TableCommandArchive* super_;
    bool post_undo_redo_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandTextPreflightInsertCellArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandTextPreflightInsertCellArchive) */ {
 public:
  inline CommandTextPreflightInsertCellArchive() : CommandTextPreflightInsertCellArchive(nullptr) {}
  ~CommandTextPreflightInsertCellArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandTextPreflightInsertCellArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandTextPreflightInsertCellArchive(const CommandTextPreflightInsertCellArchive& from);
  CommandTextPreflightInsertCellArchive(CommandTextPreflightInsertCellArchive&& from) noexcept
    : CommandTextPreflightInsertCellArchive() {
    *this = ::std::move(from);
  }

  inline CommandTextPreflightInsertCellArchive& operator=(const CommandTextPreflightInsertCellArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandTextPreflightInsertCellArchive& operator=(CommandTextPreflightInsertCellArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandTextPreflightInsertCellArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandTextPreflightInsertCellArchive* internal_default_instance() {
    return reinterpret_cast<const CommandTextPreflightInsertCellArchive*>(
               &_CommandTextPreflightInsertCellArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandTextPreflightInsertCellArchive& a, CommandTextPreflightInsertCellArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandTextPreflightInsertCellArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandTextPreflightInsertCellArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandTextPreflightInsertCellArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandTextPreflightInsertCellArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandTextPreflightInsertCellArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandTextPreflightInsertCellArchive& from) {
    CommandTextPreflightInsertCellArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandTextPreflightInsertCellArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandTextPreflightInsertCellArchive";
  }
  protected:
  explicit CommandTextPreflightInsertCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEditingCellIDFieldNumber = 1,
    kSuperFieldNumber = 3,
    kCoalescedTextcommandFieldNumber = 6,
    kPostflightcommandFieldNumber = 8,
    kEditingCellFieldNumber = 10,
    kEditingStorageFieldNumber = 11,
    kGroupedWithPostflightFieldNumber = 9,
    kLastColumnHitByTapFieldNumber = 12,
  };
  // required .TST.CellID editing_cellID = 1;
  bool has_editing_cellid() const;
  private:
  bool _internal_has_editing_cellid() const;
  public:
  void clear_editing_cellid();
  const ::TST::CellID& editing_cellid() const;
  PROTOBUF_NODISCARD ::TST::CellID* release_editing_cellid();
  ::TST::CellID* mutable_editing_cellid();
  void set_allocated_editing_cellid(::TST::CellID* editing_cellid);
  private:
  const ::TST::CellID& _internal_editing_cellid() const;
  ::TST::CellID* _internal_mutable_editing_cellid();
  public:
  void unsafe_arena_set_allocated_editing_cellid(
      ::TST::CellID* editing_cellid);
  ::TST::CellID* unsafe_arena_release_editing_cellid();

  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference coalesced_textcommand = 6;
  bool has_coalesced_textcommand() const;
  private:
  bool _internal_has_coalesced_textcommand() const;
  public:
  void clear_coalesced_textcommand();
  const ::TSP::Reference& coalesced_textcommand() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_coalesced_textcommand();
  ::TSP::Reference* mutable_coalesced_textcommand();
  void set_allocated_coalesced_textcommand(::TSP::Reference* coalesced_textcommand);
  private:
  const ::TSP::Reference& _internal_coalesced_textcommand() const;
  ::TSP::Reference* _internal_mutable_coalesced_textcommand();
  public:
  void unsafe_arena_set_allocated_coalesced_textcommand(
      ::TSP::Reference* coalesced_textcommand);
  ::TSP::Reference* unsafe_arena_release_coalesced_textcommand();

  // optional .TSP.Reference postflightcommand = 8;
  bool has_postflightcommand() const;
  private:
  bool _internal_has_postflightcommand() const;
  public:
  void clear_postflightcommand();
  const ::TSP::Reference& postflightcommand() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_postflightcommand();
  ::TSP::Reference* mutable_postflightcommand();
  void set_allocated_postflightcommand(::TSP::Reference* postflightcommand);
  private:
  const ::TSP::Reference& _internal_postflightcommand() const;
  ::TSP::Reference* _internal_mutable_postflightcommand();
  public:
  void unsafe_arena_set_allocated_postflightcommand(
      ::TSP::Reference* postflightcommand);
  ::TSP::Reference* unsafe_arena_release_postflightcommand();

  // required .TST.Cell editing_cell = 10;
  bool has_editing_cell() const;
  private:
  bool _internal_has_editing_cell() const;
  public:
  void clear_editing_cell();
  const ::TST::Cell& editing_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_editing_cell();
  ::TST::Cell* mutable_editing_cell();
  void set_allocated_editing_cell(::TST::Cell* editing_cell);
  private:
  const ::TST::Cell& _internal_editing_cell() const;
  ::TST::Cell* _internal_mutable_editing_cell();
  public:
  void unsafe_arena_set_allocated_editing_cell(
      ::TST::Cell* editing_cell);
  ::TST::Cell* unsafe_arena_release_editing_cell();

  // required .TSP.Reference editing_storage = 11;
  bool has_editing_storage() const;
  private:
  bool _internal_has_editing_storage() const;
  public:
  void clear_editing_storage();
  const ::TSP::Reference& editing_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_editing_storage();
  ::TSP::Reference* mutable_editing_storage();
  void set_allocated_editing_storage(::TSP::Reference* editing_storage);
  private:
  const ::TSP::Reference& _internal_editing_storage() const;
  ::TSP::Reference* _internal_mutable_editing_storage();
  public:
  void unsafe_arena_set_allocated_editing_storage(
      ::TSP::Reference* editing_storage);
  ::TSP::Reference* unsafe_arena_release_editing_storage();

  // optional bool grouped_with_postflight = 9;
  bool has_grouped_with_postflight() const;
  private:
  bool _internal_has_grouped_with_postflight() const;
  public:
  void clear_grouped_with_postflight();
  bool grouped_with_postflight() const;
  void set_grouped_with_postflight(bool value);
  private:
  bool _internal_grouped_with_postflight() const;
  void _internal_set_grouped_with_postflight(bool value);
  public:

  // optional uint32 last_column_hit_by_tap = 12;
  bool has_last_column_hit_by_tap() const;
  private:
  bool _internal_has_last_column_hit_by_tap() const;
  public:
  void clear_last_column_hit_by_tap();
  uint32_t last_column_hit_by_tap() const;
  void set_last_column_hit_by_tap(uint32_t value);
  private:
  uint32_t _internal_last_column_hit_by_tap() const;
  void _internal_set_last_column_hit_by_tap(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandTextPreflightInsertCellArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CellID* editing_cellid_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* coalesced_textcommand_;
    ::TSP::Reference* postflightcommand_;
    ::TST::Cell* editing_cell_;
    ::TSP::Reference* editing_storage_;
    bool grouped_with_postflight_;
    uint32_t last_column_hit_by_tap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandPostflightSetCellArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandPostflightSetCellArchive) */ {
 public:
  inline CommandPostflightSetCellArchive() : CommandPostflightSetCellArchive(nullptr) {}
  ~CommandPostflightSetCellArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandPostflightSetCellArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandPostflightSetCellArchive(const CommandPostflightSetCellArchive& from);
  CommandPostflightSetCellArchive(CommandPostflightSetCellArchive&& from) noexcept
    : CommandPostflightSetCellArchive() {
    *this = ::std::move(from);
  }

  inline CommandPostflightSetCellArchive& operator=(const CommandPostflightSetCellArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPostflightSetCellArchive& operator=(CommandPostflightSetCellArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandPostflightSetCellArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandPostflightSetCellArchive* internal_default_instance() {
    return reinterpret_cast<const CommandPostflightSetCellArchive*>(
               &_CommandPostflightSetCellArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandPostflightSetCellArchive& a, CommandPostflightSetCellArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPostflightSetCellArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandPostflightSetCellArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandPostflightSetCellArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandPostflightSetCellArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandPostflightSetCellArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandPostflightSetCellArchive& from) {
    CommandPostflightSetCellArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandPostflightSetCellArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandPostflightSetCellArchive";
  }
  protected:
  explicit CommandPostflightSetCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIDFieldNumber = 1,
    kSuperFieldNumber = 3,
    kChildcommandundoFieldNumber = 4,
    kEditingCellFieldNumber = 6,
    kNewCellFieldNumber = 7,
    kEditingStorageFieldNumber = 8,
    kLastColumnHitByTapFieldNumber = 9,
  };
  // required .TST.CellID cellID = 1;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  const ::TST::CellID& cellid() const;
  PROTOBUF_NODISCARD ::TST::CellID* release_cellid();
  ::TST::CellID* mutable_cellid();
  void set_allocated_cellid(::TST::CellID* cellid);
  private:
  const ::TST::CellID& _internal_cellid() const;
  ::TST::CellID* _internal_mutable_cellid();
  public:
  void unsafe_arena_set_allocated_cellid(
      ::TST::CellID* cellid);
  ::TST::CellID* unsafe_arena_release_cellid();

  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference childcommandundo = 4;
  bool has_childcommandundo() const;
  private:
  bool _internal_has_childcommandundo() const;
  public:
  void clear_childcommandundo();
  const ::TSP::Reference& childcommandundo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_childcommandundo();
  ::TSP::Reference* mutable_childcommandundo();
  void set_allocated_childcommandundo(::TSP::Reference* childcommandundo);
  private:
  const ::TSP::Reference& _internal_childcommandundo() const;
  ::TSP::Reference* _internal_mutable_childcommandundo();
  public:
  void unsafe_arena_set_allocated_childcommandundo(
      ::TSP::Reference* childcommandundo);
  ::TSP::Reference* unsafe_arena_release_childcommandundo();

  // required .TST.Cell editing_cell = 6;
  bool has_editing_cell() const;
  private:
  bool _internal_has_editing_cell() const;
  public:
  void clear_editing_cell();
  const ::TST::Cell& editing_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_editing_cell();
  ::TST::Cell* mutable_editing_cell();
  void set_allocated_editing_cell(::TST::Cell* editing_cell);
  private:
  const ::TST::Cell& _internal_editing_cell() const;
  ::TST::Cell* _internal_mutable_editing_cell();
  public:
  void unsafe_arena_set_allocated_editing_cell(
      ::TST::Cell* editing_cell);
  ::TST::Cell* unsafe_arena_release_editing_cell();

  // required .TST.Cell new_cell = 7;
  bool has_new_cell() const;
  private:
  bool _internal_has_new_cell() const;
  public:
  void clear_new_cell();
  const ::TST::Cell& new_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_new_cell();
  ::TST::Cell* mutable_new_cell();
  void set_allocated_new_cell(::TST::Cell* new_cell);
  private:
  const ::TST::Cell& _internal_new_cell() const;
  ::TST::Cell* _internal_mutable_new_cell();
  public:
  void unsafe_arena_set_allocated_new_cell(
      ::TST::Cell* new_cell);
  ::TST::Cell* unsafe_arena_release_new_cell();

  // required .TSP.Reference editing_storage = 8;
  bool has_editing_storage() const;
  private:
  bool _internal_has_editing_storage() const;
  public:
  void clear_editing_storage();
  const ::TSP::Reference& editing_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_editing_storage();
  ::TSP::Reference* mutable_editing_storage();
  void set_allocated_editing_storage(::TSP::Reference* editing_storage);
  private:
  const ::TSP::Reference& _internal_editing_storage() const;
  ::TSP::Reference* _internal_mutable_editing_storage();
  public:
  void unsafe_arena_set_allocated_editing_storage(
      ::TSP::Reference* editing_storage);
  ::TSP::Reference* unsafe_arena_release_editing_storage();

  // optional uint32 last_column_hit_by_tap = 9;
  bool has_last_column_hit_by_tap() const;
  private:
  bool _internal_has_last_column_hit_by_tap() const;
  public:
  void clear_last_column_hit_by_tap();
  uint32_t last_column_hit_by_tap() const;
  void set_last_column_hit_by_tap(uint32_t value);
  private:
  uint32_t _internal_last_column_hit_by_tap() const;
  void _internal_set_last_column_hit_by_tap(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandPostflightSetCellArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CellID* cellid_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* childcommandundo_;
    ::TST::Cell* editing_cell_;
    ::TST::Cell* new_cell_;
    ::TSP::Reference* editing_storage_;
    uint32_t last_column_hit_by_tap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetNumberOfHeadersOrFootersArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetNumberOfHeadersOrFootersArchive) */ {
 public:
  inline CommandSetNumberOfHeadersOrFootersArchive() : CommandSetNumberOfHeadersOrFootersArchive(nullptr) {}
  ~CommandSetNumberOfHeadersOrFootersArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetNumberOfHeadersOrFootersArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetNumberOfHeadersOrFootersArchive(const CommandSetNumberOfHeadersOrFootersArchive& from);
  CommandSetNumberOfHeadersOrFootersArchive(CommandSetNumberOfHeadersOrFootersArchive&& from) noexcept
    : CommandSetNumberOfHeadersOrFootersArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetNumberOfHeadersOrFootersArchive& operator=(const CommandSetNumberOfHeadersOrFootersArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetNumberOfHeadersOrFootersArchive& operator=(CommandSetNumberOfHeadersOrFootersArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetNumberOfHeadersOrFootersArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetNumberOfHeadersOrFootersArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetNumberOfHeadersOrFootersArchive*>(
               &_CommandSetNumberOfHeadersOrFootersArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandSetNumberOfHeadersOrFootersArchive& a, CommandSetNumberOfHeadersOrFootersArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetNumberOfHeadersOrFootersArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetNumberOfHeadersOrFootersArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetNumberOfHeadersOrFootersArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetNumberOfHeadersOrFootersArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetNumberOfHeadersOrFootersArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetNumberOfHeadersOrFootersArchive& from) {
    CommandSetNumberOfHeadersOrFootersArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetNumberOfHeadersOrFootersArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetNumberOfHeadersOrFootersArchive";
  }
  protected:
  explicit CommandSetNumberOfHeadersOrFootersArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 6,
    kRegionFieldNumber = 1,
    kCountFieldNumber = 2,
    kOldcountFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CommandRegionArchive region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::TST::CommandRegionArchive region() const;
  void set_region(::TST::CommandRegionArchive value);
  private:
  ::TST::CommandRegionArchive _internal_region() const;
  void _internal_set_region(::TST::CommandRegionArchive value);
  public:

  // required uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // required uint32 oldcount = 3;
  bool has_oldcount() const;
  private:
  bool _internal_has_oldcount() const;
  public:
  void clear_oldcount();
  uint32_t oldcount() const;
  void set_oldcount(uint32_t value);
  private:
  uint32_t _internal_oldcount() const;
  void _internal_set_oldcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetNumberOfHeadersOrFootersArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    int region_;
    uint32_t count_;
    uint32_t oldcount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandFixWPStylesInRowsOrColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandFixWPStylesInRowsOrColumnsArchive) */ {
 public:
  inline CommandFixWPStylesInRowsOrColumnsArchive() : CommandFixWPStylesInRowsOrColumnsArchive(nullptr) {}
  ~CommandFixWPStylesInRowsOrColumnsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandFixWPStylesInRowsOrColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandFixWPStylesInRowsOrColumnsArchive(const CommandFixWPStylesInRowsOrColumnsArchive& from);
  CommandFixWPStylesInRowsOrColumnsArchive(CommandFixWPStylesInRowsOrColumnsArchive&& from) noexcept
    : CommandFixWPStylesInRowsOrColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandFixWPStylesInRowsOrColumnsArchive& operator=(const CommandFixWPStylesInRowsOrColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandFixWPStylesInRowsOrColumnsArchive& operator=(CommandFixWPStylesInRowsOrColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandFixWPStylesInRowsOrColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandFixWPStylesInRowsOrColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandFixWPStylesInRowsOrColumnsArchive*>(
               &_CommandFixWPStylesInRowsOrColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandFixWPStylesInRowsOrColumnsArchive& a, CommandFixWPStylesInRowsOrColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandFixWPStylesInRowsOrColumnsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandFixWPStylesInRowsOrColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandFixWPStylesInRowsOrColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandFixWPStylesInRowsOrColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandFixWPStylesInRowsOrColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandFixWPStylesInRowsOrColumnsArchive& from) {
    CommandFixWPStylesInRowsOrColumnsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandFixWPStylesInRowsOrColumnsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandFixWPStylesInRowsOrColumnsArchive";
  }
  protected:
  explicit CommandFixWPStylesInRowsOrColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoCellMapFieldNumber = 3,
    kRedoCellMapFieldNumber = 4,
    kSuperFieldNumber = 6,
    kDirectionFieldNumber = 1,
    kIndexFieldNumber = 2,
    kReferenceIndexFieldNumber = 7,
    kInheritStylesFieldNumber = 8,
    kCountFieldNumber = 9,
  };
  // required .TST.CellMapArchive undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CommandDirectionArchive direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::CommandDirectionArchive direction() const;
  void set_direction(::TST::CommandDirectionArchive value);
  private:
  ::TST::CommandDirectionArchive _internal_direction() const;
  void _internal_set_direction(::TST::CommandDirectionArchive value);
  public:

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // required uint32 reference_index = 7;
  bool has_reference_index() const;
  private:
  bool _internal_has_reference_index() const;
  public:
  void clear_reference_index();
  uint32_t reference_index() const;
  void set_reference_index(uint32_t value);
  private:
  uint32_t _internal_reference_index() const;
  void _internal_set_reference_index(uint32_t value);
  public:

  // required bool inherit_styles = 8;
  bool has_inherit_styles() const;
  private:
  bool _internal_has_inherit_styles() const;
  public:
  void clear_inherit_styles();
  bool inherit_styles() const;
  void set_inherit_styles(bool value);
  private:
  bool _internal_inherit_styles() const;
  void _internal_set_inherit_styles(bool value);
  public:

  // optional uint32 count = 9;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandFixWPStylesInRowsOrColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TST::TableCommandArchive* super_;
    int direction_;
    uint32_t index_;
    uint32_t reference_index_;
    bool inherit_styles_;
    uint32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandFixStylesInHeadersOrFootersArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandFixStylesInHeadersOrFootersArchive) */ {
 public:
  inline CommandFixStylesInHeadersOrFootersArchive() : CommandFixStylesInHeadersOrFootersArchive(nullptr) {}
  ~CommandFixStylesInHeadersOrFootersArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandFixStylesInHeadersOrFootersArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandFixStylesInHeadersOrFootersArchive(const CommandFixStylesInHeadersOrFootersArchive& from);
  CommandFixStylesInHeadersOrFootersArchive(CommandFixStylesInHeadersOrFootersArchive&& from) noexcept
    : CommandFixStylesInHeadersOrFootersArchive() {
    *this = ::std::move(from);
  }

  inline CommandFixStylesInHeadersOrFootersArchive& operator=(const CommandFixStylesInHeadersOrFootersArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandFixStylesInHeadersOrFootersArchive& operator=(CommandFixStylesInHeadersOrFootersArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandFixStylesInHeadersOrFootersArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandFixStylesInHeadersOrFootersArchive* internal_default_instance() {
    return reinterpret_cast<const CommandFixStylesInHeadersOrFootersArchive*>(
               &_CommandFixStylesInHeadersOrFootersArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CommandFixStylesInHeadersOrFootersArchive& a, CommandFixStylesInHeadersOrFootersArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandFixStylesInHeadersOrFootersArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandFixStylesInHeadersOrFootersArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandFixStylesInHeadersOrFootersArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandFixStylesInHeadersOrFootersArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandFixStylesInHeadersOrFootersArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandFixStylesInHeadersOrFootersArchive& from) {
    CommandFixStylesInHeadersOrFootersArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandFixStylesInHeadersOrFootersArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandFixStylesInHeadersOrFootersArchive";
  }
  protected:
  explicit CommandFixStylesInHeadersOrFootersArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedoCellMapFieldNumber = 4,
    kUndoCellMapFieldNumber = 5,
    kSuperFieldNumber = 6,
    kTextundoFieldNumber = 7,
    kRegionFieldNumber = 1,
    kOldNumberFieldNumber = 2,
    kNewNumberFieldNumber = 3,
  };
  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // required .TST.CellMapArchive undo_cell_map = 5;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.TableCommandArchive super = 6;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference textundo = 7;
  bool has_textundo() const;
  private:
  bool _internal_has_textundo() const;
  public:
  void clear_textundo();
  const ::TSP::Reference& textundo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_textundo();
  ::TSP::Reference* mutable_textundo();
  void set_allocated_textundo(::TSP::Reference* textundo);
  private:
  const ::TSP::Reference& _internal_textundo() const;
  ::TSP::Reference* _internal_mutable_textundo();
  public:
  void unsafe_arena_set_allocated_textundo(
      ::TSP::Reference* textundo);
  ::TSP::Reference* unsafe_arena_release_textundo();

  // required .TST.CommandRegionArchive region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::TST::CommandRegionArchive region() const;
  void set_region(::TST::CommandRegionArchive value);
  private:
  ::TST::CommandRegionArchive _internal_region() const;
  void _internal_set_region(::TST::CommandRegionArchive value);
  public:

  // required uint32 old_number = 2;
  bool has_old_number() const;
  private:
  bool _internal_has_old_number() const;
  public:
  void clear_old_number();
  uint32_t old_number() const;
  void set_old_number(uint32_t value);
  private:
  uint32_t _internal_old_number() const;
  void _internal_set_old_number(uint32_t value);
  public:

  // required uint32 new_number = 3;
  bool has_new_number() const;
  private:
  bool _internal_has_new_number() const;
  public:
  void clear_new_number();
  uint32_t new_number() const;
  void set_new_number(uint32_t value);
  private:
  uint32_t _internal_new_number() const;
  void _internal_set_new_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandFixStylesInHeadersOrFootersArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* textundo_;
    int region_;
    uint32_t old_number_;
    uint32_t new_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableNameArchive) */ {
 public:
  inline CommandSetTableNameArchive() : CommandSetTableNameArchive(nullptr) {}
  ~CommandSetTableNameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableNameArchive(const CommandSetTableNameArchive& from);
  CommandSetTableNameArchive(CommandSetTableNameArchive&& from) noexcept
    : CommandSetTableNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableNameArchive& operator=(const CommandSetTableNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableNameArchive& operator=(CommandSetTableNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableNameArchive*>(
               &_CommandSetTableNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CommandSetTableNameArchive& a, CommandSetTableNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableNameArchive& from) {
    CommandSetTableNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableNameArchive";
  }
  protected:
  explicit CommandSetTableNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewtablenameFieldNumber = 1,
    kOldtablenameFieldNumber = 2,
    kNewstyleFieldNumber = 3,
    kOldstyleFieldNumber = 4,
    kSuperFieldNumber = 5,
    kOldShapeStyleFieldNumber = 6,
    kNewShapeStyleFieldNumber = 7,
    kOldTableNameBorderEnabledFieldNumber = 8,
    kNewTableNameBorderEnabledFieldNumber = 9,
  };
  // required string newtablename = 1;
  bool has_newtablename() const;
  private:
  bool _internal_has_newtablename() const;
  public:
  void clear_newtablename();
  const std::string& newtablename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newtablename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newtablename();
  PROTOBUF_NODISCARD std::string* release_newtablename();
  void set_allocated_newtablename(std::string* newtablename);
  private:
  const std::string& _internal_newtablename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newtablename(const std::string& value);
  std::string* _internal_mutable_newtablename();
  public:

  // required string oldtablename = 2;
  bool has_oldtablename() const;
  private:
  bool _internal_has_oldtablename() const;
  public:
  void clear_oldtablename();
  const std::string& oldtablename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldtablename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldtablename();
  PROTOBUF_NODISCARD std::string* release_oldtablename();
  void set_allocated_oldtablename(std::string* oldtablename);
  private:
  const std::string& _internal_oldtablename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldtablename(const std::string& value);
  std::string* _internal_mutable_oldtablename();
  public:

  // optional .TSP.Reference newstyle = 3;
  bool has_newstyle() const;
  private:
  bool _internal_has_newstyle() const;
  public:
  void clear_newstyle();
  const ::TSP::Reference& newstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_newstyle();
  ::TSP::Reference* mutable_newstyle();
  void set_allocated_newstyle(::TSP::Reference* newstyle);
  private:
  const ::TSP::Reference& _internal_newstyle() const;
  ::TSP::Reference* _internal_mutable_newstyle();
  public:
  void unsafe_arena_set_allocated_newstyle(
      ::TSP::Reference* newstyle);
  ::TSP::Reference* unsafe_arena_release_newstyle();

  // optional .TSP.Reference oldstyle = 4;
  bool has_oldstyle() const;
  private:
  bool _internal_has_oldstyle() const;
  public:
  void clear_oldstyle();
  const ::TSP::Reference& oldstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_oldstyle();
  ::TSP::Reference* mutable_oldstyle();
  void set_allocated_oldstyle(::TSP::Reference* oldstyle);
  private:
  const ::TSP::Reference& _internal_oldstyle() const;
  ::TSP::Reference* _internal_mutable_oldstyle();
  public:
  void unsafe_arena_set_allocated_oldstyle(
      ::TSP::Reference* oldstyle);
  ::TSP::Reference* unsafe_arena_release_oldstyle();

  // required .TST.TableCommandArchive super = 5;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference old_shape_style = 6;
  bool has_old_shape_style() const;
  private:
  bool _internal_has_old_shape_style() const;
  public:
  void clear_old_shape_style();
  const ::TSP::Reference& old_shape_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_shape_style();
  ::TSP::Reference* mutable_old_shape_style();
  void set_allocated_old_shape_style(::TSP::Reference* old_shape_style);
  private:
  const ::TSP::Reference& _internal_old_shape_style() const;
  ::TSP::Reference* _internal_mutable_old_shape_style();
  public:
  void unsafe_arena_set_allocated_old_shape_style(
      ::TSP::Reference* old_shape_style);
  ::TSP::Reference* unsafe_arena_release_old_shape_style();

  // optional .TSP.Reference new_shape_style = 7;
  bool has_new_shape_style() const;
  private:
  bool _internal_has_new_shape_style() const;
  public:
  void clear_new_shape_style();
  const ::TSP::Reference& new_shape_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_shape_style();
  ::TSP::Reference* mutable_new_shape_style();
  void set_allocated_new_shape_style(::TSP::Reference* new_shape_style);
  private:
  const ::TSP::Reference& _internal_new_shape_style() const;
  ::TSP::Reference* _internal_mutable_new_shape_style();
  public:
  void unsafe_arena_set_allocated_new_shape_style(
      ::TSP::Reference* new_shape_style);
  ::TSP::Reference* unsafe_arena_release_new_shape_style();

  // optional bool old_table_name_border_enabled = 8;
  bool has_old_table_name_border_enabled() const;
  private:
  bool _internal_has_old_table_name_border_enabled() const;
  public:
  void clear_old_table_name_border_enabled();
  bool old_table_name_border_enabled() const;
  void set_old_table_name_border_enabled(bool value);
  private:
  bool _internal_old_table_name_border_enabled() const;
  void _internal_set_old_table_name_border_enabled(bool value);
  public:

  // optional bool new_table_name_border_enabled = 9;
  bool has_new_table_name_border_enabled() const;
  private:
  bool _internal_has_new_table_name_border_enabled() const;
  public:
  void clear_new_table_name_border_enabled();
  bool new_table_name_border_enabled() const;
  void set_new_table_name_border_enabled(bool value);
  private:
  bool _internal_new_table_name_border_enabled() const;
  void _internal_set_new_table_name_border_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newtablename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldtablename_;
    ::TSP::Reference* newstyle_;
    ::TSP::Reference* oldstyle_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* old_shape_style_;
    ::TSP::Reference* new_shape_style_;
    bool old_table_name_border_enabled_;
    bool new_table_name_border_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableNameEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableNameEnabledArchive) */ {
 public:
  inline CommandSetTableNameEnabledArchive() : CommandSetTableNameEnabledArchive(nullptr) {}
  ~CommandSetTableNameEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableNameEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableNameEnabledArchive(const CommandSetTableNameEnabledArchive& from);
  CommandSetTableNameEnabledArchive(CommandSetTableNameEnabledArchive&& from) noexcept
    : CommandSetTableNameEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableNameEnabledArchive& operator=(const CommandSetTableNameEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableNameEnabledArchive& operator=(CommandSetTableNameEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableNameEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableNameEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableNameEnabledArchive*>(
               &_CommandSetTableNameEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CommandSetTableNameEnabledArchive& a, CommandSetTableNameEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableNameEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableNameEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableNameEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableNameEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableNameEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableNameEnabledArchive& from) {
    CommandSetTableNameEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableNameEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableNameEnabledArchive";
  }
  protected:
  explicit CommandSetTableNameEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 3,
    kTableNameEnabledFieldNumber = 1,
  };
  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool table_name_enabled = 1;
  bool has_table_name_enabled() const;
  private:
  bool _internal_has_table_name_enabled() const;
  public:
  void clear_table_name_enabled();
  bool table_name_enabled() const;
  void set_table_name_enabled(bool value);
  private:
  bool _internal_table_name_enabled() const;
  void _internal_set_table_name_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableNameEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool table_name_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableFontSizeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableFontSizeArchive) */ {
 public:
  inline CommandSetTableFontSizeArchive() : CommandSetTableFontSizeArchive(nullptr) {}
  ~CommandSetTableFontSizeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableFontSizeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableFontSizeArchive(const CommandSetTableFontSizeArchive& from);
  CommandSetTableFontSizeArchive(CommandSetTableFontSizeArchive&& from) noexcept
    : CommandSetTableFontSizeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableFontSizeArchive& operator=(const CommandSetTableFontSizeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableFontSizeArchive& operator=(CommandSetTableFontSizeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableFontSizeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableFontSizeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableFontSizeArchive*>(
               &_CommandSetTableFontSizeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandSetTableFontSizeArchive& a, CommandSetTableFontSizeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableFontSizeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableFontSizeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableFontSizeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableFontSizeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableFontSizeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableFontSizeArchive& from) {
    CommandSetTableFontSizeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableFontSizeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableFontSizeArchive";
  }
  protected:
  explicit CommandSetTableFontSizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoCellMapFieldNumber = 5,
    kRedoCellMapFieldNumber = 6,
    kTextUndoFieldNumber = 8,
    kResizeDefaultCellsFieldNumber = 7,
    kScaleFactorFieldNumber = 9,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.CellMapArchive undo_cell_map = 5;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // optional .TST.CellMapArchive redo_cell_map = 6;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference text_undo = 8;
  bool has_text_undo() const;
  private:
  bool _internal_has_text_undo() const;
  public:
  void clear_text_undo();
  const ::TSP::Reference& text_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_text_undo();
  ::TSP::Reference* mutable_text_undo();
  void set_allocated_text_undo(::TSP::Reference* text_undo);
  private:
  const ::TSP::Reference& _internal_text_undo() const;
  ::TSP::Reference* _internal_mutable_text_undo();
  public:
  void unsafe_arena_set_allocated_text_undo(
      ::TSP::Reference* text_undo);
  ::TSP::Reference* unsafe_arena_release_text_undo();

  // optional bool resize_default_cells = 7;
  bool has_resize_default_cells() const;
  private:
  bool _internal_has_resize_default_cells() const;
  public:
  void clear_resize_default_cells();
  bool resize_default_cells() const;
  void set_resize_default_cells(bool value);
  private:
  bool _internal_resize_default_cells() const;
  void _internal_set_resize_default_cells(bool value);
  public:

  // required float scale_factor = 9;
  bool has_scale_factor() const;
  private:
  bool _internal_has_scale_factor() const;
  public:
  void clear_scale_factor();
  float scale_factor() const;
  void set_scale_factor(float value);
  private:
  float _internal_scale_factor() const;
  void _internal_set_scale_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableFontSizeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TSP::Reference* text_undo_;
    bool resize_default_cells_;
    float scale_factor_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableFontNameArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableFontNameArchive) */ {
 public:
  inline CommandSetTableFontNameArchive() : CommandSetTableFontNameArchive(nullptr) {}
  ~CommandSetTableFontNameArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableFontNameArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableFontNameArchive(const CommandSetTableFontNameArchive& from);
  CommandSetTableFontNameArchive(CommandSetTableFontNameArchive&& from) noexcept
    : CommandSetTableFontNameArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableFontNameArchive& operator=(const CommandSetTableFontNameArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableFontNameArchive& operator=(CommandSetTableFontNameArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableFontNameArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableFontNameArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableFontNameArchive*>(
               &_CommandSetTableFontNameArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CommandSetTableFontNameArchive& a, CommandSetTableFontNameArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableFontNameArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableFontNameArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableFontNameArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableFontNameArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableFontNameArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableFontNameArchive& from) {
    CommandSetTableFontNameArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableFontNameArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableFontNameArchive";
  }
  protected:
  explicit CommandSetTableFontNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontNameFieldNumber = 2,
    kOldFontNameFieldNumber = 3,
    kSuperFieldNumber = 1,
    kUndoCellMapFieldNumber = 6,
    kRedoCellMapFieldNumber = 7,
    kTextUndoFieldNumber = 8,
    kPreserveFaceFieldNumber = 5,
  };
  // required string font_name = 2;
  bool has_font_name() const;
  private:
  bool _internal_has_font_name() const;
  public:
  void clear_font_name();
  const std::string& font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font_name();
  PROTOBUF_NODISCARD std::string* release_font_name();
  void set_allocated_font_name(std::string* font_name);
  private:
  const std::string& _internal_font_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font_name(const std::string& value);
  std::string* _internal_mutable_font_name();
  public:

  // required string old_font_name = 3;
  bool has_old_font_name() const;
  private:
  bool _internal_has_old_font_name() const;
  public:
  void clear_old_font_name();
  const std::string& old_font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_font_name();
  PROTOBUF_NODISCARD std::string* release_old_font_name();
  void set_allocated_old_font_name(std::string* old_font_name);
  private:
  const std::string& _internal_old_font_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_font_name(const std::string& value);
  std::string* _internal_mutable_old_font_name();
  public:

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.CellMapArchive undo_cell_map = 6;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // optional .TST.CellMapArchive redo_cell_map = 7;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference text_undo = 8;
  bool has_text_undo() const;
  private:
  bool _internal_has_text_undo() const;
  public:
  void clear_text_undo();
  const ::TSP::Reference& text_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_text_undo();
  ::TSP::Reference* mutable_text_undo();
  void set_allocated_text_undo(::TSP::Reference* text_undo);
  private:
  const ::TSP::Reference& _internal_text_undo() const;
  ::TSP::Reference* _internal_mutable_text_undo();
  public:
  void unsafe_arena_set_allocated_text_undo(
      ::TSP::Reference* text_undo);
  ::TSP::Reference* unsafe_arena_release_text_undo();

  // optional bool preserve_face = 5;
  bool has_preserve_face() const;
  private:
  bool _internal_has_preserve_face() const;
  public:
  void clear_preserve_face();
  bool preserve_face() const;
  void set_preserve_face(bool value);
  private:
  bool _internal_preserve_face() const;
  void _internal_set_preserve_face(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableFontNameArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_font_name_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TSP::Reference* text_undo_;
    bool preserve_face_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTableNameHeightArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTableNameHeightArchive) */ {
 public:
  inline CommandSetTableNameHeightArchive() : CommandSetTableNameHeightArchive(nullptr) {}
  ~CommandSetTableNameHeightArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTableNameHeightArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTableNameHeightArchive(const CommandSetTableNameHeightArchive& from);
  CommandSetTableNameHeightArchive(CommandSetTableNameHeightArchive&& from) noexcept
    : CommandSetTableNameHeightArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTableNameHeightArchive& operator=(const CommandSetTableNameHeightArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTableNameHeightArchive& operator=(CommandSetTableNameHeightArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTableNameHeightArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTableNameHeightArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTableNameHeightArchive*>(
               &_CommandSetTableNameHeightArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CommandSetTableNameHeightArchive& a, CommandSetTableNameHeightArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTableNameHeightArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTableNameHeightArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTableNameHeightArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTableNameHeightArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTableNameHeightArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTableNameHeightArchive& from) {
    CommandSetTableNameHeightArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTableNameHeightArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTableNameHeightArchive";
  }
  protected:
  explicit CommandSetTableNameHeightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldTableNameHeightFieldNumber = 2,
    kNewTableNameHeightFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required double old_table_name_height = 2;
  bool has_old_table_name_height() const;
  private:
  bool _internal_has_old_table_name_height() const;
  public:
  void clear_old_table_name_height();
  double old_table_name_height() const;
  void set_old_table_name_height(double value);
  private:
  double _internal_old_table_name_height() const;
  void _internal_set_old_table_name_height(double value);
  public:

  // required double new_table_name_height = 3;
  bool has_new_table_name_height() const;
  private:
  bool _internal_has_new_table_name_height() const;
  public:
  void clear_new_table_name_height();
  double new_table_name_height() const;
  void set_new_table_name_height(double value);
  private:
  double _internal_new_table_name_height() const;
  void _internal_set_new_table_name_height(double value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetTableNameHeightArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    double old_table_name_height_;
    double new_table_name_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandStyleCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandStyleCellsArchive) */ {
 public:
  inline CommandStyleCellsArchive() : CommandStyleCellsArchive(nullptr) {}
  ~CommandStyleCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandStyleCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandStyleCellsArchive(const CommandStyleCellsArchive& from);
  CommandStyleCellsArchive(CommandStyleCellsArchive&& from) noexcept
    : CommandStyleCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandStyleCellsArchive& operator=(const CommandStyleCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStyleCellsArchive& operator=(CommandStyleCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandStyleCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandStyleCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandStyleCellsArchive*>(
               &_CommandStyleCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CommandStyleCellsArchive& a, CommandStyleCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStyleCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStyleCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandStyleCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandStyleCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandStyleCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandStyleCellsArchive& from) {
    CommandStyleCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStyleCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandStyleCellsArchive";
  }
  protected:
  explicit CommandStyleCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormatPropertiesFieldNumber = 2,
    kSelectionFieldNumber = 3,
    kUndoCellMapFieldNumber = 4,
    kRedoCellMapFieldNumber = 5,
    kTextUndoFieldNumber = 6,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.ReferenceDictionary format_properties = 2;
  bool has_format_properties() const;
  private:
  bool _internal_has_format_properties() const;
  public:
  void clear_format_properties();
  const ::TSP::ReferenceDictionary& format_properties() const;
  PROTOBUF_NODISCARD ::TSP::ReferenceDictionary* release_format_properties();
  ::TSP::ReferenceDictionary* mutable_format_properties();
  void set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties);
  private:
  const ::TSP::ReferenceDictionary& _internal_format_properties() const;
  ::TSP::ReferenceDictionary* _internal_mutable_format_properties();
  public:
  void unsafe_arena_set_allocated_format_properties(
      ::TSP::ReferenceDictionary* format_properties);
  ::TSP::ReferenceDictionary* unsafe_arena_release_format_properties();

  // required .TST.SelectionArchive selection = 3;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_cell_map = 4;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 5;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference text_undo = 6;
  bool has_text_undo() const;
  private:
  bool _internal_has_text_undo() const;
  public:
  void clear_text_undo();
  const ::TSP::Reference& text_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_text_undo();
  ::TSP::Reference* mutable_text_undo();
  void set_allocated_text_undo(::TSP::Reference* text_undo);
  private:
  const ::TSP::Reference& _internal_text_undo() const;
  ::TSP::Reference* _internal_mutable_text_undo();
  public:
  void unsafe_arena_set_allocated_text_undo(
      ::TSP::Reference* text_undo);
  ::TSP::Reference* unsafe_arena_release_text_undo();

  // @@protoc_insertion_point(class_scope:TST.CommandStyleCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::ReferenceDictionary* format_properties_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TSP::Reference* text_undo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandStyleTableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandStyleTableArchive) */ {
 public:
  inline CommandStyleTableArchive() : CommandStyleTableArchive(nullptr) {}
  ~CommandStyleTableArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandStyleTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandStyleTableArchive(const CommandStyleTableArchive& from);
  CommandStyleTableArchive(CommandStyleTableArchive&& from) noexcept
    : CommandStyleTableArchive() {
    *this = ::std::move(from);
  }

  inline CommandStyleTableArchive& operator=(const CommandStyleTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandStyleTableArchive& operator=(CommandStyleTableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandStyleTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandStyleTableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandStyleTableArchive*>(
               &_CommandStyleTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandStyleTableArchive& a, CommandStyleTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandStyleTableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandStyleTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandStyleTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandStyleTableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandStyleTableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandStyleTableArchive& from) {
    CommandStyleTableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandStyleTableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandStyleTableArchive";
  }
  protected:
  explicit CommandStyleTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormatPropertiesFieldNumber = 2,
    kOldStyleFieldNumber = 3,
    kNewStyleFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.ReferenceDictionary format_properties = 2;
  bool has_format_properties() const;
  private:
  bool _internal_has_format_properties() const;
  public:
  void clear_format_properties();
  const ::TSP::ReferenceDictionary& format_properties() const;
  PROTOBUF_NODISCARD ::TSP::ReferenceDictionary* release_format_properties();
  ::TSP::ReferenceDictionary* mutable_format_properties();
  void set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties);
  private:
  const ::TSP::ReferenceDictionary& _internal_format_properties() const;
  ::TSP::ReferenceDictionary* _internal_mutable_format_properties();
  public:
  void unsafe_arena_set_allocated_format_properties(
      ::TSP::ReferenceDictionary* format_properties);
  ::TSP::ReferenceDictionary* unsafe_arena_release_format_properties();

  // optional .TSP.Reference old_style = 3;
  bool has_old_style() const;
  private:
  bool _internal_has_old_style() const;
  public:
  void clear_old_style();
  const ::TSP::Reference& old_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_style();
  ::TSP::Reference* mutable_old_style();
  void set_allocated_old_style(::TSP::Reference* old_style);
  private:
  const ::TSP::Reference& _internal_old_style() const;
  ::TSP::Reference* _internal_mutable_old_style();
  public:
  void unsafe_arena_set_allocated_old_style(
      ::TSP::Reference* old_style);
  ::TSP::Reference* unsafe_arena_release_old_style();

  // optional .TSP.Reference new_style = 4;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSP::Reference& new_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_style();
  ::TSP::Reference* mutable_new_style();
  void set_allocated_new_style(::TSP::Reference* new_style);
  private:
  const ::TSP::Reference& _internal_new_style() const;
  ::TSP::Reference* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSP::Reference* new_style);
  ::TSP::Reference* unsafe_arena_release_new_style();

  // @@protoc_insertion_point(class_scope:TST.CommandStyleTableArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::ReferenceDictionary* format_properties_;
    ::TSP::Reference* old_style_;
    ::TSP::Reference* new_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandFillCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandFillCellsArchive) */ {
 public:
  inline CommandFillCellsArchive() : CommandFillCellsArchive(nullptr) {}
  ~CommandFillCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandFillCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandFillCellsArchive(const CommandFillCellsArchive& from);
  CommandFillCellsArchive(CommandFillCellsArchive&& from) noexcept
    : CommandFillCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandFillCellsArchive& operator=(const CommandFillCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandFillCellsArchive& operator=(CommandFillCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandFillCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandFillCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandFillCellsArchive*>(
               &_CommandFillCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandFillCellsArchive& a, CommandFillCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandFillCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandFillCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandFillCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandFillCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandFillCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandFillCellsArchive& from) {
    CommandFillCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandFillCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandFillCellsArchive";
  }
  protected:
  explicit CommandFillCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSourceselectionFieldNumber = 2,
    kSourcecellrangeFieldNumber = 3,
    kTargetcellrangeFieldNumber = 4,
    kUndoCellMapFieldNumber = 5,
    kTargetselectionFieldNumber = 7,
    kRedoCellMapFieldNumber = 8,
    kFillDirectionFieldNumber = 6,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.SelectionArchive sourceselection = 2;
  bool has_sourceselection() const;
  private:
  bool _internal_has_sourceselection() const;
  public:
  void clear_sourceselection();
  const ::TST::SelectionArchive& sourceselection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_sourceselection();
  ::TST::SelectionArchive* mutable_sourceselection();
  void set_allocated_sourceselection(::TST::SelectionArchive* sourceselection);
  private:
  const ::TST::SelectionArchive& _internal_sourceselection() const;
  ::TST::SelectionArchive* _internal_mutable_sourceselection();
  public:
  void unsafe_arena_set_allocated_sourceselection(
      ::TST::SelectionArchive* sourceselection);
  ::TST::SelectionArchive* unsafe_arena_release_sourceselection();

  // required .TST.CellRange sourcecellrange = 3;
  bool has_sourcecellrange() const;
  private:
  bool _internal_has_sourcecellrange() const;
  public:
  void clear_sourcecellrange();
  const ::TST::CellRange& sourcecellrange() const;
  PROTOBUF_NODISCARD ::TST::CellRange* release_sourcecellrange();
  ::TST::CellRange* mutable_sourcecellrange();
  void set_allocated_sourcecellrange(::TST::CellRange* sourcecellrange);
  private:
  const ::TST::CellRange& _internal_sourcecellrange() const;
  ::TST::CellRange* _internal_mutable_sourcecellrange();
  public:
  void unsafe_arena_set_allocated_sourcecellrange(
      ::TST::CellRange* sourcecellrange);
  ::TST::CellRange* unsafe_arena_release_sourcecellrange();

  // required .TST.CellRange targetcellrange = 4;
  bool has_targetcellrange() const;
  private:
  bool _internal_has_targetcellrange() const;
  public:
  void clear_targetcellrange();
  const ::TST::CellRange& targetcellrange() const;
  PROTOBUF_NODISCARD ::TST::CellRange* release_targetcellrange();
  ::TST::CellRange* mutable_targetcellrange();
  void set_allocated_targetcellrange(::TST::CellRange* targetcellrange);
  private:
  const ::TST::CellRange& _internal_targetcellrange() const;
  ::TST::CellRange* _internal_mutable_targetcellrange();
  public:
  void unsafe_arena_set_allocated_targetcellrange(
      ::TST::CellRange* targetcellrange);
  ::TST::CellRange* unsafe_arena_release_targetcellrange();

  // required .TST.CellMapArchive undo_cell_map = 5;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.SelectionArchive targetselection = 7;
  bool has_targetselection() const;
  private:
  bool _internal_has_targetselection() const;
  public:
  void clear_targetselection();
  const ::TST::SelectionArchive& targetselection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_targetselection();
  ::TST::SelectionArchive* mutable_targetselection();
  void set_allocated_targetselection(::TST::SelectionArchive* targetselection);
  private:
  const ::TST::SelectionArchive& _internal_targetselection() const;
  ::TST::SelectionArchive* _internal_mutable_targetselection();
  public:
  void unsafe_arena_set_allocated_targetselection(
      ::TST::SelectionArchive* targetselection);
  ::TST::SelectionArchive* unsafe_arena_release_targetselection();

  // required .TST.CellMapArchive redo_cell_map = 8;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // required .TST.FillDirectionArchive fillDirection = 6;
  bool has_filldirection() const;
  private:
  bool _internal_has_filldirection() const;
  public:
  void clear_filldirection();
  ::TST::FillDirectionArchive filldirection() const;
  void set_filldirection(::TST::FillDirectionArchive value);
  private:
  ::TST::FillDirectionArchive _internal_filldirection() const;
  void _internal_set_filldirection(::TST::FillDirectionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandFillCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* sourceselection_;
    ::TST::CellRange* sourcecellrange_;
    ::TST::CellRange* targetcellrange_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::SelectionArchive* targetselection_;
    ::TST::CellMapArchive* redo_cell_map_;
    int filldirection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceTextArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandReplaceTextArchive) */ {
 public:
  inline CommandReplaceTextArchive() : CommandReplaceTextArchive(nullptr) {}
  ~CommandReplaceTextArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceTextArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceTextArchive(const CommandReplaceTextArchive& from);
  CommandReplaceTextArchive(CommandReplaceTextArchive&& from) noexcept
    : CommandReplaceTextArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceTextArchive& operator=(const CommandReplaceTextArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceTextArchive& operator=(CommandReplaceTextArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceTextArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceTextArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceTextArchive*>(
               &_CommandReplaceTextArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CommandReplaceTextArchive& a, CommandReplaceTextArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceTextArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceTextArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceTextArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceTextArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceTextArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceTextArchive& from) {
    CommandReplaceTextArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceTextArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandReplaceTextArchive";
  }
  protected:
  explicit CommandReplaceTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIDFieldNumber = 1,
    kNewcellFieldNumber = 2,
    kOldcellFieldNumber = 3,
    kSuperFieldNumber = 4,
    kChildCommandUndoFieldNumber = 5,
  };
  // required .TST.CellID cellID = 1;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  const ::TST::CellID& cellid() const;
  PROTOBUF_NODISCARD ::TST::CellID* release_cellid();
  ::TST::CellID* mutable_cellid();
  void set_allocated_cellid(::TST::CellID* cellid);
  private:
  const ::TST::CellID& _internal_cellid() const;
  ::TST::CellID* _internal_mutable_cellid();
  public:
  void unsafe_arena_set_allocated_cellid(
      ::TST::CellID* cellid);
  ::TST::CellID* unsafe_arena_release_cellid();

  // required .TST.Cell newcell = 2;
  bool has_newcell() const;
  private:
  bool _internal_has_newcell() const;
  public:
  void clear_newcell();
  const ::TST::Cell& newcell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_newcell();
  ::TST::Cell* mutable_newcell();
  void set_allocated_newcell(::TST::Cell* newcell);
  private:
  const ::TST::Cell& _internal_newcell() const;
  ::TST::Cell* _internal_mutable_newcell();
  public:
  void unsafe_arena_set_allocated_newcell(
      ::TST::Cell* newcell);
  ::TST::Cell* unsafe_arena_release_newcell();

  // required .TST.Cell oldcell = 3;
  bool has_oldcell() const;
  private:
  bool _internal_has_oldcell() const;
  public:
  void clear_oldcell();
  const ::TST::Cell& oldcell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_oldcell();
  ::TST::Cell* mutable_oldcell();
  void set_allocated_oldcell(::TST::Cell* oldcell);
  private:
  const ::TST::Cell& _internal_oldcell() const;
  ::TST::Cell* _internal_mutable_oldcell();
  public:
  void unsafe_arena_set_allocated_oldcell(
      ::TST::Cell* oldcell);
  ::TST::Cell* unsafe_arena_release_oldcell();

  // required .TST.TableCommandArchive super = 4;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference child_command_undo = 5;
  bool has_child_command_undo() const;
  private:
  bool _internal_has_child_command_undo() const;
  public:
  void clear_child_command_undo();
  const ::TSP::Reference& child_command_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_child_command_undo();
  ::TSP::Reference* mutable_child_command_undo();
  void set_allocated_child_command_undo(::TSP::Reference* child_command_undo);
  private:
  const ::TSP::Reference& _internal_child_command_undo() const;
  ::TSP::Reference* _internal_mutable_child_command_undo();
  public:
  void unsafe_arena_set_allocated_child_command_undo(
      ::TSP::Reference* child_command_undo);
  ::TSP::Reference* unsafe_arena_release_child_command_undo();

  // @@protoc_insertion_point(class_scope:TST.CommandReplaceTextArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CellID* cellid_;
    ::TST::Cell* newcell_;
    ::TST::Cell* oldcell_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* child_command_undo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandReplaceAllTextArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandReplaceAllTextArchive) */ {
 public:
  inline CommandReplaceAllTextArchive() : CommandReplaceAllTextArchive(nullptr) {}
  ~CommandReplaceAllTextArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandReplaceAllTextArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReplaceAllTextArchive(const CommandReplaceAllTextArchive& from);
  CommandReplaceAllTextArchive(CommandReplaceAllTextArchive&& from) noexcept
    : CommandReplaceAllTextArchive() {
    *this = ::std::move(from);
  }

  inline CommandReplaceAllTextArchive& operator=(const CommandReplaceAllTextArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReplaceAllTextArchive& operator=(CommandReplaceAllTextArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReplaceAllTextArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReplaceAllTextArchive* internal_default_instance() {
    return reinterpret_cast<const CommandReplaceAllTextArchive*>(
               &_CommandReplaceAllTextArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CommandReplaceAllTextArchive& a, CommandReplaceAllTextArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReplaceAllTextArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReplaceAllTextArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandReplaceAllTextArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandReplaceAllTextArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReplaceAllTextArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandReplaceAllTextArchive& from) {
    CommandReplaceAllTextArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReplaceAllTextArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandReplaceAllTextArchive";
  }
  protected:
  explicit CommandReplaceAllTextArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableInfoFieldNumber = 1,
    kUndoCellMapFieldNumber = 2,
    kRedoCellMapFieldNumber = 3,
  };
  // required .TSP.Reference tableInfo = 1;
  bool has_tableinfo() const;
  private:
  bool _internal_has_tableinfo() const;
  public:
  void clear_tableinfo();
  const ::TSP::Reference& tableinfo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_tableinfo();
  ::TSP::Reference* mutable_tableinfo();
  void set_allocated_tableinfo(::TSP::Reference* tableinfo);
  private:
  const ::TSP::Reference& _internal_tableinfo() const;
  ::TSP::Reference* _internal_mutable_tableinfo();
  public:
  void unsafe_arena_set_allocated_tableinfo(
      ::TSP::Reference* tableinfo);
  ::TSP::Reference* unsafe_arena_release_tableinfo();

  // required .TST.CellMapArchive undo_cell_map = 2;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 3;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // @@protoc_insertion_point(class_scope:TST.CommandReplaceAllTextArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* tableinfo_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetRepeatingHeaderEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetRepeatingHeaderEnabledArchive) */ {
 public:
  inline CommandSetRepeatingHeaderEnabledArchive() : CommandSetRepeatingHeaderEnabledArchive(nullptr) {}
  ~CommandSetRepeatingHeaderEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetRepeatingHeaderEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetRepeatingHeaderEnabledArchive(const CommandSetRepeatingHeaderEnabledArchive& from);
  CommandSetRepeatingHeaderEnabledArchive(CommandSetRepeatingHeaderEnabledArchive&& from) noexcept
    : CommandSetRepeatingHeaderEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetRepeatingHeaderEnabledArchive& operator=(const CommandSetRepeatingHeaderEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetRepeatingHeaderEnabledArchive& operator=(CommandSetRepeatingHeaderEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetRepeatingHeaderEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetRepeatingHeaderEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetRepeatingHeaderEnabledArchive*>(
               &_CommandSetRepeatingHeaderEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CommandSetRepeatingHeaderEnabledArchive& a, CommandSetRepeatingHeaderEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetRepeatingHeaderEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetRepeatingHeaderEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetRepeatingHeaderEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetRepeatingHeaderEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetRepeatingHeaderEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetRepeatingHeaderEnabledArchive& from) {
    CommandSetRepeatingHeaderEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetRepeatingHeaderEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetRepeatingHeaderEnabledArchive";
  }
  protected:
  explicit CommandSetRepeatingHeaderEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 3,
    kRepeatingHeaderEnabledFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool repeating_header_enabled = 1;
  bool has_repeating_header_enabled() const;
  private:
  bool _internal_has_repeating_header_enabled() const;
  public:
  void clear_repeating_header_enabled();
  bool repeating_header_enabled() const;
  void set_repeating_header_enabled(bool value);
  private:
  bool _internal_repeating_header_enabled() const;
  void _internal_set_repeating_header_enabled(bool value);
  public:

  // required .TST.CommandDirectionArchive direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::CommandDirectionArchive direction() const;
  void set_direction(::TST::CommandDirectionArchive value);
  private:
  ::TST::CommandDirectionArchive _internal_direction() const;
  void _internal_set_direction(::TST::CommandDirectionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetRepeatingHeaderEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool repeating_header_enabled_;
    int direction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFiltersEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFiltersEnabledArchive) */ {
 public:
  inline CommandSetFiltersEnabledArchive() : CommandSetFiltersEnabledArchive(nullptr) {}
  ~CommandSetFiltersEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFiltersEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFiltersEnabledArchive(const CommandSetFiltersEnabledArchive& from);
  CommandSetFiltersEnabledArchive(CommandSetFiltersEnabledArchive&& from) noexcept
    : CommandSetFiltersEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFiltersEnabledArchive& operator=(const CommandSetFiltersEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFiltersEnabledArchive& operator=(CommandSetFiltersEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFiltersEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFiltersEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFiltersEnabledArchive*>(
               &_CommandSetFiltersEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CommandSetFiltersEnabledArchive& a, CommandSetFiltersEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFiltersEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFiltersEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFiltersEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFiltersEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFiltersEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFiltersEnabledArchive& from) {
    CommandSetFiltersEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFiltersEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFiltersEnabledArchive";
  }
  protected:
  explicit CommandSetFiltersEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 2,
    kEnableFiltersFieldNumber = 1,
  };
  // required .TST.TableCommandArchive super = 2;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool enable_filters = 1;
  bool has_enable_filters() const;
  private:
  bool _internal_has_enable_filters() const;
  public:
  void clear_enable_filters();
  bool enable_filters() const;
  void set_enable_filters(bool value);
  private:
  bool _internal_enable_filters() const;
  void _internal_set_enable_filters(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFiltersEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool enable_filters_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAddQuickFilterRulesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandAddQuickFilterRulesArchive) */ {
 public:
  inline CommandAddQuickFilterRulesArchive() : CommandAddQuickFilterRulesArchive(nullptr) {}
  ~CommandAddQuickFilterRulesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandAddQuickFilterRulesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAddQuickFilterRulesArchive(const CommandAddQuickFilterRulesArchive& from);
  CommandAddQuickFilterRulesArchive(CommandAddQuickFilterRulesArchive&& from) noexcept
    : CommandAddQuickFilterRulesArchive() {
    *this = ::std::move(from);
  }

  inline CommandAddQuickFilterRulesArchive& operator=(const CommandAddQuickFilterRulesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAddQuickFilterRulesArchive& operator=(CommandAddQuickFilterRulesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAddQuickFilterRulesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAddQuickFilterRulesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAddQuickFilterRulesArchive*>(
               &_CommandAddQuickFilterRulesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CommandAddQuickFilterRulesArchive& a, CommandAddQuickFilterRulesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAddQuickFilterRulesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAddQuickFilterRulesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandAddQuickFilterRulesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandAddQuickFilterRulesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandAddQuickFilterRulesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandAddQuickFilterRulesArchive& from) {
    CommandAddQuickFilterRulesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAddQuickFilterRulesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandAddQuickFilterRulesArchive";
  }
  protected:
  explicit CommandAddQuickFilterRulesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kRuleIndicesFieldNumber = 4,
    kSuperFieldNumber = 1,
    kFilterIndexFieldNumber = 3,
    kFilterSetEnabledFieldNumber = 5,
  };
  // repeated .TST.FilterRuleArchive rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::TST::FilterRuleArchive* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >*
      mutable_rules();
  private:
  const ::TST::FilterRuleArchive& _internal_rules(int index) const;
  ::TST::FilterRuleArchive* _internal_add_rules();
  public:
  const ::TST::FilterRuleArchive& rules(int index) const;
  ::TST::FilterRuleArchive* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >&
      rules() const;

  // repeated uint32 rule_indices = 4;
  int rule_indices_size() const;
  private:
  int _internal_rule_indices_size() const;
  public:
  void clear_rule_indices();
  private:
  uint32_t _internal_rule_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rule_indices() const;
  void _internal_add_rule_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rule_indices();
  public:
  uint32_t rule_indices(int index) const;
  void set_rule_indices(int index, uint32_t value);
  void add_rule_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rule_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rule_indices();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required uint32 filter_index = 3;
  bool has_filter_index() const;
  private:
  bool _internal_has_filter_index() const;
  public:
  void clear_filter_index();
  uint32_t filter_index() const;
  void set_filter_index(uint32_t value);
  private:
  uint32_t _internal_filter_index() const;
  void _internal_set_filter_index(uint32_t value);
  public:

  // required bool filter_set_enabled = 5;
  bool has_filter_set_enabled() const;
  private:
  bool _internal_has_filter_set_enabled() const;
  public:
  void clear_filter_set_enabled();
  bool filter_set_enabled() const;
  void set_filter_set_enabled(bool value);
  private:
  bool _internal_filter_set_enabled() const;
  void _internal_set_filter_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandAddQuickFilterRulesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive > rules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rule_indices_;
    ::TST::TableCommandArchive* super_;
    uint32_t filter_index_;
    bool filter_set_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDeleteFilterRulesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandDeleteFilterRulesArchive) */ {
 public:
  inline CommandDeleteFilterRulesArchive() : CommandDeleteFilterRulesArchive(nullptr) {}
  ~CommandDeleteFilterRulesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDeleteFilterRulesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDeleteFilterRulesArchive(const CommandDeleteFilterRulesArchive& from);
  CommandDeleteFilterRulesArchive(CommandDeleteFilterRulesArchive&& from) noexcept
    : CommandDeleteFilterRulesArchive() {
    *this = ::std::move(from);
  }

  inline CommandDeleteFilterRulesArchive& operator=(const CommandDeleteFilterRulesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDeleteFilterRulesArchive& operator=(CommandDeleteFilterRulesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDeleteFilterRulesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDeleteFilterRulesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDeleteFilterRulesArchive*>(
               &_CommandDeleteFilterRulesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CommandDeleteFilterRulesArchive& a, CommandDeleteFilterRulesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDeleteFilterRulesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDeleteFilterRulesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDeleteFilterRulesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDeleteFilterRulesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDeleteFilterRulesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDeleteFilterRulesArchive& from) {
    CommandDeleteFilterRulesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDeleteFilterRulesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandDeleteFilterRulesArchive";
  }
  protected:
  explicit CommandDeleteFilterRulesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoRulesFieldNumber = 2,
    kRuleIndicesFieldNumber = 3,
    kSuperFieldNumber = 1,
    kFilterIndexFieldNumber = 5,
    kFilterRemovedFieldNumber = 4,
    kFilterSetEnabledFieldNumber = 6,
  };
  // repeated .TST.FilterRuleArchive undo_rules = 2;
  int undo_rules_size() const;
  private:
  int _internal_undo_rules_size() const;
  public:
  void clear_undo_rules();
  ::TST::FilterRuleArchive* mutable_undo_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >*
      mutable_undo_rules();
  private:
  const ::TST::FilterRuleArchive& _internal_undo_rules(int index) const;
  ::TST::FilterRuleArchive* _internal_add_undo_rules();
  public:
  const ::TST::FilterRuleArchive& undo_rules(int index) const;
  ::TST::FilterRuleArchive* add_undo_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >&
      undo_rules() const;

  // repeated uint32 rule_indices = 3;
  int rule_indices_size() const;
  private:
  int _internal_rule_indices_size() const;
  public:
  void clear_rule_indices();
  private:
  uint32_t _internal_rule_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rule_indices() const;
  void _internal_add_rule_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rule_indices();
  public:
  uint32_t rule_indices(int index) const;
  void set_rule_indices(int index, uint32_t value);
  void add_rule_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rule_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rule_indices();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required uint32 filter_index = 5;
  bool has_filter_index() const;
  private:
  bool _internal_has_filter_index() const;
  public:
  void clear_filter_index();
  uint32_t filter_index() const;
  void set_filter_index(uint32_t value);
  private:
  uint32_t _internal_filter_index() const;
  void _internal_set_filter_index(uint32_t value);
  public:

  // required bool filter_removed = 4;
  bool has_filter_removed() const;
  private:
  bool _internal_has_filter_removed() const;
  public:
  void clear_filter_removed();
  bool filter_removed() const;
  void set_filter_removed(bool value);
  private:
  bool _internal_filter_removed() const;
  void _internal_set_filter_removed(bool value);
  public:

  // required bool filter_set_enabled = 6;
  bool has_filter_set_enabled() const;
  private:
  bool _internal_has_filter_set_enabled() const;
  public:
  void clear_filter_set_enabled();
  bool filter_set_enabled() const;
  void set_filter_set_enabled(bool value);
  private:
  bool _internal_filter_set_enabled() const;
  void _internal_set_filter_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandDeleteFilterRulesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive > undo_rules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rule_indices_;
    ::TST::TableCommandArchive* super_;
    uint32_t filter_index_;
    bool filter_removed_;
    bool filter_set_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandModifyFilterRuleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandModifyFilterRuleArchive) */ {
 public:
  inline CommandModifyFilterRuleArchive() : CommandModifyFilterRuleArchive(nullptr) {}
  ~CommandModifyFilterRuleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandModifyFilterRuleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandModifyFilterRuleArchive(const CommandModifyFilterRuleArchive& from);
  CommandModifyFilterRuleArchive(CommandModifyFilterRuleArchive&& from) noexcept
    : CommandModifyFilterRuleArchive() {
    *this = ::std::move(from);
  }

  inline CommandModifyFilterRuleArchive& operator=(const CommandModifyFilterRuleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandModifyFilterRuleArchive& operator=(CommandModifyFilterRuleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandModifyFilterRuleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandModifyFilterRuleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandModifyFilterRuleArchive*>(
               &_CommandModifyFilterRuleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CommandModifyFilterRuleArchive& a, CommandModifyFilterRuleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandModifyFilterRuleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandModifyFilterRuleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandModifyFilterRuleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandModifyFilterRuleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandModifyFilterRuleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandModifyFilterRuleArchive& from) {
    CommandModifyFilterRuleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandModifyFilterRuleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandModifyFilterRuleArchive";
  }
  protected:
  explicit CommandModifyFilterRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoRuleFieldNumber = 2,
    kRedoRuleFieldNumber = 3,
    kRuleIndexFieldNumber = 4,
    kFilterIndexFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FilterRuleArchive undo_rule = 2;
  bool has_undo_rule() const;
  private:
  bool _internal_has_undo_rule() const;
  public:
  void clear_undo_rule();
  const ::TST::FilterRuleArchive& undo_rule() const;
  PROTOBUF_NODISCARD ::TST::FilterRuleArchive* release_undo_rule();
  ::TST::FilterRuleArchive* mutable_undo_rule();
  void set_allocated_undo_rule(::TST::FilterRuleArchive* undo_rule);
  private:
  const ::TST::FilterRuleArchive& _internal_undo_rule() const;
  ::TST::FilterRuleArchive* _internal_mutable_undo_rule();
  public:
  void unsafe_arena_set_allocated_undo_rule(
      ::TST::FilterRuleArchive* undo_rule);
  ::TST::FilterRuleArchive* unsafe_arena_release_undo_rule();

  // required .TST.FilterRuleArchive redo_rule = 3;
  bool has_redo_rule() const;
  private:
  bool _internal_has_redo_rule() const;
  public:
  void clear_redo_rule();
  const ::TST::FilterRuleArchive& redo_rule() const;
  PROTOBUF_NODISCARD ::TST::FilterRuleArchive* release_redo_rule();
  ::TST::FilterRuleArchive* mutable_redo_rule();
  void set_allocated_redo_rule(::TST::FilterRuleArchive* redo_rule);
  private:
  const ::TST::FilterRuleArchive& _internal_redo_rule() const;
  ::TST::FilterRuleArchive* _internal_mutable_redo_rule();
  public:
  void unsafe_arena_set_allocated_redo_rule(
      ::TST::FilterRuleArchive* redo_rule);
  ::TST::FilterRuleArchive* unsafe_arena_release_redo_rule();

  // required uint32 rule_index = 4;
  bool has_rule_index() const;
  private:
  bool _internal_has_rule_index() const;
  public:
  void clear_rule_index();
  uint32_t rule_index() const;
  void set_rule_index(uint32_t value);
  private:
  uint32_t _internal_rule_index() const;
  void _internal_set_rule_index(uint32_t value);
  public:

  // required uint32 filter_index = 5;
  bool has_filter_index() const;
  private:
  bool _internal_has_filter_index() const;
  public:
  void clear_filter_index();
  uint32_t filter_index() const;
  void set_filter_index(uint32_t value);
  private:
  uint32_t _internal_filter_index() const;
  void _internal_set_filter_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandModifyFilterRuleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::FilterRuleArchive* undo_rule_;
    ::TST::FilterRuleArchive* redo_rule_;
    uint32_t rule_index_;
    uint32_t filter_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyStrokePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyStrokePresetArchive) */ {
 public:
  inline CommandApplyStrokePresetArchive() : CommandApplyStrokePresetArchive(nullptr) {}
  ~CommandApplyStrokePresetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyStrokePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyStrokePresetArchive(const CommandApplyStrokePresetArchive& from);
  CommandApplyStrokePresetArchive(CommandApplyStrokePresetArchive&& from) noexcept
    : CommandApplyStrokePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyStrokePresetArchive& operator=(const CommandApplyStrokePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyStrokePresetArchive& operator=(CommandApplyStrokePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyStrokePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyStrokePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyStrokePresetArchive*>(
               &_CommandApplyStrokePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CommandApplyStrokePresetArchive& a, CommandApplyStrokePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyStrokePresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyStrokePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyStrokePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyStrokePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyStrokePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyStrokePresetArchive& from) {
    CommandApplyStrokePresetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyStrokePresetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyStrokePresetArchive";
  }
  protected:
  explicit CommandApplyStrokePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoCellMapFieldNumber = 2,
    kSelectionFieldNumber = 3,
    kRedoCellMapFieldNumber = 4,
    kExpandedSelectionFieldNumber = 6,
    kPresetIndexFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellMapArchive undo_cell_map = 2;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.SelectionArchive selection = 3;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TST.SelectionArchive expanded_selection = 6;
  bool has_expanded_selection() const;
  private:
  bool _internal_has_expanded_selection() const;
  public:
  void clear_expanded_selection();
  const ::TST::SelectionArchive& expanded_selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_expanded_selection();
  ::TST::SelectionArchive* mutable_expanded_selection();
  void set_allocated_expanded_selection(::TST::SelectionArchive* expanded_selection);
  private:
  const ::TST::SelectionArchive& _internal_expanded_selection() const;
  ::TST::SelectionArchive* _internal_mutable_expanded_selection();
  public:
  void unsafe_arena_set_allocated_expanded_selection(
      ::TST::SelectionArchive* expanded_selection);
  ::TST::SelectionArchive* unsafe_arena_release_expanded_selection();

  // required int32 preset_index = 5;
  bool has_preset_index() const;
  private:
  bool _internal_has_preset_index() const;
  public:
  void clear_preset_index();
  int32_t preset_index() const;
  void set_preset_index(int32_t value);
  private:
  int32_t _internal_preset_index() const;
  void _internal_set_preset_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyStrokePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TST::SelectionArchive* expanded_selection_;
    int32_t preset_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyTableStylePresetArchive_StyleIndexTuple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple) */ {
 public:
  inline CommandApplyTableStylePresetArchive_StyleIndexTuple() : CommandApplyTableStylePresetArchive_StyleIndexTuple(nullptr) {}
  ~CommandApplyTableStylePresetArchive_StyleIndexTuple() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyTableStylePresetArchive_StyleIndexTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyTableStylePresetArchive_StyleIndexTuple(const CommandApplyTableStylePresetArchive_StyleIndexTuple& from);
  CommandApplyTableStylePresetArchive_StyleIndexTuple(CommandApplyTableStylePresetArchive_StyleIndexTuple&& from) noexcept
    : CommandApplyTableStylePresetArchive_StyleIndexTuple() {
    *this = ::std::move(from);
  }

  inline CommandApplyTableStylePresetArchive_StyleIndexTuple& operator=(const CommandApplyTableStylePresetArchive_StyleIndexTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyTableStylePresetArchive_StyleIndexTuple& operator=(CommandApplyTableStylePresetArchive_StyleIndexTuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyTableStylePresetArchive_StyleIndexTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyTableStylePresetArchive_StyleIndexTuple* internal_default_instance() {
    return reinterpret_cast<const CommandApplyTableStylePresetArchive_StyleIndexTuple*>(
               &_CommandApplyTableStylePresetArchive_StyleIndexTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CommandApplyTableStylePresetArchive_StyleIndexTuple& a, CommandApplyTableStylePresetArchive_StyleIndexTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyTableStylePresetArchive_StyleIndexTuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyTableStylePresetArchive_StyleIndexTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyTableStylePresetArchive_StyleIndexTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyTableStylePresetArchive_StyleIndexTuple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyTableStylePresetArchive_StyleIndexTuple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyTableStylePresetArchive_StyleIndexTuple& from) {
    CommandApplyTableStylePresetArchive_StyleIndexTuple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyTableStylePresetArchive_StyleIndexTuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyTableStylePresetArchive.StyleIndexTuple";
  }
  protected:
  explicit CommandApplyTableStylePresetArchive_StyleIndexTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellStyleFieldNumber = 5,
    kTextStyleFieldNumber = 6,
    kIndexFieldNumber = 1,
  };
  // optional .TSP.Reference cell_style = 5;
  bool has_cell_style() const;
  private:
  bool _internal_has_cell_style() const;
  public:
  void clear_cell_style();
  const ::TSP::Reference& cell_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_cell_style();
  ::TSP::Reference* mutable_cell_style();
  void set_allocated_cell_style(::TSP::Reference* cell_style);
  private:
  const ::TSP::Reference& _internal_cell_style() const;
  ::TSP::Reference* _internal_mutable_cell_style();
  public:
  void unsafe_arena_set_allocated_cell_style(
      ::TSP::Reference* cell_style);
  ::TSP::Reference* unsafe_arena_release_cell_style();

  // optional .TSP.Reference text_style = 6;
  bool has_text_style() const;
  private:
  bool _internal_has_text_style() const;
  public:
  void clear_text_style();
  const ::TSP::Reference& text_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_text_style();
  ::TSP::Reference* mutable_text_style();
  void set_allocated_text_style(::TSP::Reference* text_style);
  private:
  const ::TSP::Reference& _internal_text_style() const;
  ::TSP::Reference* _internal_mutable_text_style();
  public:
  void unsafe_arena_set_allocated_text_style(
      ::TSP::Reference* text_style);
  ::TSP::Reference* unsafe_arena_release_text_style();

  // required uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* cell_style_;
    ::TSP::Reference* text_style_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyTableStylePresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyTableStylePresetArchive) */ {
 public:
  inline CommandApplyTableStylePresetArchive() : CommandApplyTableStylePresetArchive(nullptr) {}
  ~CommandApplyTableStylePresetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyTableStylePresetArchive(const CommandApplyTableStylePresetArchive& from);
  CommandApplyTableStylePresetArchive(CommandApplyTableStylePresetArchive&& from) noexcept
    : CommandApplyTableStylePresetArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyTableStylePresetArchive& operator=(const CommandApplyTableStylePresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyTableStylePresetArchive& operator=(CommandApplyTableStylePresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyTableStylePresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyTableStylePresetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyTableStylePresetArchive*>(
               &_CommandApplyTableStylePresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CommandApplyTableStylePresetArchive& a, CommandApplyTableStylePresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyTableStylePresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyTableStylePresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyTableStylePresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyTableStylePresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyTableStylePresetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyTableStylePresetArchive& from) {
    CommandApplyTableStylePresetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyTableStylePresetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyTableStylePresetArchive";
  }
  protected:
  explicit CommandApplyTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandApplyTableStylePresetArchive_StyleIndexTuple StyleIndexTuple;

  // accessors -------------------------------------------------------

  enum : int {
    kRowStyleIndexTuplesFieldNumber = 13,
    kColStyleIndexTuplesFieldNumber = 14,
    kSuperFieldNumber = 1,
    kUndoCellMapFieldNumber = 2,
    kRedoCellMapFieldNumber = 4,
    kOldTableStylesFieldNumber = 7,
    kNewTableStylesFieldNumber = 8,
    kFontSizeCommandFieldNumber = 11,
    kSetStyleApplyClearsAllFlagCommandFieldNumber = 12,
    kPresetIndexFieldNumber = 5,
    kApplyClearsAllFieldNumber = 10,
  };
  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple row_style_index_tuples = 13;
  int row_style_index_tuples_size() const;
  private:
  int _internal_row_style_index_tuples_size() const;
  public:
  void clear_row_style_index_tuples();
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* mutable_row_style_index_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >*
      mutable_row_style_index_tuples();
  private:
  const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& _internal_row_style_index_tuples(int index) const;
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* _internal_add_row_style_index_tuples();
  public:
  const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& row_style_index_tuples(int index) const;
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* add_row_style_index_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >&
      row_style_index_tuples() const;

  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple col_style_index_tuples = 14;
  int col_style_index_tuples_size() const;
  private:
  int _internal_col_style_index_tuples_size() const;
  public:
  void clear_col_style_index_tuples();
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* mutable_col_style_index_tuples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >*
      mutable_col_style_index_tuples();
  private:
  const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& _internal_col_style_index_tuples(int index) const;
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* _internal_add_col_style_index_tuples();
  public:
  const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& col_style_index_tuples(int index) const;
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* add_col_style_index_tuples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >&
      col_style_index_tuples() const;

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellMapArchive undo_cell_map = 2;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // required .TST.TableStyleNetworkArchive old_table_styles = 7;
  bool has_old_table_styles() const;
  private:
  bool _internal_has_old_table_styles() const;
  public:
  void clear_old_table_styles();
  const ::TST::TableStyleNetworkArchive& old_table_styles() const;
  PROTOBUF_NODISCARD ::TST::TableStyleNetworkArchive* release_old_table_styles();
  ::TST::TableStyleNetworkArchive* mutable_old_table_styles();
  void set_allocated_old_table_styles(::TST::TableStyleNetworkArchive* old_table_styles);
  private:
  const ::TST::TableStyleNetworkArchive& _internal_old_table_styles() const;
  ::TST::TableStyleNetworkArchive* _internal_mutable_old_table_styles();
  public:
  void unsafe_arena_set_allocated_old_table_styles(
      ::TST::TableStyleNetworkArchive* old_table_styles);
  ::TST::TableStyleNetworkArchive* unsafe_arena_release_old_table_styles();

  // required .TST.TableStyleNetworkArchive new_table_styles = 8;
  bool has_new_table_styles() const;
  private:
  bool _internal_has_new_table_styles() const;
  public:
  void clear_new_table_styles();
  const ::TST::TableStyleNetworkArchive& new_table_styles() const;
  PROTOBUF_NODISCARD ::TST::TableStyleNetworkArchive* release_new_table_styles();
  ::TST::TableStyleNetworkArchive* mutable_new_table_styles();
  void set_allocated_new_table_styles(::TST::TableStyleNetworkArchive* new_table_styles);
  private:
  const ::TST::TableStyleNetworkArchive& _internal_new_table_styles() const;
  ::TST::TableStyleNetworkArchive* _internal_mutable_new_table_styles();
  public:
  void unsafe_arena_set_allocated_new_table_styles(
      ::TST::TableStyleNetworkArchive* new_table_styles);
  ::TST::TableStyleNetworkArchive* unsafe_arena_release_new_table_styles();

  // optional .TSP.Reference font_size_command = 11;
  bool has_font_size_command() const;
  private:
  bool _internal_has_font_size_command() const;
  public:
  void clear_font_size_command();
  const ::TSP::Reference& font_size_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_font_size_command();
  ::TSP::Reference* mutable_font_size_command();
  void set_allocated_font_size_command(::TSP::Reference* font_size_command);
  private:
  const ::TSP::Reference& _internal_font_size_command() const;
  ::TSP::Reference* _internal_mutable_font_size_command();
  public:
  void unsafe_arena_set_allocated_font_size_command(
      ::TSP::Reference* font_size_command);
  ::TSP::Reference* unsafe_arena_release_font_size_command();

  // optional .TSP.Reference set_style_apply_clears_all_flag_command = 12;
  bool has_set_style_apply_clears_all_flag_command() const;
  private:
  bool _internal_has_set_style_apply_clears_all_flag_command() const;
  public:
  void clear_set_style_apply_clears_all_flag_command();
  const ::TSP::Reference& set_style_apply_clears_all_flag_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_set_style_apply_clears_all_flag_command();
  ::TSP::Reference* mutable_set_style_apply_clears_all_flag_command();
  void set_allocated_set_style_apply_clears_all_flag_command(::TSP::Reference* set_style_apply_clears_all_flag_command);
  private:
  const ::TSP::Reference& _internal_set_style_apply_clears_all_flag_command() const;
  ::TSP::Reference* _internal_mutable_set_style_apply_clears_all_flag_command();
  public:
  void unsafe_arena_set_allocated_set_style_apply_clears_all_flag_command(
      ::TSP::Reference* set_style_apply_clears_all_flag_command);
  ::TSP::Reference* unsafe_arena_release_set_style_apply_clears_all_flag_command();

  // required int32 preset_index = 5;
  bool has_preset_index() const;
  private:
  bool _internal_has_preset_index() const;
  public:
  void clear_preset_index();
  int32_t preset_index() const;
  void set_preset_index(int32_t value);
  private:
  int32_t _internal_preset_index() const;
  void _internal_set_preset_index(int32_t value);
  public:

  // optional bool apply_clears_all = 10;
  bool has_apply_clears_all() const;
  private:
  bool _internal_has_apply_clears_all() const;
  public:
  void clear_apply_clears_all();
  bool apply_clears_all() const;
  void set_apply_clears_all(bool value);
  private:
  bool _internal_apply_clears_all() const;
  void _internal_set_apply_clears_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandApplyTableStylePresetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple > row_style_index_tuples_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple > col_style_index_tuples_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TST::TableStyleNetworkArchive* old_table_styles_;
    ::TST::TableStyleNetworkArchive* new_table_styles_;
    ::TSP::Reference* font_size_command_;
    ::TSP::Reference* set_style_apply_clears_all_flag_command_;
    int32_t preset_index_;
    bool apply_clears_all_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetStyleApplyClearsAllFlagArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetStyleApplyClearsAllFlagArchive) */ {
 public:
  inline CommandSetStyleApplyClearsAllFlagArchive() : CommandSetStyleApplyClearsAllFlagArchive(nullptr) {}
  ~CommandSetStyleApplyClearsAllFlagArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetStyleApplyClearsAllFlagArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetStyleApplyClearsAllFlagArchive(const CommandSetStyleApplyClearsAllFlagArchive& from);
  CommandSetStyleApplyClearsAllFlagArchive(CommandSetStyleApplyClearsAllFlagArchive&& from) noexcept
    : CommandSetStyleApplyClearsAllFlagArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetStyleApplyClearsAllFlagArchive& operator=(const CommandSetStyleApplyClearsAllFlagArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetStyleApplyClearsAllFlagArchive& operator=(CommandSetStyleApplyClearsAllFlagArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetStyleApplyClearsAllFlagArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetStyleApplyClearsAllFlagArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetStyleApplyClearsAllFlagArchive*>(
               &_CommandSetStyleApplyClearsAllFlagArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CommandSetStyleApplyClearsAllFlagArchive& a, CommandSetStyleApplyClearsAllFlagArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetStyleApplyClearsAllFlagArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetStyleApplyClearsAllFlagArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetStyleApplyClearsAllFlagArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetStyleApplyClearsAllFlagArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetStyleApplyClearsAllFlagArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetStyleApplyClearsAllFlagArchive& from) {
    CommandSetStyleApplyClearsAllFlagArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetStyleApplyClearsAllFlagArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetStyleApplyClearsAllFlagArchive";
  }
  protected:
  explicit CommandSetStyleApplyClearsAllFlagArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kApplyClearsAllFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required bool apply_clears_all = 2;
  bool has_apply_clears_all() const;
  private:
  bool _internal_has_apply_clears_all() const;
  public:
  void clear_apply_clears_all();
  bool apply_clears_all() const;
  void set_apply_clears_all(bool value);
  private:
  bool _internal_apply_clears_all() const;
  void _internal_set_apply_clears_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetStyleApplyClearsAllFlagArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    bool apply_clears_all_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyThemeToTableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyThemeToTableArchive) */ {
 public:
  inline CommandApplyThemeToTableArchive() : CommandApplyThemeToTableArchive(nullptr) {}
  ~CommandApplyThemeToTableArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyThemeToTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyThemeToTableArchive(const CommandApplyThemeToTableArchive& from);
  CommandApplyThemeToTableArchive(CommandApplyThemeToTableArchive&& from) noexcept
    : CommandApplyThemeToTableArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyThemeToTableArchive& operator=(const CommandApplyThemeToTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyThemeToTableArchive& operator=(CommandApplyThemeToTableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyThemeToTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyThemeToTableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyThemeToTableArchive*>(
               &_CommandApplyThemeToTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CommandApplyThemeToTableArchive& a, CommandApplyThemeToTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyThemeToTableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyThemeToTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyThemeToTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyThemeToTableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyThemeToTableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyThemeToTableArchive& from) {
    CommandApplyThemeToTableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyThemeToTableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyThemeToTableArchive";
  }
  protected:
  explicit CommandApplyThemeToTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoCellMapFieldNumber = 2,
    kRedoCellMapFieldNumber = 4,
    kOldTableStylesFieldNumber = 7,
    kNewTableStylesFieldNumber = 8,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellMapArchive undo_cell_map = 2;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // required .TST.TableStyleNetworkArchive old_table_styles = 7;
  bool has_old_table_styles() const;
  private:
  bool _internal_has_old_table_styles() const;
  public:
  void clear_old_table_styles();
  const ::TST::TableStyleNetworkArchive& old_table_styles() const;
  PROTOBUF_NODISCARD ::TST::TableStyleNetworkArchive* release_old_table_styles();
  ::TST::TableStyleNetworkArchive* mutable_old_table_styles();
  void set_allocated_old_table_styles(::TST::TableStyleNetworkArchive* old_table_styles);
  private:
  const ::TST::TableStyleNetworkArchive& _internal_old_table_styles() const;
  ::TST::TableStyleNetworkArchive* _internal_mutable_old_table_styles();
  public:
  void unsafe_arena_set_allocated_old_table_styles(
      ::TST::TableStyleNetworkArchive* old_table_styles);
  ::TST::TableStyleNetworkArchive* unsafe_arena_release_old_table_styles();

  // required .TST.TableStyleNetworkArchive new_table_styles = 8;
  bool has_new_table_styles() const;
  private:
  bool _internal_has_new_table_styles() const;
  public:
  void clear_new_table_styles();
  const ::TST::TableStyleNetworkArchive& new_table_styles() const;
  PROTOBUF_NODISCARD ::TST::TableStyleNetworkArchive* release_new_table_styles();
  ::TST::TableStyleNetworkArchive* mutable_new_table_styles();
  void set_allocated_new_table_styles(::TST::TableStyleNetworkArchive* new_table_styles);
  private:
  const ::TST::TableStyleNetworkArchive& _internal_new_table_styles() const;
  ::TST::TableStyleNetworkArchive* _internal_mutable_new_table_styles();
  public:
  void unsafe_arena_set_allocated_new_table_styles(
      ::TST::TableStyleNetworkArchive* new_table_styles);
  ::TST::TableStyleNetworkArchive* unsafe_arena_release_new_table_styles();

  // @@protoc_insertion_point(class_scope:TST.CommandApplyThemeToTableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TST::TableStyleNetworkArchive* old_table_styles_;
    ::TST::TableStyleNetworkArchive* new_table_styles_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyThemeChildForTableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyThemeChildForTableArchive) */ {
 public:
  inline CommandApplyThemeChildForTableArchive() : CommandApplyThemeChildForTableArchive(nullptr) {}
  ~CommandApplyThemeChildForTableArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyThemeChildForTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyThemeChildForTableArchive(const CommandApplyThemeChildForTableArchive& from);
  CommandApplyThemeChildForTableArchive(CommandApplyThemeChildForTableArchive&& from) noexcept
    : CommandApplyThemeChildForTableArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyThemeChildForTableArchive& operator=(const CommandApplyThemeChildForTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyThemeChildForTableArchive& operator=(CommandApplyThemeChildForTableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyThemeChildForTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyThemeChildForTableArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyThemeChildForTableArchive*>(
               &_CommandApplyThemeChildForTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CommandApplyThemeChildForTableArchive& a, CommandApplyThemeChildForTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyThemeChildForTableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyThemeChildForTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyThemeChildForTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyThemeChildForTableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyThemeChildForTableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyThemeChildForTableArchive& from) {
    CommandApplyThemeChildForTableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyThemeChildForTableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyThemeChildForTableArchive";
  }
  protected:
  explicit CommandApplyThemeChildForTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kApplyCommandFieldNumber = 2,
  };
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ApplyThemeChildCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::ApplyThemeChildCommandArchive* release_super();
  ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);
  private:
  const ::TSS::ApplyThemeChildCommandArchive& _internal_super() const;
  ::TSS::ApplyThemeChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ApplyThemeChildCommandArchive* super);
  ::TSS::ApplyThemeChildCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference apply_command = 2;
  bool has_apply_command() const;
  private:
  bool _internal_has_apply_command() const;
  public:
  void clear_apply_command();
  const ::TSP::Reference& apply_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_apply_command();
  ::TSP::Reference* mutable_apply_command();
  void set_allocated_apply_command(::TSP::Reference* apply_command);
  private:
  const ::TSP::Reference& _internal_apply_command() const;
  ::TSP::Reference* _internal_mutable_apply_command();
  public:
  void unsafe_arena_set_allocated_apply_command(
      ::TSP::Reference* apply_command);
  ::TSP::Reference* unsafe_arena_release_apply_command();

  // @@protoc_insertion_point(class_scope:TST.CommandApplyThemeChildForTableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::ApplyThemeChildCommandArchive* super_;
    ::TSP::Reference* apply_command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandToggleTextPropertyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandToggleTextPropertyArchive) */ {
 public:
  inline CommandToggleTextPropertyArchive() : CommandToggleTextPropertyArchive(nullptr) {}
  ~CommandToggleTextPropertyArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandToggleTextPropertyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandToggleTextPropertyArchive(const CommandToggleTextPropertyArchive& from);
  CommandToggleTextPropertyArchive(CommandToggleTextPropertyArchive&& from) noexcept
    : CommandToggleTextPropertyArchive() {
    *this = ::std::move(from);
  }

  inline CommandToggleTextPropertyArchive& operator=(const CommandToggleTextPropertyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandToggleTextPropertyArchive& operator=(CommandToggleTextPropertyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandToggleTextPropertyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandToggleTextPropertyArchive* internal_default_instance() {
    return reinterpret_cast<const CommandToggleTextPropertyArchive*>(
               &_CommandToggleTextPropertyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CommandToggleTextPropertyArchive& a, CommandToggleTextPropertyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandToggleTextPropertyArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandToggleTextPropertyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandToggleTextPropertyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandToggleTextPropertyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandToggleTextPropertyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandToggleTextPropertyArchive& from) {
    CommandToggleTextPropertyArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandToggleTextPropertyArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandToggleTextPropertyArchive";
  }
  protected:
  explicit CommandToggleTextPropertyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kUndoCellMapFieldNumber = 4,
    kRedoCellMapFieldNumber = 5,
    kDefaultBodyCellFieldNumber = 6,
    kDefaultHrCellFieldNumber = 7,
    kDefaultHcCellFieldNumber = 8,
    kDefaultFrCellFieldNumber = 9,
    kTextUndoFieldNumber = 10,
    kPropertyFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.SelectionArchive selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_cell_map = 4;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 5;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // required .TST.Cell default_body_cell = 6;
  bool has_default_body_cell() const;
  private:
  bool _internal_has_default_body_cell() const;
  public:
  void clear_default_body_cell();
  const ::TST::Cell& default_body_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_default_body_cell();
  ::TST::Cell* mutable_default_body_cell();
  void set_allocated_default_body_cell(::TST::Cell* default_body_cell);
  private:
  const ::TST::Cell& _internal_default_body_cell() const;
  ::TST::Cell* _internal_mutable_default_body_cell();
  public:
  void unsafe_arena_set_allocated_default_body_cell(
      ::TST::Cell* default_body_cell);
  ::TST::Cell* unsafe_arena_release_default_body_cell();

  // required .TST.Cell default_hr_cell = 7;
  bool has_default_hr_cell() const;
  private:
  bool _internal_has_default_hr_cell() const;
  public:
  void clear_default_hr_cell();
  const ::TST::Cell& default_hr_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_default_hr_cell();
  ::TST::Cell* mutable_default_hr_cell();
  void set_allocated_default_hr_cell(::TST::Cell* default_hr_cell);
  private:
  const ::TST::Cell& _internal_default_hr_cell() const;
  ::TST::Cell* _internal_mutable_default_hr_cell();
  public:
  void unsafe_arena_set_allocated_default_hr_cell(
      ::TST::Cell* default_hr_cell);
  ::TST::Cell* unsafe_arena_release_default_hr_cell();

  // required .TST.Cell default_hc_cell = 8;
  bool has_default_hc_cell() const;
  private:
  bool _internal_has_default_hc_cell() const;
  public:
  void clear_default_hc_cell();
  const ::TST::Cell& default_hc_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_default_hc_cell();
  ::TST::Cell* mutable_default_hc_cell();
  void set_allocated_default_hc_cell(::TST::Cell* default_hc_cell);
  private:
  const ::TST::Cell& _internal_default_hc_cell() const;
  ::TST::Cell* _internal_mutable_default_hc_cell();
  public:
  void unsafe_arena_set_allocated_default_hc_cell(
      ::TST::Cell* default_hc_cell);
  ::TST::Cell* unsafe_arena_release_default_hc_cell();

  // required .TST.Cell default_fr_cell = 9;
  bool has_default_fr_cell() const;
  private:
  bool _internal_has_default_fr_cell() const;
  public:
  void clear_default_fr_cell();
  const ::TST::Cell& default_fr_cell() const;
  PROTOBUF_NODISCARD ::TST::Cell* release_default_fr_cell();
  ::TST::Cell* mutable_default_fr_cell();
  void set_allocated_default_fr_cell(::TST::Cell* default_fr_cell);
  private:
  const ::TST::Cell& _internal_default_fr_cell() const;
  ::TST::Cell* _internal_mutable_default_fr_cell();
  public:
  void unsafe_arena_set_allocated_default_fr_cell(
      ::TST::Cell* default_fr_cell);
  ::TST::Cell* unsafe_arena_release_default_fr_cell();

  // optional .TSP.Reference text_undo = 10;
  bool has_text_undo() const;
  private:
  bool _internal_has_text_undo() const;
  public:
  void clear_text_undo();
  const ::TSP::Reference& text_undo() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_text_undo();
  ::TSP::Reference* mutable_text_undo();
  void set_allocated_text_undo(::TSP::Reference* text_undo);
  private:
  const ::TSP::Reference& _internal_text_undo() const;
  ::TSP::Reference* _internal_mutable_text_undo();
  public:
  void unsafe_arena_set_allocated_text_undo(
      ::TSP::Reference* text_undo);
  ::TSP::Reference* unsafe_arena_release_text_undo();

  // required uint32 property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  uint32_t property() const;
  void set_property(uint32_t value);
  private:
  uint32_t _internal_property() const;
  void _internal_set_property(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandToggleTextPropertyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TST::Cell* default_body_cell_;
    ::TST::Cell* default_hr_cell_;
    ::TST::Cell* default_hc_cell_;
    ::TST::Cell* default_fr_cell_;
    ::TSP::Reference* text_undo_;
    uint32_t property_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandResetFillPropertyToDefault final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandResetFillPropertyToDefault) */ {
 public:
  inline CommandResetFillPropertyToDefault() : CommandResetFillPropertyToDefault(nullptr) {}
  ~CommandResetFillPropertyToDefault() override;
  explicit PROTOBUF_CONSTEXPR CommandResetFillPropertyToDefault(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResetFillPropertyToDefault(const CommandResetFillPropertyToDefault& from);
  CommandResetFillPropertyToDefault(CommandResetFillPropertyToDefault&& from) noexcept
    : CommandResetFillPropertyToDefault() {
    *this = ::std::move(from);
  }

  inline CommandResetFillPropertyToDefault& operator=(const CommandResetFillPropertyToDefault& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResetFillPropertyToDefault& operator=(CommandResetFillPropertyToDefault&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResetFillPropertyToDefault& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResetFillPropertyToDefault* internal_default_instance() {
    return reinterpret_cast<const CommandResetFillPropertyToDefault*>(
               &_CommandResetFillPropertyToDefault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CommandResetFillPropertyToDefault& a, CommandResetFillPropertyToDefault& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResetFillPropertyToDefault* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResetFillPropertyToDefault* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResetFillPropertyToDefault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandResetFillPropertyToDefault>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResetFillPropertyToDefault& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandResetFillPropertyToDefault& from) {
    CommandResetFillPropertyToDefault::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResetFillPropertyToDefault* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandResetFillPropertyToDefault";
  }
  protected:
  explicit CommandResetFillPropertyToDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kUndoCellMapFieldNumber = 4,
    kRedoCellMapFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.SelectionArchive selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_cell_map = 4;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 5;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // @@protoc_insertion_point(class_scope:TST.CommandResetFillPropertyToDefault)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetSingleNumberFormatParameterArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetSingleNumberFormatParameterArchive) */ {
 public:
  inline CommandSetSingleNumberFormatParameterArchive() : CommandSetSingleNumberFormatParameterArchive(nullptr) {}
  ~CommandSetSingleNumberFormatParameterArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetSingleNumberFormatParameterArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetSingleNumberFormatParameterArchive(const CommandSetSingleNumberFormatParameterArchive& from);
  CommandSetSingleNumberFormatParameterArchive(CommandSetSingleNumberFormatParameterArchive&& from) noexcept
    : CommandSetSingleNumberFormatParameterArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetSingleNumberFormatParameterArchive& operator=(const CommandSetSingleNumberFormatParameterArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetSingleNumberFormatParameterArchive& operator=(CommandSetSingleNumberFormatParameterArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetSingleNumberFormatParameterArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetSingleNumberFormatParameterArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetSingleNumberFormatParameterArchive*>(
               &_CommandSetSingleNumberFormatParameterArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CommandSetSingleNumberFormatParameterArchive& a, CommandSetSingleNumberFormatParameterArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetSingleNumberFormatParameterArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetSingleNumberFormatParameterArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetSingleNumberFormatParameterArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetSingleNumberFormatParameterArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetSingleNumberFormatParameterArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetSingleNumberFormatParameterArchive& from) {
    CommandSetSingleNumberFormatParameterArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetSingleNumberFormatParameterArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetSingleNumberFormatParameterArchive";
  }
  protected:
  explicit CommandSetSingleNumberFormatParameterArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kUndoCellMapFieldNumber = 3,
    kRedoCellMapFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.SelectionArchive selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // @@protoc_insertion_point(class_scope:TST.CommandSetSingleNumberFormatParameterArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetBaseArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetBaseArchive) */ {
 public:
  inline CommandSetBaseArchive() : CommandSetBaseArchive(nullptr) {}
  ~CommandSetBaseArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetBaseArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetBaseArchive(const CommandSetBaseArchive& from);
  CommandSetBaseArchive(CommandSetBaseArchive&& from) noexcept
    : CommandSetBaseArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetBaseArchive& operator=(const CommandSetBaseArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetBaseArchive& operator=(CommandSetBaseArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetBaseArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetBaseArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetBaseArchive*>(
               &_CommandSetBaseArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CommandSetBaseArchive& a, CommandSetBaseArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetBaseArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetBaseArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetBaseArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetBaseArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetBaseArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetBaseArchive& from) {
    CommandSetBaseArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetBaseArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetBaseArchive";
  }
  protected:
  explicit CommandSetBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kBaseFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required uint32 base = 2;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  uint32_t base() const;
  void set_base(uint32_t value);
  private:
  uint32_t _internal_base() const;
  void _internal_set_base(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetBaseArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    uint32_t base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetBasePlacesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetBasePlacesArchive) */ {
 public:
  inline CommandSetBasePlacesArchive() : CommandSetBasePlacesArchive(nullptr) {}
  ~CommandSetBasePlacesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetBasePlacesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetBasePlacesArchive(const CommandSetBasePlacesArchive& from);
  CommandSetBasePlacesArchive(CommandSetBasePlacesArchive&& from) noexcept
    : CommandSetBasePlacesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetBasePlacesArchive& operator=(const CommandSetBasePlacesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetBasePlacesArchive& operator=(CommandSetBasePlacesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetBasePlacesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetBasePlacesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetBasePlacesArchive*>(
               &_CommandSetBasePlacesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CommandSetBasePlacesArchive& a, CommandSetBasePlacesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetBasePlacesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetBasePlacesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetBasePlacesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetBasePlacesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetBasePlacesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetBasePlacesArchive& from) {
    CommandSetBasePlacesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetBasePlacesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetBasePlacesArchive";
  }
  protected:
  explicit CommandSetBasePlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kBasePlacesFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required uint32 base_places = 2;
  bool has_base_places() const;
  private:
  bool _internal_has_base_places() const;
  public:
  void clear_base_places();
  uint32_t base_places() const;
  void set_base_places(uint32_t value);
  private:
  uint32_t _internal_base_places() const;
  void _internal_set_base_places(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetBasePlacesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    uint32_t base_places_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetBaseUseMinusSignArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetBaseUseMinusSignArchive) */ {
 public:
  inline CommandSetBaseUseMinusSignArchive() : CommandSetBaseUseMinusSignArchive(nullptr) {}
  ~CommandSetBaseUseMinusSignArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetBaseUseMinusSignArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetBaseUseMinusSignArchive(const CommandSetBaseUseMinusSignArchive& from);
  CommandSetBaseUseMinusSignArchive(CommandSetBaseUseMinusSignArchive&& from) noexcept
    : CommandSetBaseUseMinusSignArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetBaseUseMinusSignArchive& operator=(const CommandSetBaseUseMinusSignArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetBaseUseMinusSignArchive& operator=(CommandSetBaseUseMinusSignArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetBaseUseMinusSignArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetBaseUseMinusSignArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetBaseUseMinusSignArchive*>(
               &_CommandSetBaseUseMinusSignArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CommandSetBaseUseMinusSignArchive& a, CommandSetBaseUseMinusSignArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetBaseUseMinusSignArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetBaseUseMinusSignArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetBaseUseMinusSignArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetBaseUseMinusSignArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetBaseUseMinusSignArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetBaseUseMinusSignArchive& from) {
    CommandSetBaseUseMinusSignArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetBaseUseMinusSignArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetBaseUseMinusSignArchive";
  }
  protected:
  explicit CommandSetBaseUseMinusSignArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kBaseUseMinusSignFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required bool base_use_minus_sign = 2;
  bool has_base_use_minus_sign() const;
  private:
  bool _internal_has_base_use_minus_sign() const;
  public:
  void clear_base_use_minus_sign();
  bool base_use_minus_sign() const;
  void set_base_use_minus_sign(bool value);
  private:
  bool _internal_base_use_minus_sign() const;
  void _internal_set_base_use_minus_sign(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetBaseUseMinusSignArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    bool base_use_minus_sign_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetControlMinimumArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetControlMinimumArchive) */ {
 public:
  inline CommandSetControlMinimumArchive() : CommandSetControlMinimumArchive(nullptr) {}
  ~CommandSetControlMinimumArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetControlMinimumArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetControlMinimumArchive(const CommandSetControlMinimumArchive& from);
  CommandSetControlMinimumArchive(CommandSetControlMinimumArchive&& from) noexcept
    : CommandSetControlMinimumArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetControlMinimumArchive& operator=(const CommandSetControlMinimumArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetControlMinimumArchive& operator=(CommandSetControlMinimumArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetControlMinimumArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetControlMinimumArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetControlMinimumArchive*>(
               &_CommandSetControlMinimumArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CommandSetControlMinimumArchive& a, CommandSetControlMinimumArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetControlMinimumArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetControlMinimumArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetControlMinimumArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetControlMinimumArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetControlMinimumArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetControlMinimumArchive& from) {
    CommandSetControlMinimumArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetControlMinimumArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetControlMinimumArchive";
  }
  protected:
  explicit CommandSetControlMinimumArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMinimumFieldNumber = 2,
    kFormatTypeFieldNumber = 3,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required double minimum = 2;
  bool has_minimum() const;
  private:
  bool _internal_has_minimum() const;
  public:
  void clear_minimum();
  double minimum() const;
  void set_minimum(double value);
  private:
  double _internal_minimum() const;
  void _internal_set_minimum(double value);
  public:

  // required uint32 format_type = 3;
  bool has_format_type() const;
  private:
  bool _internal_has_format_type() const;
  public:
  void clear_format_type();
  uint32_t format_type() const;
  void set_format_type(uint32_t value);
  private:
  uint32_t _internal_format_type() const;
  void _internal_set_format_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetControlMinimumArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    double minimum_;
    uint32_t format_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetControlMaximumArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetControlMaximumArchive) */ {
 public:
  inline CommandSetControlMaximumArchive() : CommandSetControlMaximumArchive(nullptr) {}
  ~CommandSetControlMaximumArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetControlMaximumArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetControlMaximumArchive(const CommandSetControlMaximumArchive& from);
  CommandSetControlMaximumArchive(CommandSetControlMaximumArchive&& from) noexcept
    : CommandSetControlMaximumArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetControlMaximumArchive& operator=(const CommandSetControlMaximumArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetControlMaximumArchive& operator=(CommandSetControlMaximumArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetControlMaximumArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetControlMaximumArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetControlMaximumArchive*>(
               &_CommandSetControlMaximumArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CommandSetControlMaximumArchive& a, CommandSetControlMaximumArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetControlMaximumArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetControlMaximumArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetControlMaximumArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetControlMaximumArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetControlMaximumArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetControlMaximumArchive& from) {
    CommandSetControlMaximumArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetControlMaximumArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetControlMaximumArchive";
  }
  protected:
  explicit CommandSetControlMaximumArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMaximumFieldNumber = 2,
    kFormatTypeFieldNumber = 3,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required double maximum = 2;
  bool has_maximum() const;
  private:
  bool _internal_has_maximum() const;
  public:
  void clear_maximum();
  double maximum() const;
  void set_maximum(double value);
  private:
  double _internal_maximum() const;
  void _internal_set_maximum(double value);
  public:

  // required uint32 format_type = 3;
  bool has_format_type() const;
  private:
  bool _internal_has_format_type() const;
  public:
  void clear_format_type();
  uint32_t format_type() const;
  void set_format_type(uint32_t value);
  private:
  uint32_t _internal_format_type() const;
  void _internal_set_format_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetControlMaximumArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    double maximum_;
    uint32_t format_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetControlIncrementArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetControlIncrementArchive) */ {
 public:
  inline CommandSetControlIncrementArchive() : CommandSetControlIncrementArchive(nullptr) {}
  ~CommandSetControlIncrementArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetControlIncrementArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetControlIncrementArchive(const CommandSetControlIncrementArchive& from);
  CommandSetControlIncrementArchive(CommandSetControlIncrementArchive&& from) noexcept
    : CommandSetControlIncrementArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetControlIncrementArchive& operator=(const CommandSetControlIncrementArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetControlIncrementArchive& operator=(CommandSetControlIncrementArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetControlIncrementArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetControlIncrementArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetControlIncrementArchive*>(
               &_CommandSetControlIncrementArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CommandSetControlIncrementArchive& a, CommandSetControlIncrementArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetControlIncrementArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetControlIncrementArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetControlIncrementArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetControlIncrementArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetControlIncrementArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetControlIncrementArchive& from) {
    CommandSetControlIncrementArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetControlIncrementArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetControlIncrementArchive";
  }
  protected:
  explicit CommandSetControlIncrementArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kIncrementFieldNumber = 2,
    kFormatTypeFieldNumber = 3,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required double increment = 2;
  bool has_increment() const;
  private:
  bool _internal_has_increment() const;
  public:
  void clear_increment();
  double increment() const;
  void set_increment(double value);
  private:
  double _internal_increment() const;
  void _internal_set_increment(double value);
  public:

  // required uint32 format_type = 3;
  bool has_format_type() const;
  private:
  bool _internal_has_format_type() const;
  public:
  void clear_format_type();
  uint32_t format_type() const;
  void set_format_type(uint32_t value);
  private:
  uint32_t _internal_format_type() const;
  void _internal_set_format_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetControlIncrementArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    double increment_;
    uint32_t format_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetCurrencyCodeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetCurrencyCodeArchive) */ {
 public:
  inline CommandSetCurrencyCodeArchive() : CommandSetCurrencyCodeArchive(nullptr) {}
  ~CommandSetCurrencyCodeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetCurrencyCodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetCurrencyCodeArchive(const CommandSetCurrencyCodeArchive& from);
  CommandSetCurrencyCodeArchive(CommandSetCurrencyCodeArchive&& from) noexcept
    : CommandSetCurrencyCodeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetCurrencyCodeArchive& operator=(const CommandSetCurrencyCodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetCurrencyCodeArchive& operator=(CommandSetCurrencyCodeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetCurrencyCodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetCurrencyCodeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetCurrencyCodeArchive*>(
               &_CommandSetCurrencyCodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CommandSetCurrencyCodeArchive& a, CommandSetCurrencyCodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetCurrencyCodeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetCurrencyCodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetCurrencyCodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetCurrencyCodeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetCurrencyCodeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetCurrencyCodeArchive& from) {
    CommandSetCurrencyCodeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetCurrencyCodeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetCurrencyCodeArchive";
  }
  protected:
  explicit CommandSetCurrencyCodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // required string currency_code = 2;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  PROTOBUF_NODISCARD std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetCurrencyCodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFractionAccuracyArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFractionAccuracyArchive) */ {
 public:
  inline CommandSetFractionAccuracyArchive() : CommandSetFractionAccuracyArchive(nullptr) {}
  ~CommandSetFractionAccuracyArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFractionAccuracyArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFractionAccuracyArchive(const CommandSetFractionAccuracyArchive& from);
  CommandSetFractionAccuracyArchive(CommandSetFractionAccuracyArchive&& from) noexcept
    : CommandSetFractionAccuracyArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFractionAccuracyArchive& operator=(const CommandSetFractionAccuracyArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFractionAccuracyArchive& operator=(CommandSetFractionAccuracyArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFractionAccuracyArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFractionAccuracyArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFractionAccuracyArchive*>(
               &_CommandSetFractionAccuracyArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CommandSetFractionAccuracyArchive& a, CommandSetFractionAccuracyArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFractionAccuracyArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFractionAccuracyArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFractionAccuracyArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFractionAccuracyArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFractionAccuracyArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFractionAccuracyArchive& from) {
    CommandSetFractionAccuracyArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFractionAccuracyArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFractionAccuracyArchive";
  }
  protected:
  explicit CommandSetFractionAccuracyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFractionAccuracyFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required uint32 fraction_accuracy = 2;
  bool has_fraction_accuracy() const;
  private:
  bool _internal_has_fraction_accuracy() const;
  public:
  void clear_fraction_accuracy();
  uint32_t fraction_accuracy() const;
  void set_fraction_accuracy(uint32_t value);
  private:
  uint32_t _internal_fraction_accuracy() const;
  void _internal_set_fraction_accuracy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFractionAccuracyArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    uint32_t fraction_accuracy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultipleChoiceListFormatForEditedItemArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetMultipleChoiceListFormatForEditedItemArchive) */ {
 public:
  inline CommandSetMultipleChoiceListFormatForEditedItemArchive() : CommandSetMultipleChoiceListFormatForEditedItemArchive(nullptr) {}
  ~CommandSetMultipleChoiceListFormatForEditedItemArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultipleChoiceListFormatForEditedItemArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultipleChoiceListFormatForEditedItemArchive(const CommandSetMultipleChoiceListFormatForEditedItemArchive& from);
  CommandSetMultipleChoiceListFormatForEditedItemArchive(CommandSetMultipleChoiceListFormatForEditedItemArchive&& from) noexcept
    : CommandSetMultipleChoiceListFormatForEditedItemArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultipleChoiceListFormatForEditedItemArchive& operator=(const CommandSetMultipleChoiceListFormatForEditedItemArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultipleChoiceListFormatForEditedItemArchive& operator=(CommandSetMultipleChoiceListFormatForEditedItemArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultipleChoiceListFormatForEditedItemArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultipleChoiceListFormatForEditedItemArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultipleChoiceListFormatForEditedItemArchive*>(
               &_CommandSetMultipleChoiceListFormatForEditedItemArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CommandSetMultipleChoiceListFormatForEditedItemArchive& a, CommandSetMultipleChoiceListFormatForEditedItemArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultipleChoiceListFormatForEditedItemArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultipleChoiceListFormatForEditedItemArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultipleChoiceListFormatForEditedItemArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultipleChoiceListFormatForEditedItemArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultipleChoiceListFormatForEditedItemArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultipleChoiceListFormatForEditedItemArchive& from) {
    CommandSetMultipleChoiceListFormatForEditedItemArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultipleChoiceListFormatForEditedItemArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetMultipleChoiceListFormatForEditedItemArchive";
  }
  protected:
  explicit CommandSetMultipleChoiceListFormatForEditedItemArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetMultipleChoiceListFormatForEditedItemArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultipleChoiceListFormatForDeleteItemArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive) */ {
 public:
  inline CommandSetMultipleChoiceListFormatForDeleteItemArchive() : CommandSetMultipleChoiceListFormatForDeleteItemArchive(nullptr) {}
  ~CommandSetMultipleChoiceListFormatForDeleteItemArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultipleChoiceListFormatForDeleteItemArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultipleChoiceListFormatForDeleteItemArchive(const CommandSetMultipleChoiceListFormatForDeleteItemArchive& from);
  CommandSetMultipleChoiceListFormatForDeleteItemArchive(CommandSetMultipleChoiceListFormatForDeleteItemArchive&& from) noexcept
    : CommandSetMultipleChoiceListFormatForDeleteItemArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultipleChoiceListFormatForDeleteItemArchive& operator=(const CommandSetMultipleChoiceListFormatForDeleteItemArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultipleChoiceListFormatForDeleteItemArchive& operator=(CommandSetMultipleChoiceListFormatForDeleteItemArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultipleChoiceListFormatForDeleteItemArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultipleChoiceListFormatForDeleteItemArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultipleChoiceListFormatForDeleteItemArchive*>(
               &_CommandSetMultipleChoiceListFormatForDeleteItemArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CommandSetMultipleChoiceListFormatForDeleteItemArchive& a, CommandSetMultipleChoiceListFormatForDeleteItemArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultipleChoiceListFormatForDeleteItemArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultipleChoiceListFormatForDeleteItemArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultipleChoiceListFormatForDeleteItemArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultipleChoiceListFormatForDeleteItemArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultipleChoiceListFormatForDeleteItemArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultipleChoiceListFormatForDeleteItemArchive& from) {
    CommandSetMultipleChoiceListFormatForDeleteItemArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultipleChoiceListFormatForDeleteItemArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive";
  }
  protected:
  explicit CommandSetMultipleChoiceListFormatForDeleteItemArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultipleChoiceListFormatForReorderItemArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetMultipleChoiceListFormatForReorderItemArchive) */ {
 public:
  inline CommandSetMultipleChoiceListFormatForReorderItemArchive() : CommandSetMultipleChoiceListFormatForReorderItemArchive(nullptr) {}
  ~CommandSetMultipleChoiceListFormatForReorderItemArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultipleChoiceListFormatForReorderItemArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultipleChoiceListFormatForReorderItemArchive(const CommandSetMultipleChoiceListFormatForReorderItemArchive& from);
  CommandSetMultipleChoiceListFormatForReorderItemArchive(CommandSetMultipleChoiceListFormatForReorderItemArchive&& from) noexcept
    : CommandSetMultipleChoiceListFormatForReorderItemArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultipleChoiceListFormatForReorderItemArchive& operator=(const CommandSetMultipleChoiceListFormatForReorderItemArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultipleChoiceListFormatForReorderItemArchive& operator=(CommandSetMultipleChoiceListFormatForReorderItemArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultipleChoiceListFormatForReorderItemArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultipleChoiceListFormatForReorderItemArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultipleChoiceListFormatForReorderItemArchive*>(
               &_CommandSetMultipleChoiceListFormatForReorderItemArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CommandSetMultipleChoiceListFormatForReorderItemArchive& a, CommandSetMultipleChoiceListFormatForReorderItemArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultipleChoiceListFormatForReorderItemArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultipleChoiceListFormatForReorderItemArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultipleChoiceListFormatForReorderItemArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultipleChoiceListFormatForReorderItemArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultipleChoiceListFormatForReorderItemArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultipleChoiceListFormatForReorderItemArchive& from) {
    CommandSetMultipleChoiceListFormatForReorderItemArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultipleChoiceListFormatForReorderItemArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetMultipleChoiceListFormatForReorderItemArchive";
  }
  protected:
  explicit CommandSetMultipleChoiceListFormatForReorderItemArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetMultipleChoiceListFormatForReorderItemArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetMultipleChoiceListFormatForInitialValueArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetMultipleChoiceListFormatForInitialValueArchive) */ {
 public:
  inline CommandSetMultipleChoiceListFormatForInitialValueArchive() : CommandSetMultipleChoiceListFormatForInitialValueArchive(nullptr) {}
  ~CommandSetMultipleChoiceListFormatForInitialValueArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetMultipleChoiceListFormatForInitialValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetMultipleChoiceListFormatForInitialValueArchive(const CommandSetMultipleChoiceListFormatForInitialValueArchive& from);
  CommandSetMultipleChoiceListFormatForInitialValueArchive(CommandSetMultipleChoiceListFormatForInitialValueArchive&& from) noexcept
    : CommandSetMultipleChoiceListFormatForInitialValueArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetMultipleChoiceListFormatForInitialValueArchive& operator=(const CommandSetMultipleChoiceListFormatForInitialValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetMultipleChoiceListFormatForInitialValueArchive& operator=(CommandSetMultipleChoiceListFormatForInitialValueArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetMultipleChoiceListFormatForInitialValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetMultipleChoiceListFormatForInitialValueArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetMultipleChoiceListFormatForInitialValueArchive*>(
               &_CommandSetMultipleChoiceListFormatForInitialValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CommandSetMultipleChoiceListFormatForInitialValueArchive& a, CommandSetMultipleChoiceListFormatForInitialValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetMultipleChoiceListFormatForInitialValueArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetMultipleChoiceListFormatForInitialValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetMultipleChoiceListFormatForInitialValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetMultipleChoiceListFormatForInitialValueArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetMultipleChoiceListFormatForInitialValueArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetMultipleChoiceListFormatForInitialValueArchive& from) {
    CommandSetMultipleChoiceListFormatForInitialValueArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetMultipleChoiceListFormatForInitialValueArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetMultipleChoiceListFormatForInitialValueArchive";
  }
  protected:
  explicit CommandSetMultipleChoiceListFormatForInitialValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetMultipleChoiceListFormatForInitialValueArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetNegativeNumberStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetNegativeNumberStyleArchive) */ {
 public:
  inline CommandSetNegativeNumberStyleArchive() : CommandSetNegativeNumberStyleArchive(nullptr) {}
  ~CommandSetNegativeNumberStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetNegativeNumberStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetNegativeNumberStyleArchive(const CommandSetNegativeNumberStyleArchive& from);
  CommandSetNegativeNumberStyleArchive(CommandSetNegativeNumberStyleArchive&& from) noexcept
    : CommandSetNegativeNumberStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetNegativeNumberStyleArchive& operator=(const CommandSetNegativeNumberStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetNegativeNumberStyleArchive& operator=(CommandSetNegativeNumberStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetNegativeNumberStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetNegativeNumberStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetNegativeNumberStyleArchive*>(
               &_CommandSetNegativeNumberStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CommandSetNegativeNumberStyleArchive& a, CommandSetNegativeNumberStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetNegativeNumberStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetNegativeNumberStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetNegativeNumberStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetNegativeNumberStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetNegativeNumberStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetNegativeNumberStyleArchive& from) {
    CommandSetNegativeNumberStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetNegativeNumberStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetNegativeNumberStyleArchive";
  }
  protected:
  explicit CommandSetNegativeNumberStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNegativeNumberStyleFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required uint32 negative_number_style = 2;
  bool has_negative_number_style() const;
  private:
  bool _internal_has_negative_number_style() const;
  public:
  void clear_negative_number_style();
  uint32_t negative_number_style() const;
  void set_negative_number_style(uint32_t value);
  private:
  uint32_t _internal_negative_number_style() const;
  void _internal_set_negative_number_style(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetNegativeNumberStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    uint32_t negative_number_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetExplicitFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetExplicitFormatArchive) */ {
 public:
  inline CommandSetExplicitFormatArchive() : CommandSetExplicitFormatArchive(nullptr) {}
  ~CommandSetExplicitFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetExplicitFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetExplicitFormatArchive(const CommandSetExplicitFormatArchive& from);
  CommandSetExplicitFormatArchive(CommandSetExplicitFormatArchive&& from) noexcept
    : CommandSetExplicitFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetExplicitFormatArchive& operator=(const CommandSetExplicitFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetExplicitFormatArchive& operator=(CommandSetExplicitFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetExplicitFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetExplicitFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetExplicitFormatArchive*>(
               &_CommandSetExplicitFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CommandSetExplicitFormatArchive& a, CommandSetExplicitFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetExplicitFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetExplicitFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetExplicitFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetExplicitFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetExplicitFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetExplicitFormatArchive& from) {
    CommandSetExplicitFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetExplicitFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetExplicitFormatArchive";
  }
  protected:
  explicit CommandSetExplicitFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kCellFormatFieldNumber = 3,
    kUndoCellMapFieldNumber = 4,
    kRedoCellMapFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.SelectionArchive selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TSK.FormatStructArchive cell_format = 3;
  bool has_cell_format() const;
  private:
  bool _internal_has_cell_format() const;
  public:
  void clear_cell_format();
  const ::TSK::FormatStructArchive& cell_format() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_cell_format();
  ::TSK::FormatStructArchive* mutable_cell_format();
  void set_allocated_cell_format(::TSK::FormatStructArchive* cell_format);
  private:
  const ::TSK::FormatStructArchive& _internal_cell_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_cell_format();
  public:
  void unsafe_arena_set_allocated_cell_format(
      ::TSK::FormatStructArchive* cell_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_cell_format();

  // required .TST.CellMapArchive undo_cell_map = 4;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 5;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // @@protoc_insertion_point(class_scope:TST.CommandSetExplicitFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TSK::FormatStructArchive* cell_format_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetNumberOfDecimalPlacesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetNumberOfDecimalPlacesArchive) */ {
 public:
  inline CommandSetNumberOfDecimalPlacesArchive() : CommandSetNumberOfDecimalPlacesArchive(nullptr) {}
  ~CommandSetNumberOfDecimalPlacesArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetNumberOfDecimalPlacesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetNumberOfDecimalPlacesArchive(const CommandSetNumberOfDecimalPlacesArchive& from);
  CommandSetNumberOfDecimalPlacesArchive(CommandSetNumberOfDecimalPlacesArchive&& from) noexcept
    : CommandSetNumberOfDecimalPlacesArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetNumberOfDecimalPlacesArchive& operator=(const CommandSetNumberOfDecimalPlacesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetNumberOfDecimalPlacesArchive& operator=(CommandSetNumberOfDecimalPlacesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetNumberOfDecimalPlacesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetNumberOfDecimalPlacesArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetNumberOfDecimalPlacesArchive*>(
               &_CommandSetNumberOfDecimalPlacesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CommandSetNumberOfDecimalPlacesArchive& a, CommandSetNumberOfDecimalPlacesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetNumberOfDecimalPlacesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetNumberOfDecimalPlacesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetNumberOfDecimalPlacesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetNumberOfDecimalPlacesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetNumberOfDecimalPlacesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetNumberOfDecimalPlacesArchive& from) {
    CommandSetNumberOfDecimalPlacesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetNumberOfDecimalPlacesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetNumberOfDecimalPlacesArchive";
  }
  protected:
  explicit CommandSetNumberOfDecimalPlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDecimalPlacesFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required uint32 decimal_places = 2;
  bool has_decimal_places() const;
  private:
  bool _internal_has_decimal_places() const;
  public:
  void clear_decimal_places();
  uint32_t decimal_places() const;
  void set_decimal_places(uint32_t value);
  private:
  uint32_t _internal_decimal_places() const;
  void _internal_set_decimal_places(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetNumberOfDecimalPlacesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    uint32_t decimal_places_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetDateTimeFormatArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetDateTimeFormatArchive) */ {
 public:
  inline CommandSetDateTimeFormatArchive() : CommandSetDateTimeFormatArchive(nullptr) {}
  ~CommandSetDateTimeFormatArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetDateTimeFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetDateTimeFormatArchive(const CommandSetDateTimeFormatArchive& from);
  CommandSetDateTimeFormatArchive(CommandSetDateTimeFormatArchive&& from) noexcept
    : CommandSetDateTimeFormatArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetDateTimeFormatArchive& operator=(const CommandSetDateTimeFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetDateTimeFormatArchive& operator=(CommandSetDateTimeFormatArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetDateTimeFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetDateTimeFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetDateTimeFormatArchive*>(
               &_CommandSetDateTimeFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CommandSetDateTimeFormatArchive& a, CommandSetDateTimeFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetDateTimeFormatArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetDateTimeFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetDateTimeFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetDateTimeFormatArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetDateTimeFormatArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetDateTimeFormatArchive& from) {
    CommandSetDateTimeFormatArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetDateTimeFormatArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetDateTimeFormatArchive";
  }
  protected:
  explicit CommandSetDateTimeFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandSetDateTimeFormatArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetShowThousandsSeparatorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetShowThousandsSeparatorArchive) */ {
 public:
  inline CommandSetShowThousandsSeparatorArchive() : CommandSetShowThousandsSeparatorArchive(nullptr) {}
  ~CommandSetShowThousandsSeparatorArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetShowThousandsSeparatorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetShowThousandsSeparatorArchive(const CommandSetShowThousandsSeparatorArchive& from);
  CommandSetShowThousandsSeparatorArchive(CommandSetShowThousandsSeparatorArchive&& from) noexcept
    : CommandSetShowThousandsSeparatorArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetShowThousandsSeparatorArchive& operator=(const CommandSetShowThousandsSeparatorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetShowThousandsSeparatorArchive& operator=(CommandSetShowThousandsSeparatorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetShowThousandsSeparatorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetShowThousandsSeparatorArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetShowThousandsSeparatorArchive*>(
               &_CommandSetShowThousandsSeparatorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CommandSetShowThousandsSeparatorArchive& a, CommandSetShowThousandsSeparatorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetShowThousandsSeparatorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetShowThousandsSeparatorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetShowThousandsSeparatorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetShowThousandsSeparatorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetShowThousandsSeparatorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetShowThousandsSeparatorArchive& from) {
    CommandSetShowThousandsSeparatorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetShowThousandsSeparatorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetShowThousandsSeparatorArchive";
  }
  protected:
  explicit CommandSetShowThousandsSeparatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kShowThousandsSeparatorFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required bool show_thousands_separator = 2;
  bool has_show_thousands_separator() const;
  private:
  bool _internal_has_show_thousands_separator() const;
  public:
  void clear_show_thousands_separator();
  bool show_thousands_separator() const;
  void set_show_thousands_separator(bool value);
  private:
  bool _internal_show_thousands_separator() const;
  void _internal_set_show_thousands_separator(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetShowThousandsSeparatorArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    bool show_thousands_separator_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetUseAccountingStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetUseAccountingStyleArchive) */ {
 public:
  inline CommandSetUseAccountingStyleArchive() : CommandSetUseAccountingStyleArchive(nullptr) {}
  ~CommandSetUseAccountingStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetUseAccountingStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetUseAccountingStyleArchive(const CommandSetUseAccountingStyleArchive& from);
  CommandSetUseAccountingStyleArchive(CommandSetUseAccountingStyleArchive&& from) noexcept
    : CommandSetUseAccountingStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetUseAccountingStyleArchive& operator=(const CommandSetUseAccountingStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetUseAccountingStyleArchive& operator=(CommandSetUseAccountingStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetUseAccountingStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetUseAccountingStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetUseAccountingStyleArchive*>(
               &_CommandSetUseAccountingStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CommandSetUseAccountingStyleArchive& a, CommandSetUseAccountingStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetUseAccountingStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetUseAccountingStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetUseAccountingStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetUseAccountingStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetUseAccountingStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetUseAccountingStyleArchive& from) {
    CommandSetUseAccountingStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetUseAccountingStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetUseAccountingStyleArchive";
  }
  protected:
  explicit CommandSetUseAccountingStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUseAccountingStyleFieldNumber = 2,
  };
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::CommandSetSingleNumberFormatParameterArchive& super() const;
  PROTOBUF_NODISCARD ::TST::CommandSetSingleNumberFormatParameterArchive* release_super();
  ::TST::CommandSetSingleNumberFormatParameterArchive* mutable_super();
  void set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super);
  private:
  const ::TST::CommandSetSingleNumberFormatParameterArchive& _internal_super() const;
  ::TST::CommandSetSingleNumberFormatParameterArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::CommandSetSingleNumberFormatParameterArchive* super);
  ::TST::CommandSetSingleNumberFormatParameterArchive* unsafe_arena_release_super();

  // required bool use_accounting_style = 2;
  bool has_use_accounting_style() const;
  private:
  bool _internal_has_use_accounting_style() const;
  public:
  void clear_use_accounting_style();
  bool use_accounting_style() const;
  void set_use_accounting_style(bool value);
  private:
  bool _internal_use_accounting_style() const;
  void _internal_set_use_accounting_style(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetUseAccountingStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::CommandSetSingleNumberFormatParameterArchive* super_;
    bool use_accounting_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveRowsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMoveRowsArchive) */ {
 public:
  inline CommandMoveRowsArchive() : CommandMoveRowsArchive(nullptr) {}
  ~CommandMoveRowsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMoveRowsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveRowsArchive(const CommandMoveRowsArchive& from);
  CommandMoveRowsArchive(CommandMoveRowsArchive&& from) noexcept
    : CommandMoveRowsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveRowsArchive& operator=(const CommandMoveRowsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveRowsArchive& operator=(CommandMoveRowsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveRowsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveRowsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveRowsArchive*>(
               &_CommandMoveRowsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CommandMoveRowsArchive& a, CommandMoveRowsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveRowsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveRowsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMoveRowsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMoveRowsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveRowsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMoveRowsArchive& from) {
    CommandMoveRowsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveRowsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMoveRowsArchive";
  }
  protected:
  explicit CommandMoveRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kFormulaRewriteCommandFieldNumber = 7,
    kShowCommandFieldNumber = 8,
    kUnmergeInvalidRangesCommandFieldNumber = 9,
    kStartRowIndexFieldNumber = 3,
    kDestRowIndexFieldNumber = 4,
    kNumberOfRowsFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.SelectionArchive selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // optional .TSP.Reference formula_rewrite_command = 7;
  bool has_formula_rewrite_command() const;
  private:
  bool _internal_has_formula_rewrite_command() const;
  public:
  void clear_formula_rewrite_command();
  const ::TSP::Reference& formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command();
  ::TSP::Reference* mutable_formula_rewrite_command();
  void set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command(
      ::TSP::Reference* formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command();

  // optional .TSP.Reference show_command = 8;
  bool has_show_command() const;
  private:
  bool _internal_has_show_command() const;
  public:
  void clear_show_command();
  const ::TSP::Reference& show_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show_command();
  ::TSP::Reference* mutable_show_command();
  void set_allocated_show_command(::TSP::Reference* show_command);
  private:
  const ::TSP::Reference& _internal_show_command() const;
  ::TSP::Reference* _internal_mutable_show_command();
  public:
  void unsafe_arena_set_allocated_show_command(
      ::TSP::Reference* show_command);
  ::TSP::Reference* unsafe_arena_release_show_command();

  // optional .TSP.Reference unmerge_invalid_ranges_command = 9;
  bool has_unmerge_invalid_ranges_command() const;
  private:
  bool _internal_has_unmerge_invalid_ranges_command() const;
  public:
  void clear_unmerge_invalid_ranges_command();
  const ::TSP::Reference& unmerge_invalid_ranges_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_unmerge_invalid_ranges_command();
  ::TSP::Reference* mutable_unmerge_invalid_ranges_command();
  void set_allocated_unmerge_invalid_ranges_command(::TSP::Reference* unmerge_invalid_ranges_command);
  private:
  const ::TSP::Reference& _internal_unmerge_invalid_ranges_command() const;
  ::TSP::Reference* _internal_mutable_unmerge_invalid_ranges_command();
  public:
  void unsafe_arena_set_allocated_unmerge_invalid_ranges_command(
      ::TSP::Reference* unmerge_invalid_ranges_command);
  ::TSP::Reference* unsafe_arena_release_unmerge_invalid_ranges_command();

  // required uint32 start_row_index = 3;
  bool has_start_row_index() const;
  private:
  bool _internal_has_start_row_index() const;
  public:
  void clear_start_row_index();
  uint32_t start_row_index() const;
  void set_start_row_index(uint32_t value);
  private:
  uint32_t _internal_start_row_index() const;
  void _internal_set_start_row_index(uint32_t value);
  public:

  // required uint32 dest_row_index = 4;
  bool has_dest_row_index() const;
  private:
  bool _internal_has_dest_row_index() const;
  public:
  void clear_dest_row_index();
  uint32_t dest_row_index() const;
  void set_dest_row_index(uint32_t value);
  private:
  uint32_t _internal_dest_row_index() const;
  void _internal_set_dest_row_index(uint32_t value);
  public:

  // required uint32 number_of_rows = 5;
  bool has_number_of_rows() const;
  private:
  bool _internal_has_number_of_rows() const;
  public:
  void clear_number_of_rows();
  uint32_t number_of_rows() const;
  void set_number_of_rows(uint32_t value);
  private:
  uint32_t _internal_number_of_rows() const;
  void _internal_set_number_of_rows(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandMoveRowsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TSP::Reference* formula_rewrite_command_;
    ::TSP::Reference* show_command_;
    ::TSP::Reference* unmerge_invalid_ranges_command_;
    uint32_t start_row_index_;
    uint32_t dest_row_index_;
    uint32_t number_of_rows_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMoveColumnsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMoveColumnsArchive) */ {
 public:
  inline CommandMoveColumnsArchive() : CommandMoveColumnsArchive(nullptr) {}
  ~CommandMoveColumnsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMoveColumnsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMoveColumnsArchive(const CommandMoveColumnsArchive& from);
  CommandMoveColumnsArchive(CommandMoveColumnsArchive&& from) noexcept
    : CommandMoveColumnsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMoveColumnsArchive& operator=(const CommandMoveColumnsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMoveColumnsArchive& operator=(CommandMoveColumnsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMoveColumnsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMoveColumnsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMoveColumnsArchive*>(
               &_CommandMoveColumnsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CommandMoveColumnsArchive& a, CommandMoveColumnsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMoveColumnsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMoveColumnsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMoveColumnsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMoveColumnsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMoveColumnsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMoveColumnsArchive& from) {
    CommandMoveColumnsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMoveColumnsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMoveColumnsArchive";
  }
  protected:
  explicit CommandMoveColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kFormulaRewriteCommandFieldNumber = 7,
    kShowCommandFieldNumber = 8,
    kStartColumnIndexFieldNumber = 3,
    kDestColumnIndexFieldNumber = 4,
    kNumberOfColumnsFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TST.SelectionArchive selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // optional .TSP.Reference formula_rewrite_command = 7;
  bool has_formula_rewrite_command() const;
  private:
  bool _internal_has_formula_rewrite_command() const;
  public:
  void clear_formula_rewrite_command();
  const ::TSP::Reference& formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command();
  ::TSP::Reference* mutable_formula_rewrite_command();
  void set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command(
      ::TSP::Reference* formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command();

  // optional .TSP.Reference show_command = 8;
  bool has_show_command() const;
  private:
  bool _internal_has_show_command() const;
  public:
  void clear_show_command();
  const ::TSP::Reference& show_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_show_command();
  ::TSP::Reference* mutable_show_command();
  void set_allocated_show_command(::TSP::Reference* show_command);
  private:
  const ::TSP::Reference& _internal_show_command() const;
  ::TSP::Reference* _internal_mutable_show_command();
  public:
  void unsafe_arena_set_allocated_show_command(
      ::TSP::Reference* show_command);
  ::TSP::Reference* unsafe_arena_release_show_command();

  // required uint32 start_column_index = 3;
  bool has_start_column_index() const;
  private:
  bool _internal_has_start_column_index() const;
  public:
  void clear_start_column_index();
  uint32_t start_column_index() const;
  void set_start_column_index(uint32_t value);
  private:
  uint32_t _internal_start_column_index() const;
  void _internal_set_start_column_index(uint32_t value);
  public:

  // required uint32 dest_column_index = 4;
  bool has_dest_column_index() const;
  private:
  bool _internal_has_dest_column_index() const;
  public:
  void clear_dest_column_index();
  uint32_t dest_column_index() const;
  void set_dest_column_index(uint32_t value);
  private:
  uint32_t _internal_dest_column_index() const;
  void _internal_set_dest_column_index(uint32_t value);
  public:

  // required uint32 number_of_columns = 5;
  bool has_number_of_columns() const;
  private:
  bool _internal_has_number_of_columns() const;
  public:
  void clear_number_of_columns();
  uint32_t number_of_columns() const;
  void set_number_of_columns(uint32_t value);
  private:
  uint32_t _internal_number_of_columns() const;
  void _internal_set_number_of_columns(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandMoveColumnsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TSP::Reference* formula_rewrite_command_;
    ::TSP::Reference* show_command_;
    uint32_t start_column_index_;
    uint32_t dest_column_index_;
    uint32_t number_of_columns_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSortArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSortArchive) */ {
 public:
  inline CommandSortArchive() : CommandSortArchive(nullptr) {}
  ~CommandSortArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSortArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSortArchive(const CommandSortArchive& from);
  CommandSortArchive(CommandSortArchive&& from) noexcept
    : CommandSortArchive() {
    *this = ::std::move(from);
  }

  inline CommandSortArchive& operator=(const CommandSortArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSortArchive& operator=(CommandSortArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSortArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSortArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSortArchive*>(
               &_CommandSortArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CommandSortArchive& a, CommandSortArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSortArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSortArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSortArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSortArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSortArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSortArchive& from) {
    CommandSortArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSortArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSortArchive";
  }
  protected:
  explicit CommandSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMappingFieldNumber = 5,
    kFormulaRewriteCommandFieldNumber = 7,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSK.ShuffleMappingArchive mapping = 5;
  bool has_mapping() const;
  private:
  bool _internal_has_mapping() const;
  public:
  void clear_mapping();
  const ::TSK::ShuffleMappingArchive& mapping() const;
  PROTOBUF_NODISCARD ::TSK::ShuffleMappingArchive* release_mapping();
  ::TSK::ShuffleMappingArchive* mutable_mapping();
  void set_allocated_mapping(::TSK::ShuffleMappingArchive* mapping);
  private:
  const ::TSK::ShuffleMappingArchive& _internal_mapping() const;
  ::TSK::ShuffleMappingArchive* _internal_mutable_mapping();
  public:
  void unsafe_arena_set_allocated_mapping(
      ::TSK::ShuffleMappingArchive* mapping);
  ::TSK::ShuffleMappingArchive* unsafe_arena_release_mapping();

  // optional .TSP.Reference formula_rewrite_command = 7;
  bool has_formula_rewrite_command() const;
  private:
  bool _internal_has_formula_rewrite_command() const;
  public:
  void clear_formula_rewrite_command();
  const ::TSP::Reference& formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_formula_rewrite_command();
  ::TSP::Reference* mutable_formula_rewrite_command();
  void set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_formula_rewrite_command(
      ::TSP::Reference* formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_formula_rewrite_command();

  // @@protoc_insertion_point(class_scope:TST.CommandSortArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSK::ShuffleMappingArchive* mapping_;
    ::TSP::Reference* formula_rewrite_command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFormulasForSortArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFormulasForSortArchive) */ {
 public:
  inline CommandRewriteFormulasForSortArchive() : CommandRewriteFormulasForSortArchive(nullptr) {}
  ~CommandRewriteFormulasForSortArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFormulasForSortArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFormulasForSortArchive(const CommandRewriteFormulasForSortArchive& from);
  CommandRewriteFormulasForSortArchive(CommandRewriteFormulasForSortArchive&& from) noexcept
    : CommandRewriteFormulasForSortArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFormulasForSortArchive& operator=(const CommandRewriteFormulasForSortArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFormulasForSortArchive& operator=(CommandRewriteFormulasForSortArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFormulasForSortArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFormulasForSortArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFormulasForSortArchive*>(
               &_CommandRewriteFormulasForSortArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CommandRewriteFormulasForSortArchive& a, CommandRewriteFormulasForSortArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFormulasForSortArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFormulasForSortArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFormulasForSortArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFormulasForSortArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFormulasForSortArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFormulasForSortArchive& from) {
    CommandRewriteFormulasForSortArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFormulasForSortArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFormulasForSortArchive";
  }
  protected:
  explicit CommandRewriteFormulasForSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormulaMapFieldNumber = 2,
    kSortMappingFieldNumber = 3,
    kSortedTableIdFieldNumber = 4,
    kExplodeRangesFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  bool has_formula_map() const;
  private:
  bool _internal_has_formula_map() const;
  public:
  void clear_formula_map();
  const ::TSCE::OwnerFormulaMapArchive& formula_map() const;
  PROTOBUF_NODISCARD ::TSCE::OwnerFormulaMapArchive* release_formula_map();
  ::TSCE::OwnerFormulaMapArchive* mutable_formula_map();
  void set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map);
  private:
  const ::TSCE::OwnerFormulaMapArchive& _internal_formula_map() const;
  ::TSCE::OwnerFormulaMapArchive* _internal_mutable_formula_map();
  public:
  void unsafe_arena_set_allocated_formula_map(
      ::TSCE::OwnerFormulaMapArchive* formula_map);
  ::TSCE::OwnerFormulaMapArchive* unsafe_arena_release_formula_map();

  // required .TSK.ShuffleMappingArchive sort_mapping = 3;
  bool has_sort_mapping() const;
  private:
  bool _internal_has_sort_mapping() const;
  public:
  void clear_sort_mapping();
  const ::TSK::ShuffleMappingArchive& sort_mapping() const;
  PROTOBUF_NODISCARD ::TSK::ShuffleMappingArchive* release_sort_mapping();
  ::TSK::ShuffleMappingArchive* mutable_sort_mapping();
  void set_allocated_sort_mapping(::TSK::ShuffleMappingArchive* sort_mapping);
  private:
  const ::TSK::ShuffleMappingArchive& _internal_sort_mapping() const;
  ::TSK::ShuffleMappingArchive* _internal_mutable_sort_mapping();
  public:
  void unsafe_arena_set_allocated_sort_mapping(
      ::TSK::ShuffleMappingArchive* sort_mapping);
  ::TSK::ShuffleMappingArchive* unsafe_arena_release_sort_mapping();

  // required .TSCE.CFUUIDArchive sorted_table_id = 4;
  bool has_sorted_table_id() const;
  private:
  bool _internal_has_sorted_table_id() const;
  public:
  void clear_sorted_table_id();
  const ::TSCE::CFUUIDArchive& sorted_table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_sorted_table_id();
  ::TSCE::CFUUIDArchive* mutable_sorted_table_id();
  void set_allocated_sorted_table_id(::TSCE::CFUUIDArchive* sorted_table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_sorted_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_sorted_table_id();
  public:
  void unsafe_arena_set_allocated_sorted_table_id(
      ::TSCE::CFUUIDArchive* sorted_table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_sorted_table_id();

  // required bool explode_ranges = 5;
  bool has_explode_ranges() const;
  private:
  bool _internal_has_explode_ranges() const;
  public:
  void clear_explode_ranges();
  bool explode_ranges() const;
  void set_explode_ranges(bool value);
  private:
  bool _internal_explode_ranges() const;
  void _internal_set_explode_ranges(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFormulasForSortArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::OwnerFormulaMapArchive* formula_map_;
    ::TSK::ShuffleMappingArchive* sort_mapping_;
    ::TSCE::CFUUIDArchive* sorted_table_id_;
    bool explode_ranges_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFormulasForTectonicShiftArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFormulasForTectonicShiftArchive) */ {
 public:
  inline CommandRewriteFormulasForTectonicShiftArchive() : CommandRewriteFormulasForTectonicShiftArchive(nullptr) {}
  ~CommandRewriteFormulasForTectonicShiftArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFormulasForTectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFormulasForTectonicShiftArchive(const CommandRewriteFormulasForTectonicShiftArchive& from);
  CommandRewriteFormulasForTectonicShiftArchive(CommandRewriteFormulasForTectonicShiftArchive&& from) noexcept
    : CommandRewriteFormulasForTectonicShiftArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFormulasForTectonicShiftArchive& operator=(const CommandRewriteFormulasForTectonicShiftArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFormulasForTectonicShiftArchive& operator=(CommandRewriteFormulasForTectonicShiftArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFormulasForTectonicShiftArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFormulasForTectonicShiftArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFormulasForTectonicShiftArchive*>(
               &_CommandRewriteFormulasForTectonicShiftArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CommandRewriteFormulasForTectonicShiftArchive& a, CommandRewriteFormulasForTectonicShiftArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFormulasForTectonicShiftArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFormulasForTectonicShiftArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFormulasForTectonicShiftArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFormulasForTectonicShiftArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFormulasForTectonicShiftArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFormulasForTectonicShiftArchive& from) {
    CommandRewriteFormulasForTectonicShiftArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFormulasForTectonicShiftArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFormulasForTectonicShiftArchive";
  }
  protected:
  explicit CommandRewriteFormulasForTectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormulaMapFieldNumber = 2,
    kTectonicShiftFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  bool has_formula_map() const;
  private:
  bool _internal_has_formula_map() const;
  public:
  void clear_formula_map();
  const ::TSCE::OwnerFormulaMapArchive& formula_map() const;
  PROTOBUF_NODISCARD ::TSCE::OwnerFormulaMapArchive* release_formula_map();
  ::TSCE::OwnerFormulaMapArchive* mutable_formula_map();
  void set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map);
  private:
  const ::TSCE::OwnerFormulaMapArchive& _internal_formula_map() const;
  ::TSCE::OwnerFormulaMapArchive* _internal_mutable_formula_map();
  public:
  void unsafe_arena_set_allocated_formula_map(
      ::TSCE::OwnerFormulaMapArchive* formula_map);
  ::TSCE::OwnerFormulaMapArchive* unsafe_arena_release_formula_map();

  // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
  bool has_tectonic_shift() const;
  private:
  bool _internal_has_tectonic_shift() const;
  public:
  void clear_tectonic_shift();
  const ::TSCE::TectonicShiftArchive& tectonic_shift() const;
  PROTOBUF_NODISCARD ::TSCE::TectonicShiftArchive* release_tectonic_shift();
  ::TSCE::TectonicShiftArchive* mutable_tectonic_shift();
  void set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift);
  private:
  const ::TSCE::TectonicShiftArchive& _internal_tectonic_shift() const;
  ::TSCE::TectonicShiftArchive* _internal_mutable_tectonic_shift();
  public:
  void unsafe_arena_set_allocated_tectonic_shift(
      ::TSCE::TectonicShiftArchive* tectonic_shift);
  ::TSCE::TectonicShiftArchive* unsafe_arena_release_tectonic_shift();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFormulasForTectonicShiftArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::OwnerFormulaMapArchive* formula_map_;
    ::TSCE::TectonicShiftArchive* tectonic_shift_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFormulasForMoveArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFormulasForMoveArchive) */ {
 public:
  inline CommandRewriteFormulasForMoveArchive() : CommandRewriteFormulasForMoveArchive(nullptr) {}
  ~CommandRewriteFormulasForMoveArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFormulasForMoveArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFormulasForMoveArchive(const CommandRewriteFormulasForMoveArchive& from);
  CommandRewriteFormulasForMoveArchive(CommandRewriteFormulasForMoveArchive&& from) noexcept
    : CommandRewriteFormulasForMoveArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFormulasForMoveArchive& operator=(const CommandRewriteFormulasForMoveArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFormulasForMoveArchive& operator=(CommandRewriteFormulasForMoveArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFormulasForMoveArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFormulasForMoveArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFormulasForMoveArchive*>(
               &_CommandRewriteFormulasForMoveArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CommandRewriteFormulasForMoveArchive& a, CommandRewriteFormulasForMoveArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFormulasForMoveArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFormulasForMoveArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFormulasForMoveArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFormulasForMoveArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFormulasForMoveArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFormulasForMoveArchive& from) {
    CommandRewriteFormulasForMoveArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFormulasForMoveArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFormulasForMoveArchive";
  }
  protected:
  explicit CommandRewriteFormulasForMoveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormulaMapFieldNumber = 2,
    kFromReferenceFieldNumber = 6,
    kToReferenceFieldNumber = 7,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  bool has_formula_map() const;
  private:
  bool _internal_has_formula_map() const;
  public:
  void clear_formula_map();
  const ::TSCE::OwnerFormulaMapArchive& formula_map() const;
  PROTOBUF_NODISCARD ::TSCE::OwnerFormulaMapArchive* release_formula_map();
  ::TSCE::OwnerFormulaMapArchive* mutable_formula_map();
  void set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map);
  private:
  const ::TSCE::OwnerFormulaMapArchive& _internal_formula_map() const;
  ::TSCE::OwnerFormulaMapArchive* _internal_mutable_formula_map();
  public:
  void unsafe_arena_set_allocated_formula_map(
      ::TSCE::OwnerFormulaMapArchive* formula_map);
  ::TSCE::OwnerFormulaMapArchive* unsafe_arena_release_formula_map();

  // required .TSCE.RangeReferenceArchive from_reference = 6;
  bool has_from_reference() const;
  private:
  bool _internal_has_from_reference() const;
  public:
  void clear_from_reference();
  const ::TSCE::RangeReferenceArchive& from_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_from_reference();
  ::TSCE::RangeReferenceArchive* mutable_from_reference();
  void set_allocated_from_reference(::TSCE::RangeReferenceArchive* from_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_from_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_from_reference();
  public:
  void unsafe_arena_set_allocated_from_reference(
      ::TSCE::RangeReferenceArchive* from_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_from_reference();

  // required .TSCE.RangeReferenceArchive to_reference = 7;
  bool has_to_reference() const;
  private:
  bool _internal_has_to_reference() const;
  public:
  void clear_to_reference();
  const ::TSCE::RangeReferenceArchive& to_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_to_reference();
  ::TSCE::RangeReferenceArchive* mutable_to_reference();
  void set_allocated_to_reference(::TSCE::RangeReferenceArchive* to_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_to_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_to_reference();
  public:
  void unsafe_arena_set_allocated_to_reference(
      ::TSCE::RangeReferenceArchive* to_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_to_reference();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFormulasForMoveArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::OwnerFormulaMapArchive* formula_map_;
    ::TSCE::RangeReferenceArchive* from_reference_;
    ::TSCE::RangeReferenceArchive* to_reference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFormulasForCellMergeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFormulasForCellMergeArchive) */ {
 public:
  inline CommandRewriteFormulasForCellMergeArchive() : CommandRewriteFormulasForCellMergeArchive(nullptr) {}
  ~CommandRewriteFormulasForCellMergeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFormulasForCellMergeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFormulasForCellMergeArchive(const CommandRewriteFormulasForCellMergeArchive& from);
  CommandRewriteFormulasForCellMergeArchive(CommandRewriteFormulasForCellMergeArchive&& from) noexcept
    : CommandRewriteFormulasForCellMergeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFormulasForCellMergeArchive& operator=(const CommandRewriteFormulasForCellMergeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFormulasForCellMergeArchive& operator=(CommandRewriteFormulasForCellMergeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFormulasForCellMergeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFormulasForCellMergeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFormulasForCellMergeArchive*>(
               &_CommandRewriteFormulasForCellMergeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CommandRewriteFormulasForCellMergeArchive& a, CommandRewriteFormulasForCellMergeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFormulasForCellMergeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFormulasForCellMergeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFormulasForCellMergeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFormulasForCellMergeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFormulasForCellMergeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFormulasForCellMergeArchive& from) {
    CommandRewriteFormulasForCellMergeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFormulasForCellMergeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFormulasForCellMergeArchive";
  }
  protected:
  explicit CommandRewriteFormulasForCellMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFormulaMapFieldNumber = 2,
    kMergedRangeFieldNumber = 3,
    kTableIdFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  bool has_formula_map() const;
  private:
  bool _internal_has_formula_map() const;
  public:
  void clear_formula_map();
  const ::TSCE::OwnerFormulaMapArchive& formula_map() const;
  PROTOBUF_NODISCARD ::TSCE::OwnerFormulaMapArchive* release_formula_map();
  ::TSCE::OwnerFormulaMapArchive* mutable_formula_map();
  void set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map);
  private:
  const ::TSCE::OwnerFormulaMapArchive& _internal_formula_map() const;
  ::TSCE::OwnerFormulaMapArchive* _internal_mutable_formula_map();
  public:
  void unsafe_arena_set_allocated_formula_map(
      ::TSCE::OwnerFormulaMapArchive* formula_map);
  ::TSCE::OwnerFormulaMapArchive* unsafe_arena_release_formula_map();

  // required .TSCE.RangeCoordinateArchive merged_range = 3;
  bool has_merged_range() const;
  private:
  bool _internal_has_merged_range() const;
  public:
  void clear_merged_range();
  const ::TSCE::RangeCoordinateArchive& merged_range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_merged_range();
  ::TSCE::RangeCoordinateArchive* mutable_merged_range();
  void set_allocated_merged_range(::TSCE::RangeCoordinateArchive* merged_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_merged_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_merged_range();
  public:
  void unsafe_arena_set_allocated_merged_range(
      ::TSCE::RangeCoordinateArchive* merged_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_merged_range();

  // required .TSCE.CFUUIDArchive table_id = 4;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const ::TSCE::CFUUIDArchive& table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_table_id();
  ::TSCE::CFUUIDArchive* mutable_table_id();
  void set_allocated_table_id(::TSCE::CFUUIDArchive* table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_table_id();
  public:
  void unsafe_arena_set_allocated_table_id(
      ::TSCE::CFUUIDArchive* table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_table_id();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFormulasForCellMergeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::OwnerFormulaMapArchive* formula_map_;
    ::TSCE::RangeCoordinateArchive* merged_range_;
    ::TSCE::CFUUIDArchive* table_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFilterFormulasForTableResizeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFilterFormulasForTableResizeArchive) */ {
 public:
  inline CommandRewriteFilterFormulasForTableResizeArchive() : CommandRewriteFilterFormulasForTableResizeArchive(nullptr) {}
  ~CommandRewriteFilterFormulasForTableResizeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFilterFormulasForTableResizeArchive(const CommandRewriteFilterFormulasForTableResizeArchive& from);
  CommandRewriteFilterFormulasForTableResizeArchive(CommandRewriteFilterFormulasForTableResizeArchive&& from) noexcept
    : CommandRewriteFilterFormulasForTableResizeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFilterFormulasForTableResizeArchive& operator=(const CommandRewriteFilterFormulasForTableResizeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFilterFormulasForTableResizeArchive& operator=(CommandRewriteFilterFormulasForTableResizeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFilterFormulasForTableResizeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFilterFormulasForTableResizeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFilterFormulasForTableResizeArchive*>(
               &_CommandRewriteFilterFormulasForTableResizeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CommandRewriteFilterFormulasForTableResizeArchive& a, CommandRewriteFilterFormulasForTableResizeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFilterFormulasForTableResizeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFilterFormulasForTableResizeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFilterFormulasForTableResizeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFilterFormulasForTableResizeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFilterFormulasForTableResizeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFilterFormulasForTableResizeArchive& from) {
    CommandRewriteFilterFormulasForTableResizeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFilterFormulasForTableResizeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFilterFormulasForTableResizeArchive";
  }
  protected:
  explicit CommandRewriteFilterFormulasForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFilterFormulasForTableResizeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFilterFormulasForTectonicShiftArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFilterFormulasForTectonicShiftArchive) */ {
 public:
  inline CommandRewriteFilterFormulasForTectonicShiftArchive() : CommandRewriteFilterFormulasForTectonicShiftArchive(nullptr) {}
  ~CommandRewriteFilterFormulasForTectonicShiftArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForTectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFilterFormulasForTectonicShiftArchive(const CommandRewriteFilterFormulasForTectonicShiftArchive& from);
  CommandRewriteFilterFormulasForTectonicShiftArchive(CommandRewriteFilterFormulasForTectonicShiftArchive&& from) noexcept
    : CommandRewriteFilterFormulasForTectonicShiftArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFilterFormulasForTectonicShiftArchive& operator=(const CommandRewriteFilterFormulasForTectonicShiftArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFilterFormulasForTectonicShiftArchive& operator=(CommandRewriteFilterFormulasForTectonicShiftArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFilterFormulasForTectonicShiftArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFilterFormulasForTectonicShiftArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFilterFormulasForTectonicShiftArchive*>(
               &_CommandRewriteFilterFormulasForTectonicShiftArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CommandRewriteFilterFormulasForTectonicShiftArchive& a, CommandRewriteFilterFormulasForTectonicShiftArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFilterFormulasForTectonicShiftArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFilterFormulasForTectonicShiftArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFilterFormulasForTectonicShiftArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFilterFormulasForTectonicShiftArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFilterFormulasForTectonicShiftArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFilterFormulasForTectonicShiftArchive& from) {
    CommandRewriteFilterFormulasForTectonicShiftArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFilterFormulasForTectonicShiftArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFilterFormulasForTectonicShiftArchive";
  }
  protected:
  explicit CommandRewriteFilterFormulasForTectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFilterSetFieldNumber = 2,
    kTectonicShiftFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference filter_set = 2;
  bool has_filter_set() const;
  private:
  bool _internal_has_filter_set() const;
  public:
  void clear_filter_set();
  const ::TSP::Reference& filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_filter_set();
  ::TSP::Reference* mutable_filter_set();
  void set_allocated_filter_set(::TSP::Reference* filter_set);
  private:
  const ::TSP::Reference& _internal_filter_set() const;
  ::TSP::Reference* _internal_mutable_filter_set();
  public:
  void unsafe_arena_set_allocated_filter_set(
      ::TSP::Reference* filter_set);
  ::TSP::Reference* unsafe_arena_release_filter_set();

  // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
  bool has_tectonic_shift() const;
  private:
  bool _internal_has_tectonic_shift() const;
  public:
  void clear_tectonic_shift();
  const ::TSCE::TectonicShiftArchive& tectonic_shift() const;
  PROTOBUF_NODISCARD ::TSCE::TectonicShiftArchive* release_tectonic_shift();
  ::TSCE::TectonicShiftArchive* mutable_tectonic_shift();
  void set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift);
  private:
  const ::TSCE::TectonicShiftArchive& _internal_tectonic_shift() const;
  ::TSCE::TectonicShiftArchive* _internal_mutable_tectonic_shift();
  public:
  void unsafe_arena_set_allocated_tectonic_shift(
      ::TSCE::TectonicShiftArchive* tectonic_shift);
  ::TSCE::TectonicShiftArchive* unsafe_arena_release_tectonic_shift();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFilterFormulasForTectonicShiftArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* filter_set_;
    ::TSCE::TectonicShiftArchive* tectonic_shift_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteFilterFormulasForSortArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteFilterFormulasForSortArchive) */ {
 public:
  inline CommandRewriteFilterFormulasForSortArchive() : CommandRewriteFilterFormulasForSortArchive(nullptr) {}
  ~CommandRewriteFilterFormulasForSortArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForSortArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteFilterFormulasForSortArchive(const CommandRewriteFilterFormulasForSortArchive& from);
  CommandRewriteFilterFormulasForSortArchive(CommandRewriteFilterFormulasForSortArchive&& from) noexcept
    : CommandRewriteFilterFormulasForSortArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteFilterFormulasForSortArchive& operator=(const CommandRewriteFilterFormulasForSortArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteFilterFormulasForSortArchive& operator=(CommandRewriteFilterFormulasForSortArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteFilterFormulasForSortArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteFilterFormulasForSortArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteFilterFormulasForSortArchive*>(
               &_CommandRewriteFilterFormulasForSortArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CommandRewriteFilterFormulasForSortArchive& a, CommandRewriteFilterFormulasForSortArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteFilterFormulasForSortArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteFilterFormulasForSortArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteFilterFormulasForSortArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteFilterFormulasForSortArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteFilterFormulasForSortArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteFilterFormulasForSortArchive& from) {
    CommandRewriteFilterFormulasForSortArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteFilterFormulasForSortArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteFilterFormulasForSortArchive";
  }
  protected:
  explicit CommandRewriteFilterFormulasForSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFilterSetFieldNumber = 2,
    kSortMappingFieldNumber = 3,
    kSortedTableIdFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference filter_set = 2;
  bool has_filter_set() const;
  private:
  bool _internal_has_filter_set() const;
  public:
  void clear_filter_set();
  const ::TSP::Reference& filter_set() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_filter_set();
  ::TSP::Reference* mutable_filter_set();
  void set_allocated_filter_set(::TSP::Reference* filter_set);
  private:
  const ::TSP::Reference& _internal_filter_set() const;
  ::TSP::Reference* _internal_mutable_filter_set();
  public:
  void unsafe_arena_set_allocated_filter_set(
      ::TSP::Reference* filter_set);
  ::TSP::Reference* unsafe_arena_release_filter_set();

  // required .TSK.ShuffleMappingArchive sort_mapping = 3;
  bool has_sort_mapping() const;
  private:
  bool _internal_has_sort_mapping() const;
  public:
  void clear_sort_mapping();
  const ::TSK::ShuffleMappingArchive& sort_mapping() const;
  PROTOBUF_NODISCARD ::TSK::ShuffleMappingArchive* release_sort_mapping();
  ::TSK::ShuffleMappingArchive* mutable_sort_mapping();
  void set_allocated_sort_mapping(::TSK::ShuffleMappingArchive* sort_mapping);
  private:
  const ::TSK::ShuffleMappingArchive& _internal_sort_mapping() const;
  ::TSK::ShuffleMappingArchive* _internal_mutable_sort_mapping();
  public:
  void unsafe_arena_set_allocated_sort_mapping(
      ::TSK::ShuffleMappingArchive* sort_mapping);
  ::TSK::ShuffleMappingArchive* unsafe_arena_release_sort_mapping();

  // required .TSCE.CFUUIDArchive sorted_table_id = 4;
  bool has_sorted_table_id() const;
  private:
  bool _internal_has_sorted_table_id() const;
  public:
  void clear_sorted_table_id();
  const ::TSCE::CFUUIDArchive& sorted_table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_sorted_table_id();
  ::TSCE::CFUUIDArchive* mutable_sorted_table_id();
  void set_allocated_sorted_table_id(::TSCE::CFUUIDArchive* sorted_table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_sorted_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_sorted_table_id();
  public:
  void unsafe_arena_set_allocated_sorted_table_id(
      ::TSCE::CFUUIDArchive* sorted_table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_sorted_table_id();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteFilterFormulasForSortArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSP::Reference* filter_set_;
    ::TSK::ShuffleMappingArchive* sort_mapping_;
    ::TSCE::CFUUIDArchive* sorted_table_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteConditionalStylesForTectonicShiftArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteConditionalStylesForTectonicShiftArchive) */ {
 public:
  inline CommandRewriteConditionalStylesForTectonicShiftArchive() : CommandRewriteConditionalStylesForTectonicShiftArchive(nullptr) {}
  ~CommandRewriteConditionalStylesForTectonicShiftArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteConditionalStylesForTectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteConditionalStylesForTectonicShiftArchive(const CommandRewriteConditionalStylesForTectonicShiftArchive& from);
  CommandRewriteConditionalStylesForTectonicShiftArchive(CommandRewriteConditionalStylesForTectonicShiftArchive&& from) noexcept
    : CommandRewriteConditionalStylesForTectonicShiftArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteConditionalStylesForTectonicShiftArchive& operator=(const CommandRewriteConditionalStylesForTectonicShiftArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteConditionalStylesForTectonicShiftArchive& operator=(CommandRewriteConditionalStylesForTectonicShiftArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteConditionalStylesForTectonicShiftArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteConditionalStylesForTectonicShiftArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteConditionalStylesForTectonicShiftArchive*>(
               &_CommandRewriteConditionalStylesForTectonicShiftArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CommandRewriteConditionalStylesForTectonicShiftArchive& a, CommandRewriteConditionalStylesForTectonicShiftArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteConditionalStylesForTectonicShiftArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteConditionalStylesForTectonicShiftArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteConditionalStylesForTectonicShiftArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteConditionalStylesForTectonicShiftArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteConditionalStylesForTectonicShiftArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteConditionalStylesForTectonicShiftArchive& from) {
    CommandRewriteConditionalStylesForTectonicShiftArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteConditionalStylesForTectonicShiftArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteConditionalStylesForTectonicShiftArchive";
  }
  protected:
  explicit CommandRewriteConditionalStylesForTectonicShiftArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTectonicShiftFieldNumber = 2,
    kCellsToRewriteFieldNumber = 3,
    kConditionalStyleSetsFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
  bool has_tectonic_shift() const;
  private:
  bool _internal_has_tectonic_shift() const;
  public:
  void clear_tectonic_shift();
  const ::TSCE::TectonicShiftArchive& tectonic_shift() const;
  PROTOBUF_NODISCARD ::TSCE::TectonicShiftArchive* release_tectonic_shift();
  ::TSCE::TectonicShiftArchive* mutable_tectonic_shift();
  void set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift);
  private:
  const ::TSCE::TectonicShiftArchive& _internal_tectonic_shift() const;
  ::TSCE::TectonicShiftArchive* _internal_mutable_tectonic_shift();
  public:
  void unsafe_arena_set_allocated_tectonic_shift(
      ::TSCE::TectonicShiftArchive* tectonic_shift);
  ::TSCE::TectonicShiftArchive* unsafe_arena_release_tectonic_shift();

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 3;
  bool has_cells_to_rewrite() const;
  private:
  bool _internal_has_cells_to_rewrite() const;
  public:
  void clear_cells_to_rewrite();
  const ::TSCE::CellCoordinateVectorArchive& cells_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateVectorArchive* release_cells_to_rewrite();
  ::TSCE::CellCoordinateVectorArchive* mutable_cells_to_rewrite();
  void set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  private:
  const ::TSCE::CellCoordinateVectorArchive& _internal_cells_to_rewrite() const;
  ::TSCE::CellCoordinateVectorArchive* _internal_mutable_cells_to_rewrite();
  public:
  void unsafe_arena_set_allocated_cells_to_rewrite(
      ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  ::TSCE::CellCoordinateVectorArchive* unsafe_arena_release_cells_to_rewrite();

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 4;
  bool has_conditional_style_sets() const;
  private:
  bool _internal_has_conditional_style_sets() const;
  public:
  void clear_conditional_style_sets();
  const ::TSCE::CellCoordinateObjectMapArchive& conditional_style_sets() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateObjectMapArchive* release_conditional_style_sets();
  ::TSCE::CellCoordinateObjectMapArchive* mutable_conditional_style_sets();
  void set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  private:
  const ::TSCE::CellCoordinateObjectMapArchive& _internal_conditional_style_sets() const;
  ::TSCE::CellCoordinateObjectMapArchive* _internal_mutable_conditional_style_sets();
  public:
  void unsafe_arena_set_allocated_conditional_style_sets(
      ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  ::TSCE::CellCoordinateObjectMapArchive* unsafe_arena_release_conditional_style_sets();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteConditionalStylesForTectonicShiftArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::TectonicShiftArchive* tectonic_shift_;
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite_;
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteConditionalStylesForSortArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteConditionalStylesForSortArchive) */ {
 public:
  inline CommandRewriteConditionalStylesForSortArchive() : CommandRewriteConditionalStylesForSortArchive(nullptr) {}
  ~CommandRewriteConditionalStylesForSortArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteConditionalStylesForSortArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteConditionalStylesForSortArchive(const CommandRewriteConditionalStylesForSortArchive& from);
  CommandRewriteConditionalStylesForSortArchive(CommandRewriteConditionalStylesForSortArchive&& from) noexcept
    : CommandRewriteConditionalStylesForSortArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteConditionalStylesForSortArchive& operator=(const CommandRewriteConditionalStylesForSortArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteConditionalStylesForSortArchive& operator=(CommandRewriteConditionalStylesForSortArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteConditionalStylesForSortArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteConditionalStylesForSortArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteConditionalStylesForSortArchive*>(
               &_CommandRewriteConditionalStylesForSortArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CommandRewriteConditionalStylesForSortArchive& a, CommandRewriteConditionalStylesForSortArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteConditionalStylesForSortArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteConditionalStylesForSortArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteConditionalStylesForSortArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteConditionalStylesForSortArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteConditionalStylesForSortArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteConditionalStylesForSortArchive& from) {
    CommandRewriteConditionalStylesForSortArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteConditionalStylesForSortArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteConditionalStylesForSortArchive";
  }
  protected:
  explicit CommandRewriteConditionalStylesForSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSortMappingFieldNumber = 2,
    kSortedTableIdFieldNumber = 3,
    kCellsToRewriteFieldNumber = 4,
    kConditionalStyleSetsFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSK.ShuffleMappingArchive sort_mapping = 2;
  bool has_sort_mapping() const;
  private:
  bool _internal_has_sort_mapping() const;
  public:
  void clear_sort_mapping();
  const ::TSK::ShuffleMappingArchive& sort_mapping() const;
  PROTOBUF_NODISCARD ::TSK::ShuffleMappingArchive* release_sort_mapping();
  ::TSK::ShuffleMappingArchive* mutable_sort_mapping();
  void set_allocated_sort_mapping(::TSK::ShuffleMappingArchive* sort_mapping);
  private:
  const ::TSK::ShuffleMappingArchive& _internal_sort_mapping() const;
  ::TSK::ShuffleMappingArchive* _internal_mutable_sort_mapping();
  public:
  void unsafe_arena_set_allocated_sort_mapping(
      ::TSK::ShuffleMappingArchive* sort_mapping);
  ::TSK::ShuffleMappingArchive* unsafe_arena_release_sort_mapping();

  // required .TSCE.CFUUIDArchive sorted_table_id = 3;
  bool has_sorted_table_id() const;
  private:
  bool _internal_has_sorted_table_id() const;
  public:
  void clear_sorted_table_id();
  const ::TSCE::CFUUIDArchive& sorted_table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_sorted_table_id();
  ::TSCE::CFUUIDArchive* mutable_sorted_table_id();
  void set_allocated_sorted_table_id(::TSCE::CFUUIDArchive* sorted_table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_sorted_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_sorted_table_id();
  public:
  void unsafe_arena_set_allocated_sorted_table_id(
      ::TSCE::CFUUIDArchive* sorted_table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_sorted_table_id();

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
  bool has_cells_to_rewrite() const;
  private:
  bool _internal_has_cells_to_rewrite() const;
  public:
  void clear_cells_to_rewrite();
  const ::TSCE::CellCoordinateVectorArchive& cells_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateVectorArchive* release_cells_to_rewrite();
  ::TSCE::CellCoordinateVectorArchive* mutable_cells_to_rewrite();
  void set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  private:
  const ::TSCE::CellCoordinateVectorArchive& _internal_cells_to_rewrite() const;
  ::TSCE::CellCoordinateVectorArchive* _internal_mutable_cells_to_rewrite();
  public:
  void unsafe_arena_set_allocated_cells_to_rewrite(
      ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  ::TSCE::CellCoordinateVectorArchive* unsafe_arena_release_cells_to_rewrite();

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
  bool has_conditional_style_sets() const;
  private:
  bool _internal_has_conditional_style_sets() const;
  public:
  void clear_conditional_style_sets();
  const ::TSCE::CellCoordinateObjectMapArchive& conditional_style_sets() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateObjectMapArchive* release_conditional_style_sets();
  ::TSCE::CellCoordinateObjectMapArchive* mutable_conditional_style_sets();
  void set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  private:
  const ::TSCE::CellCoordinateObjectMapArchive& _internal_conditional_style_sets() const;
  ::TSCE::CellCoordinateObjectMapArchive* _internal_mutable_conditional_style_sets();
  public:
  void unsafe_arena_set_allocated_conditional_style_sets(
      ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  ::TSCE::CellCoordinateObjectMapArchive* unsafe_arena_release_conditional_style_sets();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteConditionalStylesForSortArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSK::ShuffleMappingArchive* sort_mapping_;
    ::TSCE::CFUUIDArchive* sorted_table_id_;
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite_;
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteConditionalStylesForRangeMoveArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteConditionalStylesForRangeMoveArchive) */ {
 public:
  inline CommandRewriteConditionalStylesForRangeMoveArchive() : CommandRewriteConditionalStylesForRangeMoveArchive(nullptr) {}
  ~CommandRewriteConditionalStylesForRangeMoveArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteConditionalStylesForRangeMoveArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteConditionalStylesForRangeMoveArchive(const CommandRewriteConditionalStylesForRangeMoveArchive& from);
  CommandRewriteConditionalStylesForRangeMoveArchive(CommandRewriteConditionalStylesForRangeMoveArchive&& from) noexcept
    : CommandRewriteConditionalStylesForRangeMoveArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteConditionalStylesForRangeMoveArchive& operator=(const CommandRewriteConditionalStylesForRangeMoveArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteConditionalStylesForRangeMoveArchive& operator=(CommandRewriteConditionalStylesForRangeMoveArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteConditionalStylesForRangeMoveArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteConditionalStylesForRangeMoveArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteConditionalStylesForRangeMoveArchive*>(
               &_CommandRewriteConditionalStylesForRangeMoveArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CommandRewriteConditionalStylesForRangeMoveArchive& a, CommandRewriteConditionalStylesForRangeMoveArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteConditionalStylesForRangeMoveArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteConditionalStylesForRangeMoveArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteConditionalStylesForRangeMoveArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteConditionalStylesForRangeMoveArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteConditionalStylesForRangeMoveArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteConditionalStylesForRangeMoveArchive& from) {
    CommandRewriteConditionalStylesForRangeMoveArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteConditionalStylesForRangeMoveArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteConditionalStylesForRangeMoveArchive";
  }
  protected:
  explicit CommandRewriteConditionalStylesForRangeMoveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellsToRewriteFieldNumber = 5,
    kConditionalStyleSetsFieldNumber = 6,
    kFromRangeReferenceFieldNumber = 7,
    kToRangeReferenceFieldNumber = 8,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 5;
  bool has_cells_to_rewrite() const;
  private:
  bool _internal_has_cells_to_rewrite() const;
  public:
  void clear_cells_to_rewrite();
  const ::TSCE::CellCoordinateVectorArchive& cells_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateVectorArchive* release_cells_to_rewrite();
  ::TSCE::CellCoordinateVectorArchive* mutable_cells_to_rewrite();
  void set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  private:
  const ::TSCE::CellCoordinateVectorArchive& _internal_cells_to_rewrite() const;
  ::TSCE::CellCoordinateVectorArchive* _internal_mutable_cells_to_rewrite();
  public:
  void unsafe_arena_set_allocated_cells_to_rewrite(
      ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  ::TSCE::CellCoordinateVectorArchive* unsafe_arena_release_cells_to_rewrite();

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 6;
  bool has_conditional_style_sets() const;
  private:
  bool _internal_has_conditional_style_sets() const;
  public:
  void clear_conditional_style_sets();
  const ::TSCE::CellCoordinateObjectMapArchive& conditional_style_sets() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateObjectMapArchive* release_conditional_style_sets();
  ::TSCE::CellCoordinateObjectMapArchive* mutable_conditional_style_sets();
  void set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  private:
  const ::TSCE::CellCoordinateObjectMapArchive& _internal_conditional_style_sets() const;
  ::TSCE::CellCoordinateObjectMapArchive* _internal_mutable_conditional_style_sets();
  public:
  void unsafe_arena_set_allocated_conditional_style_sets(
      ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  ::TSCE::CellCoordinateObjectMapArchive* unsafe_arena_release_conditional_style_sets();

  // optional .TSCE.RangeReferenceArchive from_range_reference = 7;
  bool has_from_range_reference() const;
  private:
  bool _internal_has_from_range_reference() const;
  public:
  void clear_from_range_reference();
  const ::TSCE::RangeReferenceArchive& from_range_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_from_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_from_range_reference();
  void set_allocated_from_range_reference(::TSCE::RangeReferenceArchive* from_range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_from_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_from_range_reference();
  public:
  void unsafe_arena_set_allocated_from_range_reference(
      ::TSCE::RangeReferenceArchive* from_range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_from_range_reference();

  // optional .TSCE.RangeReferenceArchive to_range_reference = 8;
  bool has_to_range_reference() const;
  private:
  bool _internal_has_to_range_reference() const;
  public:
  void clear_to_range_reference();
  const ::TSCE::RangeReferenceArchive& to_range_reference() const;
  PROTOBUF_NODISCARD ::TSCE::RangeReferenceArchive* release_to_range_reference();
  ::TSCE::RangeReferenceArchive* mutable_to_range_reference();
  void set_allocated_to_range_reference(::TSCE::RangeReferenceArchive* to_range_reference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_to_range_reference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_to_range_reference();
  public:
  void unsafe_arena_set_allocated_to_range_reference(
      ::TSCE::RangeReferenceArchive* to_range_reference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_to_range_reference();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteConditionalStylesForRangeMoveArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite_;
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets_;
    ::TSCE::RangeReferenceArchive* from_range_reference_;
    ::TSCE::RangeReferenceArchive* to_range_reference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandRewriteConditionalStylesForCellMergeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandRewriteConditionalStylesForCellMergeArchive) */ {
 public:
  inline CommandRewriteConditionalStylesForCellMergeArchive() : CommandRewriteConditionalStylesForCellMergeArchive(nullptr) {}
  ~CommandRewriteConditionalStylesForCellMergeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandRewriteConditionalStylesForCellMergeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRewriteConditionalStylesForCellMergeArchive(const CommandRewriteConditionalStylesForCellMergeArchive& from);
  CommandRewriteConditionalStylesForCellMergeArchive(CommandRewriteConditionalStylesForCellMergeArchive&& from) noexcept
    : CommandRewriteConditionalStylesForCellMergeArchive() {
    *this = ::std::move(from);
  }

  inline CommandRewriteConditionalStylesForCellMergeArchive& operator=(const CommandRewriteConditionalStylesForCellMergeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRewriteConditionalStylesForCellMergeArchive& operator=(CommandRewriteConditionalStylesForCellMergeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRewriteConditionalStylesForCellMergeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRewriteConditionalStylesForCellMergeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandRewriteConditionalStylesForCellMergeArchive*>(
               &_CommandRewriteConditionalStylesForCellMergeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CommandRewriteConditionalStylesForCellMergeArchive& a, CommandRewriteConditionalStylesForCellMergeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRewriteConditionalStylesForCellMergeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRewriteConditionalStylesForCellMergeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRewriteConditionalStylesForCellMergeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandRewriteConditionalStylesForCellMergeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandRewriteConditionalStylesForCellMergeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandRewriteConditionalStylesForCellMergeArchive& from) {
    CommandRewriteConditionalStylesForCellMergeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRewriteConditionalStylesForCellMergeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandRewriteConditionalStylesForCellMergeArchive";
  }
  protected:
  explicit CommandRewriteConditionalStylesForCellMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kMergedTableIdFieldNumber = 2,
    kMergedRangeFieldNumber = 3,
    kCellsToRewriteFieldNumber = 4,
    kConditionalStyleSetsFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSCE.CFUUIDArchive merged_table_id = 2;
  bool has_merged_table_id() const;
  private:
  bool _internal_has_merged_table_id() const;
  public:
  void clear_merged_table_id();
  const ::TSCE::CFUUIDArchive& merged_table_id() const;
  PROTOBUF_NODISCARD ::TSCE::CFUUIDArchive* release_merged_table_id();
  ::TSCE::CFUUIDArchive* mutable_merged_table_id();
  void set_allocated_merged_table_id(::TSCE::CFUUIDArchive* merged_table_id);
  private:
  const ::TSCE::CFUUIDArchive& _internal_merged_table_id() const;
  ::TSCE::CFUUIDArchive* _internal_mutable_merged_table_id();
  public:
  void unsafe_arena_set_allocated_merged_table_id(
      ::TSCE::CFUUIDArchive* merged_table_id);
  ::TSCE::CFUUIDArchive* unsafe_arena_release_merged_table_id();

  // required .TSCE.RangeCoordinateArchive merged_range = 3;
  bool has_merged_range() const;
  private:
  bool _internal_has_merged_range() const;
  public:
  void clear_merged_range();
  const ::TSCE::RangeCoordinateArchive& merged_range() const;
  PROTOBUF_NODISCARD ::TSCE::RangeCoordinateArchive* release_merged_range();
  ::TSCE::RangeCoordinateArchive* mutable_merged_range();
  void set_allocated_merged_range(::TSCE::RangeCoordinateArchive* merged_range);
  private:
  const ::TSCE::RangeCoordinateArchive& _internal_merged_range() const;
  ::TSCE::RangeCoordinateArchive* _internal_mutable_merged_range();
  public:
  void unsafe_arena_set_allocated_merged_range(
      ::TSCE::RangeCoordinateArchive* merged_range);
  ::TSCE::RangeCoordinateArchive* unsafe_arena_release_merged_range();

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
  bool has_cells_to_rewrite() const;
  private:
  bool _internal_has_cells_to_rewrite() const;
  public:
  void clear_cells_to_rewrite();
  const ::TSCE::CellCoordinateVectorArchive& cells_to_rewrite() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateVectorArchive* release_cells_to_rewrite();
  ::TSCE::CellCoordinateVectorArchive* mutable_cells_to_rewrite();
  void set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  private:
  const ::TSCE::CellCoordinateVectorArchive& _internal_cells_to_rewrite() const;
  ::TSCE::CellCoordinateVectorArchive* _internal_mutable_cells_to_rewrite();
  public:
  void unsafe_arena_set_allocated_cells_to_rewrite(
      ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite);
  ::TSCE::CellCoordinateVectorArchive* unsafe_arena_release_cells_to_rewrite();

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
  bool has_conditional_style_sets() const;
  private:
  bool _internal_has_conditional_style_sets() const;
  public:
  void clear_conditional_style_sets();
  const ::TSCE::CellCoordinateObjectMapArchive& conditional_style_sets() const;
  PROTOBUF_NODISCARD ::TSCE::CellCoordinateObjectMapArchive* release_conditional_style_sets();
  ::TSCE::CellCoordinateObjectMapArchive* mutable_conditional_style_sets();
  void set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  private:
  const ::TSCE::CellCoordinateObjectMapArchive& _internal_conditional_style_sets() const;
  ::TSCE::CellCoordinateObjectMapArchive* _internal_mutable_conditional_style_sets();
  public:
  void unsafe_arena_set_allocated_conditional_style_sets(
      ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets);
  ::TSCE::CellCoordinateObjectMapArchive* unsafe_arena_release_conditional_style_sets();

  // @@protoc_insertion_point(class_scope:TST.CommandRewriteConditionalStylesForCellMergeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TSCE::CFUUIDArchive* merged_table_id_;
    ::TSCE::RangeCoordinateArchive* merged_range_;
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite_;
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMergeUnmergeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMergeUnmergeArchive) */ {
 public:
  inline CommandMergeUnmergeArchive() : CommandMergeUnmergeArchive(nullptr) {}
  ~CommandMergeUnmergeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMergeUnmergeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMergeUnmergeArchive(const CommandMergeUnmergeArchive& from);
  CommandMergeUnmergeArchive(CommandMergeUnmergeArchive&& from) noexcept
    : CommandMergeUnmergeArchive() {
    *this = ::std::move(from);
  }

  inline CommandMergeUnmergeArchive& operator=(const CommandMergeUnmergeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMergeUnmergeArchive& operator=(CommandMergeUnmergeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMergeUnmergeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMergeUnmergeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMergeUnmergeArchive*>(
               &_CommandMergeUnmergeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CommandMergeUnmergeArchive& a, CommandMergeUnmergeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMergeUnmergeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMergeUnmergeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMergeUnmergeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMergeUnmergeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMergeUnmergeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMergeUnmergeArchive& from) {
    CommandMergeUnmergeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMergeUnmergeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMergeUnmergeArchive";
  }
  protected:
  explicit CommandMergeUnmergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 3,
    kUndoCellMapFieldNumber = 4,
    kRedoCellMapFieldNumber = 5,
    kOldMergeRangesFieldNumber = 8,
    kUndoFormulaRewriteCommandFieldNumber = 9,
    kMergeActionFieldNumber = 2,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.SelectionArchive selection = 3;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_cell_map = 4;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 5;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference old_merge_ranges = 8;
  bool has_old_merge_ranges() const;
  private:
  bool _internal_has_old_merge_ranges() const;
  public:
  void clear_old_merge_ranges();
  const ::TSP::Reference& old_merge_ranges() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_merge_ranges();
  ::TSP::Reference* mutable_old_merge_ranges();
  void set_allocated_old_merge_ranges(::TSP::Reference* old_merge_ranges);
  private:
  const ::TSP::Reference& _internal_old_merge_ranges() const;
  ::TSP::Reference* _internal_mutable_old_merge_ranges();
  public:
  void unsafe_arena_set_allocated_old_merge_ranges(
      ::TSP::Reference* old_merge_ranges);
  ::TSP::Reference* unsafe_arena_release_old_merge_ranges();

  // optional .TSP.Reference undo_formula_rewrite_command = 9;
  bool has_undo_formula_rewrite_command() const;
  private:
  bool _internal_has_undo_formula_rewrite_command() const;
  public:
  void clear_undo_formula_rewrite_command();
  const ::TSP::Reference& undo_formula_rewrite_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_undo_formula_rewrite_command();
  ::TSP::Reference* mutable_undo_formula_rewrite_command();
  void set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command);
  private:
  const ::TSP::Reference& _internal_undo_formula_rewrite_command() const;
  ::TSP::Reference* _internal_mutable_undo_formula_rewrite_command();
  public:
  void unsafe_arena_set_allocated_undo_formula_rewrite_command(
      ::TSP::Reference* undo_formula_rewrite_command);
  ::TSP::Reference* unsafe_arena_release_undo_formula_rewrite_command();

  // required .TST.MergeActionArchive merge_action = 2;
  bool has_merge_action() const;
  private:
  bool _internal_has_merge_action() const;
  public:
  void clear_merge_action();
  ::TST::MergeActionArchive merge_action() const;
  void set_merge_action(::TST::MergeActionArchive value);
  private:
  ::TST::MergeActionArchive _internal_merge_action() const;
  void _internal_set_merge_action(::TST::MergeActionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandMergeUnmergeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TSP::Reference* old_merge_ranges_;
    ::TSP::Reference* undo_formula_rewrite_command_;
    int merge_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandHideShowArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandHideShowArchive) */ {
 public:
  inline CommandHideShowArchive() : CommandHideShowArchive(nullptr) {}
  ~CommandHideShowArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandHideShowArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandHideShowArchive(const CommandHideShowArchive& from);
  CommandHideShowArchive(CommandHideShowArchive&& from) noexcept
    : CommandHideShowArchive() {
    *this = ::std::move(from);
  }

  inline CommandHideShowArchive& operator=(const CommandHideShowArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandHideShowArchive& operator=(CommandHideShowArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandHideShowArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandHideShowArchive* internal_default_instance() {
    return reinterpret_cast<const CommandHideShowArchive*>(
               &_CommandHideShowArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CommandHideShowArchive& a, CommandHideShowArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandHideShowArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandHideShowArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandHideShowArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandHideShowArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandHideShowArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandHideShowArchive& from) {
    CommandHideShowArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandHideShowArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandHideShowArchive";
  }
  protected:
  explicit CommandHideShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldHidingStatesFieldNumber = 7,
    kSuperFieldNumber = 1,
    kElementsAffectedFieldNumber = 5,
    kDirectionFieldNumber = 2,
    kHideShowActionFieldNumber = 3,
    kHidingActionFieldNumber = 4,
  };
  // repeated uint32 old_hiding_states = 7;
  int old_hiding_states_size() const;
  private:
  int _internal_old_hiding_states_size() const;
  public:
  void clear_old_hiding_states();
  private:
  uint32_t _internal_old_hiding_states(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_old_hiding_states() const;
  void _internal_add_old_hiding_states(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_old_hiding_states();
  public:
  uint32_t old_hiding_states(int index) const;
  void set_old_hiding_states(int index, uint32_t value);
  void add_old_hiding_states(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      old_hiding_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_old_hiding_states();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TSP.IndexSet elements_affected = 5;
  bool has_elements_affected() const;
  private:
  bool _internal_has_elements_affected() const;
  public:
  void clear_elements_affected();
  const ::TSP::IndexSet& elements_affected() const;
  PROTOBUF_NODISCARD ::TSP::IndexSet* release_elements_affected();
  ::TSP::IndexSet* mutable_elements_affected();
  void set_allocated_elements_affected(::TSP::IndexSet* elements_affected);
  private:
  const ::TSP::IndexSet& _internal_elements_affected() const;
  ::TSP::IndexSet* _internal_mutable_elements_affected();
  public:
  void unsafe_arena_set_allocated_elements_affected(
      ::TSP::IndexSet* elements_affected);
  ::TSP::IndexSet* unsafe_arena_release_elements_affected();

  // required .TST.CommandDirectionArchive direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::CommandDirectionArchive direction() const;
  void set_direction(::TST::CommandDirectionArchive value);
  private:
  ::TST::CommandDirectionArchive _internal_direction() const;
  void _internal_set_direction(::TST::CommandDirectionArchive value);
  public:

  // required .TST.HideShowActionArchive hide_show_action = 3;
  bool has_hide_show_action() const;
  private:
  bool _internal_has_hide_show_action() const;
  public:
  void clear_hide_show_action();
  ::TST::HideShowActionArchive hide_show_action() const;
  void set_hide_show_action(::TST::HideShowActionArchive value);
  private:
  ::TST::HideShowActionArchive _internal_hide_show_action() const;
  void _internal_set_hide_show_action(::TST::HideShowActionArchive value);
  public:

  // required uint32 hiding_action = 4;
  bool has_hiding_action() const;
  private:
  bool _internal_has_hiding_action() const;
  public:
  void clear_hiding_action();
  uint32_t hiding_action() const;
  void set_hiding_action(uint32_t value);
  private:
  uint32_t _internal_hiding_action() const;
  void _internal_set_hiding_action(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandHideShowArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > old_hiding_states_;
    ::TST::TableCommandArchive* super_;
    ::TSP::IndexSet* elements_affected_;
    int direction_;
    int hide_show_action_;
    uint32_t hiding_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TableInfoGeometryCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableInfoGeometryCommandArchive) */ {
 public:
  inline TableInfoGeometryCommandArchive() : TableInfoGeometryCommandArchive(nullptr) {}
  ~TableInfoGeometryCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR TableInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInfoGeometryCommandArchive(const TableInfoGeometryCommandArchive& from);
  TableInfoGeometryCommandArchive(TableInfoGeometryCommandArchive&& from) noexcept
    : TableInfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline TableInfoGeometryCommandArchive& operator=(const TableInfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInfoGeometryCommandArchive& operator=(TableInfoGeometryCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TableInfoGeometryCommandArchive*>(
               &_TableInfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TableInfoGeometryCommandArchive& a, TableInfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInfoGeometryCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableInfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableInfoGeometryCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableInfoGeometryCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableInfoGeometryCommandArchive& from) {
    TableInfoGeometryCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInfoGeometryCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableInfoGeometryCommandArchive";
  }
  protected:
  explicit TableInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kScaleFactorFieldNumber = 2,
    kTableInfoFieldNumber = 3,
    kNewGeometryFieldNumber = 4,
    kOldGeometryFieldNumber = 5,
    kTurnOffAutoResizeFieldNumber = 6,
    kShouldClearObjectPlaceholderFlagFieldNumber = 7,
    kDidMatchObjectPlaceholderGeometryFieldNumber = 8,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Size scale_factor = 2;
  bool has_scale_factor() const;
  private:
  bool _internal_has_scale_factor() const;
  public:
  void clear_scale_factor();
  const ::TSP::Size& scale_factor() const;
  PROTOBUF_NODISCARD ::TSP::Size* release_scale_factor();
  ::TSP::Size* mutable_scale_factor();
  void set_allocated_scale_factor(::TSP::Size* scale_factor);
  private:
  const ::TSP::Size& _internal_scale_factor() const;
  ::TSP::Size* _internal_mutable_scale_factor();
  public:
  void unsafe_arena_set_allocated_scale_factor(
      ::TSP::Size* scale_factor);
  ::TSP::Size* unsafe_arena_release_scale_factor();

  // optional .TSP.Reference table_info = 3;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional .TSD.GeometryArchive new_geometry = 4;
  bool has_new_geometry() const;
  private:
  bool _internal_has_new_geometry() const;
  public:
  void clear_new_geometry();
  const ::TSD::GeometryArchive& new_geometry() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_new_geometry();
  ::TSD::GeometryArchive* mutable_new_geometry();
  void set_allocated_new_geometry(::TSD::GeometryArchive* new_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_new_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_new_geometry();
  public:
  void unsafe_arena_set_allocated_new_geometry(
      ::TSD::GeometryArchive* new_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_new_geometry();

  // optional .TSD.GeometryArchive old_geometry = 5;
  bool has_old_geometry() const;
  private:
  bool _internal_has_old_geometry() const;
  public:
  void clear_old_geometry();
  const ::TSD::GeometryArchive& old_geometry() const;
  PROTOBUF_NODISCARD ::TSD::GeometryArchive* release_old_geometry();
  ::TSD::GeometryArchive* mutable_old_geometry();
  void set_allocated_old_geometry(::TSD::GeometryArchive* old_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_old_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_old_geometry();
  public:
  void unsafe_arena_set_allocated_old_geometry(
      ::TSD::GeometryArchive* old_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_old_geometry();

  // optional bool turn_off_auto_resize = 6;
  bool has_turn_off_auto_resize() const;
  private:
  bool _internal_has_turn_off_auto_resize() const;
  public:
  void clear_turn_off_auto_resize();
  bool turn_off_auto_resize() const;
  void set_turn_off_auto_resize(bool value);
  private:
  bool _internal_turn_off_auto_resize() const;
  void _internal_set_turn_off_auto_resize(bool value);
  public:

  // optional bool should_clear_object_placeholder_flag = 7;
  bool has_should_clear_object_placeholder_flag() const;
  private:
  bool _internal_has_should_clear_object_placeholder_flag() const;
  public:
  void clear_should_clear_object_placeholder_flag();
  bool should_clear_object_placeholder_flag() const;
  void set_should_clear_object_placeholder_flag(bool value);
  private:
  bool _internal_should_clear_object_placeholder_flag() const;
  void _internal_set_should_clear_object_placeholder_flag(bool value);
  public:

  // optional bool did_match_object_placeholder_geometry = 8;
  bool has_did_match_object_placeholder_geometry() const;
  private:
  bool _internal_has_did_match_object_placeholder_geometry() const;
  public:
  void clear_did_match_object_placeholder_geometry();
  bool did_match_object_placeholder_geometry() const;
  void set_did_match_object_placeholder_geometry(bool value);
  private:
  bool _internal_did_match_object_placeholder_geometry() const;
  void _internal_set_did_match_object_placeholder_geometry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableInfoGeometryCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Size* scale_factor_;
    ::TSP::Reference* table_info_;
    ::TSD::GeometryArchive* new_geometry_;
    ::TSD::GeometryArchive* old_geometry_;
    bool turn_off_auto_resize_;
    bool should_clear_object_placeholder_flag_;
    bool did_match_object_placeholder_geometry_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaEditingCommandGroupArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaEditingCommandGroupArchive) */ {
 public:
  inline FormulaEditingCommandGroupArchive() : FormulaEditingCommandGroupArchive(nullptr) {}
  ~FormulaEditingCommandGroupArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaEditingCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaEditingCommandGroupArchive(const FormulaEditingCommandGroupArchive& from);
  FormulaEditingCommandGroupArchive(FormulaEditingCommandGroupArchive&& from) noexcept
    : FormulaEditingCommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline FormulaEditingCommandGroupArchive& operator=(const FormulaEditingCommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaEditingCommandGroupArchive& operator=(FormulaEditingCommandGroupArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaEditingCommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaEditingCommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaEditingCommandGroupArchive*>(
               &_FormulaEditingCommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(FormulaEditingCommandGroupArchive& a, FormulaEditingCommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaEditingCommandGroupArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaEditingCommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaEditingCommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaEditingCommandGroupArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaEditingCommandGroupArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaEditingCommandGroupArchive& from) {
    FormulaEditingCommandGroupArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaEditingCommandGroupArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaEditingCommandGroupArchive";
  }
  protected:
  explicit FormulaEditingCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoSelectionStartFieldNumber = 3,
    kUndoSelectionLengthFieldNumber = 4,
    kUndoSelectionValidFieldNumber = 2,
    kRedoSelectionValidFieldNumber = 6,
    kUndoActiveTokenFieldNumber = 5,
    kRedoSelectionStartFieldNumber = 7,
    kRedoSelectionLengthFieldNumber = 8,
    kRedoActiveTokenFieldNumber = 9,
  };
  // required .TSK.ProgressiveCommandGroupArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::ProgressiveCommandGroupArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::ProgressiveCommandGroupArchive* release_super();
  ::TSK::ProgressiveCommandGroupArchive* mutable_super();
  void set_allocated_super(::TSK::ProgressiveCommandGroupArchive* super);
  private:
  const ::TSK::ProgressiveCommandGroupArchive& _internal_super() const;
  ::TSK::ProgressiveCommandGroupArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::ProgressiveCommandGroupArchive* super);
  ::TSK::ProgressiveCommandGroupArchive* unsafe_arena_release_super();

  // required uint32 undoSelectionStart = 3;
  bool has_undoselectionstart() const;
  private:
  bool _internal_has_undoselectionstart() const;
  public:
  void clear_undoselectionstart();
  uint32_t undoselectionstart() const;
  void set_undoselectionstart(uint32_t value);
  private:
  uint32_t _internal_undoselectionstart() const;
  void _internal_set_undoselectionstart(uint32_t value);
  public:

  // required uint32 undoSelectionLength = 4;
  bool has_undoselectionlength() const;
  private:
  bool _internal_has_undoselectionlength() const;
  public:
  void clear_undoselectionlength();
  uint32_t undoselectionlength() const;
  void set_undoselectionlength(uint32_t value);
  private:
  uint32_t _internal_undoselectionlength() const;
  void _internal_set_undoselectionlength(uint32_t value);
  public:

  // required bool undoSelectionValid = 2;
  bool has_undoselectionvalid() const;
  private:
  bool _internal_has_undoselectionvalid() const;
  public:
  void clear_undoselectionvalid();
  bool undoselectionvalid() const;
  void set_undoselectionvalid(bool value);
  private:
  bool _internal_undoselectionvalid() const;
  void _internal_set_undoselectionvalid(bool value);
  public:

  // required bool redoSelectionValid = 6;
  bool has_redoselectionvalid() const;
  private:
  bool _internal_has_redoselectionvalid() const;
  public:
  void clear_redoselectionvalid();
  bool redoselectionvalid() const;
  void set_redoselectionvalid(bool value);
  private:
  bool _internal_redoselectionvalid() const;
  void _internal_set_redoselectionvalid(bool value);
  public:

  // required uint32 undoActiveToken = 5;
  bool has_undoactivetoken() const;
  private:
  bool _internal_has_undoactivetoken() const;
  public:
  void clear_undoactivetoken();
  uint32_t undoactivetoken() const;
  void set_undoactivetoken(uint32_t value);
  private:
  uint32_t _internal_undoactivetoken() const;
  void _internal_set_undoactivetoken(uint32_t value);
  public:

  // required uint32 redoSelectionStart = 7;
  bool has_redoselectionstart() const;
  private:
  bool _internal_has_redoselectionstart() const;
  public:
  void clear_redoselectionstart();
  uint32_t redoselectionstart() const;
  void set_redoselectionstart(uint32_t value);
  private:
  uint32_t _internal_redoselectionstart() const;
  void _internal_set_redoselectionstart(uint32_t value);
  public:

  // required uint32 redoSelectionLength = 8;
  bool has_redoselectionlength() const;
  private:
  bool _internal_has_redoselectionlength() const;
  public:
  void clear_redoselectionlength();
  uint32_t redoselectionlength() const;
  void set_redoselectionlength(uint32_t value);
  private:
  uint32_t _internal_redoselectionlength() const;
  void _internal_set_redoselectionlength(uint32_t value);
  public:

  // required uint32 redoActiveToken = 9;
  bool has_redoactivetoken() const;
  private:
  bool _internal_has_redoactivetoken() const;
  public:
  void clear_redoactivetoken();
  uint32_t redoactivetoken() const;
  void set_redoactivetoken(uint32_t value);
  private:
  uint32_t _internal_redoactivetoken() const;
  void _internal_set_redoactivetoken(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaEditingCommandGroupArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::ProgressiveCommandGroupArchive* super_;
    uint32_t undoselectionstart_;
    uint32_t undoselectionlength_;
    bool undoselectionvalid_;
    bool redoselectionvalid_;
    uint32_t undoactivetoken_;
    uint32_t redoselectionstart_;
    uint32_t redoselectionlength_;
    uint32_t redoactivetoken_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaEditingCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaEditingCommandSelectionBehaviorArchive) */ {
 public:
  inline FormulaEditingCommandSelectionBehaviorArchive() : FormulaEditingCommandSelectionBehaviorArchive(nullptr) {}
  ~FormulaEditingCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR FormulaEditingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaEditingCommandSelectionBehaviorArchive(const FormulaEditingCommandSelectionBehaviorArchive& from);
  FormulaEditingCommandSelectionBehaviorArchive(FormulaEditingCommandSelectionBehaviorArchive&& from) noexcept
    : FormulaEditingCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline FormulaEditingCommandSelectionBehaviorArchive& operator=(const FormulaEditingCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaEditingCommandSelectionBehaviorArchive& operator=(FormulaEditingCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaEditingCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaEditingCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaEditingCommandSelectionBehaviorArchive*>(
               &_FormulaEditingCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(FormulaEditingCommandSelectionBehaviorArchive& a, FormulaEditingCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaEditingCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaEditingCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormulaEditingCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormulaEditingCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormulaEditingCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FormulaEditingCommandSelectionBehaviorArchive& from) {
    FormulaEditingCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaEditingCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaEditingCommandSelectionBehaviorArchive";
  }
  protected:
  explicit FormulaEditingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFieldNumber = 10,
    kUndoSelectionStartFieldNumber = 3,
    kUndoSelectionLengthFieldNumber = 4,
    kUndoSelectionValidFieldNumber = 2,
    kRedoSelectionValidFieldNumber = 6,
    kUndoActiveTokenFieldNumber = 5,
    kRedoSelectionStartFieldNumber = 7,
    kRedoSelectionLengthFieldNumber = 8,
    kRedoActiveTokenFieldNumber = 9,
  };
  // optional .TSP.Reference storage = 10;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional uint32 undoSelectionStart = 3;
  bool has_undoselectionstart() const;
  private:
  bool _internal_has_undoselectionstart() const;
  public:
  void clear_undoselectionstart();
  uint32_t undoselectionstart() const;
  void set_undoselectionstart(uint32_t value);
  private:
  uint32_t _internal_undoselectionstart() const;
  void _internal_set_undoselectionstart(uint32_t value);
  public:

  // optional uint32 undoSelectionLength = 4;
  bool has_undoselectionlength() const;
  private:
  bool _internal_has_undoselectionlength() const;
  public:
  void clear_undoselectionlength();
  uint32_t undoselectionlength() const;
  void set_undoselectionlength(uint32_t value);
  private:
  uint32_t _internal_undoselectionlength() const;
  void _internal_set_undoselectionlength(uint32_t value);
  public:

  // optional bool undoSelectionValid = 2;
  bool has_undoselectionvalid() const;
  private:
  bool _internal_has_undoselectionvalid() const;
  public:
  void clear_undoselectionvalid();
  bool undoselectionvalid() const;
  void set_undoselectionvalid(bool value);
  private:
  bool _internal_undoselectionvalid() const;
  void _internal_set_undoselectionvalid(bool value);
  public:

  // optional bool redoSelectionValid = 6;
  bool has_redoselectionvalid() const;
  private:
  bool _internal_has_redoselectionvalid() const;
  public:
  void clear_redoselectionvalid();
  bool redoselectionvalid() const;
  void set_redoselectionvalid(bool value);
  private:
  bool _internal_redoselectionvalid() const;
  void _internal_set_redoselectionvalid(bool value);
  public:

  // optional uint32 undoActiveToken = 5;
  bool has_undoactivetoken() const;
  private:
  bool _internal_has_undoactivetoken() const;
  public:
  void clear_undoactivetoken();
  uint32_t undoactivetoken() const;
  void set_undoactivetoken(uint32_t value);
  private:
  uint32_t _internal_undoactivetoken() const;
  void _internal_set_undoactivetoken(uint32_t value);
  public:

  // optional uint32 redoSelectionStart = 7;
  bool has_redoselectionstart() const;
  private:
  bool _internal_has_redoselectionstart() const;
  public:
  void clear_redoselectionstart();
  uint32_t redoselectionstart() const;
  void set_redoselectionstart(uint32_t value);
  private:
  uint32_t _internal_redoselectionstart() const;
  void _internal_set_redoselectionstart(uint32_t value);
  public:

  // optional uint32 redoSelectionLength = 8;
  bool has_redoselectionlength() const;
  private:
  bool _internal_has_redoselectionlength() const;
  public:
  void clear_redoselectionlength();
  uint32_t redoselectionlength() const;
  void set_redoselectionlength(uint32_t value);
  private:
  uint32_t _internal_redoselectionlength() const;
  void _internal_set_redoselectionlength(uint32_t value);
  public:

  // optional uint32 redoActiveToken = 9;
  bool has_redoactivetoken() const;
  private:
  bool _internal_has_redoactivetoken() const;
  public:
  void clear_redoactivetoken();
  uint32_t redoactivetoken() const;
  void set_redoactivetoken(uint32_t value);
  private:
  uint32_t _internal_redoactivetoken() const;
  void _internal_set_redoactivetoken(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaEditingCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* storage_;
    uint32_t undoselectionstart_;
    uint32_t undoselectionlength_;
    bool undoselectionvalid_;
    bool redoselectionvalid_;
    uint32_t undoactivetoken_;
    uint32_t redoselectionstart_;
    uint32_t redoselectionlength_;
    uint32_t redoactivetoken_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class UndoRedoStateCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.UndoRedoStateCommandSelectionBehaviorArchive) */ {
 public:
  inline UndoRedoStateCommandSelectionBehaviorArchive() : UndoRedoStateCommandSelectionBehaviorArchive(nullptr) {}
  ~UndoRedoStateCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR UndoRedoStateCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoRedoStateCommandSelectionBehaviorArchive(const UndoRedoStateCommandSelectionBehaviorArchive& from);
  UndoRedoStateCommandSelectionBehaviorArchive(UndoRedoStateCommandSelectionBehaviorArchive&& from) noexcept
    : UndoRedoStateCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline UndoRedoStateCommandSelectionBehaviorArchive& operator=(const UndoRedoStateCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoRedoStateCommandSelectionBehaviorArchive& operator=(UndoRedoStateCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoRedoStateCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoRedoStateCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const UndoRedoStateCommandSelectionBehaviorArchive*>(
               &_UndoRedoStateCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(UndoRedoStateCommandSelectionBehaviorArchive& a, UndoRedoStateCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoRedoStateCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoRedoStateCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndoRedoStateCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UndoRedoStateCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UndoRedoStateCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UndoRedoStateCommandSelectionBehaviorArchive& from) {
    UndoRedoStateCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoRedoStateCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.UndoRedoStateCommandSelectionBehaviorArchive";
  }
  protected:
  explicit UndoRedoStateCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeforeUndoRedoStateFieldNumber = 1,
    kAfterUndoRedoStateFieldNumber = 2,
    kTableInfoFieldNumber = 3,
    kBeforeTableSelectionFieldNumber = 4,
    kAfterTableSelectionFieldNumber = 6,
  };
  // optional .TSP.Reference before_undo_redo_state = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_before_undo_redo_state() const;
  private:
  bool _internal_has_before_undo_redo_state() const;
  public:
  PROTOBUF_DEPRECATED void clear_before_undo_redo_state();
  PROTOBUF_DEPRECATED const ::TSP::Reference& before_undo_redo_state() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::TSP::Reference* release_before_undo_redo_state();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_before_undo_redo_state();
  PROTOBUF_DEPRECATED void set_allocated_before_undo_redo_state(::TSP::Reference* before_undo_redo_state);
  private:
  const ::TSP::Reference& _internal_before_undo_redo_state() const;
  ::TSP::Reference* _internal_mutable_before_undo_redo_state();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_before_undo_redo_state(
      ::TSP::Reference* before_undo_redo_state);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_before_undo_redo_state();

  // optional .TSP.Reference after_undo_redo_state = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_after_undo_redo_state() const;
  private:
  bool _internal_has_after_undo_redo_state() const;
  public:
  PROTOBUF_DEPRECATED void clear_after_undo_redo_state();
  PROTOBUF_DEPRECATED const ::TSP::Reference& after_undo_redo_state() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::TSP::Reference* release_after_undo_redo_state();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_after_undo_redo_state();
  PROTOBUF_DEPRECATED void set_allocated_after_undo_redo_state(::TSP::Reference* after_undo_redo_state);
  private:
  const ::TSP::Reference& _internal_after_undo_redo_state() const;
  ::TSP::Reference* _internal_mutable_after_undo_redo_state();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_after_undo_redo_state(
      ::TSP::Reference* after_undo_redo_state);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_after_undo_redo_state();

  // optional .TSP.Reference table_info = 3;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional .TST.SelectionArchive before_table_selection = 4;
  bool has_before_table_selection() const;
  private:
  bool _internal_has_before_table_selection() const;
  public:
  void clear_before_table_selection();
  const ::TST::SelectionArchive& before_table_selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_before_table_selection();
  ::TST::SelectionArchive* mutable_before_table_selection();
  void set_allocated_before_table_selection(::TST::SelectionArchive* before_table_selection);
  private:
  const ::TST::SelectionArchive& _internal_before_table_selection() const;
  ::TST::SelectionArchive* _internal_mutable_before_table_selection();
  public:
  void unsafe_arena_set_allocated_before_table_selection(
      ::TST::SelectionArchive* before_table_selection);
  ::TST::SelectionArchive* unsafe_arena_release_before_table_selection();

  // optional .TST.SelectionArchive after_table_selection = 6;
  bool has_after_table_selection() const;
  private:
  bool _internal_has_after_table_selection() const;
  public:
  void clear_after_table_selection();
  const ::TST::SelectionArchive& after_table_selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_after_table_selection();
  ::TST::SelectionArchive* mutable_after_table_selection();
  void set_allocated_after_table_selection(::TST::SelectionArchive* after_table_selection);
  private:
  const ::TST::SelectionArchive& _internal_after_table_selection() const;
  ::TST::SelectionArchive* _internal_mutable_after_table_selection();
  public:
  void unsafe_arena_set_allocated_after_table_selection(
      ::TST::SelectionArchive* after_table_selection);
  ::TST::SelectionArchive* unsafe_arena_release_after_table_selection();

  // @@protoc_insertion_point(class_scope:TST.UndoRedoStateCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* before_undo_redo_state_;
    ::TSP::Reference* after_undo_redo_state_;
    ::TSP::Reference* table_info_;
    ::TST::SelectionArchive* before_table_selection_;
    ::TST::SelectionArchive* after_table_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class TableCommandSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableCommandSelectionBehaviorArchive) */ {
 public:
  inline TableCommandSelectionBehaviorArchive() : TableCommandSelectionBehaviorArchive(nullptr) {}
  ~TableCommandSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR TableCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableCommandSelectionBehaviorArchive(const TableCommandSelectionBehaviorArchive& from);
  TableCommandSelectionBehaviorArchive(TableCommandSelectionBehaviorArchive&& from) noexcept
    : TableCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline TableCommandSelectionBehaviorArchive& operator=(const TableCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableCommandSelectionBehaviorArchive& operator=(TableCommandSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const TableCommandSelectionBehaviorArchive*>(
               &_TableCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(TableCommandSelectionBehaviorArchive& a, TableCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableCommandSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableCommandSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableCommandSelectionBehaviorArchive& from) {
    TableCommandSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableCommandSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableCommandSelectionBehaviorArchive";
  }
  protected:
  explicit TableCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeforeTableSelectionFieldNumber = 1,
    kAfterTableSelectionFieldNumber = 2,
    kTableInfoFieldNumber = 3,
    kLastColumnHitByTapFieldNumber = 4,
  };
  // optional .TST.SelectionArchive before_table_selection = 1;
  bool has_before_table_selection() const;
  private:
  bool _internal_has_before_table_selection() const;
  public:
  void clear_before_table_selection();
  const ::TST::SelectionArchive& before_table_selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_before_table_selection();
  ::TST::SelectionArchive* mutable_before_table_selection();
  void set_allocated_before_table_selection(::TST::SelectionArchive* before_table_selection);
  private:
  const ::TST::SelectionArchive& _internal_before_table_selection() const;
  ::TST::SelectionArchive* _internal_mutable_before_table_selection();
  public:
  void unsafe_arena_set_allocated_before_table_selection(
      ::TST::SelectionArchive* before_table_selection);
  ::TST::SelectionArchive* unsafe_arena_release_before_table_selection();

  // optional .TST.SelectionArchive after_table_selection = 2;
  bool has_after_table_selection() const;
  private:
  bool _internal_has_after_table_selection() const;
  public:
  void clear_after_table_selection();
  const ::TST::SelectionArchive& after_table_selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_after_table_selection();
  ::TST::SelectionArchive* mutable_after_table_selection();
  void set_allocated_after_table_selection(::TST::SelectionArchive* after_table_selection);
  private:
  const ::TST::SelectionArchive& _internal_after_table_selection() const;
  ::TST::SelectionArchive* _internal_mutable_after_table_selection();
  public:
  void unsafe_arena_set_allocated_after_table_selection(
      ::TST::SelectionArchive* after_table_selection);
  ::TST::SelectionArchive* unsafe_arena_release_after_table_selection();

  // optional .TSP.Reference table_info = 3;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional uint32 last_column_hit_by_tap = 4;
  bool has_last_column_hit_by_tap() const;
  private:
  bool _internal_has_last_column_hit_by_tap() const;
  public:
  void clear_last_column_hit_by_tap();
  uint32_t last_column_hit_by_tap() const;
  void set_last_column_hit_by_tap(uint32_t value);
  private:
  uint32_t _internal_last_column_hit_by_tap() const;
  void _internal_set_last_column_hit_by_tap(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::SelectionArchive* before_table_selection_;
    ::TST::SelectionArchive* after_table_selection_;
    ::TSP::Reference* table_info_;
    uint32_t last_column_hit_by_tap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DisableTableNameSelectionBehaviorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DisableTableNameSelectionBehaviorArchive) */ {
 public:
  inline DisableTableNameSelectionBehaviorArchive() : DisableTableNameSelectionBehaviorArchive(nullptr) {}
  ~DisableTableNameSelectionBehaviorArchive() override;
  explicit PROTOBUF_CONSTEXPR DisableTableNameSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableTableNameSelectionBehaviorArchive(const DisableTableNameSelectionBehaviorArchive& from);
  DisableTableNameSelectionBehaviorArchive(DisableTableNameSelectionBehaviorArchive&& from) noexcept
    : DisableTableNameSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline DisableTableNameSelectionBehaviorArchive& operator=(const DisableTableNameSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableTableNameSelectionBehaviorArchive& operator=(DisableTableNameSelectionBehaviorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableTableNameSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableTableNameSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const DisableTableNameSelectionBehaviorArchive*>(
               &_DisableTableNameSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(DisableTableNameSelectionBehaviorArchive& a, DisableTableNameSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableTableNameSelectionBehaviorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableTableNameSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableTableNameSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableTableNameSelectionBehaviorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisableTableNameSelectionBehaviorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisableTableNameSelectionBehaviorArchive& from) {
    DisableTableNameSelectionBehaviorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableTableNameSelectionBehaviorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DisableTableNameSelectionBehaviorArchive";
  }
  protected:
  explicit DisableTableNameSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.TableCommandSelectionBehaviorArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandSelectionBehaviorArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandSelectionBehaviorArchive* release_super();
  ::TST::TableCommandSelectionBehaviorArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandSelectionBehaviorArchive* super);
  private:
  const ::TST::TableCommandSelectionBehaviorArchive& _internal_super() const;
  ::TST::TableCommandSelectionBehaviorArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandSelectionBehaviorArchive* super);
  ::TST::TableCommandSelectionBehaviorArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.DisableTableNameSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandSelectionBehaviorArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyCellCommentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyCellCommentArchive) */ {
 public:
  inline CommandApplyCellCommentArchive() : CommandApplyCellCommentArchive(nullptr) {}
  ~CommandApplyCellCommentArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyCellCommentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyCellCommentArchive(const CommandApplyCellCommentArchive& from);
  CommandApplyCellCommentArchive(CommandApplyCellCommentArchive&& from) noexcept
    : CommandApplyCellCommentArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyCellCommentArchive& operator=(const CommandApplyCellCommentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyCellCommentArchive& operator=(CommandApplyCellCommentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyCellCommentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyCellCommentArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyCellCommentArchive*>(
               &_CommandApplyCellCommentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CommandApplyCellCommentArchive& a, CommandApplyCellCommentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyCellCommentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyCellCommentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyCellCommentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyCellCommentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyCellCommentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyCellCommentArchive& from) {
    CommandApplyCellCommentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyCellCommentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyCellCommentArchive";
  }
  protected:
  explicit CommandApplyCellCommentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellIdFieldNumber = 2,
    kOldCommentStorageFieldNumber = 3,
    kNewCommentStorageFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellID cell_id = 2;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  const ::TST::CellID& cell_id() const;
  PROTOBUF_NODISCARD ::TST::CellID* release_cell_id();
  ::TST::CellID* mutable_cell_id();
  void set_allocated_cell_id(::TST::CellID* cell_id);
  private:
  const ::TST::CellID& _internal_cell_id() const;
  ::TST::CellID* _internal_mutable_cell_id();
  public:
  void unsafe_arena_set_allocated_cell_id(
      ::TST::CellID* cell_id);
  ::TST::CellID* unsafe_arena_release_cell_id();

  // optional .TSP.Reference old_comment_storage = 3;
  bool has_old_comment_storage() const;
  private:
  bool _internal_has_old_comment_storage() const;
  public:
  void clear_old_comment_storage();
  const ::TSP::Reference& old_comment_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_comment_storage();
  ::TSP::Reference* mutable_old_comment_storage();
  void set_allocated_old_comment_storage(::TSP::Reference* old_comment_storage);
  private:
  const ::TSP::Reference& _internal_old_comment_storage() const;
  ::TSP::Reference* _internal_mutable_old_comment_storage();
  public:
  void unsafe_arena_set_allocated_old_comment_storage(
      ::TSP::Reference* old_comment_storage);
  ::TSP::Reference* unsafe_arena_release_old_comment_storage();

  // optional .TSP.Reference new_comment_storage = 4;
  bool has_new_comment_storage() const;
  private:
  bool _internal_has_new_comment_storage() const;
  public:
  void clear_new_comment_storage();
  const ::TSP::Reference& new_comment_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_comment_storage();
  ::TSP::Reference* mutable_new_comment_storage();
  void set_allocated_new_comment_storage(::TSP::Reference* new_comment_storage);
  private:
  const ::TSP::Reference& _internal_new_comment_storage() const;
  ::TSP::Reference* _internal_mutable_new_comment_storage();
  public:
  void unsafe_arena_set_allocated_new_comment_storage(
      ::TSP::Reference* new_comment_storage);
  ::TSP::Reference* unsafe_arena_release_new_comment_storage();

  // @@protoc_insertion_point(class_scope:TST.CommandApplyCellCommentArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellID* cell_id_;
    ::TSP::Reference* old_comment_storage_;
    ::TSP::Reference* new_comment_storage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandApplyConditionalStyleSetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandApplyConditionalStyleSetArchive) */ {
 public:
  inline CommandApplyConditionalStyleSetArchive() : CommandApplyConditionalStyleSetArchive(nullptr) {}
  ~CommandApplyConditionalStyleSetArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandApplyConditionalStyleSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandApplyConditionalStyleSetArchive(const CommandApplyConditionalStyleSetArchive& from);
  CommandApplyConditionalStyleSetArchive(CommandApplyConditionalStyleSetArchive&& from) noexcept
    : CommandApplyConditionalStyleSetArchive() {
    *this = ::std::move(from);
  }

  inline CommandApplyConditionalStyleSetArchive& operator=(const CommandApplyConditionalStyleSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandApplyConditionalStyleSetArchive& operator=(CommandApplyConditionalStyleSetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandApplyConditionalStyleSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandApplyConditionalStyleSetArchive* internal_default_instance() {
    return reinterpret_cast<const CommandApplyConditionalStyleSetArchive*>(
               &_CommandApplyConditionalStyleSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CommandApplyConditionalStyleSetArchive& a, CommandApplyConditionalStyleSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandApplyConditionalStyleSetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandApplyConditionalStyleSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandApplyConditionalStyleSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandApplyConditionalStyleSetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandApplyConditionalStyleSetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandApplyConditionalStyleSetArchive& from) {
    CommandApplyConditionalStyleSetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandApplyConditionalStyleSetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandApplyConditionalStyleSetArchive";
  }
  protected:
  explicit CommandApplyConditionalStyleSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kUndoCellMapFieldNumber = 3,
    kRedoCellMapFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.SelectionArchive selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // required .TST.CellMapArchive undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // @@protoc_insertion_point(class_scope:TST.CommandApplyConditionalStyleSetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::SelectionArchive* selection_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFormulaTokenizationArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFormulaTokenizationArchive) */ {
 public:
  inline CommandSetFormulaTokenizationArchive() : CommandSetFormulaTokenizationArchive(nullptr) {}
  ~CommandSetFormulaTokenizationArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFormulaTokenizationArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFormulaTokenizationArchive(const CommandSetFormulaTokenizationArchive& from);
  CommandSetFormulaTokenizationArchive(CommandSetFormulaTokenizationArchive&& from) noexcept
    : CommandSetFormulaTokenizationArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFormulaTokenizationArchive& operator=(const CommandSetFormulaTokenizationArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFormulaTokenizationArchive& operator=(CommandSetFormulaTokenizationArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFormulaTokenizationArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFormulaTokenizationArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFormulaTokenizationArchive*>(
               &_CommandSetFormulaTokenizationArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CommandSetFormulaTokenizationArchive& a, CommandSetFormulaTokenizationArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFormulaTokenizationArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFormulaTokenizationArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFormulaTokenizationArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFormulaTokenizationArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFormulaTokenizationArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFormulaTokenizationArchive& from) {
    CommandSetFormulaTokenizationArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFormulaTokenizationArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFormulaTokenizationArchive";
  }
  protected:
  explicit CommandSetFormulaTokenizationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTokenizationFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required bool tokenization = 2;
  bool has_tokenization() const;
  private:
  bool _internal_has_tokenization() const;
  public:
  void clear_tokenization();
  bool tokenization() const;
  void set_tokenization(bool value);
  private:
  bool _internal_tokenization() const;
  void _internal_set_tokenization(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFormulaTokenizationArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    bool tokenization_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFilterEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFilterEnabledArchive) */ {
 public:
  inline CommandSetFilterEnabledArchive() : CommandSetFilterEnabledArchive(nullptr) {}
  ~CommandSetFilterEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFilterEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFilterEnabledArchive(const CommandSetFilterEnabledArchive& from);
  CommandSetFilterEnabledArchive(CommandSetFilterEnabledArchive&& from) noexcept
    : CommandSetFilterEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFilterEnabledArchive& operator=(const CommandSetFilterEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFilterEnabledArchive& operator=(CommandSetFilterEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFilterEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFilterEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFilterEnabledArchive*>(
               &_CommandSetFilterEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CommandSetFilterEnabledArchive& a, CommandSetFilterEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFilterEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFilterEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFilterEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFilterEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFilterEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFilterEnabledArchive& from) {
    CommandSetFilterEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFilterEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFilterEnabledArchive";
  }
  protected:
  explicit CommandSetFilterEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFilterIndexFieldNumber = 2,
    kEnabledFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required uint32 filter_index = 2;
  bool has_filter_index() const;
  private:
  bool _internal_has_filter_index() const;
  public:
  void clear_filter_index();
  uint32_t filter_index() const;
  void set_filter_index(uint32_t value);
  private:
  uint32_t _internal_filter_index() const;
  void _internal_set_filter_index(uint32_t value);
  public:

  // required bool enabled = 4;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFilterEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    uint32_t filter_index_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFilterRuleEnabledArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFilterRuleEnabledArchive) */ {
 public:
  inline CommandSetFilterRuleEnabledArchive() : CommandSetFilterRuleEnabledArchive(nullptr) {}
  ~CommandSetFilterRuleEnabledArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFilterRuleEnabledArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFilterRuleEnabledArchive(const CommandSetFilterRuleEnabledArchive& from);
  CommandSetFilterRuleEnabledArchive(CommandSetFilterRuleEnabledArchive&& from) noexcept
    : CommandSetFilterRuleEnabledArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFilterRuleEnabledArchive& operator=(const CommandSetFilterRuleEnabledArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFilterRuleEnabledArchive& operator=(CommandSetFilterRuleEnabledArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFilterRuleEnabledArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFilterRuleEnabledArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFilterRuleEnabledArchive*>(
               &_CommandSetFilterRuleEnabledArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CommandSetFilterRuleEnabledArchive& a, CommandSetFilterRuleEnabledArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFilterRuleEnabledArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFilterRuleEnabledArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFilterRuleEnabledArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFilterRuleEnabledArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFilterRuleEnabledArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFilterRuleEnabledArchive& from) {
    CommandSetFilterRuleEnabledArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFilterRuleEnabledArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFilterRuleEnabledArchive";
  }
  protected:
  explicit CommandSetFilterRuleEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFilterIndexFieldNumber = 2,
    kRuleIndexFieldNumber = 3,
    kEnabledFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required uint32 filter_index = 2;
  bool has_filter_index() const;
  private:
  bool _internal_has_filter_index() const;
  public:
  void clear_filter_index();
  uint32_t filter_index() const;
  void set_filter_index(uint32_t value);
  private:
  uint32_t _internal_filter_index() const;
  void _internal_set_filter_index(uint32_t value);
  public:

  // required uint32 rule_index = 3;
  bool has_rule_index() const;
  private:
  bool _internal_has_rule_index() const;
  public:
  void clear_rule_index();
  uint32_t rule_index() const;
  void set_rule_index(uint32_t value);
  private:
  uint32_t _internal_rule_index() const;
  void _internal_set_rule_index(uint32_t value);
  public:

  // required bool enabled = 4;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFilterRuleEnabledArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    uint32_t filter_index_;
    uint32_t rule_index_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetFilterSetTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetFilterSetTypeArchive) */ {
 public:
  inline CommandSetFilterSetTypeArchive() : CommandSetFilterSetTypeArchive(nullptr) {}
  ~CommandSetFilterSetTypeArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetFilterSetTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetFilterSetTypeArchive(const CommandSetFilterSetTypeArchive& from);
  CommandSetFilterSetTypeArchive(CommandSetFilterSetTypeArchive&& from) noexcept
    : CommandSetFilterSetTypeArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetFilterSetTypeArchive& operator=(const CommandSetFilterSetTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetFilterSetTypeArchive& operator=(CommandSetFilterSetTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetFilterSetTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetFilterSetTypeArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetFilterSetTypeArchive*>(
               &_CommandSetFilterSetTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CommandSetFilterSetTypeArchive& a, CommandSetFilterSetTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetFilterSetTypeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetFilterSetTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetFilterSetTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetFilterSetTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetFilterSetTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetFilterSetTypeArchive& from) {
    CommandSetFilterSetTypeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetFilterSetTypeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetFilterSetTypeArchive";
  }
  protected:
  explicit CommandSetFilterSetTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldFilterSetTypeFieldNumber = 2,
    kNewFilterSetTypeFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  bool has_old_filter_set_type() const;
  private:
  bool _internal_has_old_filter_set_type() const;
  public:
  void clear_old_filter_set_type();
  ::TST::FilterSetArchive_FilterSetType old_filter_set_type() const;
  void set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  private:
  ::TST::FilterSetArchive_FilterSetType _internal_old_filter_set_type() const;
  void _internal_set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  public:

  // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
  bool has_new_filter_set_type() const;
  private:
  bool _internal_has_new_filter_set_type() const;
  public:
  void clear_new_filter_set_type();
  ::TST::FilterSetArchive_FilterSetType new_filter_set_type() const;
  void set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  private:
  ::TST::FilterSetArchive_FilterSetType _internal_new_filter_set_type() const;
  void _internal_set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetFilterSetTypeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    int old_filter_set_type_;
    int new_filter_set_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetStyleNetworkArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetStyleNetworkArchive) */ {
 public:
  inline CommandSetStyleNetworkArchive() : CommandSetStyleNetworkArchive(nullptr) {}
  ~CommandSetStyleNetworkArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetStyleNetworkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetStyleNetworkArchive(const CommandSetStyleNetworkArchive& from);
  CommandSetStyleNetworkArchive(CommandSetStyleNetworkArchive&& from) noexcept
    : CommandSetStyleNetworkArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetStyleNetworkArchive& operator=(const CommandSetStyleNetworkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetStyleNetworkArchive& operator=(CommandSetStyleNetworkArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetStyleNetworkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetStyleNetworkArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetStyleNetworkArchive*>(
               &_CommandSetStyleNetworkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CommandSetStyleNetworkArchive& a, CommandSetStyleNetworkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetStyleNetworkArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetStyleNetworkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetStyleNetworkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetStyleNetworkArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetStyleNetworkArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetStyleNetworkArchive& from) {
    CommandSetStyleNetworkArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetStyleNetworkArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetStyleNetworkArchive";
  }
  protected:
  explicit CommandSetStyleNetworkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldStyleNetworkFieldNumber = 2,
    kNewStyleNetworkFieldNumber = 3,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.TableStyleNetworkArchive old_style_network = 2;
  bool has_old_style_network() const;
  private:
  bool _internal_has_old_style_network() const;
  public:
  void clear_old_style_network();
  const ::TST::TableStyleNetworkArchive& old_style_network() const;
  PROTOBUF_NODISCARD ::TST::TableStyleNetworkArchive* release_old_style_network();
  ::TST::TableStyleNetworkArchive* mutable_old_style_network();
  void set_allocated_old_style_network(::TST::TableStyleNetworkArchive* old_style_network);
  private:
  const ::TST::TableStyleNetworkArchive& _internal_old_style_network() const;
  ::TST::TableStyleNetworkArchive* _internal_mutable_old_style_network();
  public:
  void unsafe_arena_set_allocated_old_style_network(
      ::TST::TableStyleNetworkArchive* old_style_network);
  ::TST::TableStyleNetworkArchive* unsafe_arena_release_old_style_network();

  // required .TST.TableStyleNetworkArchive new_style_network = 3;
  bool has_new_style_network() const;
  private:
  bool _internal_has_new_style_network() const;
  public:
  void clear_new_style_network();
  const ::TST::TableStyleNetworkArchive& new_style_network() const;
  PROTOBUF_NODISCARD ::TST::TableStyleNetworkArchive* release_new_style_network();
  ::TST::TableStyleNetworkArchive* mutable_new_style_network();
  void set_allocated_new_style_network(::TST::TableStyleNetworkArchive* new_style_network);
  private:
  const ::TST::TableStyleNetworkArchive& _internal_new_style_network() const;
  ::TST::TableStyleNetworkArchive* _internal_mutable_new_style_network();
  public:
  void unsafe_arena_set_allocated_new_style_network(
      ::TST::TableStyleNetworkArchive* new_style_network);
  ::TST::TableStyleNetworkArchive* unsafe_arena_release_new_style_network();

  // @@protoc_insertion_point(class_scope:TST.CommandSetStyleNetworkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::TableStyleNetworkArchive* old_style_network_;
    ::TST::TableStyleNetworkArchive* new_style_network_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandMutateCellsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandMutateCellsArchive) */ {
 public:
  inline CommandMutateCellsArchive() : CommandMutateCellsArchive(nullptr) {}
  ~CommandMutateCellsArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandMutateCellsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMutateCellsArchive(const CommandMutateCellsArchive& from);
  CommandMutateCellsArchive(CommandMutateCellsArchive&& from) noexcept
    : CommandMutateCellsArchive() {
    *this = ::std::move(from);
  }

  inline CommandMutateCellsArchive& operator=(const CommandMutateCellsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMutateCellsArchive& operator=(CommandMutateCellsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMutateCellsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMutateCellsArchive* internal_default_instance() {
    return reinterpret_cast<const CommandMutateCellsArchive*>(
               &_CommandMutateCellsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CommandMutateCellsArchive& a, CommandMutateCellsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMutateCellsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMutateCellsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMutateCellsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMutateCellsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMutateCellsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMutateCellsArchive& from) {
    CommandMutateCellsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMutateCellsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandMutateCellsArchive";
  }
  protected:
  explicit CommandMutateCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kUndoCellMapFieldNumber = 2,
    kRedoCellMapFieldNumber = 3,
    kSelectionFieldNumber = 4,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellMapArchive undo_cell_map = 2;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // required .TST.CellMapArchive redo_cell_map = 3;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TST.SelectionArchive selection = 4;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  const ::TST::SelectionArchive& selection() const;
  PROTOBUF_NODISCARD ::TST::SelectionArchive* release_selection();
  ::TST::SelectionArchive* mutable_selection();
  void set_allocated_selection(::TST::SelectionArchive* selection);
  private:
  const ::TST::SelectionArchive& _internal_selection() const;
  ::TST::SelectionArchive* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::TST::SelectionArchive* selection);
  ::TST::SelectionArchive* unsafe_arena_release_selection();

  // @@protoc_insertion_point(class_scope:TST.CommandMutateCellsArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TST::SelectionArchive* selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandDisableFilterRulesForColumnArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandDisableFilterRulesForColumnArchive) */ {
 public:
  inline CommandDisableFilterRulesForColumnArchive() : CommandDisableFilterRulesForColumnArchive(nullptr) {}
  ~CommandDisableFilterRulesForColumnArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandDisableFilterRulesForColumnArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDisableFilterRulesForColumnArchive(const CommandDisableFilterRulesForColumnArchive& from);
  CommandDisableFilterRulesForColumnArchive(CommandDisableFilterRulesForColumnArchive&& from) noexcept
    : CommandDisableFilterRulesForColumnArchive() {
    *this = ::std::move(from);
  }

  inline CommandDisableFilterRulesForColumnArchive& operator=(const CommandDisableFilterRulesForColumnArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDisableFilterRulesForColumnArchive& operator=(CommandDisableFilterRulesForColumnArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDisableFilterRulesForColumnArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDisableFilterRulesForColumnArchive* internal_default_instance() {
    return reinterpret_cast<const CommandDisableFilterRulesForColumnArchive*>(
               &_CommandDisableFilterRulesForColumnArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CommandDisableFilterRulesForColumnArchive& a, CommandDisableFilterRulesForColumnArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDisableFilterRulesForColumnArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDisableFilterRulesForColumnArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDisableFilterRulesForColumnArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDisableFilterRulesForColumnArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDisableFilterRulesForColumnArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDisableFilterRulesForColumnArchive& from) {
    CommandDisableFilterRulesForColumnArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDisableFilterRulesForColumnArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandDisableFilterRulesForColumnArchive";
  }
  protected:
  explicit CommandDisableFilterRulesForColumnArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleIndicesFieldNumber = 3,
    kSuperFieldNumber = 1,
    kColumnIndexFieldNumber = 2,
  };
  // repeated uint32 rule_indices = 3;
  int rule_indices_size() const;
  private:
  int _internal_rule_indices_size() const;
  public:
  void clear_rule_indices();
  private:
  uint32_t _internal_rule_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rule_indices() const;
  void _internal_add_rule_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rule_indices();
  public:
  uint32_t rule_indices(int index) const;
  void set_rule_indices(int index, uint32_t value);
  void add_rule_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rule_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rule_indices();

  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required uint32 column_index = 2;
  bool has_column_index() const;
  private:
  bool _internal_has_column_index() const;
  public:
  void clear_column_index();
  uint32_t column_index() const;
  void set_column_index(uint32_t value);
  private:
  uint32_t _internal_column_index() const;
  void _internal_set_column_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandDisableFilterRulesForColumnArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rule_indices_;
    ::TST::TableCommandArchive* super_;
    uint32_t column_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetTextStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetTextStyleArchive) */ {
 public:
  inline CommandSetTextStyleArchive() : CommandSetTextStyleArchive(nullptr) {}
  ~CommandSetTextStyleArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetTextStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetTextStyleArchive(const CommandSetTextStyleArchive& from);
  CommandSetTextStyleArchive(CommandSetTextStyleArchive&& from) noexcept
    : CommandSetTextStyleArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetTextStyleArchive& operator=(const CommandSetTextStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetTextStyleArchive& operator=(CommandSetTextStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetTextStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetTextStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetTextStyleArchive*>(
               &_CommandSetTextStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CommandSetTextStyleArchive& a, CommandSetTextStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetTextStyleArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetTextStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetTextStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetTextStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetTextStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetTextStyleArchive& from) {
    CommandSetTextStyleArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetTextStyleArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetTextStyleArchive";
  }
  protected:
  explicit CommandSetTextStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kRegionFieldNumber = 2,
    kUndoCellMapFieldNumber = 3,
    kRedoCellMapFieldNumber = 4,
    kSubcommandsFieldNumber = 5,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // required .TST.CellRegion region = 2;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::TST::CellRegion& region() const;
  PROTOBUF_NODISCARD ::TST::CellRegion* release_region();
  ::TST::CellRegion* mutable_region();
  void set_allocated_region(::TST::CellRegion* region);
  private:
  const ::TST::CellRegion& _internal_region() const;
  ::TST::CellRegion* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::TST::CellRegion* region);
  ::TST::CellRegion* unsafe_arena_release_region();

  // optional .TST.CellMapArchive undo_cell_map = 3;
  bool has_undo_cell_map() const;
  private:
  bool _internal_has_undo_cell_map() const;
  public:
  void clear_undo_cell_map();
  const ::TST::CellMapArchive& undo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_undo_cell_map();
  ::TST::CellMapArchive* mutable_undo_cell_map();
  void set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_undo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_undo_cell_map();
  public:
  void unsafe_arena_set_allocated_undo_cell_map(
      ::TST::CellMapArchive* undo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_undo_cell_map();

  // optional .TST.CellMapArchive redo_cell_map = 4;
  bool has_redo_cell_map() const;
  private:
  bool _internal_has_redo_cell_map() const;
  public:
  void clear_redo_cell_map();
  const ::TST::CellMapArchive& redo_cell_map() const;
  PROTOBUF_NODISCARD ::TST::CellMapArchive* release_redo_cell_map();
  ::TST::CellMapArchive* mutable_redo_cell_map();
  void set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map);
  private:
  const ::TST::CellMapArchive& _internal_redo_cell_map() const;
  ::TST::CellMapArchive* _internal_mutable_redo_cell_map();
  public:
  void unsafe_arena_set_allocated_redo_cell_map(
      ::TST::CellMapArchive* redo_cell_map);
  ::TST::CellMapArchive* unsafe_arena_release_redo_cell_map();

  // optional .TSP.Reference subcommands = 5;
  bool has_subcommands() const;
  private:
  bool _internal_has_subcommands() const;
  public:
  void clear_subcommands();
  const ::TSP::Reference& subcommands() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_subcommands();
  ::TSP::Reference* mutable_subcommands();
  void set_allocated_subcommands(::TSP::Reference* subcommands);
  private:
  const ::TSP::Reference& _internal_subcommands() const;
  ::TSP::Reference* _internal_mutable_subcommands();
  public:
  void unsafe_arena_set_allocated_subcommands(
      ::TSP::Reference* subcommands);
  ::TSP::Reference* unsafe_arena_release_subcommands();

  // @@protoc_insertion_point(class_scope:TST.CommandSetTextStyleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
    ::TST::CellRegion* region_;
    ::TST::CellMapArchive* undo_cell_map_;
    ::TST::CellMapArchive* redo_cell_map_;
    ::TSP::Reference* subcommands_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandNotifyForTransformingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandNotifyForTransformingArchive) */ {
 public:
  inline CommandNotifyForTransformingArchive() : CommandNotifyForTransformingArchive(nullptr) {}
  ~CommandNotifyForTransformingArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandNotifyForTransformingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandNotifyForTransformingArchive(const CommandNotifyForTransformingArchive& from);
  CommandNotifyForTransformingArchive(CommandNotifyForTransformingArchive&& from) noexcept
    : CommandNotifyForTransformingArchive() {
    *this = ::std::move(from);
  }

  inline CommandNotifyForTransformingArchive& operator=(const CommandNotifyForTransformingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandNotifyForTransformingArchive& operator=(CommandNotifyForTransformingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandNotifyForTransformingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandNotifyForTransformingArchive* internal_default_instance() {
    return reinterpret_cast<const CommandNotifyForTransformingArchive*>(
               &_CommandNotifyForTransformingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CommandNotifyForTransformingArchive& a, CommandNotifyForTransformingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandNotifyForTransformingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandNotifyForTransformingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandNotifyForTransformingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandNotifyForTransformingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandNotifyForTransformingArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandNotifyForTransformingArchive& from) {
    CommandNotifyForTransformingArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandNotifyForTransformingArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandNotifyForTransformingArchive";
  }
  protected:
  explicit CommandNotifyForTransformingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.TableCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TST::TableCommandArchive* release_super();
  ::TST::TableCommandArchive* mutable_super();
  void set_allocated_super(::TST::TableCommandArchive* super);
  private:
  const ::TST::TableCommandArchive& _internal_super() const;
  ::TST::TableCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableCommandArchive* super);
  ::TST::TableCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.CommandNotifyForTransformingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TST::TableCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSetStorageLanguageArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommandSetStorageLanguageArchive) */ {
 public:
  inline CommandSetStorageLanguageArchive() : CommandSetStorageLanguageArchive(nullptr) {}
  ~CommandSetStorageLanguageArchive() override;
  explicit PROTOBUF_CONSTEXPR CommandSetStorageLanguageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSetStorageLanguageArchive(const CommandSetStorageLanguageArchive& from);
  CommandSetStorageLanguageArchive(CommandSetStorageLanguageArchive&& from) noexcept
    : CommandSetStorageLanguageArchive() {
    *this = ::std::move(from);
  }

  inline CommandSetStorageLanguageArchive& operator=(const CommandSetStorageLanguageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSetStorageLanguageArchive& operator=(CommandSetStorageLanguageArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSetStorageLanguageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSetStorageLanguageArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSetStorageLanguageArchive*>(
               &_CommandSetStorageLanguageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CommandSetStorageLanguageArchive& a, CommandSetStorageLanguageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSetStorageLanguageArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSetStorageLanguageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandSetStorageLanguageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandSetStorageLanguageArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandSetStorageLanguageArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandSetStorageLanguageArchive& from) {
    CommandSetStorageLanguageArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSetStorageLanguageArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommandSetStorageLanguageArchive";
  }
  protected:
  explicit CommandSetStorageLanguageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 3,
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
    kUndoTransactionFieldNumber = 6,
    kRangeLocationFieldNumber = 4,
    kRangeLengthFieldNumber = 5,
  };
  // required string language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  bool has_undo_transaction() const;
  private:
  bool _internal_has_undo_transaction() const;
  public:
  void clear_undo_transaction();
  const ::TSWP::UndoTransaction& undo_transaction() const;
  PROTOBUF_NODISCARD ::TSWP::UndoTransaction* release_undo_transaction();
  ::TSWP::UndoTransaction* mutable_undo_transaction();
  void set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction);
  private:
  const ::TSWP::UndoTransaction& _internal_undo_transaction() const;
  ::TSWP::UndoTransaction* _internal_mutable_undo_transaction();
  public:
  void unsafe_arena_set_allocated_undo_transaction(
      ::TSWP::UndoTransaction* undo_transaction);
  ::TSWP::UndoTransaction* unsafe_arena_release_undo_transaction();

  // required uint32 range_location = 4;
  bool has_range_location() const;
  private:
  bool _internal_has_range_location() const;
  public:
  void clear_range_location();
  uint32_t range_location() const;
  void set_range_location(uint32_t value);
  private:
  uint32_t _internal_range_location() const;
  void _internal_set_range_location(uint32_t value);
  public:

  // required uint32 range_length = 5;
  bool has_range_length() const;
  private:
  bool _internal_has_range_length() const;
  public:
  void clear_range_length();
  uint32_t range_length() const;
  void set_range_length(uint32_t value);
  private:
  uint32_t _internal_range_length() const;
  void _internal_set_range_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CommandSetStorageLanguageArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* storage_;
    ::TSWP::UndoTransaction* undo_transaction_;
    uint32_t range_location_;
    uint32_t range_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSTCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TableCommandArchive

// required .TSP.Reference tableInfo = 1;
inline bool TableCommandArchive::_internal_has_tableinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tableinfo_ != nullptr);
  return value;
}
inline bool TableCommandArchive::has_tableinfo() const {
  return _internal_has_tableinfo();
}
inline const ::TSP::Reference& TableCommandArchive::_internal_tableinfo() const {
  const ::TSP::Reference* p = _impl_.tableinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableCommandArchive::tableinfo() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.tableInfo)
  return _internal_tableinfo();
}
inline void TableCommandArchive::unsafe_arena_set_allocated_tableinfo(
    ::TSP::Reference* tableinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tableinfo_);
  }
  _impl_.tableinfo_ = tableinfo;
  if (tableinfo) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandArchive.tableInfo)
}
inline ::TSP::Reference* TableCommandArchive::release_tableinfo() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.tableinfo_;
  _impl_.tableinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TableCommandArchive::unsafe_arena_release_tableinfo() {
  // @@protoc_insertion_point(field_release:TST.TableCommandArchive.tableInfo)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.tableinfo_;
  _impl_.tableinfo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableCommandArchive::_internal_mutable_tableinfo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tableinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.tableinfo_ = p;
  }
  return _impl_.tableinfo_;
}
inline ::TSP::Reference* TableCommandArchive::mutable_tableinfo() {
  ::TSP::Reference* _msg = _internal_mutable_tableinfo();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandArchive.tableInfo)
  return _msg;
}
inline void TableCommandArchive::set_allocated_tableinfo(::TSP::Reference* tableinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tableinfo_);
  }
  if (tableinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tableinfo));
    if (message_arena != submessage_arena) {
      tableinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tableinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tableinfo_ = tableinfo;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandArchive.tableInfo)
}

// optional string commandname = 2;
inline bool TableCommandArchive::_internal_has_commandname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableCommandArchive::has_commandname() const {
  return _internal_has_commandname();
}
inline void TableCommandArchive::clear_commandname() {
  _impl_.commandname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableCommandArchive::commandname() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.commandname)
  return _internal_commandname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableCommandArchive::set_commandname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.commandname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.commandname)
}
inline std::string* TableCommandArchive::mutable_commandname() {
  std::string* _s = _internal_mutable_commandname();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandArchive.commandname)
  return _s;
}
inline const std::string& TableCommandArchive::_internal_commandname() const {
  return _impl_.commandname_.Get();
}
inline void TableCommandArchive::_internal_set_commandname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.commandname_.Set(value, GetArenaForAllocation());
}
inline std::string* TableCommandArchive::_internal_mutable_commandname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.commandname_.Mutable(GetArenaForAllocation());
}
inline std::string* TableCommandArchive::release_commandname() {
  // @@protoc_insertion_point(field_release:TST.TableCommandArchive.commandname)
  if (!_internal_has_commandname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.commandname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commandname_.IsDefault()) {
    _impl_.commandname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TableCommandArchive::set_allocated_commandname(std::string* commandname) {
  if (commandname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.commandname_.SetAllocated(commandname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commandname_.IsDefault()) {
    _impl_.commandname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandArchive.commandname)
}

// required .TSK.CommandArchive super = 3;
inline bool TableCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool TableCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TableCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TableCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.super)
  return _internal_super();
}
inline void TableCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandArchive.super)
}
inline ::TSK::CommandArchive* TableCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* TableCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TableCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TableCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* TableCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandArchive.super)
  return _msg;
}
inline void TableCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandArchive.super)
}

// optional uint32 editing_mode_at_start = 4;
inline bool TableCommandArchive::_internal_has_editing_mode_at_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TableCommandArchive::has_editing_mode_at_start() const {
  return _internal_has_editing_mode_at_start();
}
inline void TableCommandArchive::clear_editing_mode_at_start() {
  _impl_.editing_mode_at_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t TableCommandArchive::_internal_editing_mode_at_start() const {
  return _impl_.editing_mode_at_start_;
}
inline uint32_t TableCommandArchive::editing_mode_at_start() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandArchive.editing_mode_at_start)
  return _internal_editing_mode_at_start();
}
inline void TableCommandArchive::_internal_set_editing_mode_at_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.editing_mode_at_start_ = value;
}
inline void TableCommandArchive::set_editing_mode_at_start(uint32_t value) {
  _internal_set_editing_mode_at_start(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandArchive.editing_mode_at_start)
}

// -------------------------------------------------------------------

// CommandChangeFreezeHeaderStateArchive

// required .TST.CommandDirectionArchive direction = 1;
inline bool CommandChangeFreezeHeaderStateArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandChangeFreezeHeaderStateArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandChangeFreezeHeaderStateArchive::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TST::CommandDirectionArchive CommandChangeFreezeHeaderStateArchive::_internal_direction() const {
  return static_cast< ::TST::CommandDirectionArchive >(_impl_.direction_);
}
inline ::TST::CommandDirectionArchive CommandChangeFreezeHeaderStateArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeFreezeHeaderStateArchive.direction)
  return _internal_direction();
}
inline void CommandChangeFreezeHeaderStateArchive::_internal_set_direction(::TST::CommandDirectionArchive value) {
  assert(::TST::CommandDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.direction_ = value;
}
inline void CommandChangeFreezeHeaderStateArchive::set_direction(::TST::CommandDirectionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandChangeFreezeHeaderStateArchive.direction)
}

// required bool new_freeze_state = 2;
inline bool CommandChangeFreezeHeaderStateArchive::_internal_has_new_freeze_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandChangeFreezeHeaderStateArchive::has_new_freeze_state() const {
  return _internal_has_new_freeze_state();
}
inline void CommandChangeFreezeHeaderStateArchive::clear_new_freeze_state() {
  _impl_.new_freeze_state_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandChangeFreezeHeaderStateArchive::_internal_new_freeze_state() const {
  return _impl_.new_freeze_state_;
}
inline bool CommandChangeFreezeHeaderStateArchive::new_freeze_state() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeFreezeHeaderStateArchive.new_freeze_state)
  return _internal_new_freeze_state();
}
inline void CommandChangeFreezeHeaderStateArchive::_internal_set_new_freeze_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_freeze_state_ = value;
}
inline void CommandChangeFreezeHeaderStateArchive::set_new_freeze_state(bool value) {
  _internal_set_new_freeze_state(value);
  // @@protoc_insertion_point(field_set:TST.CommandChangeFreezeHeaderStateArchive.new_freeze_state)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandChangeFreezeHeaderStateArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandChangeFreezeHeaderStateArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandChangeFreezeHeaderStateArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandChangeFreezeHeaderStateArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandChangeFreezeHeaderStateArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandChangeFreezeHeaderStateArchive.super)
  return _internal_super();
}
inline void CommandChangeFreezeHeaderStateArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandChangeFreezeHeaderStateArchive.super)
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandChangeFreezeHeaderStateArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandChangeFreezeHeaderStateArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandChangeFreezeHeaderStateArchive.super)
  return _msg;
}
inline void CommandChangeFreezeHeaderStateArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandChangeFreezeHeaderStateArchive.super)
}

// -------------------------------------------------------------------

// CommandDeleteCellsArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandDeleteCellsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandDeleteCellsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandDeleteCellsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.selection)
  return _internal_selection();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.selection)
}
inline ::TST::SelectionArchive* CommandDeleteCellsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandDeleteCellsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandDeleteCellsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandDeleteCellsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.selection)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandDeleteCellsArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandDeleteCellsArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandDeleteCellsArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.undo_map)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.undo_map)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandDeleteCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandDeleteCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandDeleteCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.super)
  return _internal_super();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandDeleteCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.super)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.super)
}

// required .TST.CellMapArchive redo_map = 4;
inline bool CommandDeleteCellsArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandDeleteCellsArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandDeleteCellsArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandDeleteCellsArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandDeleteCellsArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellsArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellsArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandDeleteCellsArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellsArchive.redo_map)
  return _msg;
}
inline void CommandDeleteCellsArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellsArchive.redo_map)
}

// required bool invalidate_comments = 5;
inline bool CommandDeleteCellsArchive::_internal_has_invalidate_comments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandDeleteCellsArchive::has_invalidate_comments() const {
  return _internal_has_invalidate_comments();
}
inline void CommandDeleteCellsArchive::clear_invalidate_comments() {
  _impl_.invalidate_comments_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandDeleteCellsArchive::_internal_invalidate_comments() const {
  return _impl_.invalidate_comments_;
}
inline bool CommandDeleteCellsArchive::invalidate_comments() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellsArchive.invalidate_comments)
  return _internal_invalidate_comments();
}
inline void CommandDeleteCellsArchive::_internal_set_invalidate_comments(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.invalidate_comments_ = value;
}
inline void CommandDeleteCellsArchive::set_invalidate_comments(bool value) {
  _internal_set_invalidate_comments(value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteCellsArchive.invalidate_comments)
}

// -------------------------------------------------------------------

// CommandDeleteCellContentsArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandDeleteCellContentsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandDeleteCellContentsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandDeleteCellContentsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.selection)
  return _internal_selection();
}
inline void CommandDeleteCellContentsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellContentsArchive.selection)
}
inline ::TST::SelectionArchive* CommandDeleteCellContentsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandDeleteCellContentsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellContentsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandDeleteCellContentsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandDeleteCellContentsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellContentsArchive.selection)
  return _msg;
}
inline void CommandDeleteCellContentsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellContentsArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandDeleteCellContentsArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandDeleteCellContentsArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandDeleteCellContentsArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandDeleteCellContentsArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellContentsArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellContentsArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellContentsArchive.undo_map)
  return _msg;
}
inline void CommandDeleteCellContentsArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellContentsArchive.undo_map)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandDeleteCellContentsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteCellContentsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandDeleteCellContentsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandDeleteCellContentsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.super)
  return _internal_super();
}
inline void CommandDeleteCellContentsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellContentsArchive.super)
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellContentsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandDeleteCellContentsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellContentsArchive.super)
  return _msg;
}
inline void CommandDeleteCellContentsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellContentsArchive.super)
}

// required .TST.CellMapArchive redo_map = 4;
inline bool CommandDeleteCellContentsArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandDeleteCellContentsArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandDeleteCellContentsArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandDeleteCellContentsArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteCellContentsArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteCellContentsArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandDeleteCellContentsArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteCellContentsArchive.redo_map)
  return _msg;
}
inline void CommandDeleteCellContentsArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteCellContentsArchive.redo_map)
}

// required bool invalidate_comments = 5;
inline bool CommandDeleteCellContentsArchive::_internal_has_invalidate_comments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandDeleteCellContentsArchive::has_invalidate_comments() const {
  return _internal_has_invalidate_comments();
}
inline void CommandDeleteCellContentsArchive::clear_invalidate_comments() {
  _impl_.invalidate_comments_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandDeleteCellContentsArchive::_internal_invalidate_comments() const {
  return _impl_.invalidate_comments_;
}
inline bool CommandDeleteCellContentsArchive::invalidate_comments() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteCellContentsArchive.invalidate_comments)
  return _internal_invalidate_comments();
}
inline void CommandDeleteCellContentsArchive::_internal_set_invalidate_comments(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.invalidate_comments_ = value;
}
inline void CommandDeleteCellContentsArchive::set_invalidate_comments(bool value) {
  _internal_set_invalidate_comments(value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteCellContentsArchive.invalidate_comments)
}

// -------------------------------------------------------------------

// CommandSetMultipleCellsArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandSetMultipleCellsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetMultipleCellsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetMultipleCellsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsArchive.selection)
  return _internal_selection();
}
inline void CommandSetMultipleCellsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsArchive.selection)
  return _msg;
}
inline void CommandSetMultipleCellsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandSetMultipleCellsArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandSetMultipleCellsArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsArchive.undo_map)
  return _msg;
}
inline void CommandSetMultipleCellsArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsArchive.undo_map)
}

// required .TST.CellMapArchive redo_map = 3;
inline bool CommandSetMultipleCellsArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandSetMultipleCellsArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsArchive.redo_map)
  return _msg;
}
inline void CommandSetMultipleCellsArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsArchive.redo_map)
}

// optional .TST.Cell source_cell = 4;
inline bool CommandSetMultipleCellsArchive::_internal_has_source_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_cell_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsArchive::has_source_cell() const {
  return _internal_has_source_cell();
}
inline const ::TST::Cell& CommandSetMultipleCellsArchive::_internal_source_cell() const {
  const ::TST::Cell* p = _impl_.source_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandSetMultipleCellsArchive::source_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsArchive.source_cell)
  return _internal_source_cell();
}
inline void CommandSetMultipleCellsArchive::unsafe_arena_set_allocated_source_cell(
    ::TST::Cell* source_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_cell_);
  }
  _impl_.source_cell_ = source_cell;
  if (source_cell) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsArchive.source_cell)
}
inline ::TST::Cell* CommandSetMultipleCellsArchive::release_source_cell() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.source_cell_;
  _impl_.source_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandSetMultipleCellsArchive::unsafe_arena_release_source_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsArchive.source_cell)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.source_cell_;
  _impl_.source_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandSetMultipleCellsArchive::_internal_mutable_source_cell() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.source_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.source_cell_ = p;
  }
  return _impl_.source_cell_;
}
inline ::TST::Cell* CommandSetMultipleCellsArchive::mutable_source_cell() {
  ::TST::Cell* _msg = _internal_mutable_source_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsArchive.source_cell)
  return _msg;
}
inline void CommandSetMultipleCellsArchive::set_allocated_source_cell(::TST::Cell* source_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_cell_);
  }
  if (source_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_cell));
    if (message_arena != submessage_arena) {
      source_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.source_cell_ = source_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsArchive.source_cell)
}

// optional bool only_if_format_differs = 6;
inline bool CommandSetMultipleCellsArchive::_internal_has_only_if_format_differs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetMultipleCellsArchive::has_only_if_format_differs() const {
  return _internal_has_only_if_format_differs();
}
inline void CommandSetMultipleCellsArchive::clear_only_if_format_differs() {
  _impl_.only_if_format_differs_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommandSetMultipleCellsArchive::_internal_only_if_format_differs() const {
  return _impl_.only_if_format_differs_;
}
inline bool CommandSetMultipleCellsArchive::only_if_format_differs() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsArchive.only_if_format_differs)
  return _internal_only_if_format_differs();
}
inline void CommandSetMultipleCellsArchive::_internal_set_only_if_format_differs(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.only_if_format_differs_ = value;
}
inline void CommandSetMultipleCellsArchive::set_only_if_format_differs(bool value) {
  _internal_set_only_if_format_differs(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetMultipleCellsArchive.only_if_format_differs)
}

// required .TST.TableCommandArchive super = 7;
inline bool CommandSetMultipleCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultipleCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::TableCommandArchive& CommandSetMultipleCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetMultipleCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsArchive.super)
  return _internal_super();
}
inline void CommandSetMultipleCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsArchive.super)
  return _msg;
}
inline void CommandSetMultipleCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsArchive.super)
}

// -------------------------------------------------------------------

// CommandSetMultipleCellsCustomArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandSetMultipleCellsCustomArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsCustomArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetMultipleCellsCustomArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetMultipleCellsCustomArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsCustomArchive.selection)
  return _internal_selection();
}
inline void CommandSetMultipleCellsCustomArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsCustomArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsCustomArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsCustomArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsCustomArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsCustomArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsCustomArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsCustomArchive.selection)
  return _msg;
}
inline void CommandSetMultipleCellsCustomArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsCustomArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandSetMultipleCellsCustomArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsCustomArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsCustomArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsCustomArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsCustomArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandSetMultipleCellsCustomArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsCustomArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsCustomArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsCustomArchive.undo_map)
  return _msg;
}
inline void CommandSetMultipleCellsCustomArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsCustomArchive.undo_map)
}

// required .TST.CellMapArchive redo_map = 3;
inline bool CommandSetMultipleCellsCustomArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsCustomArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsCustomArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsCustomArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsCustomArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandSetMultipleCellsCustomArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsCustomArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsCustomArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsCustomArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsCustomArchive.redo_map)
  return _msg;
}
inline void CommandSetMultipleCellsCustomArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsCustomArchive.redo_map)
}

// required .TSK.FormatStructArchive cell_format = 4;
inline bool CommandSetMultipleCellsCustomArchive::_internal_has_cell_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_format_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsCustomArchive::has_cell_format() const {
  return _internal_has_cell_format();
}
inline const ::TSK::FormatStructArchive& CommandSetMultipleCellsCustomArchive::_internal_cell_format() const {
  const ::TSK::FormatStructArchive* p = _impl_.cell_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CommandSetMultipleCellsCustomArchive::cell_format() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsCustomArchive.cell_format)
  return _internal_cell_format();
}
inline void CommandSetMultipleCellsCustomArchive::unsafe_arena_set_allocated_cell_format(
    ::TSK::FormatStructArchive* cell_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_format_);
  }
  _impl_.cell_format_ = cell_format;
  if (cell_format) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsCustomArchive.cell_format)
}
inline ::TSK::FormatStructArchive* CommandSetMultipleCellsCustomArchive::release_cell_format() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = _impl_.cell_format_;
  _impl_.cell_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* CommandSetMultipleCellsCustomArchive::unsafe_arena_release_cell_format() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsCustomArchive.cell_format)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = _impl_.cell_format_;
  _impl_.cell_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CommandSetMultipleCellsCustomArchive::_internal_mutable_cell_format() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.cell_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.cell_format_ = p;
  }
  return _impl_.cell_format_;
}
inline ::TSK::FormatStructArchive* CommandSetMultipleCellsCustomArchive::mutable_cell_format() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_cell_format();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsCustomArchive.cell_format)
  return _msg;
}
inline void CommandSetMultipleCellsCustomArchive::set_allocated_cell_format(::TSK::FormatStructArchive* cell_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_format_);
  }
  if (cell_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_format));
    if (message_arena != submessage_arena) {
      cell_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.cell_format_ = cell_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsCustomArchive.cell_format)
}

// required .TST.TableCommandArchive super = 7;
inline bool CommandSetMultipleCellsCustomArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsCustomArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultipleCellsCustomArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::TableCommandArchive& CommandSetMultipleCellsCustomArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetMultipleCellsCustomArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsCustomArchive.super)
  return _internal_super();
}
inline void CommandSetMultipleCellsCustomArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsCustomArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsCustomArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsCustomArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsCustomArchive.super)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsCustomArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsCustomArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsCustomArchive.super)
  return _msg;
}
inline void CommandSetMultipleCellsCustomArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsCustomArchive.super)
}

// -------------------------------------------------------------------

// CommandSetMultipleCellsMultipleChoiceListArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetMultipleCellsMultipleChoiceListArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetMultipleCellsMultipleChoiceListArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsMultipleChoiceListArchive.selection)
  return _internal_selection();
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsMultipleChoiceListArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsMultipleChoiceListArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsMultipleChoiceListArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetMultipleCellsMultipleChoiceListArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsMultipleChoiceListArchive.selection)
  return _msg;
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsMultipleChoiceListArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsMultipleChoiceListArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsMultipleChoiceListArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsMultipleChoiceListArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsMultipleChoiceListArchive.undo_map)
  return _msg;
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.undo_map)
}

// required .TST.CellMapArchive redo_map = 3;
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsMultipleChoiceListArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetMultipleCellsMultipleChoiceListArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsMultipleChoiceListArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsMultipleChoiceListArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandSetMultipleCellsMultipleChoiceListArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsMultipleChoiceListArchive.redo_map)
  return _msg;
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.redo_map)
}

// required .TST.TableCommandArchive super = 5;
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultipleCellsMultipleChoiceListArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::TableCommandArchive& CommandSetMultipleCellsMultipleChoiceListArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetMultipleCellsMultipleChoiceListArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleCellsMultipleChoiceListArchive.super)
  return _internal_super();
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsMultipleChoiceListArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsMultipleChoiceListArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleCellsMultipleChoiceListArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsMultipleChoiceListArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetMultipleCellsMultipleChoiceListArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleCellsMultipleChoiceListArchive.super)
  return _msg;
}
inline void CommandSetMultipleCellsMultipleChoiceListArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleCellsMultipleChoiceListArchive.super)
}

// -------------------------------------------------------------------

// CommandCoerceMultipleCellsArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandCoerceMultipleCellsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandCoerceMultipleCellsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandCoerceMultipleCellsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandCoerceMultipleCellsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandCoerceMultipleCellsArchive.selection)
  return _internal_selection();
}
inline void CommandCoerceMultipleCellsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCoerceMultipleCellsArchive.selection)
}
inline ::TST::SelectionArchive* CommandCoerceMultipleCellsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandCoerceMultipleCellsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandCoerceMultipleCellsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandCoerceMultipleCellsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandCoerceMultipleCellsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandCoerceMultipleCellsArchive.selection)
  return _msg;
}
inline void CommandCoerceMultipleCellsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCoerceMultipleCellsArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandCoerceMultipleCellsArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandCoerceMultipleCellsArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandCoerceMultipleCellsArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandCoerceMultipleCellsArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandCoerceMultipleCellsArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandCoerceMultipleCellsArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCoerceMultipleCellsArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandCoerceMultipleCellsArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandCoerceMultipleCellsArchive.undo_map)
  return _msg;
}
inline void CommandCoerceMultipleCellsArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCoerceMultipleCellsArchive.undo_map)
}

// required .TST.CellMapArchive redo_map = 3;
inline bool CommandCoerceMultipleCellsArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandCoerceMultipleCellsArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandCoerceMultipleCellsArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandCoerceMultipleCellsArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandCoerceMultipleCellsArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandCoerceMultipleCellsArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCoerceMultipleCellsArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandCoerceMultipleCellsArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandCoerceMultipleCellsArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandCoerceMultipleCellsArchive.redo_map)
  return _msg;
}
inline void CommandCoerceMultipleCellsArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCoerceMultipleCellsArchive.redo_map)
}

// required int32 desired_format = 4;
inline bool CommandCoerceMultipleCellsArchive::_internal_has_desired_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandCoerceMultipleCellsArchive::has_desired_format() const {
  return _internal_has_desired_format();
}
inline void CommandCoerceMultipleCellsArchive::clear_desired_format() {
  _impl_.desired_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CommandCoerceMultipleCellsArchive::_internal_desired_format() const {
  return _impl_.desired_format_;
}
inline int32_t CommandCoerceMultipleCellsArchive::desired_format() const {
  // @@protoc_insertion_point(field_get:TST.CommandCoerceMultipleCellsArchive.desired_format)
  return _internal_desired_format();
}
inline void CommandCoerceMultipleCellsArchive::_internal_set_desired_format(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.desired_format_ = value;
}
inline void CommandCoerceMultipleCellsArchive::set_desired_format(int32_t value) {
  _internal_set_desired_format(value);
  // @@protoc_insertion_point(field_set:TST.CommandCoerceMultipleCellsArchive.desired_format)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandCoerceMultipleCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandCoerceMultipleCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandCoerceMultipleCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::TableCommandArchive& CommandCoerceMultipleCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandCoerceMultipleCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandCoerceMultipleCellsArchive.super)
  return _internal_super();
}
inline void CommandCoerceMultipleCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandCoerceMultipleCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandCoerceMultipleCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandCoerceMultipleCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandCoerceMultipleCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandCoerceMultipleCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandCoerceMultipleCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandCoerceMultipleCellsArchive.super)
  return _msg;
}
inline void CommandCoerceMultipleCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandCoerceMultipleCellsArchive.super)
}

// -------------------------------------------------------------------

// CommandSetControlCellsDisplayNumberFormatArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandSetControlCellsDisplayNumberFormatArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetControlCellsDisplayNumberFormatArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetControlCellsDisplayNumberFormatArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetControlCellsDisplayNumberFormatArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlCellsDisplayNumberFormatArchive.selection)
  return _internal_selection();
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetControlCellsDisplayNumberFormatArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetControlCellsDisplayNumberFormatArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetControlCellsDisplayNumberFormatArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetControlCellsDisplayNumberFormatArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetControlCellsDisplayNumberFormatArchive.selection)
  return _msg;
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandSetControlCellsDisplayNumberFormatArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandSetControlCellsDisplayNumberFormatArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandSetControlCellsDisplayNumberFormatArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetControlCellsDisplayNumberFormatArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlCellsDisplayNumberFormatArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetControlCellsDisplayNumberFormatArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetControlCellsDisplayNumberFormatArchive.undo_map)
  return _msg;
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.undo_map)
}

// required .TST.CellMapArchive redo_map = 3;
inline bool CommandSetControlCellsDisplayNumberFormatArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandSetControlCellsDisplayNumberFormatArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandSetControlCellsDisplayNumberFormatArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetControlCellsDisplayNumberFormatArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlCellsDisplayNumberFormatArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetControlCellsDisplayNumberFormatArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandSetControlCellsDisplayNumberFormatArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetControlCellsDisplayNumberFormatArchive.redo_map)
  return _msg;
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.redo_map)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandSetControlCellsDisplayNumberFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetControlCellsDisplayNumberFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::TableCommandArchive& CommandSetControlCellsDisplayNumberFormatArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetControlCellsDisplayNumberFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlCellsDisplayNumberFormatArchive.super)
  return _internal_super();
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetControlCellsDisplayNumberFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetControlCellsDisplayNumberFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetControlCellsDisplayNumberFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetControlCellsDisplayNumberFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetControlCellsDisplayNumberFormatArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetControlCellsDisplayNumberFormatArchive.super)
  return _msg;
}
inline void CommandSetControlCellsDisplayNumberFormatArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetControlCellsDisplayNumberFormatArchive.super)
}

// -------------------------------------------------------------------

// CommandSetAutomaticFormatArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandSetAutomaticFormatArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticFormatArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetAutomaticFormatArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetAutomaticFormatArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticFormatArchive.selection)
  return _internal_selection();
}
inline void CommandSetAutomaticFormatArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticFormatArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetAutomaticFormatArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetAutomaticFormatArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticFormatArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetAutomaticFormatArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetAutomaticFormatArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticFormatArchive.selection)
  return _msg;
}
inline void CommandSetAutomaticFormatArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticFormatArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandSetAutomaticFormatArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticFormatArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandSetAutomaticFormatArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetAutomaticFormatArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticFormatArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandSetAutomaticFormatArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticFormatArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticFormatArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticFormatArchive.undo_map)
  return _msg;
}
inline void CommandSetAutomaticFormatArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticFormatArchive.undo_map)
}

// required .TST.CellMapArchive redo_map = 3;
inline bool CommandSetAutomaticFormatArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticFormatArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandSetAutomaticFormatArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetAutomaticFormatArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticFormatArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandSetAutomaticFormatArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticFormatArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticFormatArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandSetAutomaticFormatArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticFormatArchive.redo_map)
  return _msg;
}
inline void CommandSetAutomaticFormatArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticFormatArchive.redo_map)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandSetAutomaticFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetAutomaticFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::TableCommandArchive& CommandSetAutomaticFormatArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetAutomaticFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticFormatArchive.super)
  return _internal_super();
}
inline void CommandSetAutomaticFormatArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticFormatArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetAutomaticFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetAutomaticFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetAutomaticFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetAutomaticFormatArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticFormatArchive.super)
  return _msg;
}
inline void CommandSetAutomaticFormatArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticFormatArchive.super)
}

// -------------------------------------------------------------------

// CommandSetAutomaticDurationUnitsArchive

// required .TST.SelectionArchive selection = 1;
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticDurationUnitsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetAutomaticDurationUnitsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetAutomaticDurationUnitsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticDurationUnitsArchive.selection)
  return _internal_selection();
}
inline void CommandSetAutomaticDurationUnitsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetAutomaticDurationUnitsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetAutomaticDurationUnitsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticDurationUnitsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetAutomaticDurationUnitsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetAutomaticDurationUnitsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticDurationUnitsArchive.selection)
  return _msg;
}
inline void CommandSetAutomaticDurationUnitsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.selection)
}

// required .TST.CellMapArchive undo_map = 2;
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_has_undo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_map_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticDurationUnitsArchive::has_undo_map() const {
  return _internal_has_undo_map();
}
inline const ::TST::CellMapArchive& CommandSetAutomaticDurationUnitsArchive::_internal_undo_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetAutomaticDurationUnitsArchive::undo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticDurationUnitsArchive.undo_map)
  return _internal_undo_map();
}
inline void CommandSetAutomaticDurationUnitsArchive::unsafe_arena_set_allocated_undo_map(
    ::TST::CellMapArchive* undo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  _impl_.undo_map_ = undo_map;
  if (undo_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.undo_map)
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::release_undo_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::unsafe_arena_release_undo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticDurationUnitsArchive.undo_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_map_;
  _impl_.undo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::_internal_mutable_undo_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_map_ = p;
  }
  return _impl_.undo_map_;
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::mutable_undo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticDurationUnitsArchive.undo_map)
  return _msg;
}
inline void CommandSetAutomaticDurationUnitsArchive::set_allocated_undo_map(::TST::CellMapArchive* undo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_map_);
  }
  if (undo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_map));
    if (message_arena != submessage_arena) {
      undo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_map_ = undo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.undo_map)
}

// required .TST.CellMapArchive redo_map = 3;
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_has_redo_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_map_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticDurationUnitsArchive::has_redo_map() const {
  return _internal_has_redo_map();
}
inline const ::TST::CellMapArchive& CommandSetAutomaticDurationUnitsArchive::_internal_redo_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetAutomaticDurationUnitsArchive::redo_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticDurationUnitsArchive.redo_map)
  return _internal_redo_map();
}
inline void CommandSetAutomaticDurationUnitsArchive::unsafe_arena_set_allocated_redo_map(
    ::TST::CellMapArchive* redo_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  _impl_.redo_map_ = redo_map;
  if (redo_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.redo_map)
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::release_redo_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::unsafe_arena_release_redo_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticDurationUnitsArchive.redo_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_map_;
  _impl_.redo_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::_internal_mutable_redo_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_map_ = p;
  }
  return _impl_.redo_map_;
}
inline ::TST::CellMapArchive* CommandSetAutomaticDurationUnitsArchive::mutable_redo_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticDurationUnitsArchive.redo_map)
  return _msg;
}
inline void CommandSetAutomaticDurationUnitsArchive::set_allocated_redo_map(::TST::CellMapArchive* redo_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_map_);
  }
  if (redo_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_map));
    if (message_arena != submessage_arena) {
      redo_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_map_ = redo_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.redo_map)
}

// optional bool automatic_units = 4;
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_has_automatic_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetAutomaticDurationUnitsArchive::has_automatic_units() const {
  return _internal_has_automatic_units();
}
inline void CommandSetAutomaticDurationUnitsArchive::clear_automatic_units() {
  _impl_.automatic_units_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_automatic_units() const {
  return _impl_.automatic_units_;
}
inline bool CommandSetAutomaticDurationUnitsArchive::automatic_units() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticDurationUnitsArchive.automatic_units)
  return _internal_automatic_units();
}
inline void CommandSetAutomaticDurationUnitsArchive::_internal_set_automatic_units(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.automatic_units_ = value;
}
inline void CommandSetAutomaticDurationUnitsArchive::set_automatic_units(bool value) {
  _internal_set_automatic_units(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetAutomaticDurationUnitsArchive.automatic_units)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandSetAutomaticDurationUnitsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetAutomaticDurationUnitsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetAutomaticDurationUnitsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::TableCommandArchive& CommandSetAutomaticDurationUnitsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetAutomaticDurationUnitsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetAutomaticDurationUnitsArchive.super)
  return _internal_super();
}
inline void CommandSetAutomaticDurationUnitsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetAutomaticDurationUnitsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetAutomaticDurationUnitsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetAutomaticDurationUnitsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetAutomaticDurationUnitsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetAutomaticDurationUnitsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetAutomaticDurationUnitsArchive.super)
  return _msg;
}
inline void CommandSetAutomaticDurationUnitsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetAutomaticDurationUnitsArchive.super)
}

// -------------------------------------------------------------------

// CommandInsertColumnsOrRowsArchive_StyleIndexPair

// required .TSP.Reference style = 1;
inline bool CommandInsertColumnsOrRowsArchive_StyleIndexPair::_internal_has_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive_StyleIndexPair::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive_StyleIndexPair::_internal_style() const {
  const ::TSP::Reference* p = _impl_.style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive_StyleIndexPair::style() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair.style)
  return _internal_style();
}
inline void CommandInsertColumnsOrRowsArchive_StyleIndexPair::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  _impl_.style_ = style;
  if (style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair.style)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive_StyleIndexPair::release_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive_StyleIndexPair::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair.style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive_StyleIndexPair::_internal_mutable_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.style_ = p;
  }
  return _impl_.style_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive_StyleIndexPair::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair.style)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive_StyleIndexPair::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair.style)
}

// required uint32 index = 2;
inline bool CommandInsertColumnsOrRowsArchive_StyleIndexPair::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive_StyleIndexPair::has_index() const {
  return _internal_has_index();
}
inline void CommandInsertColumnsOrRowsArchive_StyleIndexPair::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandInsertColumnsOrRowsArchive_StyleIndexPair::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandInsertColumnsOrRowsArchive_StyleIndexPair::index() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair.index)
  return _internal_index();
}
inline void CommandInsertColumnsOrRowsArchive_StyleIndexPair::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.index_ = value;
}
inline void CommandInsertColumnsOrRowsArchive_StyleIndexPair::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair.index)
}

// -------------------------------------------------------------------

// CommandInsertColumnsOrRowsArchive

// required .TST.CommandDirectionArchive direction = 1;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandInsertColumnsOrRowsArchive::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TST::CommandDirectionArchive CommandInsertColumnsOrRowsArchive::_internal_direction() const {
  return static_cast< ::TST::CommandDirectionArchive >(_impl_.direction_);
}
inline ::TST::CommandDirectionArchive CommandInsertColumnsOrRowsArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.direction)
  return _internal_direction();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_direction(::TST::CommandDirectionArchive value) {
  assert(::TST::CommandDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.direction_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_direction(::TST::CommandDirectionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.direction)
}

// required uint32 index = 2;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandInsertColumnsOrRowsArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::index() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.index)
  return _internal_index();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.index_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.index)
}

// required uint32 count = 3;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_count() const {
  return _internal_has_count();
}
inline void CommandInsertColumnsOrRowsArchive::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::count() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.count)
  return _internal_count();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.count_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.count)
}

// required float size = 4;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_size() const {
  return _internal_has_size();
}
inline void CommandInsertColumnsOrRowsArchive::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CommandInsertColumnsOrRowsArchive::_internal_size() const {
  return _impl_.size_;
}
inline float CommandInsertColumnsOrRowsArchive::size() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.size)
  return _internal_size();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_size(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.size_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.size)
}

// required bool before = 5;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_before() const {
  return _internal_has_before();
}
inline void CommandInsertColumnsOrRowsArchive::clear_before() {
  _impl_.before_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CommandInsertColumnsOrRowsArchive::_internal_before() const {
  return _impl_.before_;
}
inline bool CommandInsertColumnsOrRowsArchive::before() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.before)
  return _internal_before();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_before(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.before_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_before(bool value) {
  _internal_set_before(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.before)
}

// required uint32 header_count = 11;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_header_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_header_count() const {
  return _internal_has_header_count();
}
inline void CommandInsertColumnsOrRowsArchive::clear_header_count() {
  _impl_.header_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::_internal_header_count() const {
  return _impl_.header_count_;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::header_count() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.header_count)
  return _internal_header_count();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_header_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.header_count_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_header_count(uint32_t value) {
  _internal_set_header_count(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.header_count)
}

// required uint32 headers_added = 12;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_headers_added() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_headers_added() const {
  return _internal_has_headers_added();
}
inline void CommandInsertColumnsOrRowsArchive::clear_headers_added() {
  _impl_.headers_added_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::_internal_headers_added() const {
  return _impl_.headers_added_;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::headers_added() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.headers_added)
  return _internal_headers_added();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_headers_added(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.headers_added_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_headers_added(uint32_t value) {
  _internal_set_headers_added(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.headers_added)
}

// required uint32 footer_count = 13;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_footer_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_footer_count() const {
  return _internal_has_footer_count();
}
inline void CommandInsertColumnsOrRowsArchive::clear_footer_count() {
  _impl_.footer_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::_internal_footer_count() const {
  return _impl_.footer_count_;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::footer_count() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.footer_count)
  return _internal_footer_count();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_footer_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.footer_count_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_footer_count(uint32_t value) {
  _internal_set_footer_count(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.footer_count)
}

// required uint32 footers_added = 14;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_footers_added() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_footers_added() const {
  return _internal_has_footers_added();
}
inline void CommandInsertColumnsOrRowsArchive::clear_footers_added() {
  _impl_.footers_added_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::_internal_footers_added() const {
  return _impl_.footers_added_;
}
inline uint32_t CommandInsertColumnsOrRowsArchive::footers_added() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.footers_added)
  return _internal_footers_added();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_footers_added(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.footers_added_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_footers_added(uint32_t value) {
  _internal_set_footers_added(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.footers_added)
}

// optional .TSP.Reference row_column_style = 8;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_row_column_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.row_column_style_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_row_column_style() const {
  return _internal_has_row_column_style();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_row_column_style() const {
  const ::TSP::Reference* p = _impl_.row_column_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::row_column_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.row_column_style)
  return _internal_row_column_style();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_row_column_style(
    ::TSP::Reference* row_column_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_column_style_);
  }
  _impl_.row_column_style_ = row_column_style;
  if (row_column_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.row_column_style)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_row_column_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.row_column_style_;
  _impl_.row_column_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_row_column_style() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.row_column_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.row_column_style_;
  _impl_.row_column_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_row_column_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.row_column_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.row_column_style_ = p;
  }
  return _impl_.row_column_style_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_row_column_style() {
  ::TSP::Reference* _msg = _internal_mutable_row_column_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.row_column_style)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_row_column_style(::TSP::Reference* row_column_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_column_style_);
  }
  if (row_column_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_column_style));
    if (message_arena != submessage_arena) {
      row_column_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_column_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.row_column_style_ = row_column_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.row_column_style)
}

// optional .TST.CellMapArchive cell_style_redo = 9;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_cell_style_redo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_style_redo_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_cell_style_redo() const {
  return _internal_has_cell_style_redo();
}
inline const ::TST::CellMapArchive& CommandInsertColumnsOrRowsArchive::_internal_cell_style_redo() const {
  const ::TST::CellMapArchive* p = _impl_.cell_style_redo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandInsertColumnsOrRowsArchive::cell_style_redo() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.cell_style_redo)
  return _internal_cell_style_redo();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_cell_style_redo(
    ::TST::CellMapArchive* cell_style_redo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_style_redo_);
  }
  _impl_.cell_style_redo_ = cell_style_redo;
  if (cell_style_redo) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.cell_style_redo)
}
inline ::TST::CellMapArchive* CommandInsertColumnsOrRowsArchive::release_cell_style_redo() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.cell_style_redo_;
  _impl_.cell_style_redo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_cell_style_redo() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.cell_style_redo)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.cell_style_redo_;
  _impl_.cell_style_redo_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandInsertColumnsOrRowsArchive::_internal_mutable_cell_style_redo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_style_redo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.cell_style_redo_ = p;
  }
  return _impl_.cell_style_redo_;
}
inline ::TST::CellMapArchive* CommandInsertColumnsOrRowsArchive::mutable_cell_style_redo() {
  ::TST::CellMapArchive* _msg = _internal_mutable_cell_style_redo();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.cell_style_redo)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_cell_style_redo(::TST::CellMapArchive* cell_style_redo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_style_redo_);
  }
  if (cell_style_redo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style_redo));
    if (message_arena != submessage_arena) {
      cell_style_redo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_style_redo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_style_redo_ = cell_style_redo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.cell_style_redo)
}

// required .TST.TableCommandArchive super = 10;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandInsertColumnsOrRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandInsertColumnsOrRowsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandInsertColumnsOrRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.super)
  return _internal_super();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.super)
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandInsertColumnsOrRowsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.super)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.super)
}

// optional .TSP.Reference formula_rewrite_command = 15;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_formula_rewrite_command() const {
  return _internal_has_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::_internal_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandInsertColumnsOrRowsArchive::formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.formula_rewrite_command)
  return _internal_formula_rewrite_command();
}
inline void CommandInsertColumnsOrRowsArchive::unsafe_arena_set_allocated_formula_rewrite_command(
    ::TSP::Reference* formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  if (formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandInsertColumnsOrRowsArchive.formula_rewrite_command)
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::release_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::unsafe_arena_release_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandInsertColumnsOrRowsArchive.formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::_internal_mutable_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_ = p;
  }
  return _impl_.formula_rewrite_command_;
}
inline ::TSP::Reference* CommandInsertColumnsOrRowsArchive::mutable_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.formula_rewrite_command)
  return _msg;
}
inline void CommandInsertColumnsOrRowsArchive::set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  if (formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command));
    if (message_arena != submessage_arena) {
      formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandInsertColumnsOrRowsArchive.formula_rewrite_command)
}

// required float width_factor = 16;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_width_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_width_factor() const {
  return _internal_has_width_factor();
}
inline void CommandInsertColumnsOrRowsArchive::clear_width_factor() {
  _impl_.width_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float CommandInsertColumnsOrRowsArchive::_internal_width_factor() const {
  return _impl_.width_factor_;
}
inline float CommandInsertColumnsOrRowsArchive::width_factor() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.width_factor)
  return _internal_width_factor();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_width_factor(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.width_factor_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_width_factor(float value) {
  _internal_set_width_factor(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.width_factor)
}

// required float height_factor = 17;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_height_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_height_factor() const {
  return _internal_has_height_factor();
}
inline void CommandInsertColumnsOrRowsArchive::clear_height_factor() {
  _impl_.height_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float CommandInsertColumnsOrRowsArchive::_internal_height_factor() const {
  return _impl_.height_factor_;
}
inline float CommandInsertColumnsOrRowsArchive::height_factor() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.height_factor)
  return _internal_height_factor();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_height_factor(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.height_factor_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_height_factor(float value) {
  _internal_set_height_factor(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.height_factor)
}

// optional bool allow_horizontal_autosize = 18;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_allow_horizontal_autosize() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_allow_horizontal_autosize() const {
  return _internal_has_allow_horizontal_autosize();
}
inline void CommandInsertColumnsOrRowsArchive::clear_allow_horizontal_autosize() {
  _impl_.allow_horizontal_autosize_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool CommandInsertColumnsOrRowsArchive::_internal_allow_horizontal_autosize() const {
  return _impl_.allow_horizontal_autosize_;
}
inline bool CommandInsertColumnsOrRowsArchive::allow_horizontal_autosize() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.allow_horizontal_autosize)
  return _internal_allow_horizontal_autosize();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_allow_horizontal_autosize(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.allow_horizontal_autosize_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_allow_horizontal_autosize(bool value) {
  _internal_set_allow_horizontal_autosize(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.allow_horizontal_autosize)
}

// optional bool inherit_styles = 19;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_inherit_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_inherit_styles() const {
  return _internal_has_inherit_styles();
}
inline void CommandInsertColumnsOrRowsArchive::clear_inherit_styles() {
  _impl_.inherit_styles_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool CommandInsertColumnsOrRowsArchive::_internal_inherit_styles() const {
  return _impl_.inherit_styles_;
}
inline bool CommandInsertColumnsOrRowsArchive::inherit_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.inherit_styles)
  return _internal_inherit_styles();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_inherit_styles(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.inherit_styles_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_inherit_styles(bool value) {
  _internal_set_inherit_styles(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.inherit_styles)
}

// optional bool inherit_formats = 20;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_inherit_formats() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_inherit_formats() const {
  return _internal_has_inherit_formats();
}
inline void CommandInsertColumnsOrRowsArchive::clear_inherit_formats() {
  _impl_.inherit_formats_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CommandInsertColumnsOrRowsArchive::_internal_inherit_formats() const {
  return _impl_.inherit_formats_;
}
inline bool CommandInsertColumnsOrRowsArchive::inherit_formats() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.inherit_formats)
  return _internal_inherit_formats();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_inherit_formats(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.inherit_formats_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_inherit_formats(bool value) {
  _internal_set_inherit_formats(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.inherit_formats)
}

// optional bool inherit_formulas = 24;
inline bool CommandInsertColumnsOrRowsArchive::_internal_has_inherit_formulas() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CommandInsertColumnsOrRowsArchive::has_inherit_formulas() const {
  return _internal_has_inherit_formulas();
}
inline void CommandInsertColumnsOrRowsArchive::clear_inherit_formulas() {
  _impl_.inherit_formulas_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool CommandInsertColumnsOrRowsArchive::_internal_inherit_formulas() const {
  return _impl_.inherit_formulas_;
}
inline bool CommandInsertColumnsOrRowsArchive::inherit_formulas() const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.inherit_formulas)
  return _internal_inherit_formulas();
}
inline void CommandInsertColumnsOrRowsArchive::_internal_set_inherit_formulas(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.inherit_formulas_ = value;
}
inline void CommandInsertColumnsOrRowsArchive::set_inherit_formulas(bool value) {
  _internal_set_inherit_formulas(value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.inherit_formulas)
}

// repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair cell_style_index_pairs = 21;
inline int CommandInsertColumnsOrRowsArchive::_internal_cell_style_index_pairs_size() const {
  return _impl_.cell_style_index_pairs_.size();
}
inline int CommandInsertColumnsOrRowsArchive::cell_style_index_pairs_size() const {
  return _internal_cell_style_index_pairs_size();
}
inline void CommandInsertColumnsOrRowsArchive::clear_cell_style_index_pairs() {
  _impl_.cell_style_index_pairs_.Clear();
}
inline ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive::mutable_cell_style_index_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.cell_style_index_pairs)
  return _impl_.cell_style_index_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >*
CommandInsertColumnsOrRowsArchive::mutable_cell_style_index_pairs() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandInsertColumnsOrRowsArchive.cell_style_index_pairs)
  return &_impl_.cell_style_index_pairs_;
}
inline const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& CommandInsertColumnsOrRowsArchive::_internal_cell_style_index_pairs(int index) const {
  return _impl_.cell_style_index_pairs_.Get(index);
}
inline const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& CommandInsertColumnsOrRowsArchive::cell_style_index_pairs(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.cell_style_index_pairs)
  return _internal_cell_style_index_pairs(index);
}
inline ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive::_internal_add_cell_style_index_pairs() {
  return _impl_.cell_style_index_pairs_.Add();
}
inline ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive::add_cell_style_index_pairs() {
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* _add = _internal_add_cell_style_index_pairs();
  // @@protoc_insertion_point(field_add:TST.CommandInsertColumnsOrRowsArchive.cell_style_index_pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >&
CommandInsertColumnsOrRowsArchive::cell_style_index_pairs() const {
  // @@protoc_insertion_point(field_list:TST.CommandInsertColumnsOrRowsArchive.cell_style_index_pairs)
  return _impl_.cell_style_index_pairs_;
}

// repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair text_style_index_pairs = 22;
inline int CommandInsertColumnsOrRowsArchive::_internal_text_style_index_pairs_size() const {
  return _impl_.text_style_index_pairs_.size();
}
inline int CommandInsertColumnsOrRowsArchive::text_style_index_pairs_size() const {
  return _internal_text_style_index_pairs_size();
}
inline void CommandInsertColumnsOrRowsArchive::clear_text_style_index_pairs() {
  _impl_.text_style_index_pairs_.Clear();
}
inline ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive::mutable_text_style_index_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandInsertColumnsOrRowsArchive.text_style_index_pairs)
  return _impl_.text_style_index_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >*
CommandInsertColumnsOrRowsArchive::mutable_text_style_index_pairs() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandInsertColumnsOrRowsArchive.text_style_index_pairs)
  return &_impl_.text_style_index_pairs_;
}
inline const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& CommandInsertColumnsOrRowsArchive::_internal_text_style_index_pairs(int index) const {
  return _impl_.text_style_index_pairs_.Get(index);
}
inline const ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair& CommandInsertColumnsOrRowsArchive::text_style_index_pairs(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.text_style_index_pairs)
  return _internal_text_style_index_pairs(index);
}
inline ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive::_internal_add_text_style_index_pairs() {
  return _impl_.text_style_index_pairs_.Add();
}
inline ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive::add_text_style_index_pairs() {
  ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair* _add = _internal_add_text_style_index_pairs();
  // @@protoc_insertion_point(field_add:TST.CommandInsertColumnsOrRowsArchive.text_style_index_pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandInsertColumnsOrRowsArchive_StyleIndexPair >&
CommandInsertColumnsOrRowsArchive::text_style_index_pairs() const {
  // @@protoc_insertion_point(field_list:TST.CommandInsertColumnsOrRowsArchive.text_style_index_pairs)
  return _impl_.text_style_index_pairs_;
}

// repeated double sizes = 23;
inline int CommandInsertColumnsOrRowsArchive::_internal_sizes_size() const {
  return _impl_.sizes_.size();
}
inline int CommandInsertColumnsOrRowsArchive::sizes_size() const {
  return _internal_sizes_size();
}
inline void CommandInsertColumnsOrRowsArchive::clear_sizes() {
  _impl_.sizes_.Clear();
}
inline double CommandInsertColumnsOrRowsArchive::_internal_sizes(int index) const {
  return _impl_.sizes_.Get(index);
}
inline double CommandInsertColumnsOrRowsArchive::sizes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandInsertColumnsOrRowsArchive.sizes)
  return _internal_sizes(index);
}
inline void CommandInsertColumnsOrRowsArchive::set_sizes(int index, double value) {
  _impl_.sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandInsertColumnsOrRowsArchive.sizes)
}
inline void CommandInsertColumnsOrRowsArchive::_internal_add_sizes(double value) {
  _impl_.sizes_.Add(value);
}
inline void CommandInsertColumnsOrRowsArchive::add_sizes(double value) {
  _internal_add_sizes(value);
  // @@protoc_insertion_point(field_add:TST.CommandInsertColumnsOrRowsArchive.sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandInsertColumnsOrRowsArchive::_internal_sizes() const {
  return _impl_.sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CommandInsertColumnsOrRowsArchive::sizes() const {
  // @@protoc_insertion_point(field_list:TST.CommandInsertColumnsOrRowsArchive.sizes)
  return _internal_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandInsertColumnsOrRowsArchive::_internal_mutable_sizes() {
  return &_impl_.sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CommandInsertColumnsOrRowsArchive::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandInsertColumnsOrRowsArchive.sizes)
  return _internal_mutable_sizes();
}

// -------------------------------------------------------------------

// CommandPasteArchive

// required .TST.SelectionArchive user_selection = 1;
inline bool CommandPasteArchive::_internal_has_user_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_selection_ != nullptr);
  return value;
}
inline bool CommandPasteArchive::has_user_selection() const {
  return _internal_has_user_selection();
}
inline const ::TST::SelectionArchive& CommandPasteArchive::_internal_user_selection() const {
  const ::TST::SelectionArchive* p = _impl_.user_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandPasteArchive::user_selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.user_selection)
  return _internal_user_selection();
}
inline void CommandPasteArchive::unsafe_arena_set_allocated_user_selection(
    ::TST::SelectionArchive* user_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_selection_);
  }
  _impl_.user_selection_ = user_selection;
  if (user_selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPasteArchive.user_selection)
}
inline ::TST::SelectionArchive* CommandPasteArchive::release_user_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.user_selection_;
  _impl_.user_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandPasteArchive::unsafe_arena_release_user_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandPasteArchive.user_selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.user_selection_;
  _impl_.user_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandPasteArchive::_internal_mutable_user_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.user_selection_ = p;
  }
  return _impl_.user_selection_;
}
inline ::TST::SelectionArchive* CommandPasteArchive::mutable_user_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_user_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandPasteArchive.user_selection)
  return _msg;
}
inline void CommandPasteArchive::set_allocated_user_selection(::TST::SelectionArchive* user_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_selection_);
  }
  if (user_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_selection));
    if (message_arena != submessage_arena) {
      user_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_selection_ = user_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPasteArchive.user_selection)
}

// required .TST.SelectionArchive final_selection = 2;
inline bool CommandPasteArchive::_internal_has_final_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.final_selection_ != nullptr);
  return value;
}
inline bool CommandPasteArchive::has_final_selection() const {
  return _internal_has_final_selection();
}
inline const ::TST::SelectionArchive& CommandPasteArchive::_internal_final_selection() const {
  const ::TST::SelectionArchive* p = _impl_.final_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandPasteArchive::final_selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.final_selection)
  return _internal_final_selection();
}
inline void CommandPasteArchive::unsafe_arena_set_allocated_final_selection(
    ::TST::SelectionArchive* final_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.final_selection_);
  }
  _impl_.final_selection_ = final_selection;
  if (final_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPasteArchive.final_selection)
}
inline ::TST::SelectionArchive* CommandPasteArchive::release_final_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.final_selection_;
  _impl_.final_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandPasteArchive::unsafe_arena_release_final_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandPasteArchive.final_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.final_selection_;
  _impl_.final_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandPasteArchive::_internal_mutable_final_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.final_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.final_selection_ = p;
  }
  return _impl_.final_selection_;
}
inline ::TST::SelectionArchive* CommandPasteArchive::mutable_final_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_final_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandPasteArchive.final_selection)
  return _msg;
}
inline void CommandPasteArchive::set_allocated_final_selection(::TST::SelectionArchive* final_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.final_selection_);
  }
  if (final_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_selection));
    if (message_arena != submessage_arena) {
      final_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.final_selection_ = final_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPasteArchive.final_selection)
}

// required .TST.CellMapArchive undo_cell_map = 3;
inline bool CommandPasteArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandPasteArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandPasteArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandPasteArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandPasteArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPasteArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandPasteArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandPasteArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandPasteArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandPasteArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandPasteArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandPasteArchive.undo_cell_map)
  return _msg;
}
inline void CommandPasteArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPasteArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandPasteArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandPasteArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandPasteArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandPasteArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandPasteArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPasteArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandPasteArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandPasteArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandPasteArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandPasteArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandPasteArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandPasteArchive.redo_cell_map)
  return _msg;
}
inline void CommandPasteArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPasteArchive.redo_cell_map)
}

// optional .TSP.Reference command_undo = 6;
inline bool CommandPasteArchive::_internal_has_command_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.command_undo_ != nullptr);
  return value;
}
inline bool CommandPasteArchive::has_command_undo() const {
  return _internal_has_command_undo();
}
inline const ::TSP::Reference& CommandPasteArchive::_internal_command_undo() const {
  const ::TSP::Reference* p = _impl_.command_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPasteArchive::command_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.command_undo)
  return _internal_command_undo();
}
inline void CommandPasteArchive::unsafe_arena_set_allocated_command_undo(
    ::TSP::Reference* command_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_undo_);
  }
  _impl_.command_undo_ = command_undo;
  if (command_undo) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPasteArchive.command_undo)
}
inline ::TSP::Reference* CommandPasteArchive::release_command_undo() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.command_undo_;
  _impl_.command_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPasteArchive::unsafe_arena_release_command_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandPasteArchive.command_undo)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.command_undo_;
  _impl_.command_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPasteArchive::_internal_mutable_command_undo() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.command_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.command_undo_ = p;
  }
  return _impl_.command_undo_;
}
inline ::TSP::Reference* CommandPasteArchive::mutable_command_undo() {
  ::TSP::Reference* _msg = _internal_mutable_command_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandPasteArchive.command_undo)
  return _msg;
}
inline void CommandPasteArchive::set_allocated_command_undo(::TSP::Reference* command_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_undo_);
  }
  if (command_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_undo));
    if (message_arena != submessage_arena) {
      command_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.command_undo_ = command_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPasteArchive.command_undo)
}

// required bool invalidate_comments = 7;
inline bool CommandPasteArchive::_internal_has_invalidate_comments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandPasteArchive::has_invalidate_comments() const {
  return _internal_has_invalidate_comments();
}
inline void CommandPasteArchive::clear_invalidate_comments() {
  _impl_.invalidate_comments_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CommandPasteArchive::_internal_invalidate_comments() const {
  return _impl_.invalidate_comments_;
}
inline bool CommandPasteArchive::invalidate_comments() const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.invalidate_comments)
  return _internal_invalidate_comments();
}
inline void CommandPasteArchive::_internal_set_invalidate_comments(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.invalidate_comments_ = value;
}
inline void CommandPasteArchive::set_invalidate_comments(bool value) {
  _internal_set_invalidate_comments(value);
  // @@protoc_insertion_point(field_set:TST.CommandPasteArchive.invalidate_comments)
}

// required .TST.TableCommandArchive super = 11;
inline bool CommandPasteArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPasteArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPasteArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::TST::TableCommandArchive& CommandPasteArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandPasteArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.super)
  return _internal_super();
}
inline void CommandPasteArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPasteArchive.super)
}
inline ::TST::TableCommandArchive* CommandPasteArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandPasteArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandPasteArchive.super)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandPasteArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandPasteArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandPasteArchive.super)
  return _msg;
}
inline void CommandPasteArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPasteArchive.super)
}

// repeated .TSP.Reference formula_rewrite_commands = 15;
inline int CommandPasteArchive::_internal_formula_rewrite_commands_size() const {
  return _impl_.formula_rewrite_commands_.size();
}
inline int CommandPasteArchive::formula_rewrite_commands_size() const {
  return _internal_formula_rewrite_commands_size();
}
inline ::TSP::Reference* CommandPasteArchive::mutable_formula_rewrite_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandPasteArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandPasteArchive::mutable_formula_rewrite_commands() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandPasteArchive.formula_rewrite_commands)
  return &_impl_.formula_rewrite_commands_;
}
inline const ::TSP::Reference& CommandPasteArchive::_internal_formula_rewrite_commands(int index) const {
  return _impl_.formula_rewrite_commands_.Get(index);
}
inline const ::TSP::Reference& CommandPasteArchive::formula_rewrite_commands(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandPasteArchive.formula_rewrite_commands)
  return _internal_formula_rewrite_commands(index);
}
inline ::TSP::Reference* CommandPasteArchive::_internal_add_formula_rewrite_commands() {
  return _impl_.formula_rewrite_commands_.Add();
}
inline ::TSP::Reference* CommandPasteArchive::add_formula_rewrite_commands() {
  ::TSP::Reference* _add = _internal_add_formula_rewrite_commands();
  // @@protoc_insertion_point(field_add:TST.CommandPasteArchive.formula_rewrite_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandPasteArchive::formula_rewrite_commands() const {
  // @@protoc_insertion_point(field_list:TST.CommandPasteArchive.formula_rewrite_commands)
  return _impl_.formula_rewrite_commands_;
}

// -------------------------------------------------------------------

// CommandRemoveColumnsOrRowsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRemoveColumnsOrRowsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRemoveColumnsOrRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.super)
  return _internal_super();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.super)
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRemoveColumnsOrRowsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.super)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.super)
}

// required .TST.CommandDirectionArchive direction = 2;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::TST::CommandDirectionArchive CommandRemoveColumnsOrRowsArchive::_internal_direction() const {
  return static_cast< ::TST::CommandDirectionArchive >(_impl_.direction_);
}
inline ::TST::CommandDirectionArchive CommandRemoveColumnsOrRowsArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.direction)
  return _internal_direction();
}
inline void CommandRemoveColumnsOrRowsArchive::_internal_set_direction(::TST::CommandDirectionArchive value) {
  assert(::TST::CommandDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.direction_ = value;
}
inline void CommandRemoveColumnsOrRowsArchive::set_direction(::TST::CommandDirectionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveColumnsOrRowsArchive.direction)
}

// required .TSP.IndexSet indices_to_remove = 3;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_indices_to_remove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.indices_to_remove_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_indices_to_remove() const {
  return _internal_has_indices_to_remove();
}
inline const ::TSP::IndexSet& CommandRemoveColumnsOrRowsArchive::_internal_indices_to_remove() const {
  const ::TSP::IndexSet* p = _impl_.indices_to_remove_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& CommandRemoveColumnsOrRowsArchive::indices_to_remove() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.indices_to_remove)
  return _internal_indices_to_remove();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_indices_to_remove(
    ::TSP::IndexSet* indices_to_remove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indices_to_remove_);
  }
  _impl_.indices_to_remove_ = indices_to_remove;
  if (indices_to_remove) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.indices_to_remove)
}
inline ::TSP::IndexSet* CommandRemoveColumnsOrRowsArchive::release_indices_to_remove() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = _impl_.indices_to_remove_;
  _impl_.indices_to_remove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_indices_to_remove() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.indices_to_remove)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = _impl_.indices_to_remove_;
  _impl_.indices_to_remove_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* CommandRemoveColumnsOrRowsArchive::_internal_mutable_indices_to_remove() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.indices_to_remove_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.indices_to_remove_ = p;
  }
  return _impl_.indices_to_remove_;
}
inline ::TSP::IndexSet* CommandRemoveColumnsOrRowsArchive::mutable_indices_to_remove() {
  ::TSP::IndexSet* _msg = _internal_mutable_indices_to_remove();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.indices_to_remove)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_indices_to_remove(::TSP::IndexSet* indices_to_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.indices_to_remove_);
  }
  if (indices_to_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indices_to_remove));
    if (message_arena != submessage_arena) {
      indices_to_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indices_to_remove, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.indices_to_remove_ = indices_to_remove;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.indices_to_remove)
}

// optional .TST.CellMapArchive cellMap = 4;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_cellmap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cellmap_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_cellmap() const {
  return _internal_has_cellmap();
}
inline const ::TST::CellMapArchive& CommandRemoveColumnsOrRowsArchive::_internal_cellmap() const {
  const ::TST::CellMapArchive* p = _impl_.cellmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandRemoveColumnsOrRowsArchive::cellmap() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.cellMap)
  return _internal_cellmap();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_cellmap(
    ::TST::CellMapArchive* cellmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellmap_);
  }
  _impl_.cellmap_ = cellmap;
  if (cellmap) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.cellMap)
}
inline ::TST::CellMapArchive* CommandRemoveColumnsOrRowsArchive::release_cellmap() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.cellmap_;
  _impl_.cellmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_cellmap() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.cellMap)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.cellmap_;
  _impl_.cellmap_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_cellmap() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cellmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.cellmap_ = p;
  }
  return _impl_.cellmap_;
}
inline ::TST::CellMapArchive* CommandRemoveColumnsOrRowsArchive::mutable_cellmap() {
  ::TST::CellMapArchive* _msg = _internal_mutable_cellmap();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.cellMap)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_cellmap(::TST::CellMapArchive* cellmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellmap_);
  }
  if (cellmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellmap));
    if (message_arena != submessage_arena) {
      cellmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellmap, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cellmap_ = cellmap;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.cellMap)
}

// required .TSD.GeometryArchive oldgeom = 5;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_oldgeom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldgeom_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_oldgeom() const {
  return _internal_has_oldgeom();
}
inline const ::TSD::GeometryArchive& CommandRemoveColumnsOrRowsArchive::_internal_oldgeom() const {
  const ::TSD::GeometryArchive* p = _impl_.oldgeom_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& CommandRemoveColumnsOrRowsArchive::oldgeom() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.oldgeom)
  return _internal_oldgeom();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_oldgeom(
    ::TSD::GeometryArchive* oldgeom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldgeom_);
  }
  _impl_.oldgeom_ = oldgeom;
  if (oldgeom) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.oldgeom)
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::release_oldgeom() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = _impl_.oldgeom_;
  _impl_.oldgeom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_oldgeom() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.oldgeom)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = _impl_.oldgeom_;
  _impl_.oldgeom_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_oldgeom() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldgeom_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.oldgeom_ = p;
  }
  return _impl_.oldgeom_;
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::mutable_oldgeom() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_oldgeom();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.oldgeom)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_oldgeom(::TSD::GeometryArchive* oldgeom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldgeom_);
  }
  if (oldgeom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldgeom));
    if (message_arena != submessage_arena) {
      oldgeom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldgeom, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldgeom_ = oldgeom;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.oldgeom)
}

// required .TSD.GeometryArchive newgeom = 6;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_newgeom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newgeom_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_newgeom() const {
  return _internal_has_newgeom();
}
inline const ::TSD::GeometryArchive& CommandRemoveColumnsOrRowsArchive::_internal_newgeom() const {
  const ::TSD::GeometryArchive* p = _impl_.newgeom_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& CommandRemoveColumnsOrRowsArchive::newgeom() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.newgeom)
  return _internal_newgeom();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_newgeom(
    ::TSD::GeometryArchive* newgeom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newgeom_);
  }
  _impl_.newgeom_ = newgeom;
  if (newgeom) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.newgeom)
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::release_newgeom() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = _impl_.newgeom_;
  _impl_.newgeom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_newgeom() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.newgeom)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = _impl_.newgeom_;
  _impl_.newgeom_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::_internal_mutable_newgeom() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.newgeom_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.newgeom_ = p;
  }
  return _impl_.newgeom_;
}
inline ::TSD::GeometryArchive* CommandRemoveColumnsOrRowsArchive::mutable_newgeom() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_newgeom();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.newgeom)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_newgeom(::TSD::GeometryArchive* newgeom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newgeom_);
  }
  if (newgeom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newgeom));
    if (message_arena != submessage_arena) {
      newgeom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newgeom, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.newgeom_ = newgeom;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.newgeom)
}

// repeated float subsizes = 7;
inline int CommandRemoveColumnsOrRowsArchive::_internal_subsizes_size() const {
  return _impl_.subsizes_.size();
}
inline int CommandRemoveColumnsOrRowsArchive::subsizes_size() const {
  return _internal_subsizes_size();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_subsizes() {
  _impl_.subsizes_.Clear();
}
inline float CommandRemoveColumnsOrRowsArchive::_internal_subsizes(int index) const {
  return _impl_.subsizes_.Get(index);
}
inline float CommandRemoveColumnsOrRowsArchive::subsizes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.subsizes)
  return _internal_subsizes(index);
}
inline void CommandRemoveColumnsOrRowsArchive::set_subsizes(int index, float value) {
  _impl_.subsizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveColumnsOrRowsArchive.subsizes)
}
inline void CommandRemoveColumnsOrRowsArchive::_internal_add_subsizes(float value) {
  _impl_.subsizes_.Add(value);
}
inline void CommandRemoveColumnsOrRowsArchive::add_subsizes(float value) {
  _internal_add_subsizes(value);
  // @@protoc_insertion_point(field_add:TST.CommandRemoveColumnsOrRowsArchive.subsizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandRemoveColumnsOrRowsArchive::_internal_subsizes() const {
  return _impl_.subsizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandRemoveColumnsOrRowsArchive::subsizes() const {
  // @@protoc_insertion_point(field_list:TST.CommandRemoveColumnsOrRowsArchive.subsizes)
  return _internal_subsizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandRemoveColumnsOrRowsArchive::_internal_mutable_subsizes() {
  return &_impl_.subsizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandRemoveColumnsOrRowsArchive::mutable_subsizes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandRemoveColumnsOrRowsArchive.subsizes)
  return _internal_mutable_subsizes();
}

// optional .TSP.Reference formula_rewrite_command = 8;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_formula_rewrite_command() const {
  return _internal_has_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command)
  return _internal_formula_rewrite_command();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_formula_rewrite_command(
    ::TSP::Reference* formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  if (formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_ = p;
  }
  return _impl_.formula_rewrite_command_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  if (formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command));
    if (message_arena != submessage_arena) {
      formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command)
}

// required float width_factor = 9;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_width_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_width_factor() const {
  return _internal_has_width_factor();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_width_factor() {
  _impl_.width_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CommandRemoveColumnsOrRowsArchive::_internal_width_factor() const {
  return _impl_.width_factor_;
}
inline float CommandRemoveColumnsOrRowsArchive::width_factor() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.width_factor)
  return _internal_width_factor();
}
inline void CommandRemoveColumnsOrRowsArchive::_internal_set_width_factor(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.width_factor_ = value;
}
inline void CommandRemoveColumnsOrRowsArchive::set_width_factor(float value) {
  _internal_set_width_factor(value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveColumnsOrRowsArchive.width_factor)
}

// required float height_factor = 10;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_height_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_height_factor() const {
  return _internal_has_height_factor();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_height_factor() {
  _impl_.height_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CommandRemoveColumnsOrRowsArchive::_internal_height_factor() const {
  return _impl_.height_factor_;
}
inline float CommandRemoveColumnsOrRowsArchive::height_factor() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.height_factor)
  return _internal_height_factor();
}
inline void CommandRemoveColumnsOrRowsArchive::_internal_set_height_factor(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.height_factor_ = value;
}
inline void CommandRemoveColumnsOrRowsArchive::set_height_factor(float value) {
  _internal_set_height_factor(value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveColumnsOrRowsArchive.height_factor)
}

// optional bool allow_horizontal_autosize = 11;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_allow_horizontal_autosize() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_allow_horizontal_autosize() const {
  return _internal_has_allow_horizontal_autosize();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_allow_horizontal_autosize() {
  _impl_.allow_horizontal_autosize_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CommandRemoveColumnsOrRowsArchive::_internal_allow_horizontal_autosize() const {
  return _impl_.allow_horizontal_autosize_;
}
inline bool CommandRemoveColumnsOrRowsArchive::allow_horizontal_autosize() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.allow_horizontal_autosize)
  return _internal_allow_horizontal_autosize();
}
inline void CommandRemoveColumnsOrRowsArchive::_internal_set_allow_horizontal_autosize(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.allow_horizontal_autosize_ = value;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allow_horizontal_autosize(bool value) {
  _internal_set_allow_horizontal_autosize(value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveColumnsOrRowsArchive.allow_horizontal_autosize)
}

// optional .TSP.Reference undo_merge_map = 12;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_undo_merge_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_merge_map_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_undo_merge_map() const {
  return _internal_has_undo_merge_map();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_undo_merge_map() const {
  const ::TSP::Reference* p = _impl_.undo_merge_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::undo_merge_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_merge_map)
  return _internal_undo_merge_map();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_undo_merge_map(
    ::TSP::Reference* undo_merge_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_merge_map_);
  }
  _impl_.undo_merge_map_ = undo_merge_map;
  if (undo_merge_map) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_merge_map)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_undo_merge_map() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.undo_merge_map_;
  _impl_.undo_merge_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_undo_merge_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.undo_merge_map)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.undo_merge_map_;
  _impl_.undo_merge_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_undo_merge_map() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.undo_merge_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_merge_map_ = p;
  }
  return _impl_.undo_merge_map_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_undo_merge_map() {
  ::TSP::Reference* _msg = _internal_mutable_undo_merge_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_merge_map)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_undo_merge_map(::TSP::Reference* undo_merge_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_merge_map_);
  }
  if (undo_merge_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_merge_map));
    if (message_arena != submessage_arena) {
      undo_merge_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_merge_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.undo_merge_map_ = undo_merge_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.undo_merge_map)
}

// optional .TSP.Reference redo_merge_map = 13;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_redo_merge_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_merge_map_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_redo_merge_map() const {
  return _internal_has_redo_merge_map();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_redo_merge_map() const {
  const ::TSP::Reference* p = _impl_.redo_merge_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::redo_merge_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.redo_merge_map)
  return _internal_redo_merge_map();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_redo_merge_map(
    ::TSP::Reference* redo_merge_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_merge_map_);
  }
  _impl_.redo_merge_map_ = redo_merge_map;
  if (redo_merge_map) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.redo_merge_map)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_redo_merge_map() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.redo_merge_map_;
  _impl_.redo_merge_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_redo_merge_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.redo_merge_map)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.redo_merge_map_;
  _impl_.redo_merge_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_redo_merge_map() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.redo_merge_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.redo_merge_map_ = p;
  }
  return _impl_.redo_merge_map_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_redo_merge_map() {
  ::TSP::Reference* _msg = _internal_mutable_redo_merge_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.redo_merge_map)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_redo_merge_map(::TSP::Reference* redo_merge_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_merge_map_);
  }
  if (redo_merge_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_merge_map));
    if (message_arena != submessage_arena) {
      redo_merge_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_merge_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.redo_merge_map_ = redo_merge_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.redo_merge_map)
}

// repeated uint32 hiding_actions = 14;
inline int CommandRemoveColumnsOrRowsArchive::_internal_hiding_actions_size() const {
  return _impl_.hiding_actions_.size();
}
inline int CommandRemoveColumnsOrRowsArchive::hiding_actions_size() const {
  return _internal_hiding_actions_size();
}
inline void CommandRemoveColumnsOrRowsArchive::clear_hiding_actions() {
  _impl_.hiding_actions_.Clear();
}
inline uint32_t CommandRemoveColumnsOrRowsArchive::_internal_hiding_actions(int index) const {
  return _impl_.hiding_actions_.Get(index);
}
inline uint32_t CommandRemoveColumnsOrRowsArchive::hiding_actions(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.hiding_actions)
  return _internal_hiding_actions(index);
}
inline void CommandRemoveColumnsOrRowsArchive::set_hiding_actions(int index, uint32_t value) {
  _impl_.hiding_actions_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandRemoveColumnsOrRowsArchive.hiding_actions)
}
inline void CommandRemoveColumnsOrRowsArchive::_internal_add_hiding_actions(uint32_t value) {
  _impl_.hiding_actions_.Add(value);
}
inline void CommandRemoveColumnsOrRowsArchive::add_hiding_actions(uint32_t value) {
  _internal_add_hiding_actions(value);
  // @@protoc_insertion_point(field_add:TST.CommandRemoveColumnsOrRowsArchive.hiding_actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandRemoveColumnsOrRowsArchive::_internal_hiding_actions() const {
  return _impl_.hiding_actions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandRemoveColumnsOrRowsArchive::hiding_actions() const {
  // @@protoc_insertion_point(field_list:TST.CommandRemoveColumnsOrRowsArchive.hiding_actions)
  return _internal_hiding_actions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandRemoveColumnsOrRowsArchive::_internal_mutable_hiding_actions() {
  return &_impl_.hiding_actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandRemoveColumnsOrRowsArchive::mutable_hiding_actions() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandRemoveColumnsOrRowsArchive.hiding_actions)
  return _internal_mutable_hiding_actions();
}

// optional .TSP.Reference orig_filter_set = 15;
inline bool CommandRemoveColumnsOrRowsArchive::_internal_has_orig_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orig_filter_set_ != nullptr);
  return value;
}
inline bool CommandRemoveColumnsOrRowsArchive::has_orig_filter_set() const {
  return _internal_has_orig_filter_set();
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_orig_filter_set() const {
  const ::TSP::Reference* p = _impl_.orig_filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::orig_filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.orig_filter_set)
  return _internal_orig_filter_set();
}
inline void CommandRemoveColumnsOrRowsArchive::unsafe_arena_set_allocated_orig_filter_set(
    ::TSP::Reference* orig_filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orig_filter_set_);
  }
  _impl_.orig_filter_set_ = orig_filter_set;
  if (orig_filter_set) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.orig_filter_set)
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::release_orig_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.orig_filter_set_;
  _impl_.orig_filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::unsafe_arena_release_orig_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandRemoveColumnsOrRowsArchive.orig_filter_set)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.orig_filter_set_;
  _impl_.orig_filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_mutable_orig_filter_set() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.orig_filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.orig_filter_set_ = p;
  }
  return _impl_.orig_filter_set_;
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_orig_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_orig_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.orig_filter_set)
  return _msg;
}
inline void CommandRemoveColumnsOrRowsArchive::set_allocated_orig_filter_set(::TSP::Reference* orig_filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orig_filter_set_);
  }
  if (orig_filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orig_filter_set));
    if (message_arena != submessage_arena) {
      orig_filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orig_filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.orig_filter_set_ = orig_filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRemoveColumnsOrRowsArchive.orig_filter_set)
}

// repeated .TSP.Reference undo_command_collector = 16;
inline int CommandRemoveColumnsOrRowsArchive::_internal_undo_command_collector_size() const {
  return _impl_.undo_command_collector_.size();
}
inline int CommandRemoveColumnsOrRowsArchive::undo_command_collector_size() const {
  return _internal_undo_command_collector_size();
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::mutable_undo_command_collector(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandRemoveColumnsOrRowsArchive.undo_command_collector)
  return _impl_.undo_command_collector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandRemoveColumnsOrRowsArchive::mutable_undo_command_collector() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandRemoveColumnsOrRowsArchive.undo_command_collector)
  return &_impl_.undo_command_collector_;
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::_internal_undo_command_collector(int index) const {
  return _impl_.undo_command_collector_.Get(index);
}
inline const ::TSP::Reference& CommandRemoveColumnsOrRowsArchive::undo_command_collector(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandRemoveColumnsOrRowsArchive.undo_command_collector)
  return _internal_undo_command_collector(index);
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::_internal_add_undo_command_collector() {
  return _impl_.undo_command_collector_.Add();
}
inline ::TSP::Reference* CommandRemoveColumnsOrRowsArchive::add_undo_command_collector() {
  ::TSP::Reference* _add = _internal_add_undo_command_collector();
  // @@protoc_insertion_point(field_add:TST.CommandRemoveColumnsOrRowsArchive.undo_command_collector)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandRemoveColumnsOrRowsArchive::undo_command_collector() const {
  // @@protoc_insertion_point(field_list:TST.CommandRemoveColumnsOrRowsArchive.undo_command_collector)
  return _impl_.undo_command_collector_;
}

// -------------------------------------------------------------------

// CommandResizeColumnOrRowArchive

// required .TST.CommandDirectionArchive direction = 1;
inline bool CommandResizeColumnOrRowArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandResizeColumnOrRowArchive::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TST::CommandDirectionArchive CommandResizeColumnOrRowArchive::_internal_direction() const {
  return static_cast< ::TST::CommandDirectionArchive >(_impl_.direction_);
}
inline ::TST::CommandDirectionArchive CommandResizeColumnOrRowArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.direction)
  return _internal_direction();
}
inline void CommandResizeColumnOrRowArchive::_internal_set_direction(::TST::CommandDirectionArchive value) {
  assert(::TST::CommandDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.direction_ = value;
}
inline void CommandResizeColumnOrRowArchive::set_direction(::TST::CommandDirectionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.direction)
}

// required uint32 index = 2;
inline bool CommandResizeColumnOrRowArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandResizeColumnOrRowArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandResizeColumnOrRowArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandResizeColumnOrRowArchive::index() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.index)
  return _internal_index();
}
inline void CommandResizeColumnOrRowArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}
inline void CommandResizeColumnOrRowArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.index)
}

// required uint32 count = 3;
inline bool CommandResizeColumnOrRowArchive::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_count() const {
  return _internal_has_count();
}
inline void CommandResizeColumnOrRowArchive::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandResizeColumnOrRowArchive::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CommandResizeColumnOrRowArchive::count() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.count)
  return _internal_count();
}
inline void CommandResizeColumnOrRowArchive::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.count_ = value;
}
inline void CommandResizeColumnOrRowArchive::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.count)
}

// required float newsize = 4;
inline bool CommandResizeColumnOrRowArchive::_internal_has_newsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_newsize() const {
  return _internal_has_newsize();
}
inline void CommandResizeColumnOrRowArchive::clear_newsize() {
  _impl_.newsize_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CommandResizeColumnOrRowArchive::_internal_newsize() const {
  return _impl_.newsize_;
}
inline float CommandResizeColumnOrRowArchive::newsize() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.newsize)
  return _internal_newsize();
}
inline void CommandResizeColumnOrRowArchive::_internal_set_newsize(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.newsize_ = value;
}
inline void CommandResizeColumnOrRowArchive::set_newsize(float value) {
  _internal_set_newsize(value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.newsize)
}

// optional .TSD.GeometryArchive oldgeom = 5;
inline bool CommandResizeColumnOrRowArchive::_internal_has_oldgeom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldgeom_ != nullptr);
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_oldgeom() const {
  return _internal_has_oldgeom();
}
inline const ::TSD::GeometryArchive& CommandResizeColumnOrRowArchive::_internal_oldgeom() const {
  const ::TSD::GeometryArchive* p = _impl_.oldgeom_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& CommandResizeColumnOrRowArchive::oldgeom() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.oldgeom)
  return _internal_oldgeom();
}
inline void CommandResizeColumnOrRowArchive::unsafe_arena_set_allocated_oldgeom(
    ::TSD::GeometryArchive* oldgeom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldgeom_);
  }
  _impl_.oldgeom_ = oldgeom;
  if (oldgeom) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResizeColumnOrRowArchive.oldgeom)
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::release_oldgeom() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::GeometryArchive* temp = _impl_.oldgeom_;
  _impl_.oldgeom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::unsafe_arena_release_oldgeom() {
  // @@protoc_insertion_point(field_release:TST.CommandResizeColumnOrRowArchive.oldgeom)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::GeometryArchive* temp = _impl_.oldgeom_;
  _impl_.oldgeom_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::_internal_mutable_oldgeom() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.oldgeom_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.oldgeom_ = p;
  }
  return _impl_.oldgeom_;
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::mutable_oldgeom() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_oldgeom();
  // @@protoc_insertion_point(field_mutable:TST.CommandResizeColumnOrRowArchive.oldgeom)
  return _msg;
}
inline void CommandResizeColumnOrRowArchive::set_allocated_oldgeom(::TSD::GeometryArchive* oldgeom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldgeom_);
  }
  if (oldgeom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldgeom));
    if (message_arena != submessage_arena) {
      oldgeom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldgeom, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.oldgeom_ = oldgeom;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResizeColumnOrRowArchive.oldgeom)
}

// optional .TSD.GeometryArchive newgeom = 6;
inline bool CommandResizeColumnOrRowArchive::_internal_has_newgeom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newgeom_ != nullptr);
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_newgeom() const {
  return _internal_has_newgeom();
}
inline const ::TSD::GeometryArchive& CommandResizeColumnOrRowArchive::_internal_newgeom() const {
  const ::TSD::GeometryArchive* p = _impl_.newgeom_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& CommandResizeColumnOrRowArchive::newgeom() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.newgeom)
  return _internal_newgeom();
}
inline void CommandResizeColumnOrRowArchive::unsafe_arena_set_allocated_newgeom(
    ::TSD::GeometryArchive* newgeom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newgeom_);
  }
  _impl_.newgeom_ = newgeom;
  if (newgeom) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResizeColumnOrRowArchive.newgeom)
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::release_newgeom() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::GeometryArchive* temp = _impl_.newgeom_;
  _impl_.newgeom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::unsafe_arena_release_newgeom() {
  // @@protoc_insertion_point(field_release:TST.CommandResizeColumnOrRowArchive.newgeom)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::GeometryArchive* temp = _impl_.newgeom_;
  _impl_.newgeom_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::_internal_mutable_newgeom() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.newgeom_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.newgeom_ = p;
  }
  return _impl_.newgeom_;
}
inline ::TSD::GeometryArchive* CommandResizeColumnOrRowArchive::mutable_newgeom() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_newgeom();
  // @@protoc_insertion_point(field_mutable:TST.CommandResizeColumnOrRowArchive.newgeom)
  return _msg;
}
inline void CommandResizeColumnOrRowArchive::set_allocated_newgeom(::TSD::GeometryArchive* newgeom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newgeom_);
  }
  if (newgeom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newgeom));
    if (message_arena != submessage_arena) {
      newgeom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newgeom, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newgeom_ = newgeom;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResizeColumnOrRowArchive.newgeom)
}

// repeated float subsizes = 7;
inline int CommandResizeColumnOrRowArchive::_internal_subsizes_size() const {
  return _impl_.subsizes_.size();
}
inline int CommandResizeColumnOrRowArchive::subsizes_size() const {
  return _internal_subsizes_size();
}
inline void CommandResizeColumnOrRowArchive::clear_subsizes() {
  _impl_.subsizes_.Clear();
}
inline float CommandResizeColumnOrRowArchive::_internal_subsizes(int index) const {
  return _impl_.subsizes_.Get(index);
}
inline float CommandResizeColumnOrRowArchive::subsizes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.subsizes)
  return _internal_subsizes(index);
}
inline void CommandResizeColumnOrRowArchive::set_subsizes(int index, float value) {
  _impl_.subsizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.subsizes)
}
inline void CommandResizeColumnOrRowArchive::_internal_add_subsizes(float value) {
  _impl_.subsizes_.Add(value);
}
inline void CommandResizeColumnOrRowArchive::add_subsizes(float value) {
  _internal_add_subsizes(value);
  // @@protoc_insertion_point(field_add:TST.CommandResizeColumnOrRowArchive.subsizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandResizeColumnOrRowArchive::_internal_subsizes() const {
  return _impl_.subsizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommandResizeColumnOrRowArchive::subsizes() const {
  // @@protoc_insertion_point(field_list:TST.CommandResizeColumnOrRowArchive.subsizes)
  return _internal_subsizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandResizeColumnOrRowArchive::_internal_mutable_subsizes() {
  return &_impl_.subsizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommandResizeColumnOrRowArchive::mutable_subsizes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandResizeColumnOrRowArchive.subsizes)
  return _internal_mutable_subsizes();
}

// optional float old_default = 8;
inline bool CommandResizeColumnOrRowArchive::_internal_has_old_default() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_old_default() const {
  return _internal_has_old_default();
}
inline void CommandResizeColumnOrRowArchive::clear_old_default() {
  _impl_.old_default_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CommandResizeColumnOrRowArchive::_internal_old_default() const {
  return _impl_.old_default_;
}
inline float CommandResizeColumnOrRowArchive::old_default() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.old_default)
  return _internal_old_default();
}
inline void CommandResizeColumnOrRowArchive::_internal_set_old_default(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.old_default_ = value;
}
inline void CommandResizeColumnOrRowArchive::set_old_default(float value) {
  _internal_set_old_default(value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.old_default)
}

// optional bool uniformsizes = 9;
inline bool CommandResizeColumnOrRowArchive::_internal_has_uniformsizes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_uniformsizes() const {
  return _internal_has_uniformsizes();
}
inline void CommandResizeColumnOrRowArchive::clear_uniformsizes() {
  _impl_.uniformsizes_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CommandResizeColumnOrRowArchive::_internal_uniformsizes() const {
  return _impl_.uniformsizes_;
}
inline bool CommandResizeColumnOrRowArchive::uniformsizes() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.uniformsizes)
  return _internal_uniformsizes();
}
inline void CommandResizeColumnOrRowArchive::_internal_set_uniformsizes(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.uniformsizes_ = value;
}
inline void CommandResizeColumnOrRowArchive::set_uniformsizes(bool value) {
  _internal_set_uniformsizes(value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.uniformsizes)
}

// optional uint32 resizemode = 10;
inline bool CommandResizeColumnOrRowArchive::_internal_has_resizemode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_resizemode() const {
  return _internal_has_resizemode();
}
inline void CommandResizeColumnOrRowArchive::clear_resizemode() {
  _impl_.resizemode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CommandResizeColumnOrRowArchive::_internal_resizemode() const {
  return _impl_.resizemode_;
}
inline uint32_t CommandResizeColumnOrRowArchive::resizemode() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.resizemode)
  return _internal_resizemode();
}
inline void CommandResizeColumnOrRowArchive::_internal_set_resizemode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.resizemode_ = value;
}
inline void CommandResizeColumnOrRowArchive::set_resizemode(uint32_t value) {
  _internal_set_resizemode(value);
  // @@protoc_insertion_point(field_set:TST.CommandResizeColumnOrRowArchive.resizemode)
}

// required .TST.TableCommandArchive super = 11;
inline bool CommandResizeColumnOrRowArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandResizeColumnOrRowArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandResizeColumnOrRowArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandResizeColumnOrRowArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandResizeColumnOrRowArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandResizeColumnOrRowArchive.super)
  return _internal_super();
}
inline void CommandResizeColumnOrRowArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResizeColumnOrRowArchive.super)
}
inline ::TST::TableCommandArchive* CommandResizeColumnOrRowArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandResizeColumnOrRowArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandResizeColumnOrRowArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandResizeColumnOrRowArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandResizeColumnOrRowArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandResizeColumnOrRowArchive.super)
  return _msg;
}
inline void CommandResizeColumnOrRowArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResizeColumnOrRowArchive.super)
}

// -------------------------------------------------------------------

// CommandSetCellArchive

// required .TST.CellID cellID = 1;
inline bool CommandSetCellArchive::_internal_has_cellid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cellid_ != nullptr);
  return value;
}
inline bool CommandSetCellArchive::has_cellid() const {
  return _internal_has_cellid();
}
inline const ::TST::CellID& CommandSetCellArchive::_internal_cellid() const {
  const ::TST::CellID* p = _impl_.cellid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& CommandSetCellArchive::cellid() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCellArchive.cellID)
  return _internal_cellid();
}
inline void CommandSetCellArchive::unsafe_arena_set_allocated_cellid(
    ::TST::CellID* cellid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellid_);
  }
  _impl_.cellid_ = cellid;
  if (cellid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetCellArchive.cellID)
}
inline ::TST::CellID* CommandSetCellArchive::release_cellid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.cellid_;
  _impl_.cellid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellID* CommandSetCellArchive::unsafe_arena_release_cellid() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCellArchive.cellID)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.cellid_;
  _impl_.cellid_ = nullptr;
  return temp;
}
inline ::TST::CellID* CommandSetCellArchive::_internal_mutable_cellid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cellid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArenaForAllocation());
    _impl_.cellid_ = p;
  }
  return _impl_.cellid_;
}
inline ::TST::CellID* CommandSetCellArchive::mutable_cellid() {
  ::TST::CellID* _msg = _internal_mutable_cellid();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCellArchive.cellID)
  return _msg;
}
inline void CommandSetCellArchive::set_allocated_cellid(::TST::CellID* cellid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellid_);
  }
  if (cellid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellid));
    if (message_arena != submessage_arena) {
      cellid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cellid_ = cellid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCellArchive.cellID)
}

// optional .TST.Cell newcell = 2;
inline bool CommandSetCellArchive::_internal_has_newcell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newcell_ != nullptr);
  return value;
}
inline bool CommandSetCellArchive::has_newcell() const {
  return _internal_has_newcell();
}
inline const ::TST::Cell& CommandSetCellArchive::_internal_newcell() const {
  const ::TST::Cell* p = _impl_.newcell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandSetCellArchive::newcell() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCellArchive.newcell)
  return _internal_newcell();
}
inline void CommandSetCellArchive::unsafe_arena_set_allocated_newcell(
    ::TST::Cell* newcell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newcell_);
  }
  _impl_.newcell_ = newcell;
  if (newcell) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetCellArchive.newcell)
}
inline ::TST::Cell* CommandSetCellArchive::release_newcell() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::Cell* temp = _impl_.newcell_;
  _impl_.newcell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandSetCellArchive::unsafe_arena_release_newcell() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCellArchive.newcell)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::Cell* temp = _impl_.newcell_;
  _impl_.newcell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandSetCellArchive::_internal_mutable_newcell() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.newcell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.newcell_ = p;
  }
  return _impl_.newcell_;
}
inline ::TST::Cell* CommandSetCellArchive::mutable_newcell() {
  ::TST::Cell* _msg = _internal_mutable_newcell();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCellArchive.newcell)
  return _msg;
}
inline void CommandSetCellArchive::set_allocated_newcell(::TST::Cell* newcell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newcell_);
  }
  if (newcell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newcell));
    if (message_arena != submessage_arena) {
      newcell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newcell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newcell_ = newcell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCellArchive.newcell)
}

// optional .TST.Cell oldcell = 3;
inline bool CommandSetCellArchive::_internal_has_oldcell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldcell_ != nullptr);
  return value;
}
inline bool CommandSetCellArchive::has_oldcell() const {
  return _internal_has_oldcell();
}
inline const ::TST::Cell& CommandSetCellArchive::_internal_oldcell() const {
  const ::TST::Cell* p = _impl_.oldcell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandSetCellArchive::oldcell() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCellArchive.oldcell)
  return _internal_oldcell();
}
inline void CommandSetCellArchive::unsafe_arena_set_allocated_oldcell(
    ::TST::Cell* oldcell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldcell_);
  }
  _impl_.oldcell_ = oldcell;
  if (oldcell) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetCellArchive.oldcell)
}
inline ::TST::Cell* CommandSetCellArchive::release_oldcell() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = _impl_.oldcell_;
  _impl_.oldcell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandSetCellArchive::unsafe_arena_release_oldcell() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCellArchive.oldcell)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = _impl_.oldcell_;
  _impl_.oldcell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandSetCellArchive::_internal_mutable_oldcell() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.oldcell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.oldcell_ = p;
  }
  return _impl_.oldcell_;
}
inline ::TST::Cell* CommandSetCellArchive::mutable_oldcell() {
  ::TST::Cell* _msg = _internal_mutable_oldcell();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCellArchive.oldcell)
  return _msg;
}
inline void CommandSetCellArchive::set_allocated_oldcell(::TST::Cell* oldcell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldcell_);
  }
  if (oldcell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldcell));
    if (message_arena != submessage_arena) {
      oldcell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldcell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.oldcell_ = oldcell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCellArchive.oldcell)
}

// required .TST.TableCommandArchive super = 5;
inline bool CommandSetCellArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetCellArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetCellArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::TableCommandArchive& CommandSetCellArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetCellArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCellArchive.super)
  return _internal_super();
}
inline void CommandSetCellArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetCellArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetCellArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetCellArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCellArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetCellArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetCellArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCellArchive.super)
  return _msg;
}
inline void CommandSetCellArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCellArchive.super)
}

// optional bool post_undo_redo_selection = 6;
inline bool CommandSetCellArchive::_internal_has_post_undo_redo_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetCellArchive::has_post_undo_redo_selection() const {
  return _internal_has_post_undo_redo_selection();
}
inline void CommandSetCellArchive::clear_post_undo_redo_selection() {
  _impl_.post_undo_redo_selection_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetCellArchive::_internal_post_undo_redo_selection() const {
  return _impl_.post_undo_redo_selection_;
}
inline bool CommandSetCellArchive::post_undo_redo_selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCellArchive.post_undo_redo_selection)
  return _internal_post_undo_redo_selection();
}
inline void CommandSetCellArchive::_internal_set_post_undo_redo_selection(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.post_undo_redo_selection_ = value;
}
inline void CommandSetCellArchive::set_post_undo_redo_selection(bool value) {
  _internal_set_post_undo_redo_selection(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetCellArchive.post_undo_redo_selection)
}

// -------------------------------------------------------------------

// CommandTextPreflightInsertCellArchive

// required .TST.CellID editing_cellID = 1;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_editing_cellid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_cellid_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_editing_cellid() const {
  return _internal_has_editing_cellid();
}
inline const ::TST::CellID& CommandTextPreflightInsertCellArchive::_internal_editing_cellid() const {
  const ::TST::CellID* p = _impl_.editing_cellid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& CommandTextPreflightInsertCellArchive::editing_cellid() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.editing_cellID)
  return _internal_editing_cellid();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_editing_cellid(
    ::TST::CellID* editing_cellid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cellid_);
  }
  _impl_.editing_cellid_ = editing_cellid;
  if (editing_cellid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_cellID)
}
inline ::TST::CellID* CommandTextPreflightInsertCellArchive::release_editing_cellid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.editing_cellid_;
  _impl_.editing_cellid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellID* CommandTextPreflightInsertCellArchive::unsafe_arena_release_editing_cellid() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.editing_cellID)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.editing_cellid_;
  _impl_.editing_cellid_ = nullptr;
  return temp;
}
inline ::TST::CellID* CommandTextPreflightInsertCellArchive::_internal_mutable_editing_cellid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.editing_cellid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArenaForAllocation());
    _impl_.editing_cellid_ = p;
  }
  return _impl_.editing_cellid_;
}
inline ::TST::CellID* CommandTextPreflightInsertCellArchive::mutable_editing_cellid() {
  ::TST::CellID* _msg = _internal_mutable_editing_cellid();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.editing_cellID)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_editing_cellid(::TST::CellID* editing_cellid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cellid_);
  }
  if (editing_cellid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_cellid));
    if (message_arena != submessage_arena) {
      editing_cellid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_cellid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.editing_cellid_ = editing_cellid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_cellID)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandTextPreflightInsertCellArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::TableCommandArchive& CommandTextPreflightInsertCellArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandTextPreflightInsertCellArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.super)
  return _internal_super();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.super)
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandTextPreflightInsertCellArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.super)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.super)
}

// optional .TSP.Reference coalesced_textcommand = 6;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_coalesced_textcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coalesced_textcommand_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_coalesced_textcommand() const {
  return _internal_has_coalesced_textcommand();
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::_internal_coalesced_textcommand() const {
  const ::TSP::Reference* p = _impl_.coalesced_textcommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::coalesced_textcommand() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
  return _internal_coalesced_textcommand();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_coalesced_textcommand(
    ::TSP::Reference* coalesced_textcommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coalesced_textcommand_);
  }
  _impl_.coalesced_textcommand_ = coalesced_textcommand;
  if (coalesced_textcommand) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::release_coalesced_textcommand() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.coalesced_textcommand_;
  _impl_.coalesced_textcommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::unsafe_arena_release_coalesced_textcommand() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.coalesced_textcommand_;
  _impl_.coalesced_textcommand_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::_internal_mutable_coalesced_textcommand() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.coalesced_textcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.coalesced_textcommand_ = p;
  }
  return _impl_.coalesced_textcommand_;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::mutable_coalesced_textcommand() {
  ::TSP::Reference* _msg = _internal_mutable_coalesced_textcommand();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_coalesced_textcommand(::TSP::Reference* coalesced_textcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coalesced_textcommand_);
  }
  if (coalesced_textcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalesced_textcommand));
    if (message_arena != submessage_arena) {
      coalesced_textcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coalesced_textcommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.coalesced_textcommand_ = coalesced_textcommand;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand)
}

// optional .TSP.Reference postflightcommand = 8;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_postflightcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.postflightcommand_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_postflightcommand() const {
  return _internal_has_postflightcommand();
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::_internal_postflightcommand() const {
  const ::TSP::Reference* p = _impl_.postflightcommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::postflightcommand() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
  return _internal_postflightcommand();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_postflightcommand(
    ::TSP::Reference* postflightcommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postflightcommand_);
  }
  _impl_.postflightcommand_ = postflightcommand;
  if (postflightcommand) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::release_postflightcommand() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.postflightcommand_;
  _impl_.postflightcommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::unsafe_arena_release_postflightcommand() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.postflightcommand_;
  _impl_.postflightcommand_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::_internal_mutable_postflightcommand() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.postflightcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.postflightcommand_ = p;
  }
  return _impl_.postflightcommand_;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::mutable_postflightcommand() {
  ::TSP::Reference* _msg = _internal_mutable_postflightcommand();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_postflightcommand(::TSP::Reference* postflightcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postflightcommand_);
  }
  if (postflightcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postflightcommand));
    if (message_arena != submessage_arena) {
      postflightcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postflightcommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.postflightcommand_ = postflightcommand;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.postflightcommand)
}

// optional bool grouped_with_postflight = 9;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_grouped_with_postflight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_grouped_with_postflight() const {
  return _internal_has_grouped_with_postflight();
}
inline void CommandTextPreflightInsertCellArchive::clear_grouped_with_postflight() {
  _impl_.grouped_with_postflight_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CommandTextPreflightInsertCellArchive::_internal_grouped_with_postflight() const {
  return _impl_.grouped_with_postflight_;
}
inline bool CommandTextPreflightInsertCellArchive::grouped_with_postflight() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.grouped_with_postflight)
  return _internal_grouped_with_postflight();
}
inline void CommandTextPreflightInsertCellArchive::_internal_set_grouped_with_postflight(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.grouped_with_postflight_ = value;
}
inline void CommandTextPreflightInsertCellArchive::set_grouped_with_postflight(bool value) {
  _internal_set_grouped_with_postflight(value);
  // @@protoc_insertion_point(field_set:TST.CommandTextPreflightInsertCellArchive.grouped_with_postflight)
}

// required .TST.Cell editing_cell = 10;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_editing_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_cell_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_editing_cell() const {
  return _internal_has_editing_cell();
}
inline const ::TST::Cell& CommandTextPreflightInsertCellArchive::_internal_editing_cell() const {
  const ::TST::Cell* p = _impl_.editing_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandTextPreflightInsertCellArchive::editing_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.editing_cell)
  return _internal_editing_cell();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_editing_cell(
    ::TST::Cell* editing_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  _impl_.editing_cell_ = editing_cell;
  if (editing_cell) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_cell)
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::release_editing_cell() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::unsafe_arena_release_editing_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.editing_cell)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::_internal_mutable_editing_cell() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.editing_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.editing_cell_ = p;
  }
  return _impl_.editing_cell_;
}
inline ::TST::Cell* CommandTextPreflightInsertCellArchive::mutable_editing_cell() {
  ::TST::Cell* _msg = _internal_mutable_editing_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.editing_cell)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_editing_cell(::TST::Cell* editing_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  if (editing_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_cell));
    if (message_arena != submessage_arena) {
      editing_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.editing_cell_ = editing_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_cell)
}

// required .TSP.Reference editing_storage = 11;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_editing_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_storage_ != nullptr);
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_editing_storage() const {
  return _internal_has_editing_storage();
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::_internal_editing_storage() const {
  const ::TSP::Reference* p = _impl_.editing_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandTextPreflightInsertCellArchive::editing_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.editing_storage)
  return _internal_editing_storage();
}
inline void CommandTextPreflightInsertCellArchive::unsafe_arena_set_allocated_editing_storage(
    ::TSP::Reference* editing_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  _impl_.editing_storage_ = editing_storage;
  if (editing_storage) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_storage)
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::release_editing_storage() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::unsafe_arena_release_editing_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandTextPreflightInsertCellArchive.editing_storage)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::_internal_mutable_editing_storage() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.editing_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.editing_storage_ = p;
  }
  return _impl_.editing_storage_;
}
inline ::TSP::Reference* CommandTextPreflightInsertCellArchive::mutable_editing_storage() {
  ::TSP::Reference* _msg = _internal_mutable_editing_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandTextPreflightInsertCellArchive.editing_storage)
  return _msg;
}
inline void CommandTextPreflightInsertCellArchive::set_allocated_editing_storage(::TSP::Reference* editing_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  if (editing_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_storage));
    if (message_arena != submessage_arena) {
      editing_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.editing_storage_ = editing_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandTextPreflightInsertCellArchive.editing_storage)
}

// optional uint32 last_column_hit_by_tap = 12;
inline bool CommandTextPreflightInsertCellArchive::_internal_has_last_column_hit_by_tap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandTextPreflightInsertCellArchive::has_last_column_hit_by_tap() const {
  return _internal_has_last_column_hit_by_tap();
}
inline void CommandTextPreflightInsertCellArchive::clear_last_column_hit_by_tap() {
  _impl_.last_column_hit_by_tap_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CommandTextPreflightInsertCellArchive::_internal_last_column_hit_by_tap() const {
  return _impl_.last_column_hit_by_tap_;
}
inline uint32_t CommandTextPreflightInsertCellArchive::last_column_hit_by_tap() const {
  // @@protoc_insertion_point(field_get:TST.CommandTextPreflightInsertCellArchive.last_column_hit_by_tap)
  return _internal_last_column_hit_by_tap();
}
inline void CommandTextPreflightInsertCellArchive::_internal_set_last_column_hit_by_tap(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.last_column_hit_by_tap_ = value;
}
inline void CommandTextPreflightInsertCellArchive::set_last_column_hit_by_tap(uint32_t value) {
  _internal_set_last_column_hit_by_tap(value);
  // @@protoc_insertion_point(field_set:TST.CommandTextPreflightInsertCellArchive.last_column_hit_by_tap)
}

// -------------------------------------------------------------------

// CommandPostflightSetCellArchive

// required .TST.CellID cellID = 1;
inline bool CommandPostflightSetCellArchive::_internal_has_cellid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cellid_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_cellid() const {
  return _internal_has_cellid();
}
inline const ::TST::CellID& CommandPostflightSetCellArchive::_internal_cellid() const {
  const ::TST::CellID* p = _impl_.cellid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& CommandPostflightSetCellArchive::cellid() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.cellID)
  return _internal_cellid();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_cellid(
    ::TST::CellID* cellid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellid_);
  }
  _impl_.cellid_ = cellid;
  if (cellid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.cellID)
}
inline ::TST::CellID* CommandPostflightSetCellArchive::release_cellid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.cellid_;
  _impl_.cellid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellID* CommandPostflightSetCellArchive::unsafe_arena_release_cellid() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.cellID)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.cellid_;
  _impl_.cellid_ = nullptr;
  return temp;
}
inline ::TST::CellID* CommandPostflightSetCellArchive::_internal_mutable_cellid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cellid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArenaForAllocation());
    _impl_.cellid_ = p;
  }
  return _impl_.cellid_;
}
inline ::TST::CellID* CommandPostflightSetCellArchive::mutable_cellid() {
  ::TST::CellID* _msg = _internal_mutable_cellid();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.cellID)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_cellid(::TST::CellID* cellid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellid_);
  }
  if (cellid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellid));
    if (message_arena != submessage_arena) {
      cellid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cellid_ = cellid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.cellID)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandPostflightSetCellArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandPostflightSetCellArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::TableCommandArchive& CommandPostflightSetCellArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandPostflightSetCellArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.super)
  return _internal_super();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.super)
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandPostflightSetCellArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.super)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.super)
}

// optional .TSP.Reference childcommandundo = 4;
inline bool CommandPostflightSetCellArchive::_internal_has_childcommandundo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childcommandundo_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_childcommandundo() const {
  return _internal_has_childcommandundo();
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::_internal_childcommandundo() const {
  const ::TSP::Reference* p = _impl_.childcommandundo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::childcommandundo() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.childcommandundo)
  return _internal_childcommandundo();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_childcommandundo(
    ::TSP::Reference* childcommandundo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childcommandundo_);
  }
  _impl_.childcommandundo_ = childcommandundo;
  if (childcommandundo) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.childcommandundo)
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::release_childcommandundo() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.childcommandundo_;
  _impl_.childcommandundo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::unsafe_arena_release_childcommandundo() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.childcommandundo)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.childcommandundo_;
  _impl_.childcommandundo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::_internal_mutable_childcommandundo() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.childcommandundo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.childcommandundo_ = p;
  }
  return _impl_.childcommandundo_;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::mutable_childcommandundo() {
  ::TSP::Reference* _msg = _internal_mutable_childcommandundo();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.childcommandundo)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_childcommandundo(::TSP::Reference* childcommandundo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childcommandundo_);
  }
  if (childcommandundo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childcommandundo));
    if (message_arena != submessage_arena) {
      childcommandundo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childcommandundo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.childcommandundo_ = childcommandundo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.childcommandundo)
}

// required .TST.Cell editing_cell = 6;
inline bool CommandPostflightSetCellArchive::_internal_has_editing_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_cell_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_editing_cell() const {
  return _internal_has_editing_cell();
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::_internal_editing_cell() const {
  const ::TST::Cell* p = _impl_.editing_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::editing_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.editing_cell)
  return _internal_editing_cell();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_editing_cell(
    ::TST::Cell* editing_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  _impl_.editing_cell_ = editing_cell;
  if (editing_cell) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.editing_cell)
}
inline ::TST::Cell* CommandPostflightSetCellArchive::release_editing_cell() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::unsafe_arena_release_editing_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.editing_cell)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::Cell* temp = _impl_.editing_cell_;
  _impl_.editing_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::_internal_mutable_editing_cell() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.editing_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.editing_cell_ = p;
  }
  return _impl_.editing_cell_;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::mutable_editing_cell() {
  ::TST::Cell* _msg = _internal_mutable_editing_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.editing_cell)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_editing_cell(::TST::Cell* editing_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_cell_);
  }
  if (editing_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_cell));
    if (message_arena != submessage_arena) {
      editing_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.editing_cell_ = editing_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.editing_cell)
}

// required .TST.Cell new_cell = 7;
inline bool CommandPostflightSetCellArchive::_internal_has_new_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_cell_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_new_cell() const {
  return _internal_has_new_cell();
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::_internal_new_cell() const {
  const ::TST::Cell* p = _impl_.new_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandPostflightSetCellArchive::new_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.new_cell)
  return _internal_new_cell();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_new_cell(
    ::TST::Cell* new_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_cell_);
  }
  _impl_.new_cell_ = new_cell;
  if (new_cell) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.new_cell)
}
inline ::TST::Cell* CommandPostflightSetCellArchive::release_new_cell() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::Cell* temp = _impl_.new_cell_;
  _impl_.new_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::unsafe_arena_release_new_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.new_cell)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::Cell* temp = _impl_.new_cell_;
  _impl_.new_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::_internal_mutable_new_cell() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.new_cell_ = p;
  }
  return _impl_.new_cell_;
}
inline ::TST::Cell* CommandPostflightSetCellArchive::mutable_new_cell() {
  ::TST::Cell* _msg = _internal_mutable_new_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.new_cell)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_new_cell(::TST::Cell* new_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_cell_);
  }
  if (new_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_cell));
    if (message_arena != submessage_arena) {
      new_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_cell_ = new_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.new_cell)
}

// required .TSP.Reference editing_storage = 8;
inline bool CommandPostflightSetCellArchive::_internal_has_editing_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.editing_storage_ != nullptr);
  return value;
}
inline bool CommandPostflightSetCellArchive::has_editing_storage() const {
  return _internal_has_editing_storage();
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::_internal_editing_storage() const {
  const ::TSP::Reference* p = _impl_.editing_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandPostflightSetCellArchive::editing_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.editing_storage)
  return _internal_editing_storage();
}
inline void CommandPostflightSetCellArchive::unsafe_arena_set_allocated_editing_storage(
    ::TSP::Reference* editing_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  _impl_.editing_storage_ = editing_storage;
  if (editing_storage) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandPostflightSetCellArchive.editing_storage)
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::release_editing_storage() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::unsafe_arena_release_editing_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandPostflightSetCellArchive.editing_storage)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.editing_storage_;
  _impl_.editing_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::_internal_mutable_editing_storage() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.editing_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.editing_storage_ = p;
  }
  return _impl_.editing_storage_;
}
inline ::TSP::Reference* CommandPostflightSetCellArchive::mutable_editing_storage() {
  ::TSP::Reference* _msg = _internal_mutable_editing_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandPostflightSetCellArchive.editing_storage)
  return _msg;
}
inline void CommandPostflightSetCellArchive::set_allocated_editing_storage(::TSP::Reference* editing_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.editing_storage_);
  }
  if (editing_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_storage));
    if (message_arena != submessage_arena) {
      editing_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.editing_storage_ = editing_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandPostflightSetCellArchive.editing_storage)
}

// optional uint32 last_column_hit_by_tap = 9;
inline bool CommandPostflightSetCellArchive::_internal_has_last_column_hit_by_tap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandPostflightSetCellArchive::has_last_column_hit_by_tap() const {
  return _internal_has_last_column_hit_by_tap();
}
inline void CommandPostflightSetCellArchive::clear_last_column_hit_by_tap() {
  _impl_.last_column_hit_by_tap_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CommandPostflightSetCellArchive::_internal_last_column_hit_by_tap() const {
  return _impl_.last_column_hit_by_tap_;
}
inline uint32_t CommandPostflightSetCellArchive::last_column_hit_by_tap() const {
  // @@protoc_insertion_point(field_get:TST.CommandPostflightSetCellArchive.last_column_hit_by_tap)
  return _internal_last_column_hit_by_tap();
}
inline void CommandPostflightSetCellArchive::_internal_set_last_column_hit_by_tap(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.last_column_hit_by_tap_ = value;
}
inline void CommandPostflightSetCellArchive::set_last_column_hit_by_tap(uint32_t value) {
  _internal_set_last_column_hit_by_tap(value);
  // @@protoc_insertion_point(field_set:TST.CommandPostflightSetCellArchive.last_column_hit_by_tap)
}

// -------------------------------------------------------------------

// CommandSetNumberOfHeadersOrFootersArchive

// required .TST.CommandRegionArchive region = 1;
inline bool CommandSetNumberOfHeadersOrFootersArchive::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetNumberOfHeadersOrFootersArchive::has_region() const {
  return _internal_has_region();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::clear_region() {
  _impl_.region_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TST::CommandRegionArchive CommandSetNumberOfHeadersOrFootersArchive::_internal_region() const {
  return static_cast< ::TST::CommandRegionArchive >(_impl_.region_);
}
inline ::TST::CommandRegionArchive CommandSetNumberOfHeadersOrFootersArchive::region() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfHeadersOrFootersArchive.region)
  return _internal_region();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::_internal_set_region(::TST::CommandRegionArchive value) {
  assert(::TST::CommandRegionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_ = value;
}
inline void CommandSetNumberOfHeadersOrFootersArchive::set_region(::TST::CommandRegionArchive value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetNumberOfHeadersOrFootersArchive.region)
}

// required uint32 count = 2;
inline bool CommandSetNumberOfHeadersOrFootersArchive::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetNumberOfHeadersOrFootersArchive::has_count() const {
  return _internal_has_count();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetNumberOfHeadersOrFootersArchive::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CommandSetNumberOfHeadersOrFootersArchive::count() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfHeadersOrFootersArchive.count)
  return _internal_count();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.count_ = value;
}
inline void CommandSetNumberOfHeadersOrFootersArchive::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetNumberOfHeadersOrFootersArchive.count)
}

// required uint32 oldcount = 3;
inline bool CommandSetNumberOfHeadersOrFootersArchive::_internal_has_oldcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetNumberOfHeadersOrFootersArchive::has_oldcount() const {
  return _internal_has_oldcount();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::clear_oldcount() {
  _impl_.oldcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandSetNumberOfHeadersOrFootersArchive::_internal_oldcount() const {
  return _impl_.oldcount_;
}
inline uint32_t CommandSetNumberOfHeadersOrFootersArchive::oldcount() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfHeadersOrFootersArchive.oldcount)
  return _internal_oldcount();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::_internal_set_oldcount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.oldcount_ = value;
}
inline void CommandSetNumberOfHeadersOrFootersArchive::set_oldcount(uint32_t value) {
  _internal_set_oldcount(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetNumberOfHeadersOrFootersArchive.oldcount)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandSetNumberOfHeadersOrFootersArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetNumberOfHeadersOrFootersArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetNumberOfHeadersOrFootersArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetNumberOfHeadersOrFootersArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfHeadersOrFootersArchive.super)
  return _internal_super();
}
inline void CommandSetNumberOfHeadersOrFootersArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetNumberOfHeadersOrFootersArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetNumberOfHeadersOrFootersArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetNumberOfHeadersOrFootersArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetNumberOfHeadersOrFootersArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetNumberOfHeadersOrFootersArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetNumberOfHeadersOrFootersArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetNumberOfHeadersOrFootersArchive.super)
  return _msg;
}
inline void CommandSetNumberOfHeadersOrFootersArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetNumberOfHeadersOrFootersArchive.super)
}

// -------------------------------------------------------------------

// CommandFixWPStylesInRowsOrColumnsArchive

// required .TST.CommandDirectionArchive direction = 1;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TST::CommandDirectionArchive CommandFixWPStylesInRowsOrColumnsArchive::_internal_direction() const {
  return static_cast< ::TST::CommandDirectionArchive >(_impl_.direction_);
}
inline ::TST::CommandDirectionArchive CommandFixWPStylesInRowsOrColumnsArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.direction)
  return _internal_direction();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::_internal_set_direction(::TST::CommandDirectionArchive value) {
  assert(::TST::CommandDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.direction_ = value;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_direction(::TST::CommandDirectionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixWPStylesInRowsOrColumnsArchive.direction)
}

// required uint32 index = 2;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_index() const {
  return _internal_has_index();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandFixWPStylesInRowsOrColumnsArchive::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandFixWPStylesInRowsOrColumnsArchive::index() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.index)
  return _internal_index();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixWPStylesInRowsOrColumnsArchive.index)
}

// required .TST.CellMapArchive undo_cell_map = 3;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandFixWPStylesInRowsOrColumnsArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandFixWPStylesInRowsOrColumnsArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFixWPStylesInRowsOrColumnsArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandFixWPStylesInRowsOrColumnsArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandFixWPStylesInRowsOrColumnsArchive.undo_cell_map)
  return _msg;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFixWPStylesInRowsOrColumnsArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandFixWPStylesInRowsOrColumnsArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandFixWPStylesInRowsOrColumnsArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFixWPStylesInRowsOrColumnsArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandFixWPStylesInRowsOrColumnsArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandFixWPStylesInRowsOrColumnsArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandFixWPStylesInRowsOrColumnsArchive.redo_cell_map)
  return _msg;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFixWPStylesInRowsOrColumnsArchive.redo_cell_map)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandFixWPStylesInRowsOrColumnsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandFixWPStylesInRowsOrColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.super)
  return _internal_super();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFixWPStylesInRowsOrColumnsArchive.super)
}
inline ::TST::TableCommandArchive* CommandFixWPStylesInRowsOrColumnsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandFixWPStylesInRowsOrColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandFixWPStylesInRowsOrColumnsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandFixWPStylesInRowsOrColumnsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandFixWPStylesInRowsOrColumnsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandFixWPStylesInRowsOrColumnsArchive.super)
  return _msg;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFixWPStylesInRowsOrColumnsArchive.super)
}

// required uint32 reference_index = 7;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_reference_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_reference_index() const {
  return _internal_has_reference_index();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::clear_reference_index() {
  _impl_.reference_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandFixWPStylesInRowsOrColumnsArchive::_internal_reference_index() const {
  return _impl_.reference_index_;
}
inline uint32_t CommandFixWPStylesInRowsOrColumnsArchive::reference_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.reference_index)
  return _internal_reference_index();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::_internal_set_reference_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.reference_index_ = value;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_reference_index(uint32_t value) {
  _internal_set_reference_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixWPStylesInRowsOrColumnsArchive.reference_index)
}

// required bool inherit_styles = 8;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_inherit_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_inherit_styles() const {
  return _internal_has_inherit_styles();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::clear_inherit_styles() {
  _impl_.inherit_styles_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_inherit_styles() const {
  return _impl_.inherit_styles_;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::inherit_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.inherit_styles)
  return _internal_inherit_styles();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::_internal_set_inherit_styles(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.inherit_styles_ = value;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_inherit_styles(bool value) {
  _internal_set_inherit_styles(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixWPStylesInRowsOrColumnsArchive.inherit_styles)
}

// optional uint32 count = 9;
inline bool CommandFixWPStylesInRowsOrColumnsArchive::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandFixWPStylesInRowsOrColumnsArchive::has_count() const {
  return _internal_has_count();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CommandFixWPStylesInRowsOrColumnsArchive::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CommandFixWPStylesInRowsOrColumnsArchive::count() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixWPStylesInRowsOrColumnsArchive.count)
  return _internal_count();
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.count_ = value;
}
inline void CommandFixWPStylesInRowsOrColumnsArchive::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixWPStylesInRowsOrColumnsArchive.count)
}

// -------------------------------------------------------------------

// CommandFixStylesInHeadersOrFootersArchive

// required .TST.CommandRegionArchive region = 1;
inline bool CommandFixStylesInHeadersOrFootersArchive::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandFixStylesInHeadersOrFootersArchive::has_region() const {
  return _internal_has_region();
}
inline void CommandFixStylesInHeadersOrFootersArchive::clear_region() {
  _impl_.region_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TST::CommandRegionArchive CommandFixStylesInHeadersOrFootersArchive::_internal_region() const {
  return static_cast< ::TST::CommandRegionArchive >(_impl_.region_);
}
inline ::TST::CommandRegionArchive CommandFixStylesInHeadersOrFootersArchive::region() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixStylesInHeadersOrFootersArchive.region)
  return _internal_region();
}
inline void CommandFixStylesInHeadersOrFootersArchive::_internal_set_region(::TST::CommandRegionArchive value) {
  assert(::TST::CommandRegionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.region_ = value;
}
inline void CommandFixStylesInHeadersOrFootersArchive::set_region(::TST::CommandRegionArchive value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixStylesInHeadersOrFootersArchive.region)
}

// required uint32 old_number = 2;
inline bool CommandFixStylesInHeadersOrFootersArchive::_internal_has_old_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandFixStylesInHeadersOrFootersArchive::has_old_number() const {
  return _internal_has_old_number();
}
inline void CommandFixStylesInHeadersOrFootersArchive::clear_old_number() {
  _impl_.old_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandFixStylesInHeadersOrFootersArchive::_internal_old_number() const {
  return _impl_.old_number_;
}
inline uint32_t CommandFixStylesInHeadersOrFootersArchive::old_number() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixStylesInHeadersOrFootersArchive.old_number)
  return _internal_old_number();
}
inline void CommandFixStylesInHeadersOrFootersArchive::_internal_set_old_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.old_number_ = value;
}
inline void CommandFixStylesInHeadersOrFootersArchive::set_old_number(uint32_t value) {
  _internal_set_old_number(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixStylesInHeadersOrFootersArchive.old_number)
}

// required uint32 new_number = 3;
inline bool CommandFixStylesInHeadersOrFootersArchive::_internal_has_new_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandFixStylesInHeadersOrFootersArchive::has_new_number() const {
  return _internal_has_new_number();
}
inline void CommandFixStylesInHeadersOrFootersArchive::clear_new_number() {
  _impl_.new_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CommandFixStylesInHeadersOrFootersArchive::_internal_new_number() const {
  return _impl_.new_number_;
}
inline uint32_t CommandFixStylesInHeadersOrFootersArchive::new_number() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixStylesInHeadersOrFootersArchive.new_number)
  return _internal_new_number();
}
inline void CommandFixStylesInHeadersOrFootersArchive::_internal_set_new_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.new_number_ = value;
}
inline void CommandFixStylesInHeadersOrFootersArchive::set_new_number(uint32_t value) {
  _internal_set_new_number(value);
  // @@protoc_insertion_point(field_set:TST.CommandFixStylesInHeadersOrFootersArchive.new_number)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandFixStylesInHeadersOrFootersArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandFixStylesInHeadersOrFootersArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandFixStylesInHeadersOrFootersArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandFixStylesInHeadersOrFootersArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixStylesInHeadersOrFootersArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandFixStylesInHeadersOrFootersArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandFixStylesInHeadersOrFootersArchive.redo_cell_map)
  return _msg;
}
inline void CommandFixStylesInHeadersOrFootersArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.redo_cell_map)
}

// required .TST.CellMapArchive undo_cell_map = 5;
inline bool CommandFixStylesInHeadersOrFootersArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandFixStylesInHeadersOrFootersArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandFixStylesInHeadersOrFootersArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandFixStylesInHeadersOrFootersArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixStylesInHeadersOrFootersArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandFixStylesInHeadersOrFootersArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandFixStylesInHeadersOrFootersArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandFixStylesInHeadersOrFootersArchive.undo_cell_map)
  return _msg;
}
inline void CommandFixStylesInHeadersOrFootersArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.undo_cell_map)
}

// required .TST.TableCommandArchive super = 6;
inline bool CommandFixStylesInHeadersOrFootersArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandFixStylesInHeadersOrFootersArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandFixStylesInHeadersOrFootersArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandFixStylesInHeadersOrFootersArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandFixStylesInHeadersOrFootersArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixStylesInHeadersOrFootersArchive.super)
  return _internal_super();
}
inline void CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.super)
}
inline ::TST::TableCommandArchive* CommandFixStylesInHeadersOrFootersArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandFixStylesInHeadersOrFootersArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandFixStylesInHeadersOrFootersArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandFixStylesInHeadersOrFootersArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandFixStylesInHeadersOrFootersArchive.super)
  return _msg;
}
inline void CommandFixStylesInHeadersOrFootersArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.super)
}

// optional .TSP.Reference textundo = 7;
inline bool CommandFixStylesInHeadersOrFootersArchive::_internal_has_textundo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.textundo_ != nullptr);
  return value;
}
inline bool CommandFixStylesInHeadersOrFootersArchive::has_textundo() const {
  return _internal_has_textundo();
}
inline const ::TSP::Reference& CommandFixStylesInHeadersOrFootersArchive::_internal_textundo() const {
  const ::TSP::Reference* p = _impl_.textundo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandFixStylesInHeadersOrFootersArchive::textundo() const {
  // @@protoc_insertion_point(field_get:TST.CommandFixStylesInHeadersOrFootersArchive.textundo)
  return _internal_textundo();
}
inline void CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_set_allocated_textundo(
    ::TSP::Reference* textundo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.textundo_);
  }
  _impl_.textundo_ = textundo;
  if (textundo) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.textundo)
}
inline ::TSP::Reference* CommandFixStylesInHeadersOrFootersArchive::release_textundo() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.textundo_;
  _impl_.textundo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandFixStylesInHeadersOrFootersArchive::unsafe_arena_release_textundo() {
  // @@protoc_insertion_point(field_release:TST.CommandFixStylesInHeadersOrFootersArchive.textundo)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.textundo_;
  _impl_.textundo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandFixStylesInHeadersOrFootersArchive::_internal_mutable_textundo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.textundo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.textundo_ = p;
  }
  return _impl_.textundo_;
}
inline ::TSP::Reference* CommandFixStylesInHeadersOrFootersArchive::mutable_textundo() {
  ::TSP::Reference* _msg = _internal_mutable_textundo();
  // @@protoc_insertion_point(field_mutable:TST.CommandFixStylesInHeadersOrFootersArchive.textundo)
  return _msg;
}
inline void CommandFixStylesInHeadersOrFootersArchive::set_allocated_textundo(::TSP::Reference* textundo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.textundo_);
  }
  if (textundo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(textundo));
    if (message_arena != submessage_arena) {
      textundo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textundo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.textundo_ = textundo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFixStylesInHeadersOrFootersArchive.textundo)
}

// -------------------------------------------------------------------

// CommandSetTableNameArchive

// required string newtablename = 1;
inline bool CommandSetTableNameArchive::_internal_has_newtablename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_newtablename() const {
  return _internal_has_newtablename();
}
inline void CommandSetTableNameArchive::clear_newtablename() {
  _impl_.newtablename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetTableNameArchive::newtablename() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.newtablename)
  return _internal_newtablename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableNameArchive::set_newtablename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.newtablename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.newtablename)
}
inline std::string* CommandSetTableNameArchive::mutable_newtablename() {
  std::string* _s = _internal_mutable_newtablename();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.newtablename)
  return _s;
}
inline const std::string& CommandSetTableNameArchive::_internal_newtablename() const {
  return _impl_.newtablename_.Get();
}
inline void CommandSetTableNameArchive::_internal_set_newtablename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.newtablename_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::_internal_mutable_newtablename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.newtablename_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::release_newtablename() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.newtablename)
  if (!_internal_has_newtablename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.newtablename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newtablename_.IsDefault()) {
    _impl_.newtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableNameArchive::set_allocated_newtablename(std::string* newtablename) {
  if (newtablename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.newtablename_.SetAllocated(newtablename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newtablename_.IsDefault()) {
    _impl_.newtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.newtablename)
}

// required string oldtablename = 2;
inline bool CommandSetTableNameArchive::_internal_has_oldtablename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_oldtablename() const {
  return _internal_has_oldtablename();
}
inline void CommandSetTableNameArchive::clear_oldtablename() {
  _impl_.oldtablename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetTableNameArchive::oldtablename() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.oldtablename)
  return _internal_oldtablename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableNameArchive::set_oldtablename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.oldtablename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.oldtablename)
}
inline std::string* CommandSetTableNameArchive::mutable_oldtablename() {
  std::string* _s = _internal_mutable_oldtablename();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.oldtablename)
  return _s;
}
inline const std::string& CommandSetTableNameArchive::_internal_oldtablename() const {
  return _impl_.oldtablename_.Get();
}
inline void CommandSetTableNameArchive::_internal_set_oldtablename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.oldtablename_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::_internal_mutable_oldtablename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.oldtablename_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableNameArchive::release_oldtablename() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.oldtablename)
  if (!_internal_has_oldtablename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.oldtablename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldtablename_.IsDefault()) {
    _impl_.oldtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableNameArchive::set_allocated_oldtablename(std::string* oldtablename) {
  if (oldtablename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.oldtablename_.SetAllocated(oldtablename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oldtablename_.IsDefault()) {
    _impl_.oldtablename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.oldtablename)
}

// optional .TSP.Reference newstyle = 3;
inline bool CommandSetTableNameArchive::_internal_has_newstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newstyle_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_newstyle() const {
  return _internal_has_newstyle();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_newstyle() const {
  const ::TSP::Reference* p = _impl_.newstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::newstyle() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.newstyle)
  return _internal_newstyle();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_newstyle(
    ::TSP::Reference* newstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newstyle_);
  }
  _impl_.newstyle_ = newstyle;
  if (newstyle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.newstyle)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_newstyle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.newstyle_;
  _impl_.newstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_newstyle() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.newstyle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.newstyle_;
  _impl_.newstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_newstyle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.newstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.newstyle_ = p;
  }
  return _impl_.newstyle_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_newstyle() {
  ::TSP::Reference* _msg = _internal_mutable_newstyle();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.newstyle)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_newstyle(::TSP::Reference* newstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newstyle_);
  }
  if (newstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newstyle));
    if (message_arena != submessage_arena) {
      newstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.newstyle_ = newstyle;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.newstyle)
}

// optional .TSP.Reference oldstyle = 4;
inline bool CommandSetTableNameArchive::_internal_has_oldstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldstyle_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_oldstyle() const {
  return _internal_has_oldstyle();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_oldstyle() const {
  const ::TSP::Reference* p = _impl_.oldstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::oldstyle() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.oldstyle)
  return _internal_oldstyle();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_oldstyle(
    ::TSP::Reference* oldstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldstyle_);
  }
  _impl_.oldstyle_ = oldstyle;
  if (oldstyle) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.oldstyle)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_oldstyle() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.oldstyle_;
  _impl_.oldstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_oldstyle() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.oldstyle)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.oldstyle_;
  _impl_.oldstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_oldstyle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.oldstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.oldstyle_ = p;
  }
  return _impl_.oldstyle_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_oldstyle() {
  ::TSP::Reference* _msg = _internal_mutable_oldstyle();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.oldstyle)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_oldstyle(::TSP::Reference* oldstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldstyle_);
  }
  if (oldstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldstyle));
    if (message_arena != submessage_arena) {
      oldstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.oldstyle_ = oldstyle;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.oldstyle)
}

// required .TST.TableCommandArchive super = 5;
inline bool CommandSetTableNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::TableCommandArchive& CommandSetTableNameArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.super)
  return _internal_super();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableNameArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.super)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.super)
}

// optional .TSP.Reference old_shape_style = 6;
inline bool CommandSetTableNameArchive::_internal_has_old_shape_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_shape_style_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_old_shape_style() const {
  return _internal_has_old_shape_style();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_old_shape_style() const {
  const ::TSP::Reference* p = _impl_.old_shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::old_shape_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.old_shape_style)
  return _internal_old_shape_style();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_old_shape_style(
    ::TSP::Reference* old_shape_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_shape_style_);
  }
  _impl_.old_shape_style_ = old_shape_style;
  if (old_shape_style) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.old_shape_style)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_old_shape_style() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_shape_style_;
  _impl_.old_shape_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_old_shape_style() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.old_shape_style)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.old_shape_style_;
  _impl_.old_shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_old_shape_style() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.old_shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_shape_style_ = p;
  }
  return _impl_.old_shape_style_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_old_shape_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_shape_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.old_shape_style)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_old_shape_style(::TSP::Reference* old_shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_shape_style_);
  }
  if (old_shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_shape_style));
    if (message_arena != submessage_arena) {
      old_shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_shape_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.old_shape_style_ = old_shape_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.old_shape_style)
}

// optional .TSP.Reference new_shape_style = 7;
inline bool CommandSetTableNameArchive::_internal_has_new_shape_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_shape_style_ != nullptr);
  return value;
}
inline bool CommandSetTableNameArchive::has_new_shape_style() const {
  return _internal_has_new_shape_style();
}
inline const ::TSP::Reference& CommandSetTableNameArchive::_internal_new_shape_style() const {
  const ::TSP::Reference* p = _impl_.new_shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableNameArchive::new_shape_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.new_shape_style)
  return _internal_new_shape_style();
}
inline void CommandSetTableNameArchive::unsafe_arena_set_allocated_new_shape_style(
    ::TSP::Reference* new_shape_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_shape_style_);
  }
  _impl_.new_shape_style_ = new_shape_style;
  if (new_shape_style) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameArchive.new_shape_style)
}
inline ::TSP::Reference* CommandSetTableNameArchive::release_new_shape_style() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.new_shape_style_;
  _impl_.new_shape_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::unsafe_arena_release_new_shape_style() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameArchive.new_shape_style)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.new_shape_style_;
  _impl_.new_shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableNameArchive::_internal_mutable_new_shape_style() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.new_shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_shape_style_ = p;
  }
  return _impl_.new_shape_style_;
}
inline ::TSP::Reference* CommandSetTableNameArchive::mutable_new_shape_style() {
  ::TSP::Reference* _msg = _internal_mutable_new_shape_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameArchive.new_shape_style)
  return _msg;
}
inline void CommandSetTableNameArchive::set_allocated_new_shape_style(::TSP::Reference* new_shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_shape_style_);
  }
  if (new_shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_shape_style));
    if (message_arena != submessage_arena) {
      new_shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_shape_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.new_shape_style_ = new_shape_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameArchive.new_shape_style)
}

// optional bool old_table_name_border_enabled = 8;
inline bool CommandSetTableNameArchive::_internal_has_old_table_name_border_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_old_table_name_border_enabled() const {
  return _internal_has_old_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::clear_old_table_name_border_enabled() {
  _impl_.old_table_name_border_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CommandSetTableNameArchive::_internal_old_table_name_border_enabled() const {
  return _impl_.old_table_name_border_enabled_;
}
inline bool CommandSetTableNameArchive::old_table_name_border_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.old_table_name_border_enabled)
  return _internal_old_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::_internal_set_old_table_name_border_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.old_table_name_border_enabled_ = value;
}
inline void CommandSetTableNameArchive::set_old_table_name_border_enabled(bool value) {
  _internal_set_old_table_name_border_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.old_table_name_border_enabled)
}

// optional bool new_table_name_border_enabled = 9;
inline bool CommandSetTableNameArchive::_internal_has_new_table_name_border_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandSetTableNameArchive::has_new_table_name_border_enabled() const {
  return _internal_has_new_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::clear_new_table_name_border_enabled() {
  _impl_.new_table_name_border_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CommandSetTableNameArchive::_internal_new_table_name_border_enabled() const {
  return _impl_.new_table_name_border_enabled_;
}
inline bool CommandSetTableNameArchive::new_table_name_border_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameArchive.new_table_name_border_enabled)
  return _internal_new_table_name_border_enabled();
}
inline void CommandSetTableNameArchive::_internal_set_new_table_name_border_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.new_table_name_border_enabled_ = value;
}
inline void CommandSetTableNameArchive::set_new_table_name_border_enabled(bool value) {
  _internal_set_new_table_name_border_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameArchive.new_table_name_border_enabled)
}

// -------------------------------------------------------------------

// CommandSetTableNameEnabledArchive

// required bool table_name_enabled = 1;
inline bool CommandSetTableNameEnabledArchive::_internal_has_table_name_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableNameEnabledArchive::has_table_name_enabled() const {
  return _internal_has_table_name_enabled();
}
inline void CommandSetTableNameEnabledArchive::clear_table_name_enabled() {
  _impl_.table_name_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetTableNameEnabledArchive::_internal_table_name_enabled() const {
  return _impl_.table_name_enabled_;
}
inline bool CommandSetTableNameEnabledArchive::table_name_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameEnabledArchive.table_name_enabled)
  return _internal_table_name_enabled();
}
inline void CommandSetTableNameEnabledArchive::_internal_set_table_name_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.table_name_enabled_ = value;
}
inline void CommandSetTableNameEnabledArchive::set_table_name_enabled(bool value) {
  _internal_set_table_name_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameEnabledArchive.table_name_enabled)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandSetTableNameEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableNameEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableNameEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTableNameEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableNameEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetTableNameEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableNameEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameEnabledArchive.super)
  return _msg;
}
inline void CommandSetTableNameEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameEnabledArchive.super)
}

// -------------------------------------------------------------------

// CommandSetTableFontSizeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTableFontSizeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableFontSizeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTableFontSizeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableFontSizeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.super)
  return _internal_super();
}
inline void CommandSetTableFontSizeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontSizeArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontSizeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableFontSizeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontSizeArchive.super)
  return _msg;
}
inline void CommandSetTableFontSizeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontSizeArchive.super)
}

// required float scale_factor = 9;
inline bool CommandSetTableFontSizeArchive::_internal_has_scale_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_scale_factor() const {
  return _internal_has_scale_factor();
}
inline void CommandSetTableFontSizeArchive::clear_scale_factor() {
  _impl_.scale_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CommandSetTableFontSizeArchive::_internal_scale_factor() const {
  return _impl_.scale_factor_;
}
inline float CommandSetTableFontSizeArchive::scale_factor() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.scale_factor)
  return _internal_scale_factor();
}
inline void CommandSetTableFontSizeArchive::_internal_set_scale_factor(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scale_factor_ = value;
}
inline void CommandSetTableFontSizeArchive::set_scale_factor(float value) {
  _internal_set_scale_factor(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontSizeArchive.scale_factor)
}

// optional .TST.CellMapArchive undo_cell_map = 5;
inline bool CommandSetTableFontSizeArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetTableFontSizeArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetTableFontSizeArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandSetTableFontSizeArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontSizeArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontSizeArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontSizeArchive.undo_cell_map)
  return _msg;
}
inline void CommandSetTableFontSizeArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontSizeArchive.undo_cell_map)
}

// optional .TST.CellMapArchive redo_cell_map = 6;
inline bool CommandSetTableFontSizeArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetTableFontSizeArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetTableFontSizeArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandSetTableFontSizeArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontSizeArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontSizeArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetTableFontSizeArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontSizeArchive.redo_cell_map)
  return _msg;
}
inline void CommandSetTableFontSizeArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontSizeArchive.redo_cell_map)
}

// optional bool resize_default_cells = 7;
inline bool CommandSetTableFontSizeArchive::_internal_has_resize_default_cells() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_resize_default_cells() const {
  return _internal_has_resize_default_cells();
}
inline void CommandSetTableFontSizeArchive::clear_resize_default_cells() {
  _impl_.resize_default_cells_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandSetTableFontSizeArchive::_internal_resize_default_cells() const {
  return _impl_.resize_default_cells_;
}
inline bool CommandSetTableFontSizeArchive::resize_default_cells() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.resize_default_cells)
  return _internal_resize_default_cells();
}
inline void CommandSetTableFontSizeArchive::_internal_set_resize_default_cells(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.resize_default_cells_ = value;
}
inline void CommandSetTableFontSizeArchive::set_resize_default_cells(bool value) {
  _internal_set_resize_default_cells(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontSizeArchive.resize_default_cells)
}

// optional .TSP.Reference text_undo = 8;
inline bool CommandSetTableFontSizeArchive::_internal_has_text_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_undo_ != nullptr);
  return value;
}
inline bool CommandSetTableFontSizeArchive::has_text_undo() const {
  return _internal_has_text_undo();
}
inline const ::TSP::Reference& CommandSetTableFontSizeArchive::_internal_text_undo() const {
  const ::TSP::Reference* p = _impl_.text_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableFontSizeArchive::text_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontSizeArchive.text_undo)
  return _internal_text_undo();
}
inline void CommandSetTableFontSizeArchive::unsafe_arena_set_allocated_text_undo(
    ::TSP::Reference* text_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  _impl_.text_undo_ = text_undo;
  if (text_undo) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontSizeArchive.text_undo)
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::release_text_undo() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::unsafe_arena_release_text_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontSizeArchive.text_undo)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::_internal_mutable_text_undo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.text_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.text_undo_ = p;
  }
  return _impl_.text_undo_;
}
inline ::TSP::Reference* CommandSetTableFontSizeArchive::mutable_text_undo() {
  ::TSP::Reference* _msg = _internal_mutable_text_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontSizeArchive.text_undo)
  return _msg;
}
inline void CommandSetTableFontSizeArchive::set_allocated_text_undo(::TSP::Reference* text_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  if (text_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_undo));
    if (message_arena != submessage_arena) {
      text_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.text_undo_ = text_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontSizeArchive.text_undo)
}

// -------------------------------------------------------------------

// CommandSetTableFontNameArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTableFontNameArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableFontNameArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TableCommandArchive& CommandSetTableFontNameArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableFontNameArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.super)
  return _internal_super();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableFontNameArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.super)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.super)
}

// required string font_name = 2;
inline bool CommandSetTableFontNameArchive::_internal_has_font_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetTableFontNameArchive::has_font_name() const {
  return _internal_has_font_name();
}
inline void CommandSetTableFontNameArchive::clear_font_name() {
  _impl_.font_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetTableFontNameArchive::font_name() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.font_name)
  return _internal_font_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableFontNameArchive::set_font_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.font_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontNameArchive.font_name)
}
inline std::string* CommandSetTableFontNameArchive::mutable_font_name() {
  std::string* _s = _internal_mutable_font_name();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.font_name)
  return _s;
}
inline const std::string& CommandSetTableFontNameArchive::_internal_font_name() const {
  return _impl_.font_name_.Get();
}
inline void CommandSetTableFontNameArchive::_internal_set_font_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.font_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::_internal_mutable_font_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.font_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::release_font_name() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.font_name)
  if (!_internal_has_font_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.font_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.font_name_.IsDefault()) {
    _impl_.font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableFontNameArchive::set_allocated_font_name(std::string* font_name) {
  if (font_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.font_name_.SetAllocated(font_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.font_name_.IsDefault()) {
    _impl_.font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.font_name)
}

// required string old_font_name = 3;
inline bool CommandSetTableFontNameArchive::_internal_has_old_font_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableFontNameArchive::has_old_font_name() const {
  return _internal_has_old_font_name();
}
inline void CommandSetTableFontNameArchive::clear_old_font_name() {
  _impl_.old_font_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandSetTableFontNameArchive::old_font_name() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.old_font_name)
  return _internal_old_font_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetTableFontNameArchive::set_old_font_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.old_font_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontNameArchive.old_font_name)
}
inline std::string* CommandSetTableFontNameArchive::mutable_old_font_name() {
  std::string* _s = _internal_mutable_old_font_name();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.old_font_name)
  return _s;
}
inline const std::string& CommandSetTableFontNameArchive::_internal_old_font_name() const {
  return _impl_.old_font_name_.Get();
}
inline void CommandSetTableFontNameArchive::_internal_set_old_font_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_font_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::_internal_mutable_old_font_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.old_font_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetTableFontNameArchive::release_old_font_name() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.old_font_name)
  if (!_internal_has_old_font_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.old_font_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_font_name_.IsDefault()) {
    _impl_.old_font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetTableFontNameArchive::set_allocated_old_font_name(std::string* old_font_name) {
  if (old_font_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_font_name_.SetAllocated(old_font_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_font_name_.IsDefault()) {
    _impl_.old_font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.old_font_name)
}

// optional bool preserve_face = 5;
inline bool CommandSetTableFontNameArchive::_internal_has_preserve_face() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandSetTableFontNameArchive::has_preserve_face() const {
  return _internal_has_preserve_face();
}
inline void CommandSetTableFontNameArchive::clear_preserve_face() {
  _impl_.preserve_face_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CommandSetTableFontNameArchive::_internal_preserve_face() const {
  return _impl_.preserve_face_;
}
inline bool CommandSetTableFontNameArchive::preserve_face() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.preserve_face)
  return _internal_preserve_face();
}
inline void CommandSetTableFontNameArchive::_internal_set_preserve_face(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.preserve_face_ = value;
}
inline void CommandSetTableFontNameArchive::set_preserve_face(bool value) {
  _internal_set_preserve_face(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableFontNameArchive.preserve_face)
}

// optional .TST.CellMapArchive undo_cell_map = 6;
inline bool CommandSetTableFontNameArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetTableFontNameArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetTableFontNameArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.undo_cell_map)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.undo_cell_map)
}

// optional .TST.CellMapArchive redo_cell_map = 7;
inline bool CommandSetTableFontNameArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetTableFontNameArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetTableFontNameArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetTableFontNameArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.redo_cell_map)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.redo_cell_map)
}

// optional .TSP.Reference text_undo = 8;
inline bool CommandSetTableFontNameArchive::_internal_has_text_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_undo_ != nullptr);
  return value;
}
inline bool CommandSetTableFontNameArchive::has_text_undo() const {
  return _internal_has_text_undo();
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::_internal_text_undo() const {
  const ::TSP::Reference* p = _impl_.text_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTableFontNameArchive::text_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableFontNameArchive.text_undo)
  return _internal_text_undo();
}
inline void CommandSetTableFontNameArchive::unsafe_arena_set_allocated_text_undo(
    ::TSP::Reference* text_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  _impl_.text_undo_ = text_undo;
  if (text_undo) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableFontNameArchive.text_undo)
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::release_text_undo() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::unsafe_arena_release_text_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableFontNameArchive.text_undo)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::_internal_mutable_text_undo() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.text_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.text_undo_ = p;
  }
  return _impl_.text_undo_;
}
inline ::TSP::Reference* CommandSetTableFontNameArchive::mutable_text_undo() {
  ::TSP::Reference* _msg = _internal_mutable_text_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableFontNameArchive.text_undo)
  return _msg;
}
inline void CommandSetTableFontNameArchive::set_allocated_text_undo(::TSP::Reference* text_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  if (text_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_undo));
    if (message_arena != submessage_arena) {
      text_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.text_undo_ = text_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableFontNameArchive.text_undo)
}

// -------------------------------------------------------------------

// CommandSetTableNameHeightArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTableNameHeightArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTableNameHeightArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTableNameHeightArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTableNameHeightArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTableNameHeightArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameHeightArchive.super)
  return _internal_super();
}
inline void CommandSetTableNameHeightArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTableNameHeightArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTableNameHeightArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTableNameHeightArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTableNameHeightArchive.super)
  return _msg;
}
inline void CommandSetTableNameHeightArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTableNameHeightArchive.super)
}

// required double old_table_name_height = 2;
inline bool CommandSetTableNameHeightArchive::_internal_has_old_table_name_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetTableNameHeightArchive::has_old_table_name_height() const {
  return _internal_has_old_table_name_height();
}
inline void CommandSetTableNameHeightArchive::clear_old_table_name_height() {
  _impl_.old_table_name_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommandSetTableNameHeightArchive::_internal_old_table_name_height() const {
  return _impl_.old_table_name_height_;
}
inline double CommandSetTableNameHeightArchive::old_table_name_height() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameHeightArchive.old_table_name_height)
  return _internal_old_table_name_height();
}
inline void CommandSetTableNameHeightArchive::_internal_set_old_table_name_height(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_table_name_height_ = value;
}
inline void CommandSetTableNameHeightArchive::set_old_table_name_height(double value) {
  _internal_set_old_table_name_height(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameHeightArchive.old_table_name_height)
}

// required double new_table_name_height = 3;
inline bool CommandSetTableNameHeightArchive::_internal_has_new_table_name_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetTableNameHeightArchive::has_new_table_name_height() const {
  return _internal_has_new_table_name_height();
}
inline void CommandSetTableNameHeightArchive::clear_new_table_name_height() {
  _impl_.new_table_name_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CommandSetTableNameHeightArchive::_internal_new_table_name_height() const {
  return _impl_.new_table_name_height_;
}
inline double CommandSetTableNameHeightArchive::new_table_name_height() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTableNameHeightArchive.new_table_name_height)
  return _internal_new_table_name_height();
}
inline void CommandSetTableNameHeightArchive::_internal_set_new_table_name_height(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_table_name_height_ = value;
}
inline void CommandSetTableNameHeightArchive::set_new_table_name_height(double value) {
  _internal_set_new_table_name_height(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetTableNameHeightArchive.new_table_name_height)
}

// -------------------------------------------------------------------

// CommandStyleCellsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandStyleCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandStyleCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandStyleCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandStyleCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.super)
  return _internal_super();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandStyleCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.super)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.super)
}

// optional .TSP.ReferenceDictionary format_properties = 2;
inline bool CommandStyleCellsArchive::_internal_has_format_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.format_properties_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_format_properties() const {
  return _internal_has_format_properties();
}
inline const ::TSP::ReferenceDictionary& CommandStyleCellsArchive::_internal_format_properties() const {
  const ::TSP::ReferenceDictionary* p = _impl_.format_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::ReferenceDictionary&>(
      ::TSP::_ReferenceDictionary_default_instance_);
}
inline const ::TSP::ReferenceDictionary& CommandStyleCellsArchive::format_properties() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.format_properties)
  return _internal_format_properties();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_format_properties(
    ::TSP::ReferenceDictionary* format_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  _impl_.format_properties_ = format_properties;
  if (format_properties) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.format_properties)
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::release_format_properties() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::unsafe_arena_release_format_properties() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.format_properties)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::_internal_mutable_format_properties() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.format_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::ReferenceDictionary>(GetArenaForAllocation());
    _impl_.format_properties_ = p;
  }
  return _impl_.format_properties_;
}
inline ::TSP::ReferenceDictionary* CommandStyleCellsArchive::mutable_format_properties() {
  ::TSP::ReferenceDictionary* _msg = _internal_mutable_format_properties();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.format_properties)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  if (format_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_properties));
    if (message_arena != submessage_arena) {
      format_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_properties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.format_properties_ = format_properties;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.format_properties)
}

// required .TST.SelectionArchive selection = 3;
inline bool CommandStyleCellsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandStyleCellsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandStyleCellsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.selection)
  return _internal_selection();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.selection)
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandStyleCellsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.selection)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.selection)
}

// required .TST.CellMapArchive undo_cell_map = 4;
inline bool CommandStyleCellsArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandStyleCellsArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandStyleCellsArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.undo_cell_map)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 5;
inline bool CommandStyleCellsArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandStyleCellsArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandStyleCellsArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandStyleCellsArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.redo_cell_map)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.redo_cell_map)
}

// optional .TSP.Reference text_undo = 6;
inline bool CommandStyleCellsArchive::_internal_has_text_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_undo_ != nullptr);
  return value;
}
inline bool CommandStyleCellsArchive::has_text_undo() const {
  return _internal_has_text_undo();
}
inline const ::TSP::Reference& CommandStyleCellsArchive::_internal_text_undo() const {
  const ::TSP::Reference* p = _impl_.text_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandStyleCellsArchive::text_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleCellsArchive.text_undo)
  return _internal_text_undo();
}
inline void CommandStyleCellsArchive::unsafe_arena_set_allocated_text_undo(
    ::TSP::Reference* text_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  _impl_.text_undo_ = text_undo;
  if (text_undo) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleCellsArchive.text_undo)
}
inline ::TSP::Reference* CommandStyleCellsArchive::release_text_undo() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::unsafe_arena_release_text_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleCellsArchive.text_undo)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandStyleCellsArchive::_internal_mutable_text_undo() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.text_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.text_undo_ = p;
  }
  return _impl_.text_undo_;
}
inline ::TSP::Reference* CommandStyleCellsArchive::mutable_text_undo() {
  ::TSP::Reference* _msg = _internal_mutable_text_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleCellsArchive.text_undo)
  return _msg;
}
inline void CommandStyleCellsArchive::set_allocated_text_undo(::TSP::Reference* text_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  if (text_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_undo));
    if (message_arena != submessage_arena) {
      text_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.text_undo_ = text_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleCellsArchive.text_undo)
}

// -------------------------------------------------------------------

// CommandStyleTableArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandStyleTableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandStyleTableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandStyleTableArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandStyleTableArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.super)
  return _internal_super();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.super)
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandStyleTableArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.super)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.super)
}

// optional .TSP.ReferenceDictionary format_properties = 2;
inline bool CommandStyleTableArchive::_internal_has_format_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.format_properties_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_format_properties() const {
  return _internal_has_format_properties();
}
inline const ::TSP::ReferenceDictionary& CommandStyleTableArchive::_internal_format_properties() const {
  const ::TSP::ReferenceDictionary* p = _impl_.format_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::ReferenceDictionary&>(
      ::TSP::_ReferenceDictionary_default_instance_);
}
inline const ::TSP::ReferenceDictionary& CommandStyleTableArchive::format_properties() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.format_properties)
  return _internal_format_properties();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_format_properties(
    ::TSP::ReferenceDictionary* format_properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  _impl_.format_properties_ = format_properties;
  if (format_properties) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.format_properties)
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::release_format_properties() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::unsafe_arena_release_format_properties() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.format_properties)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ReferenceDictionary* temp = _impl_.format_properties_;
  _impl_.format_properties_ = nullptr;
  return temp;
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::_internal_mutable_format_properties() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.format_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::ReferenceDictionary>(GetArenaForAllocation());
    _impl_.format_properties_ = p;
  }
  return _impl_.format_properties_;
}
inline ::TSP::ReferenceDictionary* CommandStyleTableArchive::mutable_format_properties() {
  ::TSP::ReferenceDictionary* _msg = _internal_mutable_format_properties();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.format_properties)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_format_properties(::TSP::ReferenceDictionary* format_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_properties_);
  }
  if (format_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_properties));
    if (message_arena != submessage_arena) {
      format_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_properties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.format_properties_ = format_properties;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.format_properties)
}

// optional .TSP.Reference old_style = 3;
inline bool CommandStyleTableArchive::_internal_has_old_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_style_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_old_style() const {
  return _internal_has_old_style();
}
inline const ::TSP::Reference& CommandStyleTableArchive::_internal_old_style() const {
  const ::TSP::Reference* p = _impl_.old_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandStyleTableArchive::old_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.old_style)
  return _internal_old_style();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_old_style(
    ::TSP::Reference* old_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  _impl_.old_style_ = old_style;
  if (old_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.old_style)
}
inline ::TSP::Reference* CommandStyleTableArchive::release_old_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandStyleTableArchive::unsafe_arena_release_old_style() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.old_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandStyleTableArchive::_internal_mutable_old_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_style_ = p;
  }
  return _impl_.old_style_;
}
inline ::TSP::Reference* CommandStyleTableArchive::mutable_old_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.old_style)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_old_style(::TSP::Reference* old_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  if (old_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style));
    if (message_arena != submessage_arena) {
      old_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_style_ = old_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.old_style)
}

// optional .TSP.Reference new_style = 4;
inline bool CommandStyleTableArchive::_internal_has_new_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_style_ != nullptr);
  return value;
}
inline bool CommandStyleTableArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSP::Reference& CommandStyleTableArchive::_internal_new_style() const {
  const ::TSP::Reference* p = _impl_.new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandStyleTableArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandStyleTableArchive.new_style)
  return _internal_new_style();
}
inline void CommandStyleTableArchive::unsafe_arena_set_allocated_new_style(
    ::TSP::Reference* new_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  _impl_.new_style_ = new_style;
  if (new_style) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandStyleTableArchive.new_style)
}
inline ::TSP::Reference* CommandStyleTableArchive::release_new_style() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandStyleTableArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TST.CommandStyleTableArchive.new_style)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandStyleTableArchive::_internal_mutable_new_style() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_style_ = p;
  }
  return _impl_.new_style_;
}
inline ::TSP::Reference* CommandStyleTableArchive::mutable_new_style() {
  ::TSP::Reference* _msg = _internal_mutable_new_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandStyleTableArchive.new_style)
  return _msg;
}
inline void CommandStyleTableArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style));
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandStyleTableArchive.new_style)
}

// -------------------------------------------------------------------

// CommandFillCellsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandFillCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandFillCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandFillCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandFillCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandFillCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.super)
  return _internal_super();
}
inline void CommandFillCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFillCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandFillCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandFillCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandFillCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandFillCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandFillCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandFillCellsArchive.super)
  return _msg;
}
inline void CommandFillCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFillCellsArchive.super)
}

// required .TST.SelectionArchive sourceselection = 2;
inline bool CommandFillCellsArchive::_internal_has_sourceselection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sourceselection_ != nullptr);
  return value;
}
inline bool CommandFillCellsArchive::has_sourceselection() const {
  return _internal_has_sourceselection();
}
inline const ::TST::SelectionArchive& CommandFillCellsArchive::_internal_sourceselection() const {
  const ::TST::SelectionArchive* p = _impl_.sourceselection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandFillCellsArchive::sourceselection() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.sourceselection)
  return _internal_sourceselection();
}
inline void CommandFillCellsArchive::unsafe_arena_set_allocated_sourceselection(
    ::TST::SelectionArchive* sourceselection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourceselection_);
  }
  _impl_.sourceselection_ = sourceselection;
  if (sourceselection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFillCellsArchive.sourceselection)
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::release_sourceselection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.sourceselection_;
  _impl_.sourceselection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::unsafe_arena_release_sourceselection() {
  // @@protoc_insertion_point(field_release:TST.CommandFillCellsArchive.sourceselection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.sourceselection_;
  _impl_.sourceselection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::_internal_mutable_sourceselection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sourceselection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.sourceselection_ = p;
  }
  return _impl_.sourceselection_;
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::mutable_sourceselection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_sourceselection();
  // @@protoc_insertion_point(field_mutable:TST.CommandFillCellsArchive.sourceselection)
  return _msg;
}
inline void CommandFillCellsArchive::set_allocated_sourceselection(::TST::SelectionArchive* sourceselection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourceselection_);
  }
  if (sourceselection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourceselection));
    if (message_arena != submessage_arena) {
      sourceselection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourceselection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sourceselection_ = sourceselection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFillCellsArchive.sourceselection)
}

// required .TST.CellRange sourcecellrange = 3;
inline bool CommandFillCellsArchive::_internal_has_sourcecellrange() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sourcecellrange_ != nullptr);
  return value;
}
inline bool CommandFillCellsArchive::has_sourcecellrange() const {
  return _internal_has_sourcecellrange();
}
inline const ::TST::CellRange& CommandFillCellsArchive::_internal_sourcecellrange() const {
  const ::TST::CellRange* p = _impl_.sourcecellrange_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& CommandFillCellsArchive::sourcecellrange() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.sourcecellrange)
  return _internal_sourcecellrange();
}
inline void CommandFillCellsArchive::unsafe_arena_set_allocated_sourcecellrange(
    ::TST::CellRange* sourcecellrange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourcecellrange_);
  }
  _impl_.sourcecellrange_ = sourcecellrange;
  if (sourcecellrange) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFillCellsArchive.sourcecellrange)
}
inline ::TST::CellRange* CommandFillCellsArchive::release_sourcecellrange() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellRange* temp = _impl_.sourcecellrange_;
  _impl_.sourcecellrange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellRange* CommandFillCellsArchive::unsafe_arena_release_sourcecellrange() {
  // @@protoc_insertion_point(field_release:TST.CommandFillCellsArchive.sourcecellrange)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellRange* temp = _impl_.sourcecellrange_;
  _impl_.sourcecellrange_ = nullptr;
  return temp;
}
inline ::TST::CellRange* CommandFillCellsArchive::_internal_mutable_sourcecellrange() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sourcecellrange_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArenaForAllocation());
    _impl_.sourcecellrange_ = p;
  }
  return _impl_.sourcecellrange_;
}
inline ::TST::CellRange* CommandFillCellsArchive::mutable_sourcecellrange() {
  ::TST::CellRange* _msg = _internal_mutable_sourcecellrange();
  // @@protoc_insertion_point(field_mutable:TST.CommandFillCellsArchive.sourcecellrange)
  return _msg;
}
inline void CommandFillCellsArchive::set_allocated_sourcecellrange(::TST::CellRange* sourcecellrange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourcecellrange_);
  }
  if (sourcecellrange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcecellrange));
    if (message_arena != submessage_arena) {
      sourcecellrange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcecellrange, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sourcecellrange_ = sourcecellrange;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFillCellsArchive.sourcecellrange)
}

// required .TST.CellRange targetcellrange = 4;
inline bool CommandFillCellsArchive::_internal_has_targetcellrange() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetcellrange_ != nullptr);
  return value;
}
inline bool CommandFillCellsArchive::has_targetcellrange() const {
  return _internal_has_targetcellrange();
}
inline const ::TST::CellRange& CommandFillCellsArchive::_internal_targetcellrange() const {
  const ::TST::CellRange* p = _impl_.targetcellrange_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& CommandFillCellsArchive::targetcellrange() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.targetcellrange)
  return _internal_targetcellrange();
}
inline void CommandFillCellsArchive::unsafe_arena_set_allocated_targetcellrange(
    ::TST::CellRange* targetcellrange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetcellrange_);
  }
  _impl_.targetcellrange_ = targetcellrange;
  if (targetcellrange) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFillCellsArchive.targetcellrange)
}
inline ::TST::CellRange* CommandFillCellsArchive::release_targetcellrange() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellRange* temp = _impl_.targetcellrange_;
  _impl_.targetcellrange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellRange* CommandFillCellsArchive::unsafe_arena_release_targetcellrange() {
  // @@protoc_insertion_point(field_release:TST.CommandFillCellsArchive.targetcellrange)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellRange* temp = _impl_.targetcellrange_;
  _impl_.targetcellrange_ = nullptr;
  return temp;
}
inline ::TST::CellRange* CommandFillCellsArchive::_internal_mutable_targetcellrange() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.targetcellrange_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArenaForAllocation());
    _impl_.targetcellrange_ = p;
  }
  return _impl_.targetcellrange_;
}
inline ::TST::CellRange* CommandFillCellsArchive::mutable_targetcellrange() {
  ::TST::CellRange* _msg = _internal_mutable_targetcellrange();
  // @@protoc_insertion_point(field_mutable:TST.CommandFillCellsArchive.targetcellrange)
  return _msg;
}
inline void CommandFillCellsArchive::set_allocated_targetcellrange(::TST::CellRange* targetcellrange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetcellrange_);
  }
  if (targetcellrange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetcellrange));
    if (message_arena != submessage_arena) {
      targetcellrange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetcellrange, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.targetcellrange_ = targetcellrange;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFillCellsArchive.targetcellrange)
}

// required .TST.CellMapArchive undo_cell_map = 5;
inline bool CommandFillCellsArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandFillCellsArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandFillCellsArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandFillCellsArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandFillCellsArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFillCellsArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandFillCellsArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandFillCellsArchive.undo_cell_map)
  return _msg;
}
inline void CommandFillCellsArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFillCellsArchive.undo_cell_map)
}

// required .TST.FillDirectionArchive fillDirection = 6;
inline bool CommandFillCellsArchive::_internal_has_filldirection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandFillCellsArchive::has_filldirection() const {
  return _internal_has_filldirection();
}
inline void CommandFillCellsArchive::clear_filldirection() {
  _impl_.filldirection_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::TST::FillDirectionArchive CommandFillCellsArchive::_internal_filldirection() const {
  return static_cast< ::TST::FillDirectionArchive >(_impl_.filldirection_);
}
inline ::TST::FillDirectionArchive CommandFillCellsArchive::filldirection() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.fillDirection)
  return _internal_filldirection();
}
inline void CommandFillCellsArchive::_internal_set_filldirection(::TST::FillDirectionArchive value) {
  assert(::TST::FillDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.filldirection_ = value;
}
inline void CommandFillCellsArchive::set_filldirection(::TST::FillDirectionArchive value) {
  _internal_set_filldirection(value);
  // @@protoc_insertion_point(field_set:TST.CommandFillCellsArchive.fillDirection)
}

// required .TST.SelectionArchive targetselection = 7;
inline bool CommandFillCellsArchive::_internal_has_targetselection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetselection_ != nullptr);
  return value;
}
inline bool CommandFillCellsArchive::has_targetselection() const {
  return _internal_has_targetselection();
}
inline const ::TST::SelectionArchive& CommandFillCellsArchive::_internal_targetselection() const {
  const ::TST::SelectionArchive* p = _impl_.targetselection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandFillCellsArchive::targetselection() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.targetselection)
  return _internal_targetselection();
}
inline void CommandFillCellsArchive::unsafe_arena_set_allocated_targetselection(
    ::TST::SelectionArchive* targetselection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetselection_);
  }
  _impl_.targetselection_ = targetselection;
  if (targetselection) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFillCellsArchive.targetselection)
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::release_targetselection() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::SelectionArchive* temp = _impl_.targetselection_;
  _impl_.targetselection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::unsafe_arena_release_targetselection() {
  // @@protoc_insertion_point(field_release:TST.CommandFillCellsArchive.targetselection)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::SelectionArchive* temp = _impl_.targetselection_;
  _impl_.targetselection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::_internal_mutable_targetselection() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.targetselection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.targetselection_ = p;
  }
  return _impl_.targetselection_;
}
inline ::TST::SelectionArchive* CommandFillCellsArchive::mutable_targetselection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_targetselection();
  // @@protoc_insertion_point(field_mutable:TST.CommandFillCellsArchive.targetselection)
  return _msg;
}
inline void CommandFillCellsArchive::set_allocated_targetselection(::TST::SelectionArchive* targetselection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetselection_);
  }
  if (targetselection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetselection));
    if (message_arena != submessage_arena) {
      targetselection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetselection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.targetselection_ = targetselection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFillCellsArchive.targetselection)
}

// required .TST.CellMapArchive redo_cell_map = 8;
inline bool CommandFillCellsArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandFillCellsArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandFillCellsArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandFillCellsArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandFillCellsArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandFillCellsArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandFillCellsArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandFillCellsArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandFillCellsArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandFillCellsArchive.redo_cell_map)
  return _msg;
}
inline void CommandFillCellsArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandFillCellsArchive.redo_cell_map)
}

// -------------------------------------------------------------------

// CommandReplaceTextArchive

// required .TST.CellID cellID = 1;
inline bool CommandReplaceTextArchive::_internal_has_cellid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cellid_ != nullptr);
  return value;
}
inline bool CommandReplaceTextArchive::has_cellid() const {
  return _internal_has_cellid();
}
inline const ::TST::CellID& CommandReplaceTextArchive::_internal_cellid() const {
  const ::TST::CellID* p = _impl_.cellid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& CommandReplaceTextArchive::cellid() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTextArchive.cellID)
  return _internal_cellid();
}
inline void CommandReplaceTextArchive::unsafe_arena_set_allocated_cellid(
    ::TST::CellID* cellid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellid_);
  }
  _impl_.cellid_ = cellid;
  if (cellid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTextArchive.cellID)
}
inline ::TST::CellID* CommandReplaceTextArchive::release_cellid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.cellid_;
  _impl_.cellid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellID* CommandReplaceTextArchive::unsafe_arena_release_cellid() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTextArchive.cellID)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = _impl_.cellid_;
  _impl_.cellid_ = nullptr;
  return temp;
}
inline ::TST::CellID* CommandReplaceTextArchive::_internal_mutable_cellid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cellid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArenaForAllocation());
    _impl_.cellid_ = p;
  }
  return _impl_.cellid_;
}
inline ::TST::CellID* CommandReplaceTextArchive::mutable_cellid() {
  ::TST::CellID* _msg = _internal_mutable_cellid();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTextArchive.cellID)
  return _msg;
}
inline void CommandReplaceTextArchive::set_allocated_cellid(::TST::CellID* cellid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellid_);
  }
  if (cellid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellid));
    if (message_arena != submessage_arena) {
      cellid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cellid_ = cellid;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTextArchive.cellID)
}

// required .TST.Cell newcell = 2;
inline bool CommandReplaceTextArchive::_internal_has_newcell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newcell_ != nullptr);
  return value;
}
inline bool CommandReplaceTextArchive::has_newcell() const {
  return _internal_has_newcell();
}
inline const ::TST::Cell& CommandReplaceTextArchive::_internal_newcell() const {
  const ::TST::Cell* p = _impl_.newcell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandReplaceTextArchive::newcell() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTextArchive.newcell)
  return _internal_newcell();
}
inline void CommandReplaceTextArchive::unsafe_arena_set_allocated_newcell(
    ::TST::Cell* newcell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newcell_);
  }
  _impl_.newcell_ = newcell;
  if (newcell) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTextArchive.newcell)
}
inline ::TST::Cell* CommandReplaceTextArchive::release_newcell() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::Cell* temp = _impl_.newcell_;
  _impl_.newcell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandReplaceTextArchive::unsafe_arena_release_newcell() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTextArchive.newcell)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::Cell* temp = _impl_.newcell_;
  _impl_.newcell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandReplaceTextArchive::_internal_mutable_newcell() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.newcell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.newcell_ = p;
  }
  return _impl_.newcell_;
}
inline ::TST::Cell* CommandReplaceTextArchive::mutable_newcell() {
  ::TST::Cell* _msg = _internal_mutable_newcell();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTextArchive.newcell)
  return _msg;
}
inline void CommandReplaceTextArchive::set_allocated_newcell(::TST::Cell* newcell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newcell_);
  }
  if (newcell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newcell));
    if (message_arena != submessage_arena) {
      newcell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newcell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newcell_ = newcell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTextArchive.newcell)
}

// required .TST.Cell oldcell = 3;
inline bool CommandReplaceTextArchive::_internal_has_oldcell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldcell_ != nullptr);
  return value;
}
inline bool CommandReplaceTextArchive::has_oldcell() const {
  return _internal_has_oldcell();
}
inline const ::TST::Cell& CommandReplaceTextArchive::_internal_oldcell() const {
  const ::TST::Cell* p = _impl_.oldcell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandReplaceTextArchive::oldcell() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTextArchive.oldcell)
  return _internal_oldcell();
}
inline void CommandReplaceTextArchive::unsafe_arena_set_allocated_oldcell(
    ::TST::Cell* oldcell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldcell_);
  }
  _impl_.oldcell_ = oldcell;
  if (oldcell) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTextArchive.oldcell)
}
inline ::TST::Cell* CommandReplaceTextArchive::release_oldcell() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = _impl_.oldcell_;
  _impl_.oldcell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandReplaceTextArchive::unsafe_arena_release_oldcell() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTextArchive.oldcell)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = _impl_.oldcell_;
  _impl_.oldcell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandReplaceTextArchive::_internal_mutable_oldcell() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.oldcell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.oldcell_ = p;
  }
  return _impl_.oldcell_;
}
inline ::TST::Cell* CommandReplaceTextArchive::mutable_oldcell() {
  ::TST::Cell* _msg = _internal_mutable_oldcell();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTextArchive.oldcell)
  return _msg;
}
inline void CommandReplaceTextArchive::set_allocated_oldcell(::TST::Cell* oldcell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldcell_);
  }
  if (oldcell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldcell));
    if (message_arena != submessage_arena) {
      oldcell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldcell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.oldcell_ = oldcell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTextArchive.oldcell)
}

// required .TST.TableCommandArchive super = 4;
inline bool CommandReplaceTextArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandReplaceTextArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandReplaceTextArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::TableCommandArchive& CommandReplaceTextArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandReplaceTextArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTextArchive.super)
  return _internal_super();
}
inline void CommandReplaceTextArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTextArchive.super)
}
inline ::TST::TableCommandArchive* CommandReplaceTextArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandReplaceTextArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTextArchive.super)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandReplaceTextArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandReplaceTextArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTextArchive.super)
  return _msg;
}
inline void CommandReplaceTextArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTextArchive.super)
}

// optional .TSP.Reference child_command_undo = 5;
inline bool CommandReplaceTextArchive::_internal_has_child_command_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_command_undo_ != nullptr);
  return value;
}
inline bool CommandReplaceTextArchive::has_child_command_undo() const {
  return _internal_has_child_command_undo();
}
inline const ::TSP::Reference& CommandReplaceTextArchive::_internal_child_command_undo() const {
  const ::TSP::Reference* p = _impl_.child_command_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceTextArchive::child_command_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceTextArchive.child_command_undo)
  return _internal_child_command_undo();
}
inline void CommandReplaceTextArchive::unsafe_arena_set_allocated_child_command_undo(
    ::TSP::Reference* child_command_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_command_undo_);
  }
  _impl_.child_command_undo_ = child_command_undo;
  if (child_command_undo) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceTextArchive.child_command_undo)
}
inline ::TSP::Reference* CommandReplaceTextArchive::release_child_command_undo() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.child_command_undo_;
  _impl_.child_command_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceTextArchive::unsafe_arena_release_child_command_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceTextArchive.child_command_undo)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.child_command_undo_;
  _impl_.child_command_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceTextArchive::_internal_mutable_child_command_undo() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.child_command_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.child_command_undo_ = p;
  }
  return _impl_.child_command_undo_;
}
inline ::TSP::Reference* CommandReplaceTextArchive::mutable_child_command_undo() {
  ::TSP::Reference* _msg = _internal_mutable_child_command_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceTextArchive.child_command_undo)
  return _msg;
}
inline void CommandReplaceTextArchive::set_allocated_child_command_undo(::TSP::Reference* child_command_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_command_undo_);
  }
  if (child_command_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_command_undo));
    if (message_arena != submessage_arena) {
      child_command_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child_command_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.child_command_undo_ = child_command_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceTextArchive.child_command_undo)
}

// -------------------------------------------------------------------

// CommandReplaceAllTextArchive

// required .TSP.Reference tableInfo = 1;
inline bool CommandReplaceAllTextArchive::_internal_has_tableinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tableinfo_ != nullptr);
  return value;
}
inline bool CommandReplaceAllTextArchive::has_tableinfo() const {
  return _internal_has_tableinfo();
}
inline const ::TSP::Reference& CommandReplaceAllTextArchive::_internal_tableinfo() const {
  const ::TSP::Reference* p = _impl_.tableinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandReplaceAllTextArchive::tableinfo() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceAllTextArchive.tableInfo)
  return _internal_tableinfo();
}
inline void CommandReplaceAllTextArchive::unsafe_arena_set_allocated_tableinfo(
    ::TSP::Reference* tableinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tableinfo_);
  }
  _impl_.tableinfo_ = tableinfo;
  if (tableinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceAllTextArchive.tableInfo)
}
inline ::TSP::Reference* CommandReplaceAllTextArchive::release_tableinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.tableinfo_;
  _impl_.tableinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandReplaceAllTextArchive::unsafe_arena_release_tableinfo() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceAllTextArchive.tableInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.tableinfo_;
  _impl_.tableinfo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandReplaceAllTextArchive::_internal_mutable_tableinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tableinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.tableinfo_ = p;
  }
  return _impl_.tableinfo_;
}
inline ::TSP::Reference* CommandReplaceAllTextArchive::mutable_tableinfo() {
  ::TSP::Reference* _msg = _internal_mutable_tableinfo();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceAllTextArchive.tableInfo)
  return _msg;
}
inline void CommandReplaceAllTextArchive::set_allocated_tableinfo(::TSP::Reference* tableinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tableinfo_);
  }
  if (tableinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tableinfo));
    if (message_arena != submessage_arena) {
      tableinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tableinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tableinfo_ = tableinfo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceAllTextArchive.tableInfo)
}

// required .TST.CellMapArchive undo_cell_map = 2;
inline bool CommandReplaceAllTextArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandReplaceAllTextArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandReplaceAllTextArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandReplaceAllTextArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceAllTextArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandReplaceAllTextArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceAllTextArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceAllTextArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceAllTextArchive.undo_cell_map)
  return _msg;
}
inline void CommandReplaceAllTextArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceAllTextArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 3;
inline bool CommandReplaceAllTextArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandReplaceAllTextArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandReplaceAllTextArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandReplaceAllTextArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandReplaceAllTextArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandReplaceAllTextArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandReplaceAllTextArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandReplaceAllTextArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandReplaceAllTextArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandReplaceAllTextArchive.redo_cell_map)
  return _msg;
}
inline void CommandReplaceAllTextArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandReplaceAllTextArchive.redo_cell_map)
}

// -------------------------------------------------------------------

// CommandSetRepeatingHeaderEnabledArchive

// required bool repeating_header_enabled = 1;
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_has_repeating_header_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::has_repeating_header_enabled() const {
  return _internal_has_repeating_header_enabled();
}
inline void CommandSetRepeatingHeaderEnabledArchive::clear_repeating_header_enabled() {
  _impl_.repeating_header_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_repeating_header_enabled() const {
  return _impl_.repeating_header_enabled_;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::repeating_header_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRepeatingHeaderEnabledArchive.repeating_header_enabled)
  return _internal_repeating_header_enabled();
}
inline void CommandSetRepeatingHeaderEnabledArchive::_internal_set_repeating_header_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.repeating_header_enabled_ = value;
}
inline void CommandSetRepeatingHeaderEnabledArchive::set_repeating_header_enabled(bool value) {
  _internal_set_repeating_header_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRepeatingHeaderEnabledArchive.repeating_header_enabled)
}

// required .TST.CommandDirectionArchive direction = 2;
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandSetRepeatingHeaderEnabledArchive::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TST::CommandDirectionArchive CommandSetRepeatingHeaderEnabledArchive::_internal_direction() const {
  return static_cast< ::TST::CommandDirectionArchive >(_impl_.direction_);
}
inline ::TST::CommandDirectionArchive CommandSetRepeatingHeaderEnabledArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRepeatingHeaderEnabledArchive.direction)
  return _internal_direction();
}
inline void CommandSetRepeatingHeaderEnabledArchive::_internal_set_direction(::TST::CommandDirectionArchive value) {
  assert(::TST::CommandDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.direction_ = value;
}
inline void CommandSetRepeatingHeaderEnabledArchive::set_direction(::TST::CommandDirectionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetRepeatingHeaderEnabledArchive.direction)
}

// required .TST.TableCommandArchive super = 3;
inline bool CommandSetRepeatingHeaderEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetRepeatingHeaderEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetRepeatingHeaderEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetRepeatingHeaderEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetRepeatingHeaderEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetRepeatingHeaderEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetRepeatingHeaderEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetRepeatingHeaderEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetRepeatingHeaderEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetRepeatingHeaderEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetRepeatingHeaderEnabledArchive.super)
  return _msg;
}
inline void CommandSetRepeatingHeaderEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetRepeatingHeaderEnabledArchive.super)
}

// -------------------------------------------------------------------

// CommandSetFiltersEnabledArchive

// required bool enable_filters = 1;
inline bool CommandSetFiltersEnabledArchive::_internal_has_enable_filters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFiltersEnabledArchive::has_enable_filters() const {
  return _internal_has_enable_filters();
}
inline void CommandSetFiltersEnabledArchive::clear_enable_filters() {
  _impl_.enable_filters_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetFiltersEnabledArchive::_internal_enable_filters() const {
  return _impl_.enable_filters_;
}
inline bool CommandSetFiltersEnabledArchive::enable_filters() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFiltersEnabledArchive.enable_filters)
  return _internal_enable_filters();
}
inline void CommandSetFiltersEnabledArchive::_internal_set_enable_filters(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enable_filters_ = value;
}
inline void CommandSetFiltersEnabledArchive::set_enable_filters(bool value) {
  _internal_set_enable_filters(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFiltersEnabledArchive.enable_filters)
}

// required .TST.TableCommandArchive super = 2;
inline bool CommandSetFiltersEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFiltersEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFiltersEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetFiltersEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetFiltersEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFiltersEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetFiltersEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFiltersEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFiltersEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetFiltersEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFiltersEnabledArchive.super)
  return _msg;
}
inline void CommandSetFiltersEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFiltersEnabledArchive.super)
}

// -------------------------------------------------------------------

// CommandAddQuickFilterRulesArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandAddQuickFilterRulesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandAddQuickFilterRulesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAddQuickFilterRulesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandAddQuickFilterRulesArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandAddQuickFilterRulesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandAddQuickFilterRulesArchive.super)
  return _internal_super();
}
inline void CommandAddQuickFilterRulesArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandAddQuickFilterRulesArchive.super)
}
inline ::TST::TableCommandArchive* CommandAddQuickFilterRulesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandAddQuickFilterRulesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandAddQuickFilterRulesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandAddQuickFilterRulesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandAddQuickFilterRulesArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandAddQuickFilterRulesArchive.super)
  return _msg;
}
inline void CommandAddQuickFilterRulesArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandAddQuickFilterRulesArchive.super)
}

// repeated .TST.FilterRuleArchive rules = 2;
inline int CommandAddQuickFilterRulesArchive::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int CommandAddQuickFilterRulesArchive::rules_size() const {
  return _internal_rules_size();
}
inline ::TST::FilterRuleArchive* CommandAddQuickFilterRulesArchive::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandAddQuickFilterRulesArchive.rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >*
CommandAddQuickFilterRulesArchive::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandAddQuickFilterRulesArchive.rules)
  return &_impl_.rules_;
}
inline const ::TST::FilterRuleArchive& CommandAddQuickFilterRulesArchive::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::TST::FilterRuleArchive& CommandAddQuickFilterRulesArchive::rules(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandAddQuickFilterRulesArchive.rules)
  return _internal_rules(index);
}
inline ::TST::FilterRuleArchive* CommandAddQuickFilterRulesArchive::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::TST::FilterRuleArchive* CommandAddQuickFilterRulesArchive::add_rules() {
  ::TST::FilterRuleArchive* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:TST.CommandAddQuickFilterRulesArchive.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >&
CommandAddQuickFilterRulesArchive::rules() const {
  // @@protoc_insertion_point(field_list:TST.CommandAddQuickFilterRulesArchive.rules)
  return _impl_.rules_;
}

// required uint32 filter_index = 3;
inline bool CommandAddQuickFilterRulesArchive::_internal_has_filter_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandAddQuickFilterRulesArchive::has_filter_index() const {
  return _internal_has_filter_index();
}
inline void CommandAddQuickFilterRulesArchive::clear_filter_index() {
  _impl_.filter_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandAddQuickFilterRulesArchive::_internal_filter_index() const {
  return _impl_.filter_index_;
}
inline uint32_t CommandAddQuickFilterRulesArchive::filter_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandAddQuickFilterRulesArchive.filter_index)
  return _internal_filter_index();
}
inline void CommandAddQuickFilterRulesArchive::_internal_set_filter_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filter_index_ = value;
}
inline void CommandAddQuickFilterRulesArchive::set_filter_index(uint32_t value) {
  _internal_set_filter_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandAddQuickFilterRulesArchive.filter_index)
}

// repeated uint32 rule_indices = 4;
inline int CommandAddQuickFilterRulesArchive::_internal_rule_indices_size() const {
  return _impl_.rule_indices_.size();
}
inline int CommandAddQuickFilterRulesArchive::rule_indices_size() const {
  return _internal_rule_indices_size();
}
inline void CommandAddQuickFilterRulesArchive::clear_rule_indices() {
  _impl_.rule_indices_.Clear();
}
inline uint32_t CommandAddQuickFilterRulesArchive::_internal_rule_indices(int index) const {
  return _impl_.rule_indices_.Get(index);
}
inline uint32_t CommandAddQuickFilterRulesArchive::rule_indices(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandAddQuickFilterRulesArchive.rule_indices)
  return _internal_rule_indices(index);
}
inline void CommandAddQuickFilterRulesArchive::set_rule_indices(int index, uint32_t value) {
  _impl_.rule_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandAddQuickFilterRulesArchive.rule_indices)
}
inline void CommandAddQuickFilterRulesArchive::_internal_add_rule_indices(uint32_t value) {
  _impl_.rule_indices_.Add(value);
}
inline void CommandAddQuickFilterRulesArchive::add_rule_indices(uint32_t value) {
  _internal_add_rule_indices(value);
  // @@protoc_insertion_point(field_add:TST.CommandAddQuickFilterRulesArchive.rule_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandAddQuickFilterRulesArchive::_internal_rule_indices() const {
  return _impl_.rule_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandAddQuickFilterRulesArchive::rule_indices() const {
  // @@protoc_insertion_point(field_list:TST.CommandAddQuickFilterRulesArchive.rule_indices)
  return _internal_rule_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandAddQuickFilterRulesArchive::_internal_mutable_rule_indices() {
  return &_impl_.rule_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandAddQuickFilterRulesArchive::mutable_rule_indices() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandAddQuickFilterRulesArchive.rule_indices)
  return _internal_mutable_rule_indices();
}

// required bool filter_set_enabled = 5;
inline bool CommandAddQuickFilterRulesArchive::_internal_has_filter_set_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandAddQuickFilterRulesArchive::has_filter_set_enabled() const {
  return _internal_has_filter_set_enabled();
}
inline void CommandAddQuickFilterRulesArchive::clear_filter_set_enabled() {
  _impl_.filter_set_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandAddQuickFilterRulesArchive::_internal_filter_set_enabled() const {
  return _impl_.filter_set_enabled_;
}
inline bool CommandAddQuickFilterRulesArchive::filter_set_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandAddQuickFilterRulesArchive.filter_set_enabled)
  return _internal_filter_set_enabled();
}
inline void CommandAddQuickFilterRulesArchive::_internal_set_filter_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.filter_set_enabled_ = value;
}
inline void CommandAddQuickFilterRulesArchive::set_filter_set_enabled(bool value) {
  _internal_set_filter_set_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandAddQuickFilterRulesArchive.filter_set_enabled)
}

// -------------------------------------------------------------------

// CommandDeleteFilterRulesArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandDeleteFilterRulesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDeleteFilterRulesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDeleteFilterRulesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandDeleteFilterRulesArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandDeleteFilterRulesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteFilterRulesArchive.super)
  return _internal_super();
}
inline void CommandDeleteFilterRulesArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDeleteFilterRulesArchive.super)
}
inline ::TST::TableCommandArchive* CommandDeleteFilterRulesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteFilterRulesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandDeleteFilterRulesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandDeleteFilterRulesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandDeleteFilterRulesArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteFilterRulesArchive.super)
  return _msg;
}
inline void CommandDeleteFilterRulesArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDeleteFilterRulesArchive.super)
}

// repeated .TST.FilterRuleArchive undo_rules = 2;
inline int CommandDeleteFilterRulesArchive::_internal_undo_rules_size() const {
  return _impl_.undo_rules_.size();
}
inline int CommandDeleteFilterRulesArchive::undo_rules_size() const {
  return _internal_undo_rules_size();
}
inline ::TST::FilterRuleArchive* CommandDeleteFilterRulesArchive::mutable_undo_rules(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandDeleteFilterRulesArchive.undo_rules)
  return _impl_.undo_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >*
CommandDeleteFilterRulesArchive::mutable_undo_rules() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandDeleteFilterRulesArchive.undo_rules)
  return &_impl_.undo_rules_;
}
inline const ::TST::FilterRuleArchive& CommandDeleteFilterRulesArchive::_internal_undo_rules(int index) const {
  return _impl_.undo_rules_.Get(index);
}
inline const ::TST::FilterRuleArchive& CommandDeleteFilterRulesArchive::undo_rules(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteFilterRulesArchive.undo_rules)
  return _internal_undo_rules(index);
}
inline ::TST::FilterRuleArchive* CommandDeleteFilterRulesArchive::_internal_add_undo_rules() {
  return _impl_.undo_rules_.Add();
}
inline ::TST::FilterRuleArchive* CommandDeleteFilterRulesArchive::add_undo_rules() {
  ::TST::FilterRuleArchive* _add = _internal_add_undo_rules();
  // @@protoc_insertion_point(field_add:TST.CommandDeleteFilterRulesArchive.undo_rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >&
CommandDeleteFilterRulesArchive::undo_rules() const {
  // @@protoc_insertion_point(field_list:TST.CommandDeleteFilterRulesArchive.undo_rules)
  return _impl_.undo_rules_;
}

// repeated uint32 rule_indices = 3;
inline int CommandDeleteFilterRulesArchive::_internal_rule_indices_size() const {
  return _impl_.rule_indices_.size();
}
inline int CommandDeleteFilterRulesArchive::rule_indices_size() const {
  return _internal_rule_indices_size();
}
inline void CommandDeleteFilterRulesArchive::clear_rule_indices() {
  _impl_.rule_indices_.Clear();
}
inline uint32_t CommandDeleteFilterRulesArchive::_internal_rule_indices(int index) const {
  return _impl_.rule_indices_.Get(index);
}
inline uint32_t CommandDeleteFilterRulesArchive::rule_indices(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteFilterRulesArchive.rule_indices)
  return _internal_rule_indices(index);
}
inline void CommandDeleteFilterRulesArchive::set_rule_indices(int index, uint32_t value) {
  _impl_.rule_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteFilterRulesArchive.rule_indices)
}
inline void CommandDeleteFilterRulesArchive::_internal_add_rule_indices(uint32_t value) {
  _impl_.rule_indices_.Add(value);
}
inline void CommandDeleteFilterRulesArchive::add_rule_indices(uint32_t value) {
  _internal_add_rule_indices(value);
  // @@protoc_insertion_point(field_add:TST.CommandDeleteFilterRulesArchive.rule_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandDeleteFilterRulesArchive::_internal_rule_indices() const {
  return _impl_.rule_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandDeleteFilterRulesArchive::rule_indices() const {
  // @@protoc_insertion_point(field_list:TST.CommandDeleteFilterRulesArchive.rule_indices)
  return _internal_rule_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandDeleteFilterRulesArchive::_internal_mutable_rule_indices() {
  return &_impl_.rule_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandDeleteFilterRulesArchive::mutable_rule_indices() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandDeleteFilterRulesArchive.rule_indices)
  return _internal_mutable_rule_indices();
}

// required bool filter_removed = 4;
inline bool CommandDeleteFilterRulesArchive::_internal_has_filter_removed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandDeleteFilterRulesArchive::has_filter_removed() const {
  return _internal_has_filter_removed();
}
inline void CommandDeleteFilterRulesArchive::clear_filter_removed() {
  _impl_.filter_removed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandDeleteFilterRulesArchive::_internal_filter_removed() const {
  return _impl_.filter_removed_;
}
inline bool CommandDeleteFilterRulesArchive::filter_removed() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteFilterRulesArchive.filter_removed)
  return _internal_filter_removed();
}
inline void CommandDeleteFilterRulesArchive::_internal_set_filter_removed(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.filter_removed_ = value;
}
inline void CommandDeleteFilterRulesArchive::set_filter_removed(bool value) {
  _internal_set_filter_removed(value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteFilterRulesArchive.filter_removed)
}

// required uint32 filter_index = 5;
inline bool CommandDeleteFilterRulesArchive::_internal_has_filter_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandDeleteFilterRulesArchive::has_filter_index() const {
  return _internal_has_filter_index();
}
inline void CommandDeleteFilterRulesArchive::clear_filter_index() {
  _impl_.filter_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandDeleteFilterRulesArchive::_internal_filter_index() const {
  return _impl_.filter_index_;
}
inline uint32_t CommandDeleteFilterRulesArchive::filter_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteFilterRulesArchive.filter_index)
  return _internal_filter_index();
}
inline void CommandDeleteFilterRulesArchive::_internal_set_filter_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filter_index_ = value;
}
inline void CommandDeleteFilterRulesArchive::set_filter_index(uint32_t value) {
  _internal_set_filter_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteFilterRulesArchive.filter_index)
}

// required bool filter_set_enabled = 6;
inline bool CommandDeleteFilterRulesArchive::_internal_has_filter_set_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandDeleteFilterRulesArchive::has_filter_set_enabled() const {
  return _internal_has_filter_set_enabled();
}
inline void CommandDeleteFilterRulesArchive::clear_filter_set_enabled() {
  _impl_.filter_set_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandDeleteFilterRulesArchive::_internal_filter_set_enabled() const {
  return _impl_.filter_set_enabled_;
}
inline bool CommandDeleteFilterRulesArchive::filter_set_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandDeleteFilterRulesArchive.filter_set_enabled)
  return _internal_filter_set_enabled();
}
inline void CommandDeleteFilterRulesArchive::_internal_set_filter_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.filter_set_enabled_ = value;
}
inline void CommandDeleteFilterRulesArchive::set_filter_set_enabled(bool value) {
  _internal_set_filter_set_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandDeleteFilterRulesArchive.filter_set_enabled)
}

// -------------------------------------------------------------------

// CommandModifyFilterRuleArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandModifyFilterRuleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandModifyFilterRuleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandModifyFilterRuleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandModifyFilterRuleArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandModifyFilterRuleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandModifyFilterRuleArchive.super)
  return _internal_super();
}
inline void CommandModifyFilterRuleArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandModifyFilterRuleArchive.super)
}
inline ::TST::TableCommandArchive* CommandModifyFilterRuleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandModifyFilterRuleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandModifyFilterRuleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandModifyFilterRuleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandModifyFilterRuleArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandModifyFilterRuleArchive.super)
  return _msg;
}
inline void CommandModifyFilterRuleArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandModifyFilterRuleArchive.super)
}

// required .TST.FilterRuleArchive undo_rule = 2;
inline bool CommandModifyFilterRuleArchive::_internal_has_undo_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_rule_ != nullptr);
  return value;
}
inline bool CommandModifyFilterRuleArchive::has_undo_rule() const {
  return _internal_has_undo_rule();
}
inline const ::TST::FilterRuleArchive& CommandModifyFilterRuleArchive::_internal_undo_rule() const {
  const ::TST::FilterRuleArchive* p = _impl_.undo_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FilterRuleArchive&>(
      ::TST::_FilterRuleArchive_default_instance_);
}
inline const ::TST::FilterRuleArchive& CommandModifyFilterRuleArchive::undo_rule() const {
  // @@protoc_insertion_point(field_get:TST.CommandModifyFilterRuleArchive.undo_rule)
  return _internal_undo_rule();
}
inline void CommandModifyFilterRuleArchive::unsafe_arena_set_allocated_undo_rule(
    ::TST::FilterRuleArchive* undo_rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_rule_);
  }
  _impl_.undo_rule_ = undo_rule;
  if (undo_rule) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandModifyFilterRuleArchive.undo_rule)
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::release_undo_rule() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FilterRuleArchive* temp = _impl_.undo_rule_;
  _impl_.undo_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::unsafe_arena_release_undo_rule() {
  // @@protoc_insertion_point(field_release:TST.CommandModifyFilterRuleArchive.undo_rule)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::FilterRuleArchive* temp = _impl_.undo_rule_;
  _impl_.undo_rule_ = nullptr;
  return temp;
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::_internal_mutable_undo_rule() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FilterRuleArchive>(GetArenaForAllocation());
    _impl_.undo_rule_ = p;
  }
  return _impl_.undo_rule_;
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::mutable_undo_rule() {
  ::TST::FilterRuleArchive* _msg = _internal_mutable_undo_rule();
  // @@protoc_insertion_point(field_mutable:TST.CommandModifyFilterRuleArchive.undo_rule)
  return _msg;
}
inline void CommandModifyFilterRuleArchive::set_allocated_undo_rule(::TST::FilterRuleArchive* undo_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_rule_);
  }
  if (undo_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_rule));
    if (message_arena != submessage_arena) {
      undo_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_rule_ = undo_rule;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandModifyFilterRuleArchive.undo_rule)
}

// required .TST.FilterRuleArchive redo_rule = 3;
inline bool CommandModifyFilterRuleArchive::_internal_has_redo_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_rule_ != nullptr);
  return value;
}
inline bool CommandModifyFilterRuleArchive::has_redo_rule() const {
  return _internal_has_redo_rule();
}
inline const ::TST::FilterRuleArchive& CommandModifyFilterRuleArchive::_internal_redo_rule() const {
  const ::TST::FilterRuleArchive* p = _impl_.redo_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FilterRuleArchive&>(
      ::TST::_FilterRuleArchive_default_instance_);
}
inline const ::TST::FilterRuleArchive& CommandModifyFilterRuleArchive::redo_rule() const {
  // @@protoc_insertion_point(field_get:TST.CommandModifyFilterRuleArchive.redo_rule)
  return _internal_redo_rule();
}
inline void CommandModifyFilterRuleArchive::unsafe_arena_set_allocated_redo_rule(
    ::TST::FilterRuleArchive* redo_rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_rule_);
  }
  _impl_.redo_rule_ = redo_rule;
  if (redo_rule) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandModifyFilterRuleArchive.redo_rule)
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::release_redo_rule() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::FilterRuleArchive* temp = _impl_.redo_rule_;
  _impl_.redo_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::unsafe_arena_release_redo_rule() {
  // @@protoc_insertion_point(field_release:TST.CommandModifyFilterRuleArchive.redo_rule)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::FilterRuleArchive* temp = _impl_.redo_rule_;
  _impl_.redo_rule_ = nullptr;
  return temp;
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::_internal_mutable_redo_rule() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FilterRuleArchive>(GetArenaForAllocation());
    _impl_.redo_rule_ = p;
  }
  return _impl_.redo_rule_;
}
inline ::TST::FilterRuleArchive* CommandModifyFilterRuleArchive::mutable_redo_rule() {
  ::TST::FilterRuleArchive* _msg = _internal_mutable_redo_rule();
  // @@protoc_insertion_point(field_mutable:TST.CommandModifyFilterRuleArchive.redo_rule)
  return _msg;
}
inline void CommandModifyFilterRuleArchive::set_allocated_redo_rule(::TST::FilterRuleArchive* redo_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_rule_);
  }
  if (redo_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_rule));
    if (message_arena != submessage_arena) {
      redo_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_rule_ = redo_rule;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandModifyFilterRuleArchive.redo_rule)
}

// required uint32 rule_index = 4;
inline bool CommandModifyFilterRuleArchive::_internal_has_rule_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandModifyFilterRuleArchive::has_rule_index() const {
  return _internal_has_rule_index();
}
inline void CommandModifyFilterRuleArchive::clear_rule_index() {
  _impl_.rule_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CommandModifyFilterRuleArchive::_internal_rule_index() const {
  return _impl_.rule_index_;
}
inline uint32_t CommandModifyFilterRuleArchive::rule_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandModifyFilterRuleArchive.rule_index)
  return _internal_rule_index();
}
inline void CommandModifyFilterRuleArchive::_internal_set_rule_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rule_index_ = value;
}
inline void CommandModifyFilterRuleArchive::set_rule_index(uint32_t value) {
  _internal_set_rule_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandModifyFilterRuleArchive.rule_index)
}

// required uint32 filter_index = 5;
inline bool CommandModifyFilterRuleArchive::_internal_has_filter_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandModifyFilterRuleArchive::has_filter_index() const {
  return _internal_has_filter_index();
}
inline void CommandModifyFilterRuleArchive::clear_filter_index() {
  _impl_.filter_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandModifyFilterRuleArchive::_internal_filter_index() const {
  return _impl_.filter_index_;
}
inline uint32_t CommandModifyFilterRuleArchive::filter_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandModifyFilterRuleArchive.filter_index)
  return _internal_filter_index();
}
inline void CommandModifyFilterRuleArchive::_internal_set_filter_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.filter_index_ = value;
}
inline void CommandModifyFilterRuleArchive::set_filter_index(uint32_t value) {
  _internal_set_filter_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandModifyFilterRuleArchive.filter_index)
}

// -------------------------------------------------------------------

// CommandApplyStrokePresetArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyStrokePresetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyStrokePresetArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyStrokePresetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyStrokePresetArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyStrokePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyStrokePresetArchive.super)
  return _internal_super();
}
inline void CommandApplyStrokePresetArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyStrokePresetArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyStrokePresetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyStrokePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyStrokePresetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyStrokePresetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyStrokePresetArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyStrokePresetArchive.super)
  return _msg;
}
inline void CommandApplyStrokePresetArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyStrokePresetArchive.super)
}

// required .TST.CellMapArchive undo_cell_map = 2;
inline bool CommandApplyStrokePresetArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyStrokePresetArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyStrokePresetArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyStrokePresetArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyStrokePresetArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandApplyStrokePresetArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyStrokePresetArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyStrokePresetArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyStrokePresetArchive.undo_cell_map)
  return _msg;
}
inline void CommandApplyStrokePresetArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyStrokePresetArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandApplyStrokePresetArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyStrokePresetArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyStrokePresetArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyStrokePresetArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyStrokePresetArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandApplyStrokePresetArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyStrokePresetArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyStrokePresetArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyStrokePresetArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyStrokePresetArchive.redo_cell_map)
  return _msg;
}
inline void CommandApplyStrokePresetArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyStrokePresetArchive.redo_cell_map)
}

// required .TST.SelectionArchive selection = 3;
inline bool CommandApplyStrokePresetArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandApplyStrokePresetArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandApplyStrokePresetArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandApplyStrokePresetArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyStrokePresetArchive.selection)
  return _internal_selection();
}
inline void CommandApplyStrokePresetArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyStrokePresetArchive.selection)
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyStrokePresetArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyStrokePresetArchive.selection)
  return _msg;
}
inline void CommandApplyStrokePresetArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyStrokePresetArchive.selection)
}

// optional .TST.SelectionArchive expanded_selection = 6;
inline bool CommandApplyStrokePresetArchive::_internal_has_expanded_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expanded_selection_ != nullptr);
  return value;
}
inline bool CommandApplyStrokePresetArchive::has_expanded_selection() const {
  return _internal_has_expanded_selection();
}
inline const ::TST::SelectionArchive& CommandApplyStrokePresetArchive::_internal_expanded_selection() const {
  const ::TST::SelectionArchive* p = _impl_.expanded_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandApplyStrokePresetArchive::expanded_selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyStrokePresetArchive.expanded_selection)
  return _internal_expanded_selection();
}
inline void CommandApplyStrokePresetArchive::unsafe_arena_set_allocated_expanded_selection(
    ::TST::SelectionArchive* expanded_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expanded_selection_);
  }
  _impl_.expanded_selection_ = expanded_selection;
  if (expanded_selection) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyStrokePresetArchive.expanded_selection)
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::release_expanded_selection() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::SelectionArchive* temp = _impl_.expanded_selection_;
  _impl_.expanded_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::unsafe_arena_release_expanded_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyStrokePresetArchive.expanded_selection)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::SelectionArchive* temp = _impl_.expanded_selection_;
  _impl_.expanded_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::_internal_mutable_expanded_selection() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.expanded_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.expanded_selection_ = p;
  }
  return _impl_.expanded_selection_;
}
inline ::TST::SelectionArchive* CommandApplyStrokePresetArchive::mutable_expanded_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_expanded_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyStrokePresetArchive.expanded_selection)
  return _msg;
}
inline void CommandApplyStrokePresetArchive::set_allocated_expanded_selection(::TST::SelectionArchive* expanded_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expanded_selection_);
  }
  if (expanded_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expanded_selection));
    if (message_arena != submessage_arena) {
      expanded_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expanded_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.expanded_selection_ = expanded_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyStrokePresetArchive.expanded_selection)
}

// required int32 preset_index = 5;
inline bool CommandApplyStrokePresetArchive::_internal_has_preset_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandApplyStrokePresetArchive::has_preset_index() const {
  return _internal_has_preset_index();
}
inline void CommandApplyStrokePresetArchive::clear_preset_index() {
  _impl_.preset_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CommandApplyStrokePresetArchive::_internal_preset_index() const {
  return _impl_.preset_index_;
}
inline int32_t CommandApplyStrokePresetArchive::preset_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyStrokePresetArchive.preset_index)
  return _internal_preset_index();
}
inline void CommandApplyStrokePresetArchive::_internal_set_preset_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.preset_index_ = value;
}
inline void CommandApplyStrokePresetArchive::set_preset_index(int32_t value) {
  _internal_set_preset_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyStrokePresetArchive.preset_index)
}

// -------------------------------------------------------------------

// CommandApplyTableStylePresetArchive_StyleIndexTuple

// required uint32 index = 1;
inline bool CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandApplyTableStylePresetArchive_StyleIndexTuple::has_index() const {
  return _internal_has_index();
}
inline void CommandApplyTableStylePresetArchive_StyleIndexTuple::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CommandApplyTableStylePresetArchive_StyleIndexTuple::index() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.index)
  return _internal_index();
}
inline void CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void CommandApplyTableStylePresetArchive_StyleIndexTuple::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.index)
}

// optional .TSP.Reference cell_style = 5;
inline bool CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_has_cell_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_style_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive_StyleIndexTuple::has_cell_style() const {
  return _internal_has_cell_style();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_cell_style() const {
  const ::TSP::Reference* p = _impl_.cell_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive_StyleIndexTuple::cell_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.cell_style)
  return _internal_cell_style();
}
inline void CommandApplyTableStylePresetArchive_StyleIndexTuple::unsafe_arena_set_allocated_cell_style(
    ::TSP::Reference* cell_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_style_);
  }
  _impl_.cell_style_ = cell_style;
  if (cell_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.cell_style)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::release_cell_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.cell_style_;
  _impl_.cell_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::unsafe_arena_release_cell_style() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.cell_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.cell_style_;
  _impl_.cell_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_mutable_cell_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cell_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.cell_style_ = p;
  }
  return _impl_.cell_style_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::mutable_cell_style() {
  ::TSP::Reference* _msg = _internal_mutable_cell_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.cell_style)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive_StyleIndexTuple::set_allocated_cell_style(::TSP::Reference* cell_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_style_);
  }
  if (cell_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style));
    if (message_arena != submessage_arena) {
      cell_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cell_style_ = cell_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.cell_style)
}

// optional .TSP.Reference text_style = 6;
inline bool CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_has_text_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_style_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive_StyleIndexTuple::has_text_style() const {
  return _internal_has_text_style();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_text_style() const {
  const ::TSP::Reference* p = _impl_.text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive_StyleIndexTuple::text_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.text_style)
  return _internal_text_style();
}
inline void CommandApplyTableStylePresetArchive_StyleIndexTuple::unsafe_arena_set_allocated_text_style(
    ::TSP::Reference* text_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_style_);
  }
  _impl_.text_style_ = text_style;
  if (text_style) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.text_style)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::release_text_style() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.text_style_;
  _impl_.text_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::unsafe_arena_release_text_style() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.text_style)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.text_style_;
  _impl_.text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::_internal_mutable_text_style() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.text_style_ = p;
  }
  return _impl_.text_style_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive_StyleIndexTuple::mutable_text_style() {
  ::TSP::Reference* _msg = _internal_mutable_text_style();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.text_style)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive_StyleIndexTuple::set_allocated_text_style(::TSP::Reference* text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_style_);
  }
  if (text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style));
    if (message_arena != submessage_arena) {
      text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.text_style_ = text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.StyleIndexTuple.text_style)
}

// -------------------------------------------------------------------

// CommandApplyTableStylePresetArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyTableStylePresetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyTableStylePresetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyTableStylePresetArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyTableStylePresetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.super)
  return _internal_super();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyTableStylePresetArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.super)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.super)
}

// required .TST.CellMapArchive undo_cell_map = 2;
inline bool CommandApplyTableStylePresetArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyTableStylePresetArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyTableStylePresetArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.undo_cell_map)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandApplyTableStylePresetArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyTableStylePresetArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyTableStylePresetArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyTableStylePresetArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.redo_cell_map)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.redo_cell_map)
}

// required int32 preset_index = 5;
inline bool CommandApplyTableStylePresetArchive::_internal_has_preset_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_preset_index() const {
  return _internal_has_preset_index();
}
inline void CommandApplyTableStylePresetArchive::clear_preset_index() {
  _impl_.preset_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t CommandApplyTableStylePresetArchive::_internal_preset_index() const {
  return _impl_.preset_index_;
}
inline int32_t CommandApplyTableStylePresetArchive::preset_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.preset_index)
  return _internal_preset_index();
}
inline void CommandApplyTableStylePresetArchive::_internal_set_preset_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.preset_index_ = value;
}
inline void CommandApplyTableStylePresetArchive::set_preset_index(int32_t value) {
  _internal_set_preset_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyTableStylePresetArchive.preset_index)
}

// required .TST.TableStyleNetworkArchive old_table_styles = 7;
inline bool CommandApplyTableStylePresetArchive::_internal_has_old_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_table_styles_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_old_table_styles() const {
  return _internal_has_old_table_styles();
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyTableStylePresetArchive::_internal_old_table_styles() const {
  const ::TST::TableStyleNetworkArchive* p = _impl_.old_table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableStyleNetworkArchive&>(
      ::TST::_TableStyleNetworkArchive_default_instance_);
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyTableStylePresetArchive::old_table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.old_table_styles)
  return _internal_old_table_styles();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_old_table_styles(
    ::TST::TableStyleNetworkArchive* old_table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_table_styles_);
  }
  _impl_.old_table_styles_ = old_table_styles;
  if (old_table_styles) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.old_table_styles)
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::release_old_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.old_table_styles_;
  _impl_.old_table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::unsafe_arena_release_old_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.old_table_styles)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.old_table_styles_;
  _impl_.old_table_styles_ = nullptr;
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::_internal_mutable_old_table_styles() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableStyleNetworkArchive>(GetArenaForAllocation());
    _impl_.old_table_styles_ = p;
  }
  return _impl_.old_table_styles_;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::mutable_old_table_styles() {
  ::TST::TableStyleNetworkArchive* _msg = _internal_mutable_old_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.old_table_styles)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_old_table_styles(::TST::TableStyleNetworkArchive* old_table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_table_styles_);
  }
  if (old_table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_table_styles));
    if (message_arena != submessage_arena) {
      old_table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_table_styles_ = old_table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.old_table_styles)
}

// required .TST.TableStyleNetworkArchive new_table_styles = 8;
inline bool CommandApplyTableStylePresetArchive::_internal_has_new_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_table_styles_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_new_table_styles() const {
  return _internal_has_new_table_styles();
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyTableStylePresetArchive::_internal_new_table_styles() const {
  const ::TST::TableStyleNetworkArchive* p = _impl_.new_table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableStyleNetworkArchive&>(
      ::TST::_TableStyleNetworkArchive_default_instance_);
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyTableStylePresetArchive::new_table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.new_table_styles)
  return _internal_new_table_styles();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_new_table_styles(
    ::TST::TableStyleNetworkArchive* new_table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_table_styles_);
  }
  _impl_.new_table_styles_ = new_table_styles;
  if (new_table_styles) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.new_table_styles)
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::release_new_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.new_table_styles_;
  _impl_.new_table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::unsafe_arena_release_new_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.new_table_styles)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.new_table_styles_;
  _impl_.new_table_styles_ = nullptr;
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::_internal_mutable_new_table_styles() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableStyleNetworkArchive>(GetArenaForAllocation());
    _impl_.new_table_styles_ = p;
  }
  return _impl_.new_table_styles_;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyTableStylePresetArchive::mutable_new_table_styles() {
  ::TST::TableStyleNetworkArchive* _msg = _internal_mutable_new_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.new_table_styles)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_new_table_styles(::TST::TableStyleNetworkArchive* new_table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_table_styles_);
  }
  if (new_table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_table_styles));
    if (message_arena != submessage_arena) {
      new_table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_table_styles_ = new_table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.new_table_styles)
}

// optional bool apply_clears_all = 10;
inline bool CommandApplyTableStylePresetArchive::_internal_has_apply_clears_all() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_apply_clears_all() const {
  return _internal_has_apply_clears_all();
}
inline void CommandApplyTableStylePresetArchive::clear_apply_clears_all() {
  _impl_.apply_clears_all_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CommandApplyTableStylePresetArchive::_internal_apply_clears_all() const {
  return _impl_.apply_clears_all_;
}
inline bool CommandApplyTableStylePresetArchive::apply_clears_all() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.apply_clears_all)
  return _internal_apply_clears_all();
}
inline void CommandApplyTableStylePresetArchive::_internal_set_apply_clears_all(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.apply_clears_all_ = value;
}
inline void CommandApplyTableStylePresetArchive::set_apply_clears_all(bool value) {
  _internal_set_apply_clears_all(value);
  // @@protoc_insertion_point(field_set:TST.CommandApplyTableStylePresetArchive.apply_clears_all)
}

// optional .TSP.Reference font_size_command = 11;
inline bool CommandApplyTableStylePresetArchive::_internal_has_font_size_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.font_size_command_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_font_size_command() const {
  return _internal_has_font_size_command();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_font_size_command() const {
  const ::TSP::Reference* p = _impl_.font_size_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::font_size_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.font_size_command)
  return _internal_font_size_command();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_font_size_command(
    ::TSP::Reference* font_size_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.font_size_command_);
  }
  _impl_.font_size_command_ = font_size_command;
  if (font_size_command) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.font_size_command)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_font_size_command() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.font_size_command_;
  _impl_.font_size_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_font_size_command() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.font_size_command)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.font_size_command_;
  _impl_.font_size_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_font_size_command() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.font_size_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.font_size_command_ = p;
  }
  return _impl_.font_size_command_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_font_size_command() {
  ::TSP::Reference* _msg = _internal_mutable_font_size_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.font_size_command)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_font_size_command(::TSP::Reference* font_size_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.font_size_command_);
  }
  if (font_size_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_size_command));
    if (message_arena != submessage_arena) {
      font_size_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font_size_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.font_size_command_ = font_size_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.font_size_command)
}

// optional .TSP.Reference set_style_apply_clears_all_flag_command = 12;
inline bool CommandApplyTableStylePresetArchive::_internal_has_set_style_apply_clears_all_flag_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.set_style_apply_clears_all_flag_command_ != nullptr);
  return value;
}
inline bool CommandApplyTableStylePresetArchive::has_set_style_apply_clears_all_flag_command() const {
  return _internal_has_set_style_apply_clears_all_flag_command();
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::_internal_set_style_apply_clears_all_flag_command() const {
  const ::TSP::Reference* p = _impl_.set_style_apply_clears_all_flag_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyTableStylePresetArchive::set_style_apply_clears_all_flag_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.set_style_apply_clears_all_flag_command)
  return _internal_set_style_apply_clears_all_flag_command();
}
inline void CommandApplyTableStylePresetArchive::unsafe_arena_set_allocated_set_style_apply_clears_all_flag_command(
    ::TSP::Reference* set_style_apply_clears_all_flag_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_style_apply_clears_all_flag_command_);
  }
  _impl_.set_style_apply_clears_all_flag_command_ = set_style_apply_clears_all_flag_command;
  if (set_style_apply_clears_all_flag_command) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyTableStylePresetArchive.set_style_apply_clears_all_flag_command)
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::release_set_style_apply_clears_all_flag_command() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.set_style_apply_clears_all_flag_command_;
  _impl_.set_style_apply_clears_all_flag_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::unsafe_arena_release_set_style_apply_clears_all_flag_command() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyTableStylePresetArchive.set_style_apply_clears_all_flag_command)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.set_style_apply_clears_all_flag_command_;
  _impl_.set_style_apply_clears_all_flag_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::_internal_mutable_set_style_apply_clears_all_flag_command() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.set_style_apply_clears_all_flag_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.set_style_apply_clears_all_flag_command_ = p;
  }
  return _impl_.set_style_apply_clears_all_flag_command_;
}
inline ::TSP::Reference* CommandApplyTableStylePresetArchive::mutable_set_style_apply_clears_all_flag_command() {
  ::TSP::Reference* _msg = _internal_mutable_set_style_apply_clears_all_flag_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.set_style_apply_clears_all_flag_command)
  return _msg;
}
inline void CommandApplyTableStylePresetArchive::set_allocated_set_style_apply_clears_all_flag_command(::TSP::Reference* set_style_apply_clears_all_flag_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.set_style_apply_clears_all_flag_command_);
  }
  if (set_style_apply_clears_all_flag_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_style_apply_clears_all_flag_command));
    if (message_arena != submessage_arena) {
      set_style_apply_clears_all_flag_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_style_apply_clears_all_flag_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.set_style_apply_clears_all_flag_command_ = set_style_apply_clears_all_flag_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyTableStylePresetArchive.set_style_apply_clears_all_flag_command)
}

// repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple row_style_index_tuples = 13;
inline int CommandApplyTableStylePresetArchive::_internal_row_style_index_tuples_size() const {
  return _impl_.row_style_index_tuples_.size();
}
inline int CommandApplyTableStylePresetArchive::row_style_index_tuples_size() const {
  return _internal_row_style_index_tuples_size();
}
inline void CommandApplyTableStylePresetArchive::clear_row_style_index_tuples() {
  _impl_.row_style_index_tuples_.Clear();
}
inline ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive::mutable_row_style_index_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.row_style_index_tuples)
  return _impl_.row_style_index_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >*
CommandApplyTableStylePresetArchive::mutable_row_style_index_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyTableStylePresetArchive.row_style_index_tuples)
  return &_impl_.row_style_index_tuples_;
}
inline const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& CommandApplyTableStylePresetArchive::_internal_row_style_index_tuples(int index) const {
  return _impl_.row_style_index_tuples_.Get(index);
}
inline const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& CommandApplyTableStylePresetArchive::row_style_index_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.row_style_index_tuples)
  return _internal_row_style_index_tuples(index);
}
inline ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive::_internal_add_row_style_index_tuples() {
  return _impl_.row_style_index_tuples_.Add();
}
inline ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive::add_row_style_index_tuples() {
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* _add = _internal_add_row_style_index_tuples();
  // @@protoc_insertion_point(field_add:TST.CommandApplyTableStylePresetArchive.row_style_index_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >&
CommandApplyTableStylePresetArchive::row_style_index_tuples() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyTableStylePresetArchive.row_style_index_tuples)
  return _impl_.row_style_index_tuples_;
}

// repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple col_style_index_tuples = 14;
inline int CommandApplyTableStylePresetArchive::_internal_col_style_index_tuples_size() const {
  return _impl_.col_style_index_tuples_.size();
}
inline int CommandApplyTableStylePresetArchive::col_style_index_tuples_size() const {
  return _internal_col_style_index_tuples_size();
}
inline void CommandApplyTableStylePresetArchive::clear_col_style_index_tuples() {
  _impl_.col_style_index_tuples_.Clear();
}
inline ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive::mutable_col_style_index_tuples(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyTableStylePresetArchive.col_style_index_tuples)
  return _impl_.col_style_index_tuples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >*
CommandApplyTableStylePresetArchive::mutable_col_style_index_tuples() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandApplyTableStylePresetArchive.col_style_index_tuples)
  return &_impl_.col_style_index_tuples_;
}
inline const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& CommandApplyTableStylePresetArchive::_internal_col_style_index_tuples(int index) const {
  return _impl_.col_style_index_tuples_.Get(index);
}
inline const ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple& CommandApplyTableStylePresetArchive::col_style_index_tuples(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyTableStylePresetArchive.col_style_index_tuples)
  return _internal_col_style_index_tuples(index);
}
inline ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive::_internal_add_col_style_index_tuples() {
  return _impl_.col_style_index_tuples_.Add();
}
inline ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive::add_col_style_index_tuples() {
  ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple* _add = _internal_add_col_style_index_tuples();
  // @@protoc_insertion_point(field_add:TST.CommandApplyTableStylePresetArchive.col_style_index_tuples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CommandApplyTableStylePresetArchive_StyleIndexTuple >&
CommandApplyTableStylePresetArchive::col_style_index_tuples() const {
  // @@protoc_insertion_point(field_list:TST.CommandApplyTableStylePresetArchive.col_style_index_tuples)
  return _impl_.col_style_index_tuples_;
}

// -------------------------------------------------------------------

// CommandSetStyleApplyClearsAllFlagArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetStyleApplyClearsAllFlagArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetStyleApplyClearsAllFlagArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetStyleApplyClearsAllFlagArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetStyleApplyClearsAllFlagArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetStyleApplyClearsAllFlagArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStyleApplyClearsAllFlagArchive.super)
  return _internal_super();
}
inline void CommandSetStyleApplyClearsAllFlagArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStyleApplyClearsAllFlagArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetStyleApplyClearsAllFlagArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetStyleApplyClearsAllFlagArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStyleApplyClearsAllFlagArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetStyleApplyClearsAllFlagArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetStyleApplyClearsAllFlagArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStyleApplyClearsAllFlagArchive.super)
  return _msg;
}
inline void CommandSetStyleApplyClearsAllFlagArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStyleApplyClearsAllFlagArchive.super)
}

// required bool apply_clears_all = 2;
inline bool CommandSetStyleApplyClearsAllFlagArchive::_internal_has_apply_clears_all() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetStyleApplyClearsAllFlagArchive::has_apply_clears_all() const {
  return _internal_has_apply_clears_all();
}
inline void CommandSetStyleApplyClearsAllFlagArchive::clear_apply_clears_all() {
  _impl_.apply_clears_all_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetStyleApplyClearsAllFlagArchive::_internal_apply_clears_all() const {
  return _impl_.apply_clears_all_;
}
inline bool CommandSetStyleApplyClearsAllFlagArchive::apply_clears_all() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStyleApplyClearsAllFlagArchive.apply_clears_all)
  return _internal_apply_clears_all();
}
inline void CommandSetStyleApplyClearsAllFlagArchive::_internal_set_apply_clears_all(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.apply_clears_all_ = value;
}
inline void CommandSetStyleApplyClearsAllFlagArchive::set_apply_clears_all(bool value) {
  _internal_set_apply_clears_all(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetStyleApplyClearsAllFlagArchive.apply_clears_all)
}

// -------------------------------------------------------------------

// CommandApplyThemeToTableArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyThemeToTableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyThemeToTableArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyThemeToTableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyThemeToTableArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyThemeToTableArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyThemeToTableArchive.super)
  return _internal_super();
}
inline void CommandApplyThemeToTableArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyThemeToTableArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyThemeToTableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyThemeToTableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyThemeToTableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyThemeToTableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyThemeToTableArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyThemeToTableArchive.super)
  return _msg;
}
inline void CommandApplyThemeToTableArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyThemeToTableArchive.super)
}

// required .TST.CellMapArchive undo_cell_map = 2;
inline bool CommandApplyThemeToTableArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyThemeToTableArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyThemeToTableArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyThemeToTableArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyThemeToTableArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandApplyThemeToTableArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyThemeToTableArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyThemeToTableArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyThemeToTableArchive.undo_cell_map)
  return _msg;
}
inline void CommandApplyThemeToTableArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyThemeToTableArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandApplyThemeToTableArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyThemeToTableArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyThemeToTableArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyThemeToTableArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyThemeToTableArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandApplyThemeToTableArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyThemeToTableArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyThemeToTableArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyThemeToTableArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyThemeToTableArchive.redo_cell_map)
  return _msg;
}
inline void CommandApplyThemeToTableArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyThemeToTableArchive.redo_cell_map)
}

// required .TST.TableStyleNetworkArchive old_table_styles = 7;
inline bool CommandApplyThemeToTableArchive::_internal_has_old_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_table_styles_ != nullptr);
  return value;
}
inline bool CommandApplyThemeToTableArchive::has_old_table_styles() const {
  return _internal_has_old_table_styles();
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyThemeToTableArchive::_internal_old_table_styles() const {
  const ::TST::TableStyleNetworkArchive* p = _impl_.old_table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableStyleNetworkArchive&>(
      ::TST::_TableStyleNetworkArchive_default_instance_);
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyThemeToTableArchive::old_table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyThemeToTableArchive.old_table_styles)
  return _internal_old_table_styles();
}
inline void CommandApplyThemeToTableArchive::unsafe_arena_set_allocated_old_table_styles(
    ::TST::TableStyleNetworkArchive* old_table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_table_styles_);
  }
  _impl_.old_table_styles_ = old_table_styles;
  if (old_table_styles) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyThemeToTableArchive.old_table_styles)
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::release_old_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.old_table_styles_;
  _impl_.old_table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::unsafe_arena_release_old_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyThemeToTableArchive.old_table_styles)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.old_table_styles_;
  _impl_.old_table_styles_ = nullptr;
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::_internal_mutable_old_table_styles() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableStyleNetworkArchive>(GetArenaForAllocation());
    _impl_.old_table_styles_ = p;
  }
  return _impl_.old_table_styles_;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::mutable_old_table_styles() {
  ::TST::TableStyleNetworkArchive* _msg = _internal_mutable_old_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyThemeToTableArchive.old_table_styles)
  return _msg;
}
inline void CommandApplyThemeToTableArchive::set_allocated_old_table_styles(::TST::TableStyleNetworkArchive* old_table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_table_styles_);
  }
  if (old_table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_table_styles));
    if (message_arena != submessage_arena) {
      old_table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_table_styles_ = old_table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyThemeToTableArchive.old_table_styles)
}

// required .TST.TableStyleNetworkArchive new_table_styles = 8;
inline bool CommandApplyThemeToTableArchive::_internal_has_new_table_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_table_styles_ != nullptr);
  return value;
}
inline bool CommandApplyThemeToTableArchive::has_new_table_styles() const {
  return _internal_has_new_table_styles();
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyThemeToTableArchive::_internal_new_table_styles() const {
  const ::TST::TableStyleNetworkArchive* p = _impl_.new_table_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableStyleNetworkArchive&>(
      ::TST::_TableStyleNetworkArchive_default_instance_);
}
inline const ::TST::TableStyleNetworkArchive& CommandApplyThemeToTableArchive::new_table_styles() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyThemeToTableArchive.new_table_styles)
  return _internal_new_table_styles();
}
inline void CommandApplyThemeToTableArchive::unsafe_arena_set_allocated_new_table_styles(
    ::TST::TableStyleNetworkArchive* new_table_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_table_styles_);
  }
  _impl_.new_table_styles_ = new_table_styles;
  if (new_table_styles) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyThemeToTableArchive.new_table_styles)
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::release_new_table_styles() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.new_table_styles_;
  _impl_.new_table_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::unsafe_arena_release_new_table_styles() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyThemeToTableArchive.new_table_styles)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.new_table_styles_;
  _impl_.new_table_styles_ = nullptr;
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::_internal_mutable_new_table_styles() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_table_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableStyleNetworkArchive>(GetArenaForAllocation());
    _impl_.new_table_styles_ = p;
  }
  return _impl_.new_table_styles_;
}
inline ::TST::TableStyleNetworkArchive* CommandApplyThemeToTableArchive::mutable_new_table_styles() {
  ::TST::TableStyleNetworkArchive* _msg = _internal_mutable_new_table_styles();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyThemeToTableArchive.new_table_styles)
  return _msg;
}
inline void CommandApplyThemeToTableArchive::set_allocated_new_table_styles(::TST::TableStyleNetworkArchive* new_table_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_table_styles_);
  }
  if (new_table_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_table_styles));
    if (message_arena != submessage_arena) {
      new_table_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_table_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_table_styles_ = new_table_styles;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyThemeToTableArchive.new_table_styles)
}

// -------------------------------------------------------------------

// CommandApplyThemeChildForTableArchive

// required .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool CommandApplyThemeChildForTableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyThemeChildForTableArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandApplyThemeChildForTableArchive::_internal_super() const {
  const ::TSS::ApplyThemeChildCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ApplyThemeChildCommandArchive&>(
      ::TSS::_ApplyThemeChildCommandArchive_default_instance_);
}
inline const ::TSS::ApplyThemeChildCommandArchive& CommandApplyThemeChildForTableArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyThemeChildForTableArchive.super)
  return _internal_super();
}
inline void CommandApplyThemeChildForTableArchive::unsafe_arena_set_allocated_super(
    ::TSS::ApplyThemeChildCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyThemeChildForTableArchive.super)
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandApplyThemeChildForTableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandApplyThemeChildForTableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyThemeChildForTableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandApplyThemeChildForTableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* CommandApplyThemeChildForTableArchive::mutable_super() {
  ::TSS::ApplyThemeChildCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyThemeChildForTableArchive.super)
  return _msg;
}
inline void CommandApplyThemeChildForTableArchive::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyThemeChildForTableArchive.super)
}

// required .TSP.Reference apply_command = 2;
inline bool CommandApplyThemeChildForTableArchive::_internal_has_apply_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.apply_command_ != nullptr);
  return value;
}
inline bool CommandApplyThemeChildForTableArchive::has_apply_command() const {
  return _internal_has_apply_command();
}
inline const ::TSP::Reference& CommandApplyThemeChildForTableArchive::_internal_apply_command() const {
  const ::TSP::Reference* p = _impl_.apply_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyThemeChildForTableArchive::apply_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyThemeChildForTableArchive.apply_command)
  return _internal_apply_command();
}
inline void CommandApplyThemeChildForTableArchive::unsafe_arena_set_allocated_apply_command(
    ::TSP::Reference* apply_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.apply_command_);
  }
  _impl_.apply_command_ = apply_command;
  if (apply_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyThemeChildForTableArchive.apply_command)
}
inline ::TSP::Reference* CommandApplyThemeChildForTableArchive::release_apply_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.apply_command_;
  _impl_.apply_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyThemeChildForTableArchive::unsafe_arena_release_apply_command() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyThemeChildForTableArchive.apply_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.apply_command_;
  _impl_.apply_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyThemeChildForTableArchive::_internal_mutable_apply_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.apply_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.apply_command_ = p;
  }
  return _impl_.apply_command_;
}
inline ::TSP::Reference* CommandApplyThemeChildForTableArchive::mutable_apply_command() {
  ::TSP::Reference* _msg = _internal_mutable_apply_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyThemeChildForTableArchive.apply_command)
  return _msg;
}
inline void CommandApplyThemeChildForTableArchive::set_allocated_apply_command(::TSP::Reference* apply_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.apply_command_);
  }
  if (apply_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apply_command));
    if (message_arena != submessage_arena) {
      apply_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.apply_command_ = apply_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyThemeChildForTableArchive.apply_command)
}

// -------------------------------------------------------------------

// CommandToggleTextPropertyArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandToggleTextPropertyArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandToggleTextPropertyArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandToggleTextPropertyArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandToggleTextPropertyArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.super)
  return _internal_super();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.super)
}
inline ::TST::TableCommandArchive* CommandToggleTextPropertyArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandToggleTextPropertyArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandToggleTextPropertyArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandToggleTextPropertyArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.super)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.super)
}

// required .TST.SelectionArchive selection = 2;
inline bool CommandToggleTextPropertyArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandToggleTextPropertyArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandToggleTextPropertyArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.selection)
  return _internal_selection();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.selection)
}
inline ::TST::SelectionArchive* CommandToggleTextPropertyArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandToggleTextPropertyArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandToggleTextPropertyArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandToggleTextPropertyArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.selection)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.selection)
}

// required uint32 property = 3;
inline bool CommandToggleTextPropertyArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_property() const {
  return _internal_has_property();
}
inline void CommandToggleTextPropertyArchive::clear_property() {
  _impl_.property_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CommandToggleTextPropertyArchive::_internal_property() const {
  return _impl_.property_;
}
inline uint32_t CommandToggleTextPropertyArchive::property() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.property)
  return _internal_property();
}
inline void CommandToggleTextPropertyArchive::_internal_set_property(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.property_ = value;
}
inline void CommandToggleTextPropertyArchive::set_property(uint32_t value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:TST.CommandToggleTextPropertyArchive.property)
}

// required .TST.CellMapArchive undo_cell_map = 4;
inline bool CommandToggleTextPropertyArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandToggleTextPropertyArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandToggleTextPropertyArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.undo_cell_map)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 5;
inline bool CommandToggleTextPropertyArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandToggleTextPropertyArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandToggleTextPropertyArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandToggleTextPropertyArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.redo_cell_map)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.redo_cell_map)
}

// required .TST.Cell default_body_cell = 6;
inline bool CommandToggleTextPropertyArchive::_internal_has_default_body_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_body_cell_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_default_body_cell() const {
  return _internal_has_default_body_cell();
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::_internal_default_body_cell() const {
  const ::TST::Cell* p = _impl_.default_body_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::default_body_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.default_body_cell)
  return _internal_default_body_cell();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_default_body_cell(
    ::TST::Cell* default_body_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_body_cell_);
  }
  _impl_.default_body_cell_ = default_body_cell;
  if (default_body_cell) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.default_body_cell)
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::release_default_body_cell() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::Cell* temp = _impl_.default_body_cell_;
  _impl_.default_body_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::unsafe_arena_release_default_body_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.default_body_cell)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::Cell* temp = _impl_.default_body_cell_;
  _impl_.default_body_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::_internal_mutable_default_body_cell() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.default_body_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.default_body_cell_ = p;
  }
  return _impl_.default_body_cell_;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::mutable_default_body_cell() {
  ::TST::Cell* _msg = _internal_mutable_default_body_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.default_body_cell)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_default_body_cell(::TST::Cell* default_body_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_body_cell_);
  }
  if (default_body_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_body_cell));
    if (message_arena != submessage_arena) {
      default_body_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_body_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.default_body_cell_ = default_body_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.default_body_cell)
}

// required .TST.Cell default_hr_cell = 7;
inline bool CommandToggleTextPropertyArchive::_internal_has_default_hr_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_hr_cell_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_default_hr_cell() const {
  return _internal_has_default_hr_cell();
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::_internal_default_hr_cell() const {
  const ::TST::Cell* p = _impl_.default_hr_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::default_hr_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.default_hr_cell)
  return _internal_default_hr_cell();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_default_hr_cell(
    ::TST::Cell* default_hr_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_hr_cell_);
  }
  _impl_.default_hr_cell_ = default_hr_cell;
  if (default_hr_cell) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.default_hr_cell)
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::release_default_hr_cell() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::Cell* temp = _impl_.default_hr_cell_;
  _impl_.default_hr_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::unsafe_arena_release_default_hr_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.default_hr_cell)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TST::Cell* temp = _impl_.default_hr_cell_;
  _impl_.default_hr_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::_internal_mutable_default_hr_cell() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.default_hr_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.default_hr_cell_ = p;
  }
  return _impl_.default_hr_cell_;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::mutable_default_hr_cell() {
  ::TST::Cell* _msg = _internal_mutable_default_hr_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.default_hr_cell)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_default_hr_cell(::TST::Cell* default_hr_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_hr_cell_);
  }
  if (default_hr_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_hr_cell));
    if (message_arena != submessage_arena) {
      default_hr_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_hr_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.default_hr_cell_ = default_hr_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.default_hr_cell)
}

// required .TST.Cell default_hc_cell = 8;
inline bool CommandToggleTextPropertyArchive::_internal_has_default_hc_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_hc_cell_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_default_hc_cell() const {
  return _internal_has_default_hc_cell();
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::_internal_default_hc_cell() const {
  const ::TST::Cell* p = _impl_.default_hc_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::default_hc_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.default_hc_cell)
  return _internal_default_hc_cell();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_default_hc_cell(
    ::TST::Cell* default_hc_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_hc_cell_);
  }
  _impl_.default_hc_cell_ = default_hc_cell;
  if (default_hc_cell) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.default_hc_cell)
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::release_default_hc_cell() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::Cell* temp = _impl_.default_hc_cell_;
  _impl_.default_hc_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::unsafe_arena_release_default_hc_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.default_hc_cell)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TST::Cell* temp = _impl_.default_hc_cell_;
  _impl_.default_hc_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::_internal_mutable_default_hc_cell() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.default_hc_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.default_hc_cell_ = p;
  }
  return _impl_.default_hc_cell_;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::mutable_default_hc_cell() {
  ::TST::Cell* _msg = _internal_mutable_default_hc_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.default_hc_cell)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_default_hc_cell(::TST::Cell* default_hc_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_hc_cell_);
  }
  if (default_hc_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_hc_cell));
    if (message_arena != submessage_arena) {
      default_hc_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_hc_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.default_hc_cell_ = default_hc_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.default_hc_cell)
}

// required .TST.Cell default_fr_cell = 9;
inline bool CommandToggleTextPropertyArchive::_internal_has_default_fr_cell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_fr_cell_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_default_fr_cell() const {
  return _internal_has_default_fr_cell();
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::_internal_default_fr_cell() const {
  const ::TST::Cell* p = _impl_.default_fr_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CommandToggleTextPropertyArchive::default_fr_cell() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.default_fr_cell)
  return _internal_default_fr_cell();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_default_fr_cell(
    ::TST::Cell* default_fr_cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_fr_cell_);
  }
  _impl_.default_fr_cell_ = default_fr_cell;
  if (default_fr_cell) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.default_fr_cell)
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::release_default_fr_cell() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::Cell* temp = _impl_.default_fr_cell_;
  _impl_.default_fr_cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::unsafe_arena_release_default_fr_cell() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.default_fr_cell)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TST::Cell* temp = _impl_.default_fr_cell_;
  _impl_.default_fr_cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::_internal_mutable_default_fr_cell() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.default_fr_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArenaForAllocation());
    _impl_.default_fr_cell_ = p;
  }
  return _impl_.default_fr_cell_;
}
inline ::TST::Cell* CommandToggleTextPropertyArchive::mutable_default_fr_cell() {
  ::TST::Cell* _msg = _internal_mutable_default_fr_cell();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.default_fr_cell)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_default_fr_cell(::TST::Cell* default_fr_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_fr_cell_);
  }
  if (default_fr_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_fr_cell));
    if (message_arena != submessage_arena) {
      default_fr_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_fr_cell, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.default_fr_cell_ = default_fr_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.default_fr_cell)
}

// optional .TSP.Reference text_undo = 10;
inline bool CommandToggleTextPropertyArchive::_internal_has_text_undo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.text_undo_ != nullptr);
  return value;
}
inline bool CommandToggleTextPropertyArchive::has_text_undo() const {
  return _internal_has_text_undo();
}
inline const ::TSP::Reference& CommandToggleTextPropertyArchive::_internal_text_undo() const {
  const ::TSP::Reference* p = _impl_.text_undo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandToggleTextPropertyArchive::text_undo() const {
  // @@protoc_insertion_point(field_get:TST.CommandToggleTextPropertyArchive.text_undo)
  return _internal_text_undo();
}
inline void CommandToggleTextPropertyArchive::unsafe_arena_set_allocated_text_undo(
    ::TSP::Reference* text_undo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  _impl_.text_undo_ = text_undo;
  if (text_undo) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandToggleTextPropertyArchive.text_undo)
}
inline ::TSP::Reference* CommandToggleTextPropertyArchive::release_text_undo() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandToggleTextPropertyArchive::unsafe_arena_release_text_undo() {
  // @@protoc_insertion_point(field_release:TST.CommandToggleTextPropertyArchive.text_undo)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.text_undo_;
  _impl_.text_undo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandToggleTextPropertyArchive::_internal_mutable_text_undo() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.text_undo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.text_undo_ = p;
  }
  return _impl_.text_undo_;
}
inline ::TSP::Reference* CommandToggleTextPropertyArchive::mutable_text_undo() {
  ::TSP::Reference* _msg = _internal_mutable_text_undo();
  // @@protoc_insertion_point(field_mutable:TST.CommandToggleTextPropertyArchive.text_undo)
  return _msg;
}
inline void CommandToggleTextPropertyArchive::set_allocated_text_undo(::TSP::Reference* text_undo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_undo_);
  }
  if (text_undo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_undo));
    if (message_arena != submessage_arena) {
      text_undo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_undo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.text_undo_ = text_undo;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandToggleTextPropertyArchive.text_undo)
}

// -------------------------------------------------------------------

// CommandResetFillPropertyToDefault

// required .TST.TableCommandArchive super = 1;
inline bool CommandResetFillPropertyToDefault::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandResetFillPropertyToDefault::has_super() const {
  return _internal_has_super();
}
inline void CommandResetFillPropertyToDefault::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandResetFillPropertyToDefault::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandResetFillPropertyToDefault::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandResetFillPropertyToDefault.super)
  return _internal_super();
}
inline void CommandResetFillPropertyToDefault::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResetFillPropertyToDefault.super)
}
inline ::TST::TableCommandArchive* CommandResetFillPropertyToDefault::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandResetFillPropertyToDefault::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandResetFillPropertyToDefault.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandResetFillPropertyToDefault::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandResetFillPropertyToDefault::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandResetFillPropertyToDefault.super)
  return _msg;
}
inline void CommandResetFillPropertyToDefault::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResetFillPropertyToDefault.super)
}

// required .TST.SelectionArchive selection = 2;
inline bool CommandResetFillPropertyToDefault::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandResetFillPropertyToDefault::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandResetFillPropertyToDefault::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandResetFillPropertyToDefault::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandResetFillPropertyToDefault.selection)
  return _internal_selection();
}
inline void CommandResetFillPropertyToDefault::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResetFillPropertyToDefault.selection)
}
inline ::TST::SelectionArchive* CommandResetFillPropertyToDefault::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandResetFillPropertyToDefault::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandResetFillPropertyToDefault.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandResetFillPropertyToDefault::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandResetFillPropertyToDefault::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandResetFillPropertyToDefault.selection)
  return _msg;
}
inline void CommandResetFillPropertyToDefault::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResetFillPropertyToDefault.selection)
}

// required .TST.CellMapArchive undo_cell_map = 4;
inline bool CommandResetFillPropertyToDefault::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandResetFillPropertyToDefault::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandResetFillPropertyToDefault::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandResetFillPropertyToDefault::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandResetFillPropertyToDefault.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandResetFillPropertyToDefault::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResetFillPropertyToDefault.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandResetFillPropertyToDefault.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandResetFillPropertyToDefault.undo_cell_map)
  return _msg;
}
inline void CommandResetFillPropertyToDefault::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResetFillPropertyToDefault.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 5;
inline bool CommandResetFillPropertyToDefault::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandResetFillPropertyToDefault::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandResetFillPropertyToDefault::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandResetFillPropertyToDefault::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandResetFillPropertyToDefault.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandResetFillPropertyToDefault::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandResetFillPropertyToDefault.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandResetFillPropertyToDefault.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandResetFillPropertyToDefault::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandResetFillPropertyToDefault.redo_cell_map)
  return _msg;
}
inline void CommandResetFillPropertyToDefault::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandResetFillPropertyToDefault.redo_cell_map)
}

// -------------------------------------------------------------------

// CommandSetSingleNumberFormatParameterArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetSingleNumberFormatParameterArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetSingleNumberFormatParameterArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetSingleNumberFormatParameterArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetSingleNumberFormatParameterArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetSingleNumberFormatParameterArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetSingleNumberFormatParameterArchive.super)
  return _internal_super();
}
inline void CommandSetSingleNumberFormatParameterArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetSingleNumberFormatParameterArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetSingleNumberFormatParameterArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetSingleNumberFormatParameterArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetSingleNumberFormatParameterArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetSingleNumberFormatParameterArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetSingleNumberFormatParameterArchive.super)
  return _msg;
}
inline void CommandSetSingleNumberFormatParameterArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.super)
}

// required .TST.SelectionArchive selection = 2;
inline bool CommandSetSingleNumberFormatParameterArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetSingleNumberFormatParameterArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetSingleNumberFormatParameterArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetSingleNumberFormatParameterArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetSingleNumberFormatParameterArchive.selection)
  return _internal_selection();
}
inline void CommandSetSingleNumberFormatParameterArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetSingleNumberFormatParameterArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetSingleNumberFormatParameterArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetSingleNumberFormatParameterArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetSingleNumberFormatParameterArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetSingleNumberFormatParameterArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetSingleNumberFormatParameterArchive.selection)
  return _msg;
}
inline void CommandSetSingleNumberFormatParameterArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.selection)
}

// required .TST.CellMapArchive undo_cell_map = 3;
inline bool CommandSetSingleNumberFormatParameterArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetSingleNumberFormatParameterArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetSingleNumberFormatParameterArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetSingleNumberFormatParameterArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetSingleNumberFormatParameterArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandSetSingleNumberFormatParameterArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetSingleNumberFormatParameterArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetSingleNumberFormatParameterArchive.undo_cell_map)
  return _msg;
}
inline void CommandSetSingleNumberFormatParameterArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandSetSingleNumberFormatParameterArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetSingleNumberFormatParameterArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetSingleNumberFormatParameterArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetSingleNumberFormatParameterArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetSingleNumberFormatParameterArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandSetSingleNumberFormatParameterArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetSingleNumberFormatParameterArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetSingleNumberFormatParameterArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetSingleNumberFormatParameterArchive.redo_cell_map)
  return _msg;
}
inline void CommandSetSingleNumberFormatParameterArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetSingleNumberFormatParameterArchive.redo_cell_map)
}

// -------------------------------------------------------------------

// CommandSetBaseArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetBaseArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetBaseArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetBaseArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetBaseArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetBaseArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseArchive.super)
  return _internal_super();
}
inline void CommandSetBaseArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetBaseArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetBaseArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetBaseArchive.super)
  return _msg;
}
inline void CommandSetBaseArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetBaseArchive.super)
}

// required uint32 base = 2;
inline bool CommandSetBaseArchive::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetBaseArchive::has_base() const {
  return _internal_has_base();
}
inline void CommandSetBaseArchive::clear_base() {
  _impl_.base_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetBaseArchive::_internal_base() const {
  return _impl_.base_;
}
inline uint32_t CommandSetBaseArchive::base() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseArchive.base)
  return _internal_base();
}
inline void CommandSetBaseArchive::_internal_set_base(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_ = value;
}
inline void CommandSetBaseArchive::set_base(uint32_t value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetBaseArchive.base)
}

// -------------------------------------------------------------------

// CommandSetBasePlacesArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetBasePlacesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetBasePlacesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetBasePlacesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetBasePlacesArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetBasePlacesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBasePlacesArchive.super)
  return _internal_super();
}
inline void CommandSetBasePlacesArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetBasePlacesArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBasePlacesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBasePlacesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetBasePlacesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBasePlacesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBasePlacesArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetBasePlacesArchive.super)
  return _msg;
}
inline void CommandSetBasePlacesArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetBasePlacesArchive.super)
}

// required uint32 base_places = 2;
inline bool CommandSetBasePlacesArchive::_internal_has_base_places() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetBasePlacesArchive::has_base_places() const {
  return _internal_has_base_places();
}
inline void CommandSetBasePlacesArchive::clear_base_places() {
  _impl_.base_places_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetBasePlacesArchive::_internal_base_places() const {
  return _impl_.base_places_;
}
inline uint32_t CommandSetBasePlacesArchive::base_places() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBasePlacesArchive.base_places)
  return _internal_base_places();
}
inline void CommandSetBasePlacesArchive::_internal_set_base_places(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_places_ = value;
}
inline void CommandSetBasePlacesArchive::set_base_places(uint32_t value) {
  _internal_set_base_places(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetBasePlacesArchive.base_places)
}

// -------------------------------------------------------------------

// CommandSetBaseUseMinusSignArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetBaseUseMinusSignArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetBaseUseMinusSignArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetBaseUseMinusSignArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetBaseUseMinusSignArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetBaseUseMinusSignArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseUseMinusSignArchive.super)
  return _internal_super();
}
inline void CommandSetBaseUseMinusSignArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetBaseUseMinusSignArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseUseMinusSignArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseUseMinusSignArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetBaseUseMinusSignArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseUseMinusSignArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetBaseUseMinusSignArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetBaseUseMinusSignArchive.super)
  return _msg;
}
inline void CommandSetBaseUseMinusSignArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetBaseUseMinusSignArchive.super)
}

// required bool base_use_minus_sign = 2;
inline bool CommandSetBaseUseMinusSignArchive::_internal_has_base_use_minus_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetBaseUseMinusSignArchive::has_base_use_minus_sign() const {
  return _internal_has_base_use_minus_sign();
}
inline void CommandSetBaseUseMinusSignArchive::clear_base_use_minus_sign() {
  _impl_.base_use_minus_sign_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetBaseUseMinusSignArchive::_internal_base_use_minus_sign() const {
  return _impl_.base_use_minus_sign_;
}
inline bool CommandSetBaseUseMinusSignArchive::base_use_minus_sign() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetBaseUseMinusSignArchive.base_use_minus_sign)
  return _internal_base_use_minus_sign();
}
inline void CommandSetBaseUseMinusSignArchive::_internal_set_base_use_minus_sign(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_use_minus_sign_ = value;
}
inline void CommandSetBaseUseMinusSignArchive::set_base_use_minus_sign(bool value) {
  _internal_set_base_use_minus_sign(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetBaseUseMinusSignArchive.base_use_minus_sign)
}

// -------------------------------------------------------------------

// CommandSetControlMinimumArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetControlMinimumArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetControlMinimumArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetControlMinimumArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetControlMinimumArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetControlMinimumArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlMinimumArchive.super)
  return _internal_super();
}
inline void CommandSetControlMinimumArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetControlMinimumArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMinimumArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMinimumArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetControlMinimumArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMinimumArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMinimumArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetControlMinimumArchive.super)
  return _msg;
}
inline void CommandSetControlMinimumArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetControlMinimumArchive.super)
}

// required double minimum = 2;
inline bool CommandSetControlMinimumArchive::_internal_has_minimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetControlMinimumArchive::has_minimum() const {
  return _internal_has_minimum();
}
inline void CommandSetControlMinimumArchive::clear_minimum() {
  _impl_.minimum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommandSetControlMinimumArchive::_internal_minimum() const {
  return _impl_.minimum_;
}
inline double CommandSetControlMinimumArchive::minimum() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlMinimumArchive.minimum)
  return _internal_minimum();
}
inline void CommandSetControlMinimumArchive::_internal_set_minimum(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.minimum_ = value;
}
inline void CommandSetControlMinimumArchive::set_minimum(double value) {
  _internal_set_minimum(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetControlMinimumArchive.minimum)
}

// required uint32 format_type = 3;
inline bool CommandSetControlMinimumArchive::_internal_has_format_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetControlMinimumArchive::has_format_type() const {
  return _internal_has_format_type();
}
inline void CommandSetControlMinimumArchive::clear_format_type() {
  _impl_.format_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetControlMinimumArchive::_internal_format_type() const {
  return _impl_.format_type_;
}
inline uint32_t CommandSetControlMinimumArchive::format_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlMinimumArchive.format_type)
  return _internal_format_type();
}
inline void CommandSetControlMinimumArchive::_internal_set_format_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_type_ = value;
}
inline void CommandSetControlMinimumArchive::set_format_type(uint32_t value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetControlMinimumArchive.format_type)
}

// -------------------------------------------------------------------

// CommandSetControlMaximumArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetControlMaximumArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetControlMaximumArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetControlMaximumArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetControlMaximumArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetControlMaximumArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlMaximumArchive.super)
  return _internal_super();
}
inline void CommandSetControlMaximumArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetControlMaximumArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMaximumArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMaximumArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetControlMaximumArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMaximumArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlMaximumArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetControlMaximumArchive.super)
  return _msg;
}
inline void CommandSetControlMaximumArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetControlMaximumArchive.super)
}

// required double maximum = 2;
inline bool CommandSetControlMaximumArchive::_internal_has_maximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetControlMaximumArchive::has_maximum() const {
  return _internal_has_maximum();
}
inline void CommandSetControlMaximumArchive::clear_maximum() {
  _impl_.maximum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommandSetControlMaximumArchive::_internal_maximum() const {
  return _impl_.maximum_;
}
inline double CommandSetControlMaximumArchive::maximum() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlMaximumArchive.maximum)
  return _internal_maximum();
}
inline void CommandSetControlMaximumArchive::_internal_set_maximum(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.maximum_ = value;
}
inline void CommandSetControlMaximumArchive::set_maximum(double value) {
  _internal_set_maximum(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetControlMaximumArchive.maximum)
}

// required uint32 format_type = 3;
inline bool CommandSetControlMaximumArchive::_internal_has_format_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetControlMaximumArchive::has_format_type() const {
  return _internal_has_format_type();
}
inline void CommandSetControlMaximumArchive::clear_format_type() {
  _impl_.format_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetControlMaximumArchive::_internal_format_type() const {
  return _impl_.format_type_;
}
inline uint32_t CommandSetControlMaximumArchive::format_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlMaximumArchive.format_type)
  return _internal_format_type();
}
inline void CommandSetControlMaximumArchive::_internal_set_format_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_type_ = value;
}
inline void CommandSetControlMaximumArchive::set_format_type(uint32_t value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetControlMaximumArchive.format_type)
}

// -------------------------------------------------------------------

// CommandSetControlIncrementArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetControlIncrementArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetControlIncrementArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetControlIncrementArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetControlIncrementArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetControlIncrementArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlIncrementArchive.super)
  return _internal_super();
}
inline void CommandSetControlIncrementArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetControlIncrementArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlIncrementArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlIncrementArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetControlIncrementArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlIncrementArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetControlIncrementArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetControlIncrementArchive.super)
  return _msg;
}
inline void CommandSetControlIncrementArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetControlIncrementArchive.super)
}

// required double increment = 2;
inline bool CommandSetControlIncrementArchive::_internal_has_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetControlIncrementArchive::has_increment() const {
  return _internal_has_increment();
}
inline void CommandSetControlIncrementArchive::clear_increment() {
  _impl_.increment_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommandSetControlIncrementArchive::_internal_increment() const {
  return _impl_.increment_;
}
inline double CommandSetControlIncrementArchive::increment() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlIncrementArchive.increment)
  return _internal_increment();
}
inline void CommandSetControlIncrementArchive::_internal_set_increment(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.increment_ = value;
}
inline void CommandSetControlIncrementArchive::set_increment(double value) {
  _internal_set_increment(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetControlIncrementArchive.increment)
}

// required uint32 format_type = 3;
inline bool CommandSetControlIncrementArchive::_internal_has_format_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetControlIncrementArchive::has_format_type() const {
  return _internal_has_format_type();
}
inline void CommandSetControlIncrementArchive::clear_format_type() {
  _impl_.format_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetControlIncrementArchive::_internal_format_type() const {
  return _impl_.format_type_;
}
inline uint32_t CommandSetControlIncrementArchive::format_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetControlIncrementArchive.format_type)
  return _internal_format_type();
}
inline void CommandSetControlIncrementArchive::_internal_set_format_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_type_ = value;
}
inline void CommandSetControlIncrementArchive::set_format_type(uint32_t value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetControlIncrementArchive.format_type)
}

// -------------------------------------------------------------------

// CommandSetCurrencyCodeArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetCurrencyCodeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetCurrencyCodeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetCurrencyCodeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetCurrencyCodeArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetCurrencyCodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCurrencyCodeArchive.super)
  return _internal_super();
}
inline void CommandSetCurrencyCodeArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetCurrencyCodeArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetCurrencyCodeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetCurrencyCodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCurrencyCodeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetCurrencyCodeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetCurrencyCodeArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCurrencyCodeArchive.super)
  return _msg;
}
inline void CommandSetCurrencyCodeArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCurrencyCodeArchive.super)
}

// required string currency_code = 2;
inline bool CommandSetCurrencyCodeArchive::_internal_has_currency_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetCurrencyCodeArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void CommandSetCurrencyCodeArchive::clear_currency_code() {
  _impl_.currency_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetCurrencyCodeArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetCurrencyCodeArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetCurrencyCodeArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.currency_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetCurrencyCodeArchive.currency_code)
}
inline std::string* CommandSetCurrencyCodeArchive::mutable_currency_code() {
  std::string* _s = _internal_mutable_currency_code();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetCurrencyCodeArchive.currency_code)
  return _s;
}
inline const std::string& CommandSetCurrencyCodeArchive::_internal_currency_code() const {
  return _impl_.currency_code_.Get();
}
inline void CommandSetCurrencyCodeArchive::_internal_set_currency_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.currency_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetCurrencyCodeArchive::_internal_mutable_currency_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.currency_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetCurrencyCodeArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TST.CommandSetCurrencyCodeArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.currency_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetCurrencyCodeArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.currency_code_.SetAllocated(currency_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_code_.IsDefault()) {
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetCurrencyCodeArchive.currency_code)
}

// -------------------------------------------------------------------

// CommandSetFractionAccuracyArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetFractionAccuracyArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFractionAccuracyArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFractionAccuracyArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetFractionAccuracyArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetFractionAccuracyArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFractionAccuracyArchive.super)
  return _internal_super();
}
inline void CommandSetFractionAccuracyArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFractionAccuracyArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetFractionAccuracyArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetFractionAccuracyArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFractionAccuracyArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetFractionAccuracyArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetFractionAccuracyArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFractionAccuracyArchive.super)
  return _msg;
}
inline void CommandSetFractionAccuracyArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFractionAccuracyArchive.super)
}

// required uint32 fraction_accuracy = 2;
inline bool CommandSetFractionAccuracyArchive::_internal_has_fraction_accuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFractionAccuracyArchive::has_fraction_accuracy() const {
  return _internal_has_fraction_accuracy();
}
inline void CommandSetFractionAccuracyArchive::clear_fraction_accuracy() {
  _impl_.fraction_accuracy_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetFractionAccuracyArchive::_internal_fraction_accuracy() const {
  return _impl_.fraction_accuracy_;
}
inline uint32_t CommandSetFractionAccuracyArchive::fraction_accuracy() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFractionAccuracyArchive.fraction_accuracy)
  return _internal_fraction_accuracy();
}
inline void CommandSetFractionAccuracyArchive::_internal_set_fraction_accuracy(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fraction_accuracy_ = value;
}
inline void CommandSetFractionAccuracyArchive::set_fraction_accuracy(uint32_t value) {
  _internal_set_fraction_accuracy(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFractionAccuracyArchive.fraction_accuracy)
}

// -------------------------------------------------------------------

// CommandSetMultipleChoiceListFormatForEditedItemArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetMultipleChoiceListFormatForEditedItemArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultipleChoiceListFormatForEditedItemArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultipleChoiceListFormatForEditedItemArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForEditedItemArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForEditedItemArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleChoiceListFormatForEditedItemArchive.super)
  return _internal_super();
}
inline void CommandSetMultipleChoiceListFormatForEditedItemArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleChoiceListFormatForEditedItemArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForEditedItemArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForEditedItemArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleChoiceListFormatForEditedItemArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForEditedItemArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForEditedItemArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleChoiceListFormatForEditedItemArchive.super)
  return _msg;
}
inline void CommandSetMultipleChoiceListFormatForEditedItemArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleChoiceListFormatForEditedItemArchive.super)
}

// -------------------------------------------------------------------

// CommandSetMultipleChoiceListFormatForDeleteItemArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetMultipleChoiceListFormatForDeleteItemArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultipleChoiceListFormatForDeleteItemArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultipleChoiceListFormatForDeleteItemArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForDeleteItemArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForDeleteItemArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive.super)
  return _internal_super();
}
inline void CommandSetMultipleChoiceListFormatForDeleteItemArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForDeleteItemArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForDeleteItemArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForDeleteItemArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForDeleteItemArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive.super)
  return _msg;
}
inline void CommandSetMultipleChoiceListFormatForDeleteItemArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleChoiceListFormatForDeleteItemArchive.super)
}

// -------------------------------------------------------------------

// CommandSetMultipleChoiceListFormatForReorderItemArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetMultipleChoiceListFormatForReorderItemArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultipleChoiceListFormatForReorderItemArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultipleChoiceListFormatForReorderItemArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForReorderItemArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForReorderItemArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleChoiceListFormatForReorderItemArchive.super)
  return _internal_super();
}
inline void CommandSetMultipleChoiceListFormatForReorderItemArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleChoiceListFormatForReorderItemArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForReorderItemArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForReorderItemArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleChoiceListFormatForReorderItemArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForReorderItemArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForReorderItemArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleChoiceListFormatForReorderItemArchive.super)
  return _msg;
}
inline void CommandSetMultipleChoiceListFormatForReorderItemArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleChoiceListFormatForReorderItemArchive.super)
}

// -------------------------------------------------------------------

// CommandSetMultipleChoiceListFormatForInitialValueArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetMultipleChoiceListFormatForInitialValueArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetMultipleChoiceListFormatForInitialValueArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetMultipleChoiceListFormatForInitialValueArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForInitialValueArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetMultipleChoiceListFormatForInitialValueArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetMultipleChoiceListFormatForInitialValueArchive.super)
  return _internal_super();
}
inline void CommandSetMultipleChoiceListFormatForInitialValueArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetMultipleChoiceListFormatForInitialValueArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForInitialValueArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForInitialValueArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetMultipleChoiceListFormatForInitialValueArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForInitialValueArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetMultipleChoiceListFormatForInitialValueArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetMultipleChoiceListFormatForInitialValueArchive.super)
  return _msg;
}
inline void CommandSetMultipleChoiceListFormatForInitialValueArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetMultipleChoiceListFormatForInitialValueArchive.super)
}

// -------------------------------------------------------------------

// CommandSetNegativeNumberStyleArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetNegativeNumberStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetNegativeNumberStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetNegativeNumberStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetNegativeNumberStyleArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetNegativeNumberStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNegativeNumberStyleArchive.super)
  return _internal_super();
}
inline void CommandSetNegativeNumberStyleArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetNegativeNumberStyleArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNegativeNumberStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNegativeNumberStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetNegativeNumberStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNegativeNumberStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNegativeNumberStyleArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetNegativeNumberStyleArchive.super)
  return _msg;
}
inline void CommandSetNegativeNumberStyleArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetNegativeNumberStyleArchive.super)
}

// required uint32 negative_number_style = 2;
inline bool CommandSetNegativeNumberStyleArchive::_internal_has_negative_number_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetNegativeNumberStyleArchive::has_negative_number_style() const {
  return _internal_has_negative_number_style();
}
inline void CommandSetNegativeNumberStyleArchive::clear_negative_number_style() {
  _impl_.negative_number_style_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetNegativeNumberStyleArchive::_internal_negative_number_style() const {
  return _impl_.negative_number_style_;
}
inline uint32_t CommandSetNegativeNumberStyleArchive::negative_number_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNegativeNumberStyleArchive.negative_number_style)
  return _internal_negative_number_style();
}
inline void CommandSetNegativeNumberStyleArchive::_internal_set_negative_number_style(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.negative_number_style_ = value;
}
inline void CommandSetNegativeNumberStyleArchive::set_negative_number_style(uint32_t value) {
  _internal_set_negative_number_style(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetNegativeNumberStyleArchive.negative_number_style)
}

// -------------------------------------------------------------------

// CommandSetExplicitFormatArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetExplicitFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetExplicitFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetExplicitFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetExplicitFormatArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetExplicitFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetExplicitFormatArchive.super)
  return _internal_super();
}
inline void CommandSetExplicitFormatArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetExplicitFormatArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetExplicitFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetExplicitFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetExplicitFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetExplicitFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetExplicitFormatArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetExplicitFormatArchive.super)
  return _msg;
}
inline void CommandSetExplicitFormatArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetExplicitFormatArchive.super)
}

// required .TST.SelectionArchive selection = 2;
inline bool CommandSetExplicitFormatArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandSetExplicitFormatArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandSetExplicitFormatArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandSetExplicitFormatArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetExplicitFormatArchive.selection)
  return _internal_selection();
}
inline void CommandSetExplicitFormatArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetExplicitFormatArchive.selection)
}
inline ::TST::SelectionArchive* CommandSetExplicitFormatArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandSetExplicitFormatArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandSetExplicitFormatArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandSetExplicitFormatArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandSetExplicitFormatArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetExplicitFormatArchive.selection)
  return _msg;
}
inline void CommandSetExplicitFormatArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetExplicitFormatArchive.selection)
}

// required .TSK.FormatStructArchive cell_format = 3;
inline bool CommandSetExplicitFormatArchive::_internal_has_cell_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_format_ != nullptr);
  return value;
}
inline bool CommandSetExplicitFormatArchive::has_cell_format() const {
  return _internal_has_cell_format();
}
inline const ::TSK::FormatStructArchive& CommandSetExplicitFormatArchive::_internal_cell_format() const {
  const ::TSK::FormatStructArchive* p = _impl_.cell_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CommandSetExplicitFormatArchive::cell_format() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetExplicitFormatArchive.cell_format)
  return _internal_cell_format();
}
inline void CommandSetExplicitFormatArchive::unsafe_arena_set_allocated_cell_format(
    ::TSK::FormatStructArchive* cell_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_format_);
  }
  _impl_.cell_format_ = cell_format;
  if (cell_format) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetExplicitFormatArchive.cell_format)
}
inline ::TSK::FormatStructArchive* CommandSetExplicitFormatArchive::release_cell_format() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = _impl_.cell_format_;
  _impl_.cell_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* CommandSetExplicitFormatArchive::unsafe_arena_release_cell_format() {
  // @@protoc_insertion_point(field_release:TST.CommandSetExplicitFormatArchive.cell_format)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = _impl_.cell_format_;
  _impl_.cell_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CommandSetExplicitFormatArchive::_internal_mutable_cell_format() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cell_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.cell_format_ = p;
  }
  return _impl_.cell_format_;
}
inline ::TSK::FormatStructArchive* CommandSetExplicitFormatArchive::mutable_cell_format() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_cell_format();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetExplicitFormatArchive.cell_format)
  return _msg;
}
inline void CommandSetExplicitFormatArchive::set_allocated_cell_format(::TSK::FormatStructArchive* cell_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_format_);
  }
  if (cell_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_format));
    if (message_arena != submessage_arena) {
      cell_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cell_format_ = cell_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetExplicitFormatArchive.cell_format)
}

// required .TST.CellMapArchive undo_cell_map = 4;
inline bool CommandSetExplicitFormatArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetExplicitFormatArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetExplicitFormatArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetExplicitFormatArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetExplicitFormatArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandSetExplicitFormatArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetExplicitFormatArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetExplicitFormatArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetExplicitFormatArchive.undo_cell_map)
  return _msg;
}
inline void CommandSetExplicitFormatArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetExplicitFormatArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 5;
inline bool CommandSetExplicitFormatArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetExplicitFormatArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetExplicitFormatArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetExplicitFormatArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetExplicitFormatArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandSetExplicitFormatArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetExplicitFormatArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetExplicitFormatArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetExplicitFormatArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetExplicitFormatArchive.redo_cell_map)
  return _msg;
}
inline void CommandSetExplicitFormatArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetExplicitFormatArchive.redo_cell_map)
}

// -------------------------------------------------------------------

// CommandSetNumberOfDecimalPlacesArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetNumberOfDecimalPlacesArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetNumberOfDecimalPlacesArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetNumberOfDecimalPlacesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetNumberOfDecimalPlacesArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetNumberOfDecimalPlacesArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfDecimalPlacesArchive.super)
  return _internal_super();
}
inline void CommandSetNumberOfDecimalPlacesArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetNumberOfDecimalPlacesArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNumberOfDecimalPlacesArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNumberOfDecimalPlacesArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetNumberOfDecimalPlacesArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNumberOfDecimalPlacesArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetNumberOfDecimalPlacesArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetNumberOfDecimalPlacesArchive.super)
  return _msg;
}
inline void CommandSetNumberOfDecimalPlacesArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetNumberOfDecimalPlacesArchive.super)
}

// required uint32 decimal_places = 2;
inline bool CommandSetNumberOfDecimalPlacesArchive::_internal_has_decimal_places() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetNumberOfDecimalPlacesArchive::has_decimal_places() const {
  return _internal_has_decimal_places();
}
inline void CommandSetNumberOfDecimalPlacesArchive::clear_decimal_places() {
  _impl_.decimal_places_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetNumberOfDecimalPlacesArchive::_internal_decimal_places() const {
  return _impl_.decimal_places_;
}
inline uint32_t CommandSetNumberOfDecimalPlacesArchive::decimal_places() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetNumberOfDecimalPlacesArchive.decimal_places)
  return _internal_decimal_places();
}
inline void CommandSetNumberOfDecimalPlacesArchive::_internal_set_decimal_places(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.decimal_places_ = value;
}
inline void CommandSetNumberOfDecimalPlacesArchive::set_decimal_places(uint32_t value) {
  _internal_set_decimal_places(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetNumberOfDecimalPlacesArchive.decimal_places)
}

// -------------------------------------------------------------------

// CommandSetDateTimeFormatArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetDateTimeFormatArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetDateTimeFormatArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetDateTimeFormatArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetDateTimeFormatArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetDateTimeFormatArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetDateTimeFormatArchive.super)
  return _internal_super();
}
inline void CommandSetDateTimeFormatArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetDateTimeFormatArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetDateTimeFormatArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetDateTimeFormatArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetDateTimeFormatArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetDateTimeFormatArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetDateTimeFormatArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetDateTimeFormatArchive.super)
  return _msg;
}
inline void CommandSetDateTimeFormatArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetDateTimeFormatArchive.super)
}

// -------------------------------------------------------------------

// CommandSetShowThousandsSeparatorArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetShowThousandsSeparatorArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetShowThousandsSeparatorArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetShowThousandsSeparatorArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetShowThousandsSeparatorArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetShowThousandsSeparatorArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetShowThousandsSeparatorArchive.super)
  return _internal_super();
}
inline void CommandSetShowThousandsSeparatorArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetShowThousandsSeparatorArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetShowThousandsSeparatorArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetShowThousandsSeparatorArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetShowThousandsSeparatorArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetShowThousandsSeparatorArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetShowThousandsSeparatorArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetShowThousandsSeparatorArchive.super)
  return _msg;
}
inline void CommandSetShowThousandsSeparatorArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetShowThousandsSeparatorArchive.super)
}

// required bool show_thousands_separator = 2;
inline bool CommandSetShowThousandsSeparatorArchive::_internal_has_show_thousands_separator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetShowThousandsSeparatorArchive::has_show_thousands_separator() const {
  return _internal_has_show_thousands_separator();
}
inline void CommandSetShowThousandsSeparatorArchive::clear_show_thousands_separator() {
  _impl_.show_thousands_separator_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetShowThousandsSeparatorArchive::_internal_show_thousands_separator() const {
  return _impl_.show_thousands_separator_;
}
inline bool CommandSetShowThousandsSeparatorArchive::show_thousands_separator() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetShowThousandsSeparatorArchive.show_thousands_separator)
  return _internal_show_thousands_separator();
}
inline void CommandSetShowThousandsSeparatorArchive::_internal_set_show_thousands_separator(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.show_thousands_separator_ = value;
}
inline void CommandSetShowThousandsSeparatorArchive::set_show_thousands_separator(bool value) {
  _internal_set_show_thousands_separator(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetShowThousandsSeparatorArchive.show_thousands_separator)
}

// -------------------------------------------------------------------

// CommandSetUseAccountingStyleArchive

// required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
inline bool CommandSetUseAccountingStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetUseAccountingStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetUseAccountingStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetUseAccountingStyleArchive::_internal_super() const {
  const ::TST::CommandSetSingleNumberFormatParameterArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CommandSetSingleNumberFormatParameterArchive&>(
      ::TST::_CommandSetSingleNumberFormatParameterArchive_default_instance_);
}
inline const ::TST::CommandSetSingleNumberFormatParameterArchive& CommandSetUseAccountingStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetUseAccountingStyleArchive.super)
  return _internal_super();
}
inline void CommandSetUseAccountingStyleArchive::unsafe_arena_set_allocated_super(
    ::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetUseAccountingStyleArchive.super)
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetUseAccountingStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetUseAccountingStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetUseAccountingStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::CommandSetSingleNumberFormatParameterArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetUseAccountingStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CommandSetSingleNumberFormatParameterArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::CommandSetSingleNumberFormatParameterArchive* CommandSetUseAccountingStyleArchive::mutable_super() {
  ::TST::CommandSetSingleNumberFormatParameterArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetUseAccountingStyleArchive.super)
  return _msg;
}
inline void CommandSetUseAccountingStyleArchive::set_allocated_super(::TST::CommandSetSingleNumberFormatParameterArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetUseAccountingStyleArchive.super)
}

// required bool use_accounting_style = 2;
inline bool CommandSetUseAccountingStyleArchive::_internal_has_use_accounting_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetUseAccountingStyleArchive::has_use_accounting_style() const {
  return _internal_has_use_accounting_style();
}
inline void CommandSetUseAccountingStyleArchive::clear_use_accounting_style() {
  _impl_.use_accounting_style_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetUseAccountingStyleArchive::_internal_use_accounting_style() const {
  return _impl_.use_accounting_style_;
}
inline bool CommandSetUseAccountingStyleArchive::use_accounting_style() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetUseAccountingStyleArchive.use_accounting_style)
  return _internal_use_accounting_style();
}
inline void CommandSetUseAccountingStyleArchive::_internal_set_use_accounting_style(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.use_accounting_style_ = value;
}
inline void CommandSetUseAccountingStyleArchive::set_use_accounting_style(bool value) {
  _internal_set_use_accounting_style(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetUseAccountingStyleArchive.use_accounting_style)
}

// -------------------------------------------------------------------

// CommandMoveRowsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMoveRowsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMoveRowsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveRowsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMoveRowsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMoveRowsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.super)
  return _internal_super();
}
inline void CommandMoveRowsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveRowsArchive.super)
}
inline ::TST::TableCommandArchive* CommandMoveRowsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveRowsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveRowsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveRowsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMoveRowsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveRowsArchive.super)
  return _msg;
}
inline void CommandMoveRowsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveRowsArchive.super)
}

// optional .TST.SelectionArchive selection = 2;
inline bool CommandMoveRowsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandMoveRowsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandMoveRowsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandMoveRowsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.selection)
  return _internal_selection();
}
inline void CommandMoveRowsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveRowsArchive.selection)
}
inline ::TST::SelectionArchive* CommandMoveRowsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandMoveRowsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveRowsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandMoveRowsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandMoveRowsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveRowsArchive.selection)
  return _msg;
}
inline void CommandMoveRowsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveRowsArchive.selection)
}

// required uint32 start_row_index = 3;
inline bool CommandMoveRowsArchive::_internal_has_start_row_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandMoveRowsArchive::has_start_row_index() const {
  return _internal_has_start_row_index();
}
inline void CommandMoveRowsArchive::clear_start_row_index() {
  _impl_.start_row_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandMoveRowsArchive::_internal_start_row_index() const {
  return _impl_.start_row_index_;
}
inline uint32_t CommandMoveRowsArchive::start_row_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.start_row_index)
  return _internal_start_row_index();
}
inline void CommandMoveRowsArchive::_internal_set_start_row_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.start_row_index_ = value;
}
inline void CommandMoveRowsArchive::set_start_row_index(uint32_t value) {
  _internal_set_start_row_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveRowsArchive.start_row_index)
}

// required uint32 dest_row_index = 4;
inline bool CommandMoveRowsArchive::_internal_has_dest_row_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandMoveRowsArchive::has_dest_row_index() const {
  return _internal_has_dest_row_index();
}
inline void CommandMoveRowsArchive::clear_dest_row_index() {
  _impl_.dest_row_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CommandMoveRowsArchive::_internal_dest_row_index() const {
  return _impl_.dest_row_index_;
}
inline uint32_t CommandMoveRowsArchive::dest_row_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.dest_row_index)
  return _internal_dest_row_index();
}
inline void CommandMoveRowsArchive::_internal_set_dest_row_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.dest_row_index_ = value;
}
inline void CommandMoveRowsArchive::set_dest_row_index(uint32_t value) {
  _internal_set_dest_row_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveRowsArchive.dest_row_index)
}

// required uint32 number_of_rows = 5;
inline bool CommandMoveRowsArchive::_internal_has_number_of_rows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandMoveRowsArchive::has_number_of_rows() const {
  return _internal_has_number_of_rows();
}
inline void CommandMoveRowsArchive::clear_number_of_rows() {
  _impl_.number_of_rows_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CommandMoveRowsArchive::_internal_number_of_rows() const {
  return _impl_.number_of_rows_;
}
inline uint32_t CommandMoveRowsArchive::number_of_rows() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.number_of_rows)
  return _internal_number_of_rows();
}
inline void CommandMoveRowsArchive::_internal_set_number_of_rows(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.number_of_rows_ = value;
}
inline void CommandMoveRowsArchive::set_number_of_rows(uint32_t value) {
  _internal_set_number_of_rows(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveRowsArchive.number_of_rows)
}

// optional .TSP.Reference formula_rewrite_command = 7;
inline bool CommandMoveRowsArchive::_internal_has_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandMoveRowsArchive::has_formula_rewrite_command() const {
  return _internal_has_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandMoveRowsArchive::_internal_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveRowsArchive::formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.formula_rewrite_command)
  return _internal_formula_rewrite_command();
}
inline void CommandMoveRowsArchive::unsafe_arena_set_allocated_formula_rewrite_command(
    ::TSP::Reference* formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  if (formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveRowsArchive.formula_rewrite_command)
}
inline ::TSP::Reference* CommandMoveRowsArchive::release_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveRowsArchive::unsafe_arena_release_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveRowsArchive.formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveRowsArchive::_internal_mutable_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_ = p;
  }
  return _impl_.formula_rewrite_command_;
}
inline ::TSP::Reference* CommandMoveRowsArchive::mutable_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveRowsArchive.formula_rewrite_command)
  return _msg;
}
inline void CommandMoveRowsArchive::set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  if (formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command));
    if (message_arena != submessage_arena) {
      formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveRowsArchive.formula_rewrite_command)
}

// optional .TSP.Reference show_command = 8;
inline bool CommandMoveRowsArchive::_internal_has_show_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_command_ != nullptr);
  return value;
}
inline bool CommandMoveRowsArchive::has_show_command() const {
  return _internal_has_show_command();
}
inline const ::TSP::Reference& CommandMoveRowsArchive::_internal_show_command() const {
  const ::TSP::Reference* p = _impl_.show_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveRowsArchive::show_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.show_command)
  return _internal_show_command();
}
inline void CommandMoveRowsArchive::unsafe_arena_set_allocated_show_command(
    ::TSP::Reference* show_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_command_);
  }
  _impl_.show_command_ = show_command;
  if (show_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveRowsArchive.show_command)
}
inline ::TSP::Reference* CommandMoveRowsArchive::release_show_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.show_command_;
  _impl_.show_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveRowsArchive::unsafe_arena_release_show_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveRowsArchive.show_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.show_command_;
  _impl_.show_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveRowsArchive::_internal_mutable_show_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.show_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_command_ = p;
  }
  return _impl_.show_command_;
}
inline ::TSP::Reference* CommandMoveRowsArchive::mutable_show_command() {
  ::TSP::Reference* _msg = _internal_mutable_show_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveRowsArchive.show_command)
  return _msg;
}
inline void CommandMoveRowsArchive::set_allocated_show_command(::TSP::Reference* show_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_command_);
  }
  if (show_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_command));
    if (message_arena != submessage_arena) {
      show_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.show_command_ = show_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveRowsArchive.show_command)
}

// optional .TSP.Reference unmerge_invalid_ranges_command = 9;
inline bool CommandMoveRowsArchive::_internal_has_unmerge_invalid_ranges_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unmerge_invalid_ranges_command_ != nullptr);
  return value;
}
inline bool CommandMoveRowsArchive::has_unmerge_invalid_ranges_command() const {
  return _internal_has_unmerge_invalid_ranges_command();
}
inline const ::TSP::Reference& CommandMoveRowsArchive::_internal_unmerge_invalid_ranges_command() const {
  const ::TSP::Reference* p = _impl_.unmerge_invalid_ranges_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveRowsArchive::unmerge_invalid_ranges_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveRowsArchive.unmerge_invalid_ranges_command)
  return _internal_unmerge_invalid_ranges_command();
}
inline void CommandMoveRowsArchive::unsafe_arena_set_allocated_unmerge_invalid_ranges_command(
    ::TSP::Reference* unmerge_invalid_ranges_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unmerge_invalid_ranges_command_);
  }
  _impl_.unmerge_invalid_ranges_command_ = unmerge_invalid_ranges_command;
  if (unmerge_invalid_ranges_command) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveRowsArchive.unmerge_invalid_ranges_command)
}
inline ::TSP::Reference* CommandMoveRowsArchive::release_unmerge_invalid_ranges_command() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.unmerge_invalid_ranges_command_;
  _impl_.unmerge_invalid_ranges_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveRowsArchive::unsafe_arena_release_unmerge_invalid_ranges_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveRowsArchive.unmerge_invalid_ranges_command)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.unmerge_invalid_ranges_command_;
  _impl_.unmerge_invalid_ranges_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveRowsArchive::_internal_mutable_unmerge_invalid_ranges_command() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.unmerge_invalid_ranges_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.unmerge_invalid_ranges_command_ = p;
  }
  return _impl_.unmerge_invalid_ranges_command_;
}
inline ::TSP::Reference* CommandMoveRowsArchive::mutable_unmerge_invalid_ranges_command() {
  ::TSP::Reference* _msg = _internal_mutable_unmerge_invalid_ranges_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveRowsArchive.unmerge_invalid_ranges_command)
  return _msg;
}
inline void CommandMoveRowsArchive::set_allocated_unmerge_invalid_ranges_command(::TSP::Reference* unmerge_invalid_ranges_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unmerge_invalid_ranges_command_);
  }
  if (unmerge_invalid_ranges_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unmerge_invalid_ranges_command));
    if (message_arena != submessage_arena) {
      unmerge_invalid_ranges_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unmerge_invalid_ranges_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.unmerge_invalid_ranges_command_ = unmerge_invalid_ranges_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveRowsArchive.unmerge_invalid_ranges_command)
}

// -------------------------------------------------------------------

// CommandMoveColumnsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMoveColumnsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMoveColumnsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMoveColumnsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMoveColumnsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsArchive.super)
  return _internal_super();
}
inline void CommandMoveColumnsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsArchive.super)
}
inline ::TST::TableCommandArchive* CommandMoveColumnsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveColumnsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMoveColumnsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMoveColumnsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsArchive.super)
  return _msg;
}
inline void CommandMoveColumnsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsArchive.super)
}

// optional .TST.SelectionArchive selection = 2;
inline bool CommandMoveColumnsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandMoveColumnsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandMoveColumnsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsArchive.selection)
  return _internal_selection();
}
inline void CommandMoveColumnsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsArchive.selection)
}
inline ::TST::SelectionArchive* CommandMoveColumnsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandMoveColumnsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandMoveColumnsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandMoveColumnsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsArchive.selection)
  return _msg;
}
inline void CommandMoveColumnsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsArchive.selection)
}

// required uint32 start_column_index = 3;
inline bool CommandMoveColumnsArchive::_internal_has_start_column_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandMoveColumnsArchive::has_start_column_index() const {
  return _internal_has_start_column_index();
}
inline void CommandMoveColumnsArchive::clear_start_column_index() {
  _impl_.start_column_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandMoveColumnsArchive::_internal_start_column_index() const {
  return _impl_.start_column_index_;
}
inline uint32_t CommandMoveColumnsArchive::start_column_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsArchive.start_column_index)
  return _internal_start_column_index();
}
inline void CommandMoveColumnsArchive::_internal_set_start_column_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_column_index_ = value;
}
inline void CommandMoveColumnsArchive::set_start_column_index(uint32_t value) {
  _internal_set_start_column_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveColumnsArchive.start_column_index)
}

// required uint32 dest_column_index = 4;
inline bool CommandMoveColumnsArchive::_internal_has_dest_column_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandMoveColumnsArchive::has_dest_column_index() const {
  return _internal_has_dest_column_index();
}
inline void CommandMoveColumnsArchive::clear_dest_column_index() {
  _impl_.dest_column_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandMoveColumnsArchive::_internal_dest_column_index() const {
  return _impl_.dest_column_index_;
}
inline uint32_t CommandMoveColumnsArchive::dest_column_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsArchive.dest_column_index)
  return _internal_dest_column_index();
}
inline void CommandMoveColumnsArchive::_internal_set_dest_column_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dest_column_index_ = value;
}
inline void CommandMoveColumnsArchive::set_dest_column_index(uint32_t value) {
  _internal_set_dest_column_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveColumnsArchive.dest_column_index)
}

// required uint32 number_of_columns = 5;
inline bool CommandMoveColumnsArchive::_internal_has_number_of_columns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandMoveColumnsArchive::has_number_of_columns() const {
  return _internal_has_number_of_columns();
}
inline void CommandMoveColumnsArchive::clear_number_of_columns() {
  _impl_.number_of_columns_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CommandMoveColumnsArchive::_internal_number_of_columns() const {
  return _impl_.number_of_columns_;
}
inline uint32_t CommandMoveColumnsArchive::number_of_columns() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsArchive.number_of_columns)
  return _internal_number_of_columns();
}
inline void CommandMoveColumnsArchive::_internal_set_number_of_columns(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.number_of_columns_ = value;
}
inline void CommandMoveColumnsArchive::set_number_of_columns(uint32_t value) {
  _internal_set_number_of_columns(value);
  // @@protoc_insertion_point(field_set:TST.CommandMoveColumnsArchive.number_of_columns)
}

// optional .TSP.Reference formula_rewrite_command = 7;
inline bool CommandMoveColumnsArchive::_internal_has_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsArchive::has_formula_rewrite_command() const {
  return _internal_has_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandMoveColumnsArchive::_internal_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveColumnsArchive::formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsArchive.formula_rewrite_command)
  return _internal_formula_rewrite_command();
}
inline void CommandMoveColumnsArchive::unsafe_arena_set_allocated_formula_rewrite_command(
    ::TSP::Reference* formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  if (formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsArchive.formula_rewrite_command)
}
inline ::TSP::Reference* CommandMoveColumnsArchive::release_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveColumnsArchive::unsafe_arena_release_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsArchive.formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveColumnsArchive::_internal_mutable_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_ = p;
  }
  return _impl_.formula_rewrite_command_;
}
inline ::TSP::Reference* CommandMoveColumnsArchive::mutable_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsArchive.formula_rewrite_command)
  return _msg;
}
inline void CommandMoveColumnsArchive::set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  if (formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command));
    if (message_arena != submessage_arena) {
      formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsArchive.formula_rewrite_command)
}

// optional .TSP.Reference show_command = 8;
inline bool CommandMoveColumnsArchive::_internal_has_show_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.show_command_ != nullptr);
  return value;
}
inline bool CommandMoveColumnsArchive::has_show_command() const {
  return _internal_has_show_command();
}
inline const ::TSP::Reference& CommandMoveColumnsArchive::_internal_show_command() const {
  const ::TSP::Reference* p = _impl_.show_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMoveColumnsArchive::show_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMoveColumnsArchive.show_command)
  return _internal_show_command();
}
inline void CommandMoveColumnsArchive::unsafe_arena_set_allocated_show_command(
    ::TSP::Reference* show_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_command_);
  }
  _impl_.show_command_ = show_command;
  if (show_command) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMoveColumnsArchive.show_command)
}
inline ::TSP::Reference* CommandMoveColumnsArchive::release_show_command() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.show_command_;
  _impl_.show_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMoveColumnsArchive::unsafe_arena_release_show_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMoveColumnsArchive.show_command)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.show_command_;
  _impl_.show_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMoveColumnsArchive::_internal_mutable_show_command() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.show_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.show_command_ = p;
  }
  return _impl_.show_command_;
}
inline ::TSP::Reference* CommandMoveColumnsArchive::mutable_show_command() {
  ::TSP::Reference* _msg = _internal_mutable_show_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMoveColumnsArchive.show_command)
  return _msg;
}
inline void CommandMoveColumnsArchive::set_allocated_show_command(::TSP::Reference* show_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.show_command_);
  }
  if (show_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_command));
    if (message_arena != submessage_arena) {
      show_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.show_command_ = show_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMoveColumnsArchive.show_command)
}

// -------------------------------------------------------------------

// CommandSortArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSortArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSortArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSortArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSortArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSortArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSortArchive.super)
  return _internal_super();
}
inline void CommandSortArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSortArchive.super)
}
inline ::TST::TableCommandArchive* CommandSortArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSortArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSortArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSortArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSortArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSortArchive.super)
  return _msg;
}
inline void CommandSortArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSortArchive.super)
}

// required .TSK.ShuffleMappingArchive mapping = 5;
inline bool CommandSortArchive::_internal_has_mapping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mapping_ != nullptr);
  return value;
}
inline bool CommandSortArchive::has_mapping() const {
  return _internal_has_mapping();
}
inline const ::TSK::ShuffleMappingArchive& CommandSortArchive::_internal_mapping() const {
  const ::TSK::ShuffleMappingArchive* p = _impl_.mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ShuffleMappingArchive&>(
      ::TSK::_ShuffleMappingArchive_default_instance_);
}
inline const ::TSK::ShuffleMappingArchive& CommandSortArchive::mapping() const {
  // @@protoc_insertion_point(field_get:TST.CommandSortArchive.mapping)
  return _internal_mapping();
}
inline void CommandSortArchive::unsafe_arena_set_allocated_mapping(
    ::TSK::ShuffleMappingArchive* mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapping_);
  }
  _impl_.mapping_ = mapping;
  if (mapping) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSortArchive.mapping)
}
inline ::TSK::ShuffleMappingArchive* CommandSortArchive::release_mapping() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.mapping_;
  _impl_.mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandSortArchive::unsafe_arena_release_mapping() {
  // @@protoc_insertion_point(field_release:TST.CommandSortArchive.mapping)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.mapping_;
  _impl_.mapping_ = nullptr;
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandSortArchive::_internal_mutable_mapping() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ShuffleMappingArchive>(GetArenaForAllocation());
    _impl_.mapping_ = p;
  }
  return _impl_.mapping_;
}
inline ::TSK::ShuffleMappingArchive* CommandSortArchive::mutable_mapping() {
  ::TSK::ShuffleMappingArchive* _msg = _internal_mutable_mapping();
  // @@protoc_insertion_point(field_mutable:TST.CommandSortArchive.mapping)
  return _msg;
}
inline void CommandSortArchive::set_allocated_mapping(::TSK::ShuffleMappingArchive* mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapping_);
  }
  if (mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapping));
    if (message_arena != submessage_arena) {
      mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mapping_ = mapping;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSortArchive.mapping)
}

// optional .TSP.Reference formula_rewrite_command = 7;
inline bool CommandSortArchive::_internal_has_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandSortArchive::has_formula_rewrite_command() const {
  return _internal_has_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandSortArchive::_internal_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSortArchive::formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandSortArchive.formula_rewrite_command)
  return _internal_formula_rewrite_command();
}
inline void CommandSortArchive::unsafe_arena_set_allocated_formula_rewrite_command(
    ::TSP::Reference* formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  if (formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSortArchive.formula_rewrite_command)
}
inline ::TSP::Reference* CommandSortArchive::release_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSortArchive::unsafe_arena_release_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandSortArchive.formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.formula_rewrite_command_;
  _impl_.formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSortArchive::_internal_mutable_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.formula_rewrite_command_ = p;
  }
  return _impl_.formula_rewrite_command_;
}
inline ::TSP::Reference* CommandSortArchive::mutable_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandSortArchive.formula_rewrite_command)
  return _msg;
}
inline void CommandSortArchive::set_allocated_formula_rewrite_command(::TSP::Reference* formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_rewrite_command_);
  }
  if (formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_rewrite_command));
    if (message_arena != submessage_arena) {
      formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.formula_rewrite_command_ = formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSortArchive.formula_rewrite_command)
}

// -------------------------------------------------------------------

// CommandRewriteFormulasForSortArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFormulasForSortArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForSortArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFormulasForSortArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForSortArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForSortArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForSortArchive.super)
  return _internal_super();
}
inline void CommandRewriteFormulasForSortArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForSortArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForSortArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForSortArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForSortArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForSortArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForSortArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForSortArchive.super)
  return _msg;
}
inline void CommandRewriteFormulasForSortArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForSortArchive.super)
}

// required .TSCE.OwnerFormulaMapArchive formula_map = 2;
inline bool CommandRewriteFormulasForSortArchive::_internal_has_formula_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_map_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForSortArchive::has_formula_map() const {
  return _internal_has_formula_map();
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForSortArchive::_internal_formula_map() const {
  const ::TSCE::OwnerFormulaMapArchive* p = _impl_.formula_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::OwnerFormulaMapArchive&>(
      ::TSCE::_OwnerFormulaMapArchive_default_instance_);
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForSortArchive::formula_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForSortArchive.formula_map)
  return _internal_formula_map();
}
inline void CommandRewriteFormulasForSortArchive::unsafe_arena_set_allocated_formula_map(
    ::TSCE::OwnerFormulaMapArchive* formula_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  _impl_.formula_map_ = formula_map;
  if (formula_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForSortArchive.formula_map)
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForSortArchive::release_formula_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForSortArchive::unsafe_arena_release_formula_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForSortArchive.formula_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForSortArchive::_internal_mutable_formula_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.formula_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::OwnerFormulaMapArchive>(GetArenaForAllocation());
    _impl_.formula_map_ = p;
  }
  return _impl_.formula_map_;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForSortArchive::mutable_formula_map() {
  ::TSCE::OwnerFormulaMapArchive* _msg = _internal_mutable_formula_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForSortArchive.formula_map)
  return _msg;
}
inline void CommandRewriteFormulasForSortArchive::set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  if (formula_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_map));
    if (message_arena != submessage_arena) {
      formula_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.formula_map_ = formula_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForSortArchive.formula_map)
}

// required .TSK.ShuffleMappingArchive sort_mapping = 3;
inline bool CommandRewriteFormulasForSortArchive::_internal_has_sort_mapping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sort_mapping_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForSortArchive::has_sort_mapping() const {
  return _internal_has_sort_mapping();
}
inline const ::TSK::ShuffleMappingArchive& CommandRewriteFormulasForSortArchive::_internal_sort_mapping() const {
  const ::TSK::ShuffleMappingArchive* p = _impl_.sort_mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ShuffleMappingArchive&>(
      ::TSK::_ShuffleMappingArchive_default_instance_);
}
inline const ::TSK::ShuffleMappingArchive& CommandRewriteFormulasForSortArchive::sort_mapping() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForSortArchive.sort_mapping)
  return _internal_sort_mapping();
}
inline void CommandRewriteFormulasForSortArchive::unsafe_arena_set_allocated_sort_mapping(
    ::TSK::ShuffleMappingArchive* sort_mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_mapping_);
  }
  _impl_.sort_mapping_ = sort_mapping;
  if (sort_mapping) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForSortArchive.sort_mapping)
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFormulasForSortArchive::release_sort_mapping() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFormulasForSortArchive::unsafe_arena_release_sort_mapping() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForSortArchive.sort_mapping)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFormulasForSortArchive::_internal_mutable_sort_mapping() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sort_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ShuffleMappingArchive>(GetArenaForAllocation());
    _impl_.sort_mapping_ = p;
  }
  return _impl_.sort_mapping_;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFormulasForSortArchive::mutable_sort_mapping() {
  ::TSK::ShuffleMappingArchive* _msg = _internal_mutable_sort_mapping();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForSortArchive.sort_mapping)
  return _msg;
}
inline void CommandRewriteFormulasForSortArchive::set_allocated_sort_mapping(::TSK::ShuffleMappingArchive* sort_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_mapping_);
  }
  if (sort_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_mapping));
    if (message_arena != submessage_arena) {
      sort_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_mapping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sort_mapping_ = sort_mapping;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForSortArchive.sort_mapping)
}

// required .TSCE.CFUUIDArchive sorted_table_id = 4;
inline bool CommandRewriteFormulasForSortArchive::_internal_has_sorted_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sorted_table_id_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForSortArchive::has_sorted_table_id() const {
  return _internal_has_sorted_table_id();
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteFormulasForSortArchive::_internal_sorted_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.sorted_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteFormulasForSortArchive::sorted_table_id() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForSortArchive.sorted_table_id)
  return _internal_sorted_table_id();
}
inline void CommandRewriteFormulasForSortArchive::unsafe_arena_set_allocated_sorted_table_id(
    ::TSCE::CFUUIDArchive* sorted_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorted_table_id_);
  }
  _impl_.sorted_table_id_ = sorted_table_id;
  if (sorted_table_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForSortArchive.sorted_table_id)
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForSortArchive::release_sorted_table_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.sorted_table_id_;
  _impl_.sorted_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForSortArchive::unsafe_arena_release_sorted_table_id() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForSortArchive.sorted_table_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.sorted_table_id_;
  _impl_.sorted_table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForSortArchive::_internal_mutable_sorted_table_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sorted_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.sorted_table_id_ = p;
  }
  return _impl_.sorted_table_id_;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForSortArchive::mutable_sorted_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_sorted_table_id();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForSortArchive.sorted_table_id)
  return _msg;
}
inline void CommandRewriteFormulasForSortArchive::set_allocated_sorted_table_id(::TSCE::CFUUIDArchive* sorted_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorted_table_id_);
  }
  if (sorted_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sorted_table_id));
    if (message_arena != submessage_arena) {
      sorted_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sorted_table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sorted_table_id_ = sorted_table_id;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForSortArchive.sorted_table_id)
}

// required bool explode_ranges = 5;
inline bool CommandRewriteFormulasForSortArchive::_internal_has_explode_ranges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandRewriteFormulasForSortArchive::has_explode_ranges() const {
  return _internal_has_explode_ranges();
}
inline void CommandRewriteFormulasForSortArchive::clear_explode_ranges() {
  _impl_.explode_ranges_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CommandRewriteFormulasForSortArchive::_internal_explode_ranges() const {
  return _impl_.explode_ranges_;
}
inline bool CommandRewriteFormulasForSortArchive::explode_ranges() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForSortArchive.explode_ranges)
  return _internal_explode_ranges();
}
inline void CommandRewriteFormulasForSortArchive::_internal_set_explode_ranges(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.explode_ranges_ = value;
}
inline void CommandRewriteFormulasForSortArchive::set_explode_ranges(bool value) {
  _internal_set_explode_ranges(value);
  // @@protoc_insertion_point(field_set:TST.CommandRewriteFormulasForSortArchive.explode_ranges)
}

// -------------------------------------------------------------------

// CommandRewriteFormulasForTectonicShiftArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFormulasForTectonicShiftArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForTectonicShiftArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFormulasForTectonicShiftArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForTectonicShiftArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForTectonicShiftArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForTectonicShiftArchive.super)
  return _internal_super();
}
inline void CommandRewriteFormulasForTectonicShiftArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForTectonicShiftArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTectonicShiftArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTectonicShiftArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForTectonicShiftArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTectonicShiftArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForTectonicShiftArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForTectonicShiftArchive.super)
  return _msg;
}
inline void CommandRewriteFormulasForTectonicShiftArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForTectonicShiftArchive.super)
}

// required .TSCE.OwnerFormulaMapArchive formula_map = 2;
inline bool CommandRewriteFormulasForTectonicShiftArchive::_internal_has_formula_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_map_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForTectonicShiftArchive::has_formula_map() const {
  return _internal_has_formula_map();
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForTectonicShiftArchive::_internal_formula_map() const {
  const ::TSCE::OwnerFormulaMapArchive* p = _impl_.formula_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::OwnerFormulaMapArchive&>(
      ::TSCE::_OwnerFormulaMapArchive_default_instance_);
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForTectonicShiftArchive::formula_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForTectonicShiftArchive.formula_map)
  return _internal_formula_map();
}
inline void CommandRewriteFormulasForTectonicShiftArchive::unsafe_arena_set_allocated_formula_map(
    ::TSCE::OwnerFormulaMapArchive* formula_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  _impl_.formula_map_ = formula_map;
  if (formula_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForTectonicShiftArchive.formula_map)
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForTectonicShiftArchive::release_formula_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForTectonicShiftArchive::unsafe_arena_release_formula_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForTectonicShiftArchive.formula_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForTectonicShiftArchive::_internal_mutable_formula_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.formula_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::OwnerFormulaMapArchive>(GetArenaForAllocation());
    _impl_.formula_map_ = p;
  }
  return _impl_.formula_map_;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForTectonicShiftArchive::mutable_formula_map() {
  ::TSCE::OwnerFormulaMapArchive* _msg = _internal_mutable_formula_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForTectonicShiftArchive.formula_map)
  return _msg;
}
inline void CommandRewriteFormulasForTectonicShiftArchive::set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  if (formula_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_map));
    if (message_arena != submessage_arena) {
      formula_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.formula_map_ = formula_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForTectonicShiftArchive.formula_map)
}

// required .TSCE.TectonicShiftArchive tectonic_shift = 3;
inline bool CommandRewriteFormulasForTectonicShiftArchive::_internal_has_tectonic_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tectonic_shift_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForTectonicShiftArchive::has_tectonic_shift() const {
  return _internal_has_tectonic_shift();
}
inline const ::TSCE::TectonicShiftArchive& CommandRewriteFormulasForTectonicShiftArchive::_internal_tectonic_shift() const {
  const ::TSCE::TectonicShiftArchive* p = _impl_.tectonic_shift_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::TectonicShiftArchive&>(
      ::TSCE::_TectonicShiftArchive_default_instance_);
}
inline const ::TSCE::TectonicShiftArchive& CommandRewriteFormulasForTectonicShiftArchive::tectonic_shift() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForTectonicShiftArchive.tectonic_shift)
  return _internal_tectonic_shift();
}
inline void CommandRewriteFormulasForTectonicShiftArchive::unsafe_arena_set_allocated_tectonic_shift(
    ::TSCE::TectonicShiftArchive* tectonic_shift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tectonic_shift_);
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  if (tectonic_shift) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForTectonicShiftArchive.tectonic_shift)
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFormulasForTectonicShiftArchive::release_tectonic_shift() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFormulasForTectonicShiftArchive::unsafe_arena_release_tectonic_shift() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForTectonicShiftArchive.tectonic_shift)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
  return temp;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFormulasForTectonicShiftArchive::_internal_mutable_tectonic_shift() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tectonic_shift_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::TectonicShiftArchive>(GetArenaForAllocation());
    _impl_.tectonic_shift_ = p;
  }
  return _impl_.tectonic_shift_;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFormulasForTectonicShiftArchive::mutable_tectonic_shift() {
  ::TSCE::TectonicShiftArchive* _msg = _internal_mutable_tectonic_shift();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForTectonicShiftArchive.tectonic_shift)
  return _msg;
}
inline void CommandRewriteFormulasForTectonicShiftArchive::set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tectonic_shift_);
  }
  if (tectonic_shift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tectonic_shift));
    if (message_arena != submessage_arena) {
      tectonic_shift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tectonic_shift, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForTectonicShiftArchive.tectonic_shift)
}

// -------------------------------------------------------------------

// CommandRewriteFormulasForMoveArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFormulasForMoveArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForMoveArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFormulasForMoveArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForMoveArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForMoveArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForMoveArchive.super)
  return _internal_super();
}
inline void CommandRewriteFormulasForMoveArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForMoveArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForMoveArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForMoveArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForMoveArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForMoveArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForMoveArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForMoveArchive.super)
  return _msg;
}
inline void CommandRewriteFormulasForMoveArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForMoveArchive.super)
}

// required .TSCE.OwnerFormulaMapArchive formula_map = 2;
inline bool CommandRewriteFormulasForMoveArchive::_internal_has_formula_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_map_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForMoveArchive::has_formula_map() const {
  return _internal_has_formula_map();
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForMoveArchive::_internal_formula_map() const {
  const ::TSCE::OwnerFormulaMapArchive* p = _impl_.formula_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::OwnerFormulaMapArchive&>(
      ::TSCE::_OwnerFormulaMapArchive_default_instance_);
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForMoveArchive::formula_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForMoveArchive.formula_map)
  return _internal_formula_map();
}
inline void CommandRewriteFormulasForMoveArchive::unsafe_arena_set_allocated_formula_map(
    ::TSCE::OwnerFormulaMapArchive* formula_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  _impl_.formula_map_ = formula_map;
  if (formula_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForMoveArchive.formula_map)
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForMoveArchive::release_formula_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForMoveArchive::unsafe_arena_release_formula_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForMoveArchive.formula_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForMoveArchive::_internal_mutable_formula_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.formula_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::OwnerFormulaMapArchive>(GetArenaForAllocation());
    _impl_.formula_map_ = p;
  }
  return _impl_.formula_map_;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForMoveArchive::mutable_formula_map() {
  ::TSCE::OwnerFormulaMapArchive* _msg = _internal_mutable_formula_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForMoveArchive.formula_map)
  return _msg;
}
inline void CommandRewriteFormulasForMoveArchive::set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  if (formula_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_map));
    if (message_arena != submessage_arena) {
      formula_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.formula_map_ = formula_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForMoveArchive.formula_map)
}

// required .TSCE.RangeReferenceArchive from_reference = 6;
inline bool CommandRewriteFormulasForMoveArchive::_internal_has_from_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_reference_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForMoveArchive::has_from_reference() const {
  return _internal_has_from_reference();
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteFormulasForMoveArchive::_internal_from_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.from_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteFormulasForMoveArchive::from_reference() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForMoveArchive.from_reference)
  return _internal_from_reference();
}
inline void CommandRewriteFormulasForMoveArchive::unsafe_arena_set_allocated_from_reference(
    ::TSCE::RangeReferenceArchive* from_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_reference_);
  }
  _impl_.from_reference_ = from_reference;
  if (from_reference) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForMoveArchive.from_reference)
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::release_from_reference() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.from_reference_;
  _impl_.from_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::unsafe_arena_release_from_reference() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForMoveArchive.from_reference)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.from_reference_;
  _impl_.from_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::_internal_mutable_from_reference() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.from_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.from_reference_ = p;
  }
  return _impl_.from_reference_;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::mutable_from_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_from_reference();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForMoveArchive.from_reference)
  return _msg;
}
inline void CommandRewriteFormulasForMoveArchive::set_allocated_from_reference(::TSCE::RangeReferenceArchive* from_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_reference_);
  }
  if (from_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_reference));
    if (message_arena != submessage_arena) {
      from_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.from_reference_ = from_reference;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForMoveArchive.from_reference)
}

// required .TSCE.RangeReferenceArchive to_reference = 7;
inline bool CommandRewriteFormulasForMoveArchive::_internal_has_to_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_reference_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForMoveArchive::has_to_reference() const {
  return _internal_has_to_reference();
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteFormulasForMoveArchive::_internal_to_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.to_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteFormulasForMoveArchive::to_reference() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForMoveArchive.to_reference)
  return _internal_to_reference();
}
inline void CommandRewriteFormulasForMoveArchive::unsafe_arena_set_allocated_to_reference(
    ::TSCE::RangeReferenceArchive* to_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_reference_);
  }
  _impl_.to_reference_ = to_reference;
  if (to_reference) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForMoveArchive.to_reference)
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::release_to_reference() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.to_reference_;
  _impl_.to_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::unsafe_arena_release_to_reference() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForMoveArchive.to_reference)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.to_reference_;
  _impl_.to_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::_internal_mutable_to_reference() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.to_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.to_reference_ = p;
  }
  return _impl_.to_reference_;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteFormulasForMoveArchive::mutable_to_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_to_reference();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForMoveArchive.to_reference)
  return _msg;
}
inline void CommandRewriteFormulasForMoveArchive::set_allocated_to_reference(::TSCE::RangeReferenceArchive* to_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_reference_);
  }
  if (to_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_reference));
    if (message_arena != submessage_arena) {
      to_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.to_reference_ = to_reference;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForMoveArchive.to_reference)
}

// -------------------------------------------------------------------

// CommandRewriteFormulasForCellMergeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFormulasForCellMergeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForCellMergeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFormulasForCellMergeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForCellMergeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFormulasForCellMergeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForCellMergeArchive.super)
  return _internal_super();
}
inline void CommandRewriteFormulasForCellMergeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForCellMergeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForCellMergeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForCellMergeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForCellMergeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFormulasForCellMergeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForCellMergeArchive.super)
  return _msg;
}
inline void CommandRewriteFormulasForCellMergeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.super)
}

// required .TSCE.OwnerFormulaMapArchive formula_map = 2;
inline bool CommandRewriteFormulasForCellMergeArchive::_internal_has_formula_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.formula_map_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForCellMergeArchive::has_formula_map() const {
  return _internal_has_formula_map();
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForCellMergeArchive::_internal_formula_map() const {
  const ::TSCE::OwnerFormulaMapArchive* p = _impl_.formula_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::OwnerFormulaMapArchive&>(
      ::TSCE::_OwnerFormulaMapArchive_default_instance_);
}
inline const ::TSCE::OwnerFormulaMapArchive& CommandRewriteFormulasForCellMergeArchive::formula_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForCellMergeArchive.formula_map)
  return _internal_formula_map();
}
inline void CommandRewriteFormulasForCellMergeArchive::unsafe_arena_set_allocated_formula_map(
    ::TSCE::OwnerFormulaMapArchive* formula_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  _impl_.formula_map_ = formula_map;
  if (formula_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.formula_map)
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForCellMergeArchive::release_formula_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForCellMergeArchive::unsafe_arena_release_formula_map() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForCellMergeArchive.formula_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::OwnerFormulaMapArchive* temp = _impl_.formula_map_;
  _impl_.formula_map_ = nullptr;
  return temp;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForCellMergeArchive::_internal_mutable_formula_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.formula_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::OwnerFormulaMapArchive>(GetArenaForAllocation());
    _impl_.formula_map_ = p;
  }
  return _impl_.formula_map_;
}
inline ::TSCE::OwnerFormulaMapArchive* CommandRewriteFormulasForCellMergeArchive::mutable_formula_map() {
  ::TSCE::OwnerFormulaMapArchive* _msg = _internal_mutable_formula_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForCellMergeArchive.formula_map)
  return _msg;
}
inline void CommandRewriteFormulasForCellMergeArchive::set_allocated_formula_map(::TSCE::OwnerFormulaMapArchive* formula_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.formula_map_);
  }
  if (formula_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_map));
    if (message_arena != submessage_arena) {
      formula_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.formula_map_ = formula_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.formula_map)
}

// required .TSCE.RangeCoordinateArchive merged_range = 3;
inline bool CommandRewriteFormulasForCellMergeArchive::_internal_has_merged_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merged_range_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForCellMergeArchive::has_merged_range() const {
  return _internal_has_merged_range();
}
inline const ::TSCE::RangeCoordinateArchive& CommandRewriteFormulasForCellMergeArchive::_internal_merged_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.merged_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& CommandRewriteFormulasForCellMergeArchive::merged_range() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForCellMergeArchive.merged_range)
  return _internal_merged_range();
}
inline void CommandRewriteFormulasForCellMergeArchive::unsafe_arena_set_allocated_merged_range(
    ::TSCE::RangeCoordinateArchive* merged_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merged_range_);
  }
  _impl_.merged_range_ = merged_range;
  if (merged_range) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.merged_range)
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteFormulasForCellMergeArchive::release_merged_range() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.merged_range_;
  _impl_.merged_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteFormulasForCellMergeArchive::unsafe_arena_release_merged_range() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForCellMergeArchive.merged_range)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.merged_range_;
  _impl_.merged_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteFormulasForCellMergeArchive::_internal_mutable_merged_range() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.merged_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.merged_range_ = p;
  }
  return _impl_.merged_range_;
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteFormulasForCellMergeArchive::mutable_merged_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_merged_range();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForCellMergeArchive.merged_range)
  return _msg;
}
inline void CommandRewriteFormulasForCellMergeArchive::set_allocated_merged_range(::TSCE::RangeCoordinateArchive* merged_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merged_range_);
  }
  if (merged_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merged_range));
    if (message_arena != submessage_arena) {
      merged_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merged_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.merged_range_ = merged_range;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.merged_range)
}

// required .TSCE.CFUUIDArchive table_id = 4;
inline bool CommandRewriteFormulasForCellMergeArchive::_internal_has_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_id_ != nullptr);
  return value;
}
inline bool CommandRewriteFormulasForCellMergeArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteFormulasForCellMergeArchive::_internal_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteFormulasForCellMergeArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFormulasForCellMergeArchive.table_id)
  return _internal_table_id();
}
inline void CommandRewriteFormulasForCellMergeArchive::unsafe_arena_set_allocated_table_id(
    ::TSCE::CFUUIDArchive* table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  _impl_.table_id_ = table_id;
  if (table_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.table_id)
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForCellMergeArchive::release_table_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForCellMergeArchive::unsafe_arena_release_table_id() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFormulasForCellMergeArchive.table_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.table_id_;
  _impl_.table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForCellMergeArchive::_internal_mutable_table_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.table_id_ = p;
  }
  return _impl_.table_id_;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFormulasForCellMergeArchive::mutable_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_table_id();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFormulasForCellMergeArchive.table_id)
  return _msg;
}
inline void CommandRewriteFormulasForCellMergeArchive::set_allocated_table_id(::TSCE::CFUUIDArchive* table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_id_);
  }
  if (table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_id));
    if (message_arena != submessage_arena) {
      table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.table_id_ = table_id;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFormulasForCellMergeArchive.table_id)
}

// -------------------------------------------------------------------

// CommandRewriteFilterFormulasForTableResizeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFilterFormulasForTableResizeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForTableResizeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFilterFormulasForTableResizeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForTableResizeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForTableResizeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
  return _internal_super();
}
inline void CommandRewriteFilterFormulasForTableResizeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTableResizeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
  return _msg;
}
inline void CommandRewriteFilterFormulasForTableResizeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForTableResizeArchive.super)
}

// -------------------------------------------------------------------

// CommandRewriteFilterFormulasForTectonicShiftArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForTectonicShiftArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFilterFormulasForTectonicShiftArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForTectonicShiftArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.super)
  return _internal_super();
}
inline void CommandRewriteFilterFormulasForTectonicShiftArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.super)
  return _msg;
}
inline void CommandRewriteFilterFormulasForTectonicShiftArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.super)
}

// required .TSP.Reference filter_set = 2;
inline bool CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_has_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_set_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForTectonicShiftArchive::has_filter_set() const {
  return _internal_has_filter_set();
}
inline const ::TSP::Reference& CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_filter_set() const {
  const ::TSP::Reference* p = _impl_.filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRewriteFilterFormulasForTectonicShiftArchive::filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.filter_set)
  return _internal_filter_set();
}
inline void CommandRewriteFilterFormulasForTectonicShiftArchive::unsafe_arena_set_allocated_filter_set(
    ::TSP::Reference* filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  _impl_.filter_set_ = filter_set;
  if (filter_set) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.filter_set)
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForTectonicShiftArchive::release_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForTectonicShiftArchive::unsafe_arena_release_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.filter_set)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_mutable_filter_set() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.filter_set_ = p;
  }
  return _impl_.filter_set_;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForTectonicShiftArchive::mutable_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.filter_set)
  return _msg;
}
inline void CommandRewriteFilterFormulasForTectonicShiftArchive::set_allocated_filter_set(::TSP::Reference* filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  if (filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_set));
    if (message_arena != submessage_arena) {
      filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filter_set_ = filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.filter_set)
}

// required .TSCE.TectonicShiftArchive tectonic_shift = 3;
inline bool CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_has_tectonic_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tectonic_shift_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForTectonicShiftArchive::has_tectonic_shift() const {
  return _internal_has_tectonic_shift();
}
inline const ::TSCE::TectonicShiftArchive& CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_tectonic_shift() const {
  const ::TSCE::TectonicShiftArchive* p = _impl_.tectonic_shift_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::TectonicShiftArchive&>(
      ::TSCE::_TectonicShiftArchive_default_instance_);
}
inline const ::TSCE::TectonicShiftArchive& CommandRewriteFilterFormulasForTectonicShiftArchive::tectonic_shift() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.tectonic_shift)
  return _internal_tectonic_shift();
}
inline void CommandRewriteFilterFormulasForTectonicShiftArchive::unsafe_arena_set_allocated_tectonic_shift(
    ::TSCE::TectonicShiftArchive* tectonic_shift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tectonic_shift_);
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  if (tectonic_shift) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.tectonic_shift)
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::release_tectonic_shift() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::unsafe_arena_release_tectonic_shift() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.tectonic_shift)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
  return temp;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::_internal_mutable_tectonic_shift() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tectonic_shift_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::TectonicShiftArchive>(GetArenaForAllocation());
    _impl_.tectonic_shift_ = p;
  }
  return _impl_.tectonic_shift_;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::mutable_tectonic_shift() {
  ::TSCE::TectonicShiftArchive* _msg = _internal_mutable_tectonic_shift();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.tectonic_shift)
  return _msg;
}
inline void CommandRewriteFilterFormulasForTectonicShiftArchive::set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tectonic_shift_);
  }
  if (tectonic_shift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tectonic_shift));
    if (message_arena != submessage_arena) {
      tectonic_shift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tectonic_shift, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForTectonicShiftArchive.tectonic_shift)
}

// -------------------------------------------------------------------

// CommandRewriteFilterFormulasForSortArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteFilterFormulasForSortArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForSortArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteFilterFormulasForSortArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForSortArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteFilterFormulasForSortArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForSortArchive.super)
  return _internal_super();
}
inline void CommandRewriteFilterFormulasForSortArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForSortArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForSortArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForSortArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForSortArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteFilterFormulasForSortArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForSortArchive.super)
  return _msg;
}
inline void CommandRewriteFilterFormulasForSortArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.super)
}

// required .TSP.Reference filter_set = 2;
inline bool CommandRewriteFilterFormulasForSortArchive::_internal_has_filter_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_set_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForSortArchive::has_filter_set() const {
  return _internal_has_filter_set();
}
inline const ::TSP::Reference& CommandRewriteFilterFormulasForSortArchive::_internal_filter_set() const {
  const ::TSP::Reference* p = _impl_.filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandRewriteFilterFormulasForSortArchive::filter_set() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForSortArchive.filter_set)
  return _internal_filter_set();
}
inline void CommandRewriteFilterFormulasForSortArchive::unsafe_arena_set_allocated_filter_set(
    ::TSP::Reference* filter_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  _impl_.filter_set_ = filter_set;
  if (filter_set) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.filter_set)
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForSortArchive::release_filter_set() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForSortArchive::unsafe_arena_release_filter_set() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForSortArchive.filter_set)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.filter_set_;
  _impl_.filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForSortArchive::_internal_mutable_filter_set() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.filter_set_ = p;
  }
  return _impl_.filter_set_;
}
inline ::TSP::Reference* CommandRewriteFilterFormulasForSortArchive::mutable_filter_set() {
  ::TSP::Reference* _msg = _internal_mutable_filter_set();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForSortArchive.filter_set)
  return _msg;
}
inline void CommandRewriteFilterFormulasForSortArchive::set_allocated_filter_set(::TSP::Reference* filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_set_);
  }
  if (filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_set));
    if (message_arena != submessage_arena) {
      filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filter_set_ = filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.filter_set)
}

// required .TSK.ShuffleMappingArchive sort_mapping = 3;
inline bool CommandRewriteFilterFormulasForSortArchive::_internal_has_sort_mapping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sort_mapping_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForSortArchive::has_sort_mapping() const {
  return _internal_has_sort_mapping();
}
inline const ::TSK::ShuffleMappingArchive& CommandRewriteFilterFormulasForSortArchive::_internal_sort_mapping() const {
  const ::TSK::ShuffleMappingArchive* p = _impl_.sort_mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ShuffleMappingArchive&>(
      ::TSK::_ShuffleMappingArchive_default_instance_);
}
inline const ::TSK::ShuffleMappingArchive& CommandRewriteFilterFormulasForSortArchive::sort_mapping() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForSortArchive.sort_mapping)
  return _internal_sort_mapping();
}
inline void CommandRewriteFilterFormulasForSortArchive::unsafe_arena_set_allocated_sort_mapping(
    ::TSK::ShuffleMappingArchive* sort_mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_mapping_);
  }
  _impl_.sort_mapping_ = sort_mapping;
  if (sort_mapping) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.sort_mapping)
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFilterFormulasForSortArchive::release_sort_mapping() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFilterFormulasForSortArchive::unsafe_arena_release_sort_mapping() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForSortArchive.sort_mapping)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFilterFormulasForSortArchive::_internal_mutable_sort_mapping() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sort_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ShuffleMappingArchive>(GetArenaForAllocation());
    _impl_.sort_mapping_ = p;
  }
  return _impl_.sort_mapping_;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteFilterFormulasForSortArchive::mutable_sort_mapping() {
  ::TSK::ShuffleMappingArchive* _msg = _internal_mutable_sort_mapping();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForSortArchive.sort_mapping)
  return _msg;
}
inline void CommandRewriteFilterFormulasForSortArchive::set_allocated_sort_mapping(::TSK::ShuffleMappingArchive* sort_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_mapping_);
  }
  if (sort_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_mapping));
    if (message_arena != submessage_arena) {
      sort_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_mapping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sort_mapping_ = sort_mapping;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.sort_mapping)
}

// required .TSCE.CFUUIDArchive sorted_table_id = 4;
inline bool CommandRewriteFilterFormulasForSortArchive::_internal_has_sorted_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sorted_table_id_ != nullptr);
  return value;
}
inline bool CommandRewriteFilterFormulasForSortArchive::has_sorted_table_id() const {
  return _internal_has_sorted_table_id();
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteFilterFormulasForSortArchive::_internal_sorted_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.sorted_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteFilterFormulasForSortArchive::sorted_table_id() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteFilterFormulasForSortArchive.sorted_table_id)
  return _internal_sorted_table_id();
}
inline void CommandRewriteFilterFormulasForSortArchive::unsafe_arena_set_allocated_sorted_table_id(
    ::TSCE::CFUUIDArchive* sorted_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorted_table_id_);
  }
  _impl_.sorted_table_id_ = sorted_table_id;
  if (sorted_table_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.sorted_table_id)
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFilterFormulasForSortArchive::release_sorted_table_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.sorted_table_id_;
  _impl_.sorted_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFilterFormulasForSortArchive::unsafe_arena_release_sorted_table_id() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteFilterFormulasForSortArchive.sorted_table_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CFUUIDArchive* temp = _impl_.sorted_table_id_;
  _impl_.sorted_table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFilterFormulasForSortArchive::_internal_mutable_sorted_table_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sorted_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.sorted_table_id_ = p;
  }
  return _impl_.sorted_table_id_;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteFilterFormulasForSortArchive::mutable_sorted_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_sorted_table_id();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteFilterFormulasForSortArchive.sorted_table_id)
  return _msg;
}
inline void CommandRewriteFilterFormulasForSortArchive::set_allocated_sorted_table_id(::TSCE::CFUUIDArchive* sorted_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorted_table_id_);
  }
  if (sorted_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sorted_table_id));
    if (message_arena != submessage_arena) {
      sorted_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sorted_table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sorted_table_id_ = sorted_table_id;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteFilterFormulasForSortArchive.sorted_table_id)
}

// -------------------------------------------------------------------

// CommandRewriteConditionalStylesForTectonicShiftArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.super)
  return _internal_super();
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.super)
  return _msg;
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.super)
}

// required .TSCE.TectonicShiftArchive tectonic_shift = 2;
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_has_tectonic_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tectonic_shift_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::has_tectonic_shift() const {
  return _internal_has_tectonic_shift();
}
inline const ::TSCE::TectonicShiftArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_tectonic_shift() const {
  const ::TSCE::TectonicShiftArchive* p = _impl_.tectonic_shift_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::TectonicShiftArchive&>(
      ::TSCE::_TectonicShiftArchive_default_instance_);
}
inline const ::TSCE::TectonicShiftArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::tectonic_shift() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.tectonic_shift)
  return _internal_tectonic_shift();
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_set_allocated_tectonic_shift(
    ::TSCE::TectonicShiftArchive* tectonic_shift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tectonic_shift_);
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  if (tectonic_shift) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.tectonic_shift)
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::release_tectonic_shift() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_release_tectonic_shift() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.tectonic_shift)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::TectonicShiftArchive* temp = _impl_.tectonic_shift_;
  _impl_.tectonic_shift_ = nullptr;
  return temp;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_mutable_tectonic_shift() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tectonic_shift_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::TectonicShiftArchive>(GetArenaForAllocation());
    _impl_.tectonic_shift_ = p;
  }
  return _impl_.tectonic_shift_;
}
inline ::TSCE::TectonicShiftArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::mutable_tectonic_shift() {
  ::TSCE::TectonicShiftArchive* _msg = _internal_mutable_tectonic_shift();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.tectonic_shift)
  return _msg;
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::set_allocated_tectonic_shift(::TSCE::TectonicShiftArchive* tectonic_shift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tectonic_shift_);
  }
  if (tectonic_shift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tectonic_shift));
    if (message_arena != submessage_arena) {
      tectonic_shift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tectonic_shift, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tectonic_shift_ = tectonic_shift;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.tectonic_shift)
}

// optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 3;
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_has_cells_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cells_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::has_cells_to_rewrite() const {
  return _internal_has_cells_to_rewrite();
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_cells_to_rewrite() const {
  const ::TSCE::CellCoordinateVectorArchive* p = _impl_.cells_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateVectorArchive&>(
      ::TSCE::_CellCoordinateVectorArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::cells_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.cells_to_rewrite)
  return _internal_cells_to_rewrite();
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_set_allocated_cells_to_rewrite(
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  if (cells_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.cells_to_rewrite)
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::release_cells_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_release_cells_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.cells_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_mutable_cells_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.cells_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateVectorArchive>(GetArenaForAllocation());
    _impl_.cells_to_rewrite_ = p;
  }
  return _impl_.cells_to_rewrite_;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::mutable_cells_to_rewrite() {
  ::TSCE::CellCoordinateVectorArchive* _msg = _internal_mutable_cells_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.cells_to_rewrite)
  return _msg;
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  if (cells_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cells_to_rewrite));
    if (message_arena != submessage_arena) {
      cells_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cells_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.cells_to_rewrite)
}

// optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 4;
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_has_conditional_style_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conditional_style_sets_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForTectonicShiftArchive::has_conditional_style_sets() const {
  return _internal_has_conditional_style_sets();
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_conditional_style_sets() const {
  const ::TSCE::CellCoordinateObjectMapArchive* p = _impl_.conditional_style_sets_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateObjectMapArchive&>(
      ::TSCE::_CellCoordinateObjectMapArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::conditional_style_sets() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.conditional_style_sets)
  return _internal_conditional_style_sets();
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_set_allocated_conditional_style_sets(
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  if (conditional_style_sets) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.conditional_style_sets)
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::release_conditional_style_sets() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::unsafe_arena_release_conditional_style_sets() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.conditional_style_sets)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::_internal_mutable_conditional_style_sets() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.conditional_style_sets_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateObjectMapArchive>(GetArenaForAllocation());
    _impl_.conditional_style_sets_ = p;
  }
  return _impl_.conditional_style_sets_;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::mutable_conditional_style_sets() {
  ::TSCE::CellCoordinateObjectMapArchive* _msg = _internal_mutable_conditional_style_sets();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.conditional_style_sets)
  return _msg;
}
inline void CommandRewriteConditionalStylesForTectonicShiftArchive::set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  if (conditional_style_sets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_sets));
    if (message_arena != submessage_arena) {
      conditional_style_sets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style_sets, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForTectonicShiftArchive.conditional_style_sets)
}

// -------------------------------------------------------------------

// CommandRewriteConditionalStylesForSortArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteConditionalStylesForSortArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForSortArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteConditionalStylesForSortArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForSortArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForSortArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForSortArchive.super)
  return _internal_super();
}
inline void CommandRewriteConditionalStylesForSortArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForSortArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForSortArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForSortArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForSortArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForSortArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForSortArchive.super)
  return _msg;
}
inline void CommandRewriteConditionalStylesForSortArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.super)
}

// required .TSK.ShuffleMappingArchive sort_mapping = 2;
inline bool CommandRewriteConditionalStylesForSortArchive::_internal_has_sort_mapping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sort_mapping_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForSortArchive::has_sort_mapping() const {
  return _internal_has_sort_mapping();
}
inline const ::TSK::ShuffleMappingArchive& CommandRewriteConditionalStylesForSortArchive::_internal_sort_mapping() const {
  const ::TSK::ShuffleMappingArchive* p = _impl_.sort_mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ShuffleMappingArchive&>(
      ::TSK::_ShuffleMappingArchive_default_instance_);
}
inline const ::TSK::ShuffleMappingArchive& CommandRewriteConditionalStylesForSortArchive::sort_mapping() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForSortArchive.sort_mapping)
  return _internal_sort_mapping();
}
inline void CommandRewriteConditionalStylesForSortArchive::unsafe_arena_set_allocated_sort_mapping(
    ::TSK::ShuffleMappingArchive* sort_mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_mapping_);
  }
  _impl_.sort_mapping_ = sort_mapping;
  if (sort_mapping) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.sort_mapping)
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteConditionalStylesForSortArchive::release_sort_mapping() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteConditionalStylesForSortArchive::unsafe_arena_release_sort_mapping() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForSortArchive.sort_mapping)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::ShuffleMappingArchive* temp = _impl_.sort_mapping_;
  _impl_.sort_mapping_ = nullptr;
  return temp;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteConditionalStylesForSortArchive::_internal_mutable_sort_mapping() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sort_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ShuffleMappingArchive>(GetArenaForAllocation());
    _impl_.sort_mapping_ = p;
  }
  return _impl_.sort_mapping_;
}
inline ::TSK::ShuffleMappingArchive* CommandRewriteConditionalStylesForSortArchive::mutable_sort_mapping() {
  ::TSK::ShuffleMappingArchive* _msg = _internal_mutable_sort_mapping();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForSortArchive.sort_mapping)
  return _msg;
}
inline void CommandRewriteConditionalStylesForSortArchive::set_allocated_sort_mapping(::TSK::ShuffleMappingArchive* sort_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sort_mapping_);
  }
  if (sort_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_mapping));
    if (message_arena != submessage_arena) {
      sort_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_mapping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sort_mapping_ = sort_mapping;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.sort_mapping)
}

// required .TSCE.CFUUIDArchive sorted_table_id = 3;
inline bool CommandRewriteConditionalStylesForSortArchive::_internal_has_sorted_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sorted_table_id_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForSortArchive::has_sorted_table_id() const {
  return _internal_has_sorted_table_id();
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteConditionalStylesForSortArchive::_internal_sorted_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.sorted_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteConditionalStylesForSortArchive::sorted_table_id() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForSortArchive.sorted_table_id)
  return _internal_sorted_table_id();
}
inline void CommandRewriteConditionalStylesForSortArchive::unsafe_arena_set_allocated_sorted_table_id(
    ::TSCE::CFUUIDArchive* sorted_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorted_table_id_);
  }
  _impl_.sorted_table_id_ = sorted_table_id;
  if (sorted_table_id) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.sorted_table_id)
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForSortArchive::release_sorted_table_id() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::CFUUIDArchive* temp = _impl_.sorted_table_id_;
  _impl_.sorted_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForSortArchive::unsafe_arena_release_sorted_table_id() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForSortArchive.sorted_table_id)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::CFUUIDArchive* temp = _impl_.sorted_table_id_;
  _impl_.sorted_table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForSortArchive::_internal_mutable_sorted_table_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sorted_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.sorted_table_id_ = p;
  }
  return _impl_.sorted_table_id_;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForSortArchive::mutable_sorted_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_sorted_table_id();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForSortArchive.sorted_table_id)
  return _msg;
}
inline void CommandRewriteConditionalStylesForSortArchive::set_allocated_sorted_table_id(::TSCE::CFUUIDArchive* sorted_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sorted_table_id_);
  }
  if (sorted_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sorted_table_id));
    if (message_arena != submessage_arena) {
      sorted_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sorted_table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sorted_table_id_ = sorted_table_id;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.sorted_table_id)
}

// optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
inline bool CommandRewriteConditionalStylesForSortArchive::_internal_has_cells_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cells_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForSortArchive::has_cells_to_rewrite() const {
  return _internal_has_cells_to_rewrite();
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForSortArchive::_internal_cells_to_rewrite() const {
  const ::TSCE::CellCoordinateVectorArchive* p = _impl_.cells_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateVectorArchive&>(
      ::TSCE::_CellCoordinateVectorArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForSortArchive::cells_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForSortArchive.cells_to_rewrite)
  return _internal_cells_to_rewrite();
}
inline void CommandRewriteConditionalStylesForSortArchive::unsafe_arena_set_allocated_cells_to_rewrite(
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  if (cells_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.cells_to_rewrite)
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForSortArchive::release_cells_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForSortArchive::unsafe_arena_release_cells_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForSortArchive.cells_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForSortArchive::_internal_mutable_cells_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.cells_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateVectorArchive>(GetArenaForAllocation());
    _impl_.cells_to_rewrite_ = p;
  }
  return _impl_.cells_to_rewrite_;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForSortArchive::mutable_cells_to_rewrite() {
  ::TSCE::CellCoordinateVectorArchive* _msg = _internal_mutable_cells_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForSortArchive.cells_to_rewrite)
  return _msg;
}
inline void CommandRewriteConditionalStylesForSortArchive::set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  if (cells_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cells_to_rewrite));
    if (message_arena != submessage_arena) {
      cells_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cells_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.cells_to_rewrite)
}

// optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
inline bool CommandRewriteConditionalStylesForSortArchive::_internal_has_conditional_style_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conditional_style_sets_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForSortArchive::has_conditional_style_sets() const {
  return _internal_has_conditional_style_sets();
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForSortArchive::_internal_conditional_style_sets() const {
  const ::TSCE::CellCoordinateObjectMapArchive* p = _impl_.conditional_style_sets_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateObjectMapArchive&>(
      ::TSCE::_CellCoordinateObjectMapArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForSortArchive::conditional_style_sets() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForSortArchive.conditional_style_sets)
  return _internal_conditional_style_sets();
}
inline void CommandRewriteConditionalStylesForSortArchive::unsafe_arena_set_allocated_conditional_style_sets(
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  if (conditional_style_sets) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.conditional_style_sets)
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForSortArchive::release_conditional_style_sets() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForSortArchive::unsafe_arena_release_conditional_style_sets() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForSortArchive.conditional_style_sets)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForSortArchive::_internal_mutable_conditional_style_sets() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.conditional_style_sets_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateObjectMapArchive>(GetArenaForAllocation());
    _impl_.conditional_style_sets_ = p;
  }
  return _impl_.conditional_style_sets_;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForSortArchive::mutable_conditional_style_sets() {
  ::TSCE::CellCoordinateObjectMapArchive* _msg = _internal_mutable_conditional_style_sets();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForSortArchive.conditional_style_sets)
  return _msg;
}
inline void CommandRewriteConditionalStylesForSortArchive::set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  if (conditional_style_sets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_sets));
    if (message_arena != submessage_arena) {
      conditional_style_sets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style_sets, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForSortArchive.conditional_style_sets)
}

// -------------------------------------------------------------------

// CommandRewriteConditionalStylesForRangeMoveArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForRangeMoveArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForRangeMoveArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRangeMoveArchive.super)
  return _internal_super();
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRangeMoveArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRangeMoveArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRangeMoveArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForRangeMoveArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRangeMoveArchive.super)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.super)
}

// optional .TSCE.RangeReferenceArchive from_range_reference = 7;
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::_internal_has_from_range_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_range_reference_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::has_from_range_reference() const {
  return _internal_has_from_range_reference();
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteConditionalStylesForRangeMoveArchive::_internal_from_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.from_range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteConditionalStylesForRangeMoveArchive::from_range_reference() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRangeMoveArchive.from_range_reference)
  return _internal_from_range_reference();
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_set_allocated_from_range_reference(
    ::TSCE::RangeReferenceArchive* from_range_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_range_reference_);
  }
  _impl_.from_range_reference_ = from_range_reference;
  if (from_range_reference) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.from_range_reference)
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::release_from_range_reference() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.from_range_reference_;
  _impl_.from_range_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_release_from_range_reference() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRangeMoveArchive.from_range_reference)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.from_range_reference_;
  _impl_.from_range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::_internal_mutable_from_range_reference() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.from_range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.from_range_reference_ = p;
  }
  return _impl_.from_range_reference_;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::mutable_from_range_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_from_range_reference();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRangeMoveArchive.from_range_reference)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::set_allocated_from_range_reference(::TSCE::RangeReferenceArchive* from_range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_range_reference_);
  }
  if (from_range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_range_reference));
    if (message_arena != submessage_arena) {
      from_range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_range_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.from_range_reference_ = from_range_reference;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.from_range_reference)
}

// optional .TSCE.RangeReferenceArchive to_range_reference = 8;
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::_internal_has_to_range_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_range_reference_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::has_to_range_reference() const {
  return _internal_has_to_range_reference();
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteConditionalStylesForRangeMoveArchive::_internal_to_range_reference() const {
  const ::TSCE::RangeReferenceArchive* p = _impl_.to_range_reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& CommandRewriteConditionalStylesForRangeMoveArchive::to_range_reference() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRangeMoveArchive.to_range_reference)
  return _internal_to_range_reference();
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_set_allocated_to_range_reference(
    ::TSCE::RangeReferenceArchive* to_range_reference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_range_reference_);
  }
  _impl_.to_range_reference_ = to_range_reference;
  if (to_range_reference) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.to_range_reference)
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::release_to_range_reference() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.to_range_reference_;
  _impl_.to_range_reference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_release_to_range_reference() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRangeMoveArchive.to_range_reference)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::RangeReferenceArchive* temp = _impl_.to_range_reference_;
  _impl_.to_range_reference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::_internal_mutable_to_range_reference() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.to_range_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArenaForAllocation());
    _impl_.to_range_reference_ = p;
  }
  return _impl_.to_range_reference_;
}
inline ::TSCE::RangeReferenceArchive* CommandRewriteConditionalStylesForRangeMoveArchive::mutable_to_range_reference() {
  ::TSCE::RangeReferenceArchive* _msg = _internal_mutable_to_range_reference();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRangeMoveArchive.to_range_reference)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::set_allocated_to_range_reference(::TSCE::RangeReferenceArchive* to_range_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_range_reference_);
  }
  if (to_range_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_range_reference));
    if (message_arena != submessage_arena) {
      to_range_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_range_reference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.to_range_reference_ = to_range_reference;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.to_range_reference)
}

// optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 5;
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::_internal_has_cells_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cells_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::has_cells_to_rewrite() const {
  return _internal_has_cells_to_rewrite();
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForRangeMoveArchive::_internal_cells_to_rewrite() const {
  const ::TSCE::CellCoordinateVectorArchive* p = _impl_.cells_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateVectorArchive&>(
      ::TSCE::_CellCoordinateVectorArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForRangeMoveArchive::cells_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRangeMoveArchive.cells_to_rewrite)
  return _internal_cells_to_rewrite();
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_set_allocated_cells_to_rewrite(
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  if (cells_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.cells_to_rewrite)
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForRangeMoveArchive::release_cells_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_release_cells_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRangeMoveArchive.cells_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForRangeMoveArchive::_internal_mutable_cells_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cells_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateVectorArchive>(GetArenaForAllocation());
    _impl_.cells_to_rewrite_ = p;
  }
  return _impl_.cells_to_rewrite_;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForRangeMoveArchive::mutable_cells_to_rewrite() {
  ::TSCE::CellCoordinateVectorArchive* _msg = _internal_mutable_cells_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRangeMoveArchive.cells_to_rewrite)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  if (cells_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cells_to_rewrite));
    if (message_arena != submessage_arena) {
      cells_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cells_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.cells_to_rewrite)
}

// optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 6;
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::_internal_has_conditional_style_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conditional_style_sets_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForRangeMoveArchive::has_conditional_style_sets() const {
  return _internal_has_conditional_style_sets();
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForRangeMoveArchive::_internal_conditional_style_sets() const {
  const ::TSCE::CellCoordinateObjectMapArchive* p = _impl_.conditional_style_sets_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateObjectMapArchive&>(
      ::TSCE::_CellCoordinateObjectMapArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForRangeMoveArchive::conditional_style_sets() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForRangeMoveArchive.conditional_style_sets)
  return _internal_conditional_style_sets();
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_set_allocated_conditional_style_sets(
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  if (conditional_style_sets) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.conditional_style_sets)
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForRangeMoveArchive::release_conditional_style_sets() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForRangeMoveArchive::unsafe_arena_release_conditional_style_sets() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForRangeMoveArchive.conditional_style_sets)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForRangeMoveArchive::_internal_mutable_conditional_style_sets() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.conditional_style_sets_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateObjectMapArchive>(GetArenaForAllocation());
    _impl_.conditional_style_sets_ = p;
  }
  return _impl_.conditional_style_sets_;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForRangeMoveArchive::mutable_conditional_style_sets() {
  ::TSCE::CellCoordinateObjectMapArchive* _msg = _internal_mutable_conditional_style_sets();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForRangeMoveArchive.conditional_style_sets)
  return _msg;
}
inline void CommandRewriteConditionalStylesForRangeMoveArchive::set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  if (conditional_style_sets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_sets));
    if (message_arena != submessage_arena) {
      conditional_style_sets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style_sets, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForRangeMoveArchive.conditional_style_sets)
}

// -------------------------------------------------------------------

// CommandRewriteConditionalStylesForCellMergeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandRewriteConditionalStylesForCellMergeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForCellMergeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForCellMergeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandRewriteConditionalStylesForCellMergeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForCellMergeArchive.super)
  return _internal_super();
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.super)
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForCellMergeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForCellMergeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForCellMergeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandRewriteConditionalStylesForCellMergeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForCellMergeArchive.super)
  return _msg;
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.super)
}

// required .TSCE.CFUUIDArchive merged_table_id = 2;
inline bool CommandRewriteConditionalStylesForCellMergeArchive::_internal_has_merged_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merged_table_id_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForCellMergeArchive::has_merged_table_id() const {
  return _internal_has_merged_table_id();
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteConditionalStylesForCellMergeArchive::_internal_merged_table_id() const {
  const ::TSCE::CFUUIDArchive* p = _impl_.merged_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CFUUIDArchive&>(
      ::TSCE::_CFUUIDArchive_default_instance_);
}
inline const ::TSCE::CFUUIDArchive& CommandRewriteConditionalStylesForCellMergeArchive::merged_table_id() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_table_id)
  return _internal_merged_table_id();
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_set_allocated_merged_table_id(
    ::TSCE::CFUUIDArchive* merged_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merged_table_id_);
  }
  _impl_.merged_table_id_ = merged_table_id;
  if (merged_table_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_table_id)
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForCellMergeArchive::release_merged_table_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::CFUUIDArchive* temp = _impl_.merged_table_id_;
  _impl_.merged_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_release_merged_table_id() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_table_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::CFUUIDArchive* temp = _impl_.merged_table_id_;
  _impl_.merged_table_id_ = nullptr;
  return temp;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForCellMergeArchive::_internal_mutable_merged_table_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.merged_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CFUUIDArchive>(GetArenaForAllocation());
    _impl_.merged_table_id_ = p;
  }
  return _impl_.merged_table_id_;
}
inline ::TSCE::CFUUIDArchive* CommandRewriteConditionalStylesForCellMergeArchive::mutable_merged_table_id() {
  ::TSCE::CFUUIDArchive* _msg = _internal_mutable_merged_table_id();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_table_id)
  return _msg;
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::set_allocated_merged_table_id(::TSCE::CFUUIDArchive* merged_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merged_table_id_);
  }
  if (merged_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merged_table_id));
    if (message_arena != submessage_arena) {
      merged_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merged_table_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.merged_table_id_ = merged_table_id;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_table_id)
}

// required .TSCE.RangeCoordinateArchive merged_range = 3;
inline bool CommandRewriteConditionalStylesForCellMergeArchive::_internal_has_merged_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.merged_range_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForCellMergeArchive::has_merged_range() const {
  return _internal_has_merged_range();
}
inline const ::TSCE::RangeCoordinateArchive& CommandRewriteConditionalStylesForCellMergeArchive::_internal_merged_range() const {
  const ::TSCE::RangeCoordinateArchive* p = _impl_.merged_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeCoordinateArchive&>(
      ::TSCE::_RangeCoordinateArchive_default_instance_);
}
inline const ::TSCE::RangeCoordinateArchive& CommandRewriteConditionalStylesForCellMergeArchive::merged_range() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_range)
  return _internal_merged_range();
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_set_allocated_merged_range(
    ::TSCE::RangeCoordinateArchive* merged_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merged_range_);
  }
  _impl_.merged_range_ = merged_range;
  if (merged_range) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_range)
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteConditionalStylesForCellMergeArchive::release_merged_range() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.merged_range_;
  _impl_.merged_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_release_merged_range() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_range)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeCoordinateArchive* temp = _impl_.merged_range_;
  _impl_.merged_range_ = nullptr;
  return temp;
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteConditionalStylesForCellMergeArchive::_internal_mutable_merged_range() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.merged_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeCoordinateArchive>(GetArenaForAllocation());
    _impl_.merged_range_ = p;
  }
  return _impl_.merged_range_;
}
inline ::TSCE::RangeCoordinateArchive* CommandRewriteConditionalStylesForCellMergeArchive::mutable_merged_range() {
  ::TSCE::RangeCoordinateArchive* _msg = _internal_mutable_merged_range();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_range)
  return _msg;
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::set_allocated_merged_range(::TSCE::RangeCoordinateArchive* merged_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.merged_range_);
  }
  if (merged_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merged_range));
    if (message_arena != submessage_arena) {
      merged_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merged_range, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.merged_range_ = merged_range;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.merged_range)
}

// optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
inline bool CommandRewriteConditionalStylesForCellMergeArchive::_internal_has_cells_to_rewrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cells_to_rewrite_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForCellMergeArchive::has_cells_to_rewrite() const {
  return _internal_has_cells_to_rewrite();
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForCellMergeArchive::_internal_cells_to_rewrite() const {
  const ::TSCE::CellCoordinateVectorArchive* p = _impl_.cells_to_rewrite_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateVectorArchive&>(
      ::TSCE::_CellCoordinateVectorArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateVectorArchive& CommandRewriteConditionalStylesForCellMergeArchive::cells_to_rewrite() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForCellMergeArchive.cells_to_rewrite)
  return _internal_cells_to_rewrite();
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_set_allocated_cells_to_rewrite(
    ::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  if (cells_to_rewrite) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.cells_to_rewrite)
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForCellMergeArchive::release_cells_to_rewrite() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_release_cells_to_rewrite() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForCellMergeArchive.cells_to_rewrite)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateVectorArchive* temp = _impl_.cells_to_rewrite_;
  _impl_.cells_to_rewrite_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForCellMergeArchive::_internal_mutable_cells_to_rewrite() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.cells_to_rewrite_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateVectorArchive>(GetArenaForAllocation());
    _impl_.cells_to_rewrite_ = p;
  }
  return _impl_.cells_to_rewrite_;
}
inline ::TSCE::CellCoordinateVectorArchive* CommandRewriteConditionalStylesForCellMergeArchive::mutable_cells_to_rewrite() {
  ::TSCE::CellCoordinateVectorArchive* _msg = _internal_mutable_cells_to_rewrite();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForCellMergeArchive.cells_to_rewrite)
  return _msg;
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::set_allocated_cells_to_rewrite(::TSCE::CellCoordinateVectorArchive* cells_to_rewrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cells_to_rewrite_);
  }
  if (cells_to_rewrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cells_to_rewrite));
    if (message_arena != submessage_arena) {
      cells_to_rewrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cells_to_rewrite, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.cells_to_rewrite_ = cells_to_rewrite;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.cells_to_rewrite)
}

// optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
inline bool CommandRewriteConditionalStylesForCellMergeArchive::_internal_has_conditional_style_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conditional_style_sets_ != nullptr);
  return value;
}
inline bool CommandRewriteConditionalStylesForCellMergeArchive::has_conditional_style_sets() const {
  return _internal_has_conditional_style_sets();
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForCellMergeArchive::_internal_conditional_style_sets() const {
  const ::TSCE::CellCoordinateObjectMapArchive* p = _impl_.conditional_style_sets_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateObjectMapArchive&>(
      ::TSCE::_CellCoordinateObjectMapArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateObjectMapArchive& CommandRewriteConditionalStylesForCellMergeArchive::conditional_style_sets() const {
  // @@protoc_insertion_point(field_get:TST.CommandRewriteConditionalStylesForCellMergeArchive.conditional_style_sets)
  return _internal_conditional_style_sets();
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_set_allocated_conditional_style_sets(
    ::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  if (conditional_style_sets) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.conditional_style_sets)
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForCellMergeArchive::release_conditional_style_sets() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForCellMergeArchive::unsafe_arena_release_conditional_style_sets() {
  // @@protoc_insertion_point(field_release:TST.CommandRewriteConditionalStylesForCellMergeArchive.conditional_style_sets)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordinateObjectMapArchive* temp = _impl_.conditional_style_sets_;
  _impl_.conditional_style_sets_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForCellMergeArchive::_internal_mutable_conditional_style_sets() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.conditional_style_sets_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateObjectMapArchive>(GetArenaForAllocation());
    _impl_.conditional_style_sets_ = p;
  }
  return _impl_.conditional_style_sets_;
}
inline ::TSCE::CellCoordinateObjectMapArchive* CommandRewriteConditionalStylesForCellMergeArchive::mutable_conditional_style_sets() {
  ::TSCE::CellCoordinateObjectMapArchive* _msg = _internal_mutable_conditional_style_sets();
  // @@protoc_insertion_point(field_mutable:TST.CommandRewriteConditionalStylesForCellMergeArchive.conditional_style_sets)
  return _msg;
}
inline void CommandRewriteConditionalStylesForCellMergeArchive::set_allocated_conditional_style_sets(::TSCE::CellCoordinateObjectMapArchive* conditional_style_sets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditional_style_sets_);
  }
  if (conditional_style_sets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_sets));
    if (message_arena != submessage_arena) {
      conditional_style_sets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style_sets, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.conditional_style_sets_ = conditional_style_sets;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandRewriteConditionalStylesForCellMergeArchive.conditional_style_sets)
}

// -------------------------------------------------------------------

// CommandMergeUnmergeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMergeUnmergeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMergeUnmergeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMergeUnmergeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMergeUnmergeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMergeUnmergeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeUnmergeArchive.super)
  return _internal_super();
}
inline void CommandMergeUnmergeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeUnmergeArchive.super)
}
inline ::TST::TableCommandArchive* CommandMergeUnmergeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMergeUnmergeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeUnmergeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMergeUnmergeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMergeUnmergeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeUnmergeArchive.super)
  return _msg;
}
inline void CommandMergeUnmergeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeUnmergeArchive.super)
}

// required .TST.MergeActionArchive merge_action = 2;
inline bool CommandMergeUnmergeArchive::_internal_has_merge_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandMergeUnmergeArchive::has_merge_action() const {
  return _internal_has_merge_action();
}
inline void CommandMergeUnmergeArchive::clear_merge_action() {
  _impl_.merge_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::TST::MergeActionArchive CommandMergeUnmergeArchive::_internal_merge_action() const {
  return static_cast< ::TST::MergeActionArchive >(_impl_.merge_action_);
}
inline ::TST::MergeActionArchive CommandMergeUnmergeArchive::merge_action() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeUnmergeArchive.merge_action)
  return _internal_merge_action();
}
inline void CommandMergeUnmergeArchive::_internal_set_merge_action(::TST::MergeActionArchive value) {
  assert(::TST::MergeActionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.merge_action_ = value;
}
inline void CommandMergeUnmergeArchive::set_merge_action(::TST::MergeActionArchive value) {
  _internal_set_merge_action(value);
  // @@protoc_insertion_point(field_set:TST.CommandMergeUnmergeArchive.merge_action)
}

// required .TST.SelectionArchive selection = 3;
inline bool CommandMergeUnmergeArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandMergeUnmergeArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandMergeUnmergeArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandMergeUnmergeArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeUnmergeArchive.selection)
  return _internal_selection();
}
inline void CommandMergeUnmergeArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeUnmergeArchive.selection)
}
inline ::TST::SelectionArchive* CommandMergeUnmergeArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandMergeUnmergeArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeUnmergeArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandMergeUnmergeArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandMergeUnmergeArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeUnmergeArchive.selection)
  return _msg;
}
inline void CommandMergeUnmergeArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeUnmergeArchive.selection)
}

// required .TST.CellMapArchive undo_cell_map = 4;
inline bool CommandMergeUnmergeArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandMergeUnmergeArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandMergeUnmergeArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandMergeUnmergeArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeUnmergeArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandMergeUnmergeArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeUnmergeArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeUnmergeArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeUnmergeArchive.undo_cell_map)
  return _msg;
}
inline void CommandMergeUnmergeArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeUnmergeArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 5;
inline bool CommandMergeUnmergeArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandMergeUnmergeArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandMergeUnmergeArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandMergeUnmergeArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeUnmergeArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandMergeUnmergeArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeUnmergeArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeUnmergeArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandMergeUnmergeArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeUnmergeArchive.redo_cell_map)
  return _msg;
}
inline void CommandMergeUnmergeArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeUnmergeArchive.redo_cell_map)
}

// optional .TSP.Reference old_merge_ranges = 8;
inline bool CommandMergeUnmergeArchive::_internal_has_old_merge_ranges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_merge_ranges_ != nullptr);
  return value;
}
inline bool CommandMergeUnmergeArchive::has_old_merge_ranges() const {
  return _internal_has_old_merge_ranges();
}
inline const ::TSP::Reference& CommandMergeUnmergeArchive::_internal_old_merge_ranges() const {
  const ::TSP::Reference* p = _impl_.old_merge_ranges_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMergeUnmergeArchive::old_merge_ranges() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeUnmergeArchive.old_merge_ranges)
  return _internal_old_merge_ranges();
}
inline void CommandMergeUnmergeArchive::unsafe_arena_set_allocated_old_merge_ranges(
    ::TSP::Reference* old_merge_ranges) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_merge_ranges_);
  }
  _impl_.old_merge_ranges_ = old_merge_ranges;
  if (old_merge_ranges) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeUnmergeArchive.old_merge_ranges)
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::release_old_merge_ranges() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.old_merge_ranges_;
  _impl_.old_merge_ranges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::unsafe_arena_release_old_merge_ranges() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeUnmergeArchive.old_merge_ranges)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.old_merge_ranges_;
  _impl_.old_merge_ranges_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::_internal_mutable_old_merge_ranges() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.old_merge_ranges_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_merge_ranges_ = p;
  }
  return _impl_.old_merge_ranges_;
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::mutable_old_merge_ranges() {
  ::TSP::Reference* _msg = _internal_mutable_old_merge_ranges();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeUnmergeArchive.old_merge_ranges)
  return _msg;
}
inline void CommandMergeUnmergeArchive::set_allocated_old_merge_ranges(::TSP::Reference* old_merge_ranges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_merge_ranges_);
  }
  if (old_merge_ranges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_merge_ranges));
    if (message_arena != submessage_arena) {
      old_merge_ranges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_merge_ranges, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.old_merge_ranges_ = old_merge_ranges;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeUnmergeArchive.old_merge_ranges)
}

// optional .TSP.Reference undo_formula_rewrite_command = 9;
inline bool CommandMergeUnmergeArchive::_internal_has_undo_formula_rewrite_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_formula_rewrite_command_ != nullptr);
  return value;
}
inline bool CommandMergeUnmergeArchive::has_undo_formula_rewrite_command() const {
  return _internal_has_undo_formula_rewrite_command();
}
inline const ::TSP::Reference& CommandMergeUnmergeArchive::_internal_undo_formula_rewrite_command() const {
  const ::TSP::Reference* p = _impl_.undo_formula_rewrite_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandMergeUnmergeArchive::undo_formula_rewrite_command() const {
  // @@protoc_insertion_point(field_get:TST.CommandMergeUnmergeArchive.undo_formula_rewrite_command)
  return _internal_undo_formula_rewrite_command();
}
inline void CommandMergeUnmergeArchive::unsafe_arena_set_allocated_undo_formula_rewrite_command(
    ::TSP::Reference* undo_formula_rewrite_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  if (undo_formula_rewrite_command) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMergeUnmergeArchive.undo_formula_rewrite_command)
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::release_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::unsafe_arena_release_undo_formula_rewrite_command() {
  // @@protoc_insertion_point(field_release:TST.CommandMergeUnmergeArchive.undo_formula_rewrite_command)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.undo_formula_rewrite_command_;
  _impl_.undo_formula_rewrite_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::_internal_mutable_undo_formula_rewrite_command() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.undo_formula_rewrite_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.undo_formula_rewrite_command_ = p;
  }
  return _impl_.undo_formula_rewrite_command_;
}
inline ::TSP::Reference* CommandMergeUnmergeArchive::mutable_undo_formula_rewrite_command() {
  ::TSP::Reference* _msg = _internal_mutable_undo_formula_rewrite_command();
  // @@protoc_insertion_point(field_mutable:TST.CommandMergeUnmergeArchive.undo_formula_rewrite_command)
  return _msg;
}
inline void CommandMergeUnmergeArchive::set_allocated_undo_formula_rewrite_command(::TSP::Reference* undo_formula_rewrite_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_formula_rewrite_command_);
  }
  if (undo_formula_rewrite_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_formula_rewrite_command));
    if (message_arena != submessage_arena) {
      undo_formula_rewrite_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_formula_rewrite_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.undo_formula_rewrite_command_ = undo_formula_rewrite_command;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMergeUnmergeArchive.undo_formula_rewrite_command)
}

// -------------------------------------------------------------------

// CommandHideShowArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandHideShowArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandHideShowArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandHideShowArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandHideShowArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandHideShowArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.super)
  return _internal_super();
}
inline void CommandHideShowArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandHideShowArchive.super)
}
inline ::TST::TableCommandArchive* CommandHideShowArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandHideShowArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandHideShowArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandHideShowArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandHideShowArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandHideShowArchive.super)
  return _msg;
}
inline void CommandHideShowArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandHideShowArchive.super)
}

// required .TST.CommandDirectionArchive direction = 2;
inline bool CommandHideShowArchive::_internal_has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandHideShowArchive::has_direction() const {
  return _internal_has_direction();
}
inline void CommandHideShowArchive::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TST::CommandDirectionArchive CommandHideShowArchive::_internal_direction() const {
  return static_cast< ::TST::CommandDirectionArchive >(_impl_.direction_);
}
inline ::TST::CommandDirectionArchive CommandHideShowArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.direction)
  return _internal_direction();
}
inline void CommandHideShowArchive::_internal_set_direction(::TST::CommandDirectionArchive value) {
  assert(::TST::CommandDirectionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.direction_ = value;
}
inline void CommandHideShowArchive::set_direction(::TST::CommandDirectionArchive value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.CommandHideShowArchive.direction)
}

// required .TST.HideShowActionArchive hide_show_action = 3;
inline bool CommandHideShowArchive::_internal_has_hide_show_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandHideShowArchive::has_hide_show_action() const {
  return _internal_has_hide_show_action();
}
inline void CommandHideShowArchive::clear_hide_show_action() {
  _impl_.hide_show_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TST::HideShowActionArchive CommandHideShowArchive::_internal_hide_show_action() const {
  return static_cast< ::TST::HideShowActionArchive >(_impl_.hide_show_action_);
}
inline ::TST::HideShowActionArchive CommandHideShowArchive::hide_show_action() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.hide_show_action)
  return _internal_hide_show_action();
}
inline void CommandHideShowArchive::_internal_set_hide_show_action(::TST::HideShowActionArchive value) {
  assert(::TST::HideShowActionArchive_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hide_show_action_ = value;
}
inline void CommandHideShowArchive::set_hide_show_action(::TST::HideShowActionArchive value) {
  _internal_set_hide_show_action(value);
  // @@protoc_insertion_point(field_set:TST.CommandHideShowArchive.hide_show_action)
}

// required uint32 hiding_action = 4;
inline bool CommandHideShowArchive::_internal_has_hiding_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandHideShowArchive::has_hiding_action() const {
  return _internal_has_hiding_action();
}
inline void CommandHideShowArchive::clear_hiding_action() {
  _impl_.hiding_action_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandHideShowArchive::_internal_hiding_action() const {
  return _impl_.hiding_action_;
}
inline uint32_t CommandHideShowArchive::hiding_action() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.hiding_action)
  return _internal_hiding_action();
}
inline void CommandHideShowArchive::_internal_set_hiding_action(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hiding_action_ = value;
}
inline void CommandHideShowArchive::set_hiding_action(uint32_t value) {
  _internal_set_hiding_action(value);
  // @@protoc_insertion_point(field_set:TST.CommandHideShowArchive.hiding_action)
}

// required .TSP.IndexSet elements_affected = 5;
inline bool CommandHideShowArchive::_internal_has_elements_affected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.elements_affected_ != nullptr);
  return value;
}
inline bool CommandHideShowArchive::has_elements_affected() const {
  return _internal_has_elements_affected();
}
inline const ::TSP::IndexSet& CommandHideShowArchive::_internal_elements_affected() const {
  const ::TSP::IndexSet* p = _impl_.elements_affected_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& CommandHideShowArchive::elements_affected() const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.elements_affected)
  return _internal_elements_affected();
}
inline void CommandHideShowArchive::unsafe_arena_set_allocated_elements_affected(
    ::TSP::IndexSet* elements_affected) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elements_affected_);
  }
  _impl_.elements_affected_ = elements_affected;
  if (elements_affected) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandHideShowArchive.elements_affected)
}
inline ::TSP::IndexSet* CommandHideShowArchive::release_elements_affected() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = _impl_.elements_affected_;
  _impl_.elements_affected_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::IndexSet* CommandHideShowArchive::unsafe_arena_release_elements_affected() {
  // @@protoc_insertion_point(field_release:TST.CommandHideShowArchive.elements_affected)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = _impl_.elements_affected_;
  _impl_.elements_affected_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* CommandHideShowArchive::_internal_mutable_elements_affected() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.elements_affected_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArenaForAllocation());
    _impl_.elements_affected_ = p;
  }
  return _impl_.elements_affected_;
}
inline ::TSP::IndexSet* CommandHideShowArchive::mutable_elements_affected() {
  ::TSP::IndexSet* _msg = _internal_mutable_elements_affected();
  // @@protoc_insertion_point(field_mutable:TST.CommandHideShowArchive.elements_affected)
  return _msg;
}
inline void CommandHideShowArchive::set_allocated_elements_affected(::TSP::IndexSet* elements_affected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elements_affected_);
  }
  if (elements_affected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elements_affected));
    if (message_arena != submessage_arena) {
      elements_affected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elements_affected, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.elements_affected_ = elements_affected;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandHideShowArchive.elements_affected)
}

// repeated uint32 old_hiding_states = 7;
inline int CommandHideShowArchive::_internal_old_hiding_states_size() const {
  return _impl_.old_hiding_states_.size();
}
inline int CommandHideShowArchive::old_hiding_states_size() const {
  return _internal_old_hiding_states_size();
}
inline void CommandHideShowArchive::clear_old_hiding_states() {
  _impl_.old_hiding_states_.Clear();
}
inline uint32_t CommandHideShowArchive::_internal_old_hiding_states(int index) const {
  return _impl_.old_hiding_states_.Get(index);
}
inline uint32_t CommandHideShowArchive::old_hiding_states(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandHideShowArchive.old_hiding_states)
  return _internal_old_hiding_states(index);
}
inline void CommandHideShowArchive::set_old_hiding_states(int index, uint32_t value) {
  _impl_.old_hiding_states_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandHideShowArchive.old_hiding_states)
}
inline void CommandHideShowArchive::_internal_add_old_hiding_states(uint32_t value) {
  _impl_.old_hiding_states_.Add(value);
}
inline void CommandHideShowArchive::add_old_hiding_states(uint32_t value) {
  _internal_add_old_hiding_states(value);
  // @@protoc_insertion_point(field_add:TST.CommandHideShowArchive.old_hiding_states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandHideShowArchive::_internal_old_hiding_states() const {
  return _impl_.old_hiding_states_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandHideShowArchive::old_hiding_states() const {
  // @@protoc_insertion_point(field_list:TST.CommandHideShowArchive.old_hiding_states)
  return _internal_old_hiding_states();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandHideShowArchive::_internal_mutable_old_hiding_states() {
  return &_impl_.old_hiding_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandHideShowArchive::mutable_old_hiding_states() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandHideShowArchive.old_hiding_states)
  return _internal_mutable_old_hiding_states();
}

// -------------------------------------------------------------------

// TableInfoGeometryCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool TableInfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& TableInfoGeometryCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& TableInfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void TableInfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoGeometryCommandArchive.super)
}
inline ::TSK::CommandArchive* TableInfoGeometryCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* TableInfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TableInfoGeometryCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* TableInfoGeometryCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* TableInfoGeometryCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.TableInfoGeometryCommandArchive.super)
  return _msg;
}
inline void TableInfoGeometryCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoGeometryCommandArchive.super)
}

// required .TSP.Size scale_factor = 2;
inline bool TableInfoGeometryCommandArchive::_internal_has_scale_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_factor_ != nullptr);
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_scale_factor() const {
  return _internal_has_scale_factor();
}
inline const ::TSP::Size& TableInfoGeometryCommandArchive::_internal_scale_factor() const {
  const ::TSP::Size* p = _impl_.scale_factor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& TableInfoGeometryCommandArchive::scale_factor() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.scale_factor)
  return _internal_scale_factor();
}
inline void TableInfoGeometryCommandArchive::unsafe_arena_set_allocated_scale_factor(
    ::TSP::Size* scale_factor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_factor_);
  }
  _impl_.scale_factor_ = scale_factor;
  if (scale_factor) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoGeometryCommandArchive.scale_factor)
}
inline ::TSP::Size* TableInfoGeometryCommandArchive::release_scale_factor() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = _impl_.scale_factor_;
  _impl_.scale_factor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Size* TableInfoGeometryCommandArchive::unsafe_arena_release_scale_factor() {
  // @@protoc_insertion_point(field_release:TST.TableInfoGeometryCommandArchive.scale_factor)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = _impl_.scale_factor_;
  _impl_.scale_factor_ = nullptr;
  return temp;
}
inline ::TSP::Size* TableInfoGeometryCommandArchive::_internal_mutable_scale_factor() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.scale_factor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArenaForAllocation());
    _impl_.scale_factor_ = p;
  }
  return _impl_.scale_factor_;
}
inline ::TSP::Size* TableInfoGeometryCommandArchive::mutable_scale_factor() {
  ::TSP::Size* _msg = _internal_mutable_scale_factor();
  // @@protoc_insertion_point(field_mutable:TST.TableInfoGeometryCommandArchive.scale_factor)
  return _msg;
}
inline void TableInfoGeometryCommandArchive::set_allocated_scale_factor(::TSP::Size* scale_factor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_factor_);
  }
  if (scale_factor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_factor));
    if (message_arena != submessage_arena) {
      scale_factor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_factor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.scale_factor_ = scale_factor;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoGeometryCommandArchive.scale_factor)
}

// optional .TSP.Reference table_info = 3;
inline bool TableInfoGeometryCommandArchive::_internal_has_table_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_info_ != nullptr);
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& TableInfoGeometryCommandArchive::_internal_table_info() const {
  const ::TSP::Reference* p = _impl_.table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableInfoGeometryCommandArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.table_info)
  return _internal_table_info();
}
inline void TableInfoGeometryCommandArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  _impl_.table_info_ = table_info;
  if (table_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoGeometryCommandArchive.table_info)
}
inline ::TSP::Reference* TableInfoGeometryCommandArchive::release_table_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TableInfoGeometryCommandArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.TableInfoGeometryCommandArchive.table_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableInfoGeometryCommandArchive::_internal_mutable_table_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.table_info_ = p;
  }
  return _impl_.table_info_;
}
inline ::TSP::Reference* TableInfoGeometryCommandArchive::mutable_table_info() {
  ::TSP::Reference* _msg = _internal_mutable_table_info();
  // @@protoc_insertion_point(field_mutable:TST.TableInfoGeometryCommandArchive.table_info)
  return _msg;
}
inline void TableInfoGeometryCommandArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info));
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoGeometryCommandArchive.table_info)
}

// optional .TSD.GeometryArchive new_geometry = 4;
inline bool TableInfoGeometryCommandArchive::_internal_has_new_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_geometry_ != nullptr);
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_new_geometry() const {
  return _internal_has_new_geometry();
}
inline const ::TSD::GeometryArchive& TableInfoGeometryCommandArchive::_internal_new_geometry() const {
  const ::TSD::GeometryArchive* p = _impl_.new_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& TableInfoGeometryCommandArchive::new_geometry() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.new_geometry)
  return _internal_new_geometry();
}
inline void TableInfoGeometryCommandArchive::unsafe_arena_set_allocated_new_geometry(
    ::TSD::GeometryArchive* new_geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_geometry_);
  }
  _impl_.new_geometry_ = new_geometry;
  if (new_geometry) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoGeometryCommandArchive.new_geometry)
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::release_new_geometry() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = _impl_.new_geometry_;
  _impl_.new_geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::unsafe_arena_release_new_geometry() {
  // @@protoc_insertion_point(field_release:TST.TableInfoGeometryCommandArchive.new_geometry)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = _impl_.new_geometry_;
  _impl_.new_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::_internal_mutable_new_geometry() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.new_geometry_ = p;
  }
  return _impl_.new_geometry_;
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::mutable_new_geometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_new_geometry();
  // @@protoc_insertion_point(field_mutable:TST.TableInfoGeometryCommandArchive.new_geometry)
  return _msg;
}
inline void TableInfoGeometryCommandArchive::set_allocated_new_geometry(::TSD::GeometryArchive* new_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_geometry_);
  }
  if (new_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_geometry));
    if (message_arena != submessage_arena) {
      new_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_geometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_geometry_ = new_geometry;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoGeometryCommandArchive.new_geometry)
}

// optional .TSD.GeometryArchive old_geometry = 5;
inline bool TableInfoGeometryCommandArchive::_internal_has_old_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_geometry_ != nullptr);
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_old_geometry() const {
  return _internal_has_old_geometry();
}
inline const ::TSD::GeometryArchive& TableInfoGeometryCommandArchive::_internal_old_geometry() const {
  const ::TSD::GeometryArchive* p = _impl_.old_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& TableInfoGeometryCommandArchive::old_geometry() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.old_geometry)
  return _internal_old_geometry();
}
inline void TableInfoGeometryCommandArchive::unsafe_arena_set_allocated_old_geometry(
    ::TSD::GeometryArchive* old_geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_geometry_);
  }
  _impl_.old_geometry_ = old_geometry;
  if (old_geometry) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoGeometryCommandArchive.old_geometry)
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::release_old_geometry() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = _impl_.old_geometry_;
  _impl_.old_geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::unsafe_arena_release_old_geometry() {
  // @@protoc_insertion_point(field_release:TST.TableInfoGeometryCommandArchive.old_geometry)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = _impl_.old_geometry_;
  _impl_.old_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::_internal_mutable_old_geometry() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.old_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArenaForAllocation());
    _impl_.old_geometry_ = p;
  }
  return _impl_.old_geometry_;
}
inline ::TSD::GeometryArchive* TableInfoGeometryCommandArchive::mutable_old_geometry() {
  ::TSD::GeometryArchive* _msg = _internal_mutable_old_geometry();
  // @@protoc_insertion_point(field_mutable:TST.TableInfoGeometryCommandArchive.old_geometry)
  return _msg;
}
inline void TableInfoGeometryCommandArchive::set_allocated_old_geometry(::TSD::GeometryArchive* old_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_geometry_);
  }
  if (old_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_geometry));
    if (message_arena != submessage_arena) {
      old_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_geometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.old_geometry_ = old_geometry;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoGeometryCommandArchive.old_geometry)
}

// optional bool turn_off_auto_resize = 6;
inline bool TableInfoGeometryCommandArchive::_internal_has_turn_off_auto_resize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_turn_off_auto_resize() const {
  return _internal_has_turn_off_auto_resize();
}
inline void TableInfoGeometryCommandArchive::clear_turn_off_auto_resize() {
  _impl_.turn_off_auto_resize_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool TableInfoGeometryCommandArchive::_internal_turn_off_auto_resize() const {
  return _impl_.turn_off_auto_resize_;
}
inline bool TableInfoGeometryCommandArchive::turn_off_auto_resize() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.turn_off_auto_resize)
  return _internal_turn_off_auto_resize();
}
inline void TableInfoGeometryCommandArchive::_internal_set_turn_off_auto_resize(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.turn_off_auto_resize_ = value;
}
inline void TableInfoGeometryCommandArchive::set_turn_off_auto_resize(bool value) {
  _internal_set_turn_off_auto_resize(value);
  // @@protoc_insertion_point(field_set:TST.TableInfoGeometryCommandArchive.turn_off_auto_resize)
}

// optional bool should_clear_object_placeholder_flag = 7;
inline bool TableInfoGeometryCommandArchive::_internal_has_should_clear_object_placeholder_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_should_clear_object_placeholder_flag() const {
  return _internal_has_should_clear_object_placeholder_flag();
}
inline void TableInfoGeometryCommandArchive::clear_should_clear_object_placeholder_flag() {
  _impl_.should_clear_object_placeholder_flag_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool TableInfoGeometryCommandArchive::_internal_should_clear_object_placeholder_flag() const {
  return _impl_.should_clear_object_placeholder_flag_;
}
inline bool TableInfoGeometryCommandArchive::should_clear_object_placeholder_flag() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.should_clear_object_placeholder_flag)
  return _internal_should_clear_object_placeholder_flag();
}
inline void TableInfoGeometryCommandArchive::_internal_set_should_clear_object_placeholder_flag(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.should_clear_object_placeholder_flag_ = value;
}
inline void TableInfoGeometryCommandArchive::set_should_clear_object_placeholder_flag(bool value) {
  _internal_set_should_clear_object_placeholder_flag(value);
  // @@protoc_insertion_point(field_set:TST.TableInfoGeometryCommandArchive.should_clear_object_placeholder_flag)
}

// optional bool did_match_object_placeholder_geometry = 8;
inline bool TableInfoGeometryCommandArchive::_internal_has_did_match_object_placeholder_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TableInfoGeometryCommandArchive::has_did_match_object_placeholder_geometry() const {
  return _internal_has_did_match_object_placeholder_geometry();
}
inline void TableInfoGeometryCommandArchive::clear_did_match_object_placeholder_geometry() {
  _impl_.did_match_object_placeholder_geometry_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool TableInfoGeometryCommandArchive::_internal_did_match_object_placeholder_geometry() const {
  return _impl_.did_match_object_placeholder_geometry_;
}
inline bool TableInfoGeometryCommandArchive::did_match_object_placeholder_geometry() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoGeometryCommandArchive.did_match_object_placeholder_geometry)
  return _internal_did_match_object_placeholder_geometry();
}
inline void TableInfoGeometryCommandArchive::_internal_set_did_match_object_placeholder_geometry(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.did_match_object_placeholder_geometry_ = value;
}
inline void TableInfoGeometryCommandArchive::set_did_match_object_placeholder_geometry(bool value) {
  _internal_set_did_match_object_placeholder_geometry(value);
  // @@protoc_insertion_point(field_set:TST.TableInfoGeometryCommandArchive.did_match_object_placeholder_geometry)
}

// -------------------------------------------------------------------

// FormulaEditingCommandGroupArchive

// required .TSK.ProgressiveCommandGroupArchive super = 1;
inline bool FormulaEditingCommandGroupArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::ProgressiveCommandGroupArchive& FormulaEditingCommandGroupArchive::_internal_super() const {
  const ::TSK::ProgressiveCommandGroupArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::ProgressiveCommandGroupArchive&>(
      ::TSK::_ProgressiveCommandGroupArchive_default_instance_);
}
inline const ::TSK::ProgressiveCommandGroupArchive& FormulaEditingCommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.super)
  return _internal_super();
}
inline void FormulaEditingCommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::ProgressiveCommandGroupArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaEditingCommandGroupArchive.super)
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::ProgressiveCommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.FormulaEditingCommandGroupArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::ProgressiveCommandGroupArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::ProgressiveCommandGroupArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::ProgressiveCommandGroupArchive* FormulaEditingCommandGroupArchive::mutable_super() {
  ::TSK::ProgressiveCommandGroupArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.FormulaEditingCommandGroupArchive.super)
  return _msg;
}
inline void FormulaEditingCommandGroupArchive::set_allocated_super(::TSK::ProgressiveCommandGroupArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaEditingCommandGroupArchive.super)
}

// required bool undoSelectionValid = 2;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoselectionvalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoselectionvalid() const {
  return _internal_has_undoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::clear_undoselectionvalid() {
  _impl_.undoselectionvalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FormulaEditingCommandGroupArchive::_internal_undoselectionvalid() const {
  return _impl_.undoselectionvalid_;
}
inline bool FormulaEditingCommandGroupArchive::undoselectionvalid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoSelectionValid)
  return _internal_undoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoselectionvalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.undoselectionvalid_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoselectionvalid(bool value) {
  _internal_set_undoselectionvalid(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoSelectionValid)
}

// required uint32 undoSelectionStart = 3;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoselectionstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoselectionstart() const {
  return _internal_has_undoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::clear_undoselectionstart() {
  _impl_.undoselectionstart_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_undoselectionstart() const {
  return _impl_.undoselectionstart_;
}
inline uint32_t FormulaEditingCommandGroupArchive::undoselectionstart() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoSelectionStart)
  return _internal_undoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoselectionstart(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.undoselectionstart_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoselectionstart(uint32_t value) {
  _internal_set_undoselectionstart(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoSelectionStart)
}

// required uint32 undoSelectionLength = 4;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoselectionlength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoselectionlength() const {
  return _internal_has_undoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::clear_undoselectionlength() {
  _impl_.undoselectionlength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_undoselectionlength() const {
  return _impl_.undoselectionlength_;
}
inline uint32_t FormulaEditingCommandGroupArchive::undoselectionlength() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoSelectionLength)
  return _internal_undoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoselectionlength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.undoselectionlength_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoselectionlength(uint32_t value) {
  _internal_set_undoselectionlength(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoSelectionLength)
}

// required uint32 undoActiveToken = 5;
inline bool FormulaEditingCommandGroupArchive::_internal_has_undoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_undoactivetoken() const {
  return _internal_has_undoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::clear_undoactivetoken() {
  _impl_.undoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_undoactivetoken() const {
  return _impl_.undoactivetoken_;
}
inline uint32_t FormulaEditingCommandGroupArchive::undoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.undoActiveToken)
  return _internal_undoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_undoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.undoactivetoken_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_undoactivetoken(uint32_t value) {
  _internal_set_undoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.undoActiveToken)
}

// required bool redoSelectionValid = 6;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoselectionvalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoselectionvalid() const {
  return _internal_has_redoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::clear_redoselectionvalid() {
  _impl_.redoselectionvalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FormulaEditingCommandGroupArchive::_internal_redoselectionvalid() const {
  return _impl_.redoselectionvalid_;
}
inline bool FormulaEditingCommandGroupArchive::redoselectionvalid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoSelectionValid)
  return _internal_redoselectionvalid();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoselectionvalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.redoselectionvalid_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoselectionvalid(bool value) {
  _internal_set_redoselectionvalid(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoSelectionValid)
}

// required uint32 redoSelectionStart = 7;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoselectionstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoselectionstart() const {
  return _internal_has_redoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::clear_redoselectionstart() {
  _impl_.redoselectionstart_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_redoselectionstart() const {
  return _impl_.redoselectionstart_;
}
inline uint32_t FormulaEditingCommandGroupArchive::redoselectionstart() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoSelectionStart)
  return _internal_redoselectionstart();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoselectionstart(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.redoselectionstart_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoselectionstart(uint32_t value) {
  _internal_set_redoselectionstart(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoSelectionStart)
}

// required uint32 redoSelectionLength = 8;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoselectionlength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoselectionlength() const {
  return _internal_has_redoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::clear_redoselectionlength() {
  _impl_.redoselectionlength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_redoselectionlength() const {
  return _impl_.redoselectionlength_;
}
inline uint32_t FormulaEditingCommandGroupArchive::redoselectionlength() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoSelectionLength)
  return _internal_redoselectionlength();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoselectionlength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.redoselectionlength_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoselectionlength(uint32_t value) {
  _internal_set_redoselectionlength(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoSelectionLength)
}

// required uint32 redoActiveToken = 9;
inline bool FormulaEditingCommandGroupArchive::_internal_has_redoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormulaEditingCommandGroupArchive::has_redoactivetoken() const {
  return _internal_has_redoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::clear_redoactivetoken() {
  _impl_.redoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t FormulaEditingCommandGroupArchive::_internal_redoactivetoken() const {
  return _impl_.redoactivetoken_;
}
inline uint32_t FormulaEditingCommandGroupArchive::redoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandGroupArchive.redoActiveToken)
  return _internal_redoactivetoken();
}
inline void FormulaEditingCommandGroupArchive::_internal_set_redoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.redoactivetoken_ = value;
}
inline void FormulaEditingCommandGroupArchive::set_redoactivetoken(uint32_t value) {
  _internal_set_redoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandGroupArchive.redoActiveToken)
}

// -------------------------------------------------------------------

// FormulaEditingCommandSelectionBehaviorArchive

// optional bool undoSelectionValid = 2;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_undoselectionvalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_undoselectionvalid() const {
  return _internal_has_undoselectionvalid();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_undoselectionvalid() {
  _impl_.undoselectionvalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_undoselectionvalid() const {
  return _impl_.undoselectionvalid_;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::undoselectionvalid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.undoSelectionValid)
  return _internal_undoselectionvalid();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_undoselectionvalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.undoselectionvalid_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_undoselectionvalid(bool value) {
  _internal_set_undoselectionvalid(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.undoSelectionValid)
}

// optional uint32 undoSelectionStart = 3;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_undoselectionstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_undoselectionstart() const {
  return _internal_has_undoselectionstart();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_undoselectionstart() {
  _impl_.undoselectionstart_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_undoselectionstart() const {
  return _impl_.undoselectionstart_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::undoselectionstart() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.undoSelectionStart)
  return _internal_undoselectionstart();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_undoselectionstart(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.undoselectionstart_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_undoselectionstart(uint32_t value) {
  _internal_set_undoselectionstart(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.undoSelectionStart)
}

// optional uint32 undoSelectionLength = 4;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_undoselectionlength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_undoselectionlength() const {
  return _internal_has_undoselectionlength();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_undoselectionlength() {
  _impl_.undoselectionlength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_undoselectionlength() const {
  return _impl_.undoselectionlength_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::undoselectionlength() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.undoSelectionLength)
  return _internal_undoselectionlength();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_undoselectionlength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.undoselectionlength_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_undoselectionlength(uint32_t value) {
  _internal_set_undoselectionlength(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.undoSelectionLength)
}

// optional uint32 undoActiveToken = 5;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_undoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_undoactivetoken() const {
  return _internal_has_undoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_undoactivetoken() {
  _impl_.undoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_undoactivetoken() const {
  return _impl_.undoactivetoken_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::undoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.undoActiveToken)
  return _internal_undoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_undoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.undoactivetoken_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_undoactivetoken(uint32_t value) {
  _internal_set_undoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.undoActiveToken)
}

// optional bool redoSelectionValid = 6;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_redoselectionvalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_redoselectionvalid() const {
  return _internal_has_redoselectionvalid();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_redoselectionvalid() {
  _impl_.redoselectionvalid_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_redoselectionvalid() const {
  return _impl_.redoselectionvalid_;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::redoselectionvalid() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.redoSelectionValid)
  return _internal_redoselectionvalid();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_redoselectionvalid(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.redoselectionvalid_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_redoselectionvalid(bool value) {
  _internal_set_redoselectionvalid(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.redoSelectionValid)
}

// optional uint32 redoSelectionStart = 7;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_redoselectionstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_redoselectionstart() const {
  return _internal_has_redoselectionstart();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_redoselectionstart() {
  _impl_.redoselectionstart_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_redoselectionstart() const {
  return _impl_.redoselectionstart_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::redoselectionstart() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.redoSelectionStart)
  return _internal_redoselectionstart();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_redoselectionstart(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.redoselectionstart_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_redoselectionstart(uint32_t value) {
  _internal_set_redoselectionstart(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.redoSelectionStart)
}

// optional uint32 redoSelectionLength = 8;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_redoselectionlength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_redoselectionlength() const {
  return _internal_has_redoselectionlength();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_redoselectionlength() {
  _impl_.redoselectionlength_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_redoselectionlength() const {
  return _impl_.redoselectionlength_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::redoselectionlength() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.redoSelectionLength)
  return _internal_redoselectionlength();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_redoselectionlength(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.redoselectionlength_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_redoselectionlength(uint32_t value) {
  _internal_set_redoselectionlength(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.redoSelectionLength)
}

// optional uint32 redoActiveToken = 9;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_redoactivetoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_redoactivetoken() const {
  return _internal_has_redoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::clear_redoactivetoken() {
  _impl_.redoactivetoken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::_internal_redoactivetoken() const {
  return _impl_.redoactivetoken_;
}
inline uint32_t FormulaEditingCommandSelectionBehaviorArchive::redoactivetoken() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.redoActiveToken)
  return _internal_redoactivetoken();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::_internal_set_redoactivetoken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.redoactivetoken_ = value;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_redoactivetoken(uint32_t value) {
  _internal_set_redoactivetoken(value);
  // @@protoc_insertion_point(field_set:TST.FormulaEditingCommandSelectionBehaviorArchive.redoActiveToken)
}

// optional .TSP.Reference storage = 10;
inline bool FormulaEditingCommandSelectionBehaviorArchive::_internal_has_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.storage_ != nullptr);
  return value;
}
inline bool FormulaEditingCommandSelectionBehaviorArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& FormulaEditingCommandSelectionBehaviorArchive::_internal_storage() const {
  const ::TSP::Reference* p = _impl_.storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FormulaEditingCommandSelectionBehaviorArchive::storage() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEditingCommandSelectionBehaviorArchive.storage)
  return _internal_storage();
}
inline void FormulaEditingCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  _impl_.storage_ = storage;
  if (storage) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaEditingCommandSelectionBehaviorArchive.storage)
}
inline ::TSP::Reference* FormulaEditingCommandSelectionBehaviorArchive::release_storage() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* FormulaEditingCommandSelectionBehaviorArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TST.FormulaEditingCommandSelectionBehaviorArchive.storage)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FormulaEditingCommandSelectionBehaviorArchive::_internal_mutable_storage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.storage_ = p;
  }
  return _impl_.storage_;
}
inline ::TSP::Reference* FormulaEditingCommandSelectionBehaviorArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TST.FormulaEditingCommandSelectionBehaviorArchive.storage)
  return _msg;
}
inline void FormulaEditingCommandSelectionBehaviorArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaEditingCommandSelectionBehaviorArchive.storage)
}

// -------------------------------------------------------------------

// UndoRedoStateCommandSelectionBehaviorArchive

// optional .TSP.Reference before_undo_redo_state = 1 [deprecated = true];
inline bool UndoRedoStateCommandSelectionBehaviorArchive::_internal_has_before_undo_redo_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.before_undo_redo_state_ != nullptr);
  return value;
}
inline bool UndoRedoStateCommandSelectionBehaviorArchive::has_before_undo_redo_state() const {
  return _internal_has_before_undo_redo_state();
}
inline const ::TSP::Reference& UndoRedoStateCommandSelectionBehaviorArchive::_internal_before_undo_redo_state() const {
  const ::TSP::Reference* p = _impl_.before_undo_redo_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoRedoStateCommandSelectionBehaviorArchive::before_undo_redo_state() const {
  // @@protoc_insertion_point(field_get:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_undo_redo_state)
  return _internal_before_undo_redo_state();
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_before_undo_redo_state(
    ::TSP::Reference* before_undo_redo_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.before_undo_redo_state_);
  }
  _impl_.before_undo_redo_state_ = before_undo_redo_state;
  if (before_undo_redo_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_undo_redo_state)
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::release_before_undo_redo_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.before_undo_redo_state_;
  _impl_.before_undo_redo_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_release_before_undo_redo_state() {
  // @@protoc_insertion_point(field_release:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_undo_redo_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.before_undo_redo_state_;
  _impl_.before_undo_redo_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::_internal_mutable_before_undo_redo_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.before_undo_redo_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.before_undo_redo_state_ = p;
  }
  return _impl_.before_undo_redo_state_;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::mutable_before_undo_redo_state() {
  ::TSP::Reference* _msg = _internal_mutable_before_undo_redo_state();
  // @@protoc_insertion_point(field_mutable:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_undo_redo_state)
  return _msg;
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::set_allocated_before_undo_redo_state(::TSP::Reference* before_undo_redo_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.before_undo_redo_state_);
  }
  if (before_undo_redo_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(before_undo_redo_state));
    if (message_arena != submessage_arena) {
      before_undo_redo_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, before_undo_redo_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.before_undo_redo_state_ = before_undo_redo_state;
  // @@protoc_insertion_point(field_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_undo_redo_state)
}

// optional .TSP.Reference after_undo_redo_state = 2 [deprecated = true];
inline bool UndoRedoStateCommandSelectionBehaviorArchive::_internal_has_after_undo_redo_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.after_undo_redo_state_ != nullptr);
  return value;
}
inline bool UndoRedoStateCommandSelectionBehaviorArchive::has_after_undo_redo_state() const {
  return _internal_has_after_undo_redo_state();
}
inline const ::TSP::Reference& UndoRedoStateCommandSelectionBehaviorArchive::_internal_after_undo_redo_state() const {
  const ::TSP::Reference* p = _impl_.after_undo_redo_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoRedoStateCommandSelectionBehaviorArchive::after_undo_redo_state() const {
  // @@protoc_insertion_point(field_get:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_undo_redo_state)
  return _internal_after_undo_redo_state();
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_after_undo_redo_state(
    ::TSP::Reference* after_undo_redo_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.after_undo_redo_state_);
  }
  _impl_.after_undo_redo_state_ = after_undo_redo_state;
  if (after_undo_redo_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_undo_redo_state)
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::release_after_undo_redo_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.after_undo_redo_state_;
  _impl_.after_undo_redo_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_release_after_undo_redo_state() {
  // @@protoc_insertion_point(field_release:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_undo_redo_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.after_undo_redo_state_;
  _impl_.after_undo_redo_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::_internal_mutable_after_undo_redo_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.after_undo_redo_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.after_undo_redo_state_ = p;
  }
  return _impl_.after_undo_redo_state_;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::mutable_after_undo_redo_state() {
  ::TSP::Reference* _msg = _internal_mutable_after_undo_redo_state();
  // @@protoc_insertion_point(field_mutable:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_undo_redo_state)
  return _msg;
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::set_allocated_after_undo_redo_state(::TSP::Reference* after_undo_redo_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.after_undo_redo_state_);
  }
  if (after_undo_redo_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_undo_redo_state));
    if (message_arena != submessage_arena) {
      after_undo_redo_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, after_undo_redo_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.after_undo_redo_state_ = after_undo_redo_state;
  // @@protoc_insertion_point(field_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_undo_redo_state)
}

// optional .TSP.Reference table_info = 3;
inline bool UndoRedoStateCommandSelectionBehaviorArchive::_internal_has_table_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_info_ != nullptr);
  return value;
}
inline bool UndoRedoStateCommandSelectionBehaviorArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& UndoRedoStateCommandSelectionBehaviorArchive::_internal_table_info() const {
  const ::TSP::Reference* p = _impl_.table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoRedoStateCommandSelectionBehaviorArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.UndoRedoStateCommandSelectionBehaviorArchive.table_info)
  return _internal_table_info();
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  _impl_.table_info_ = table_info;
  if (table_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.table_info)
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::release_table_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.UndoRedoStateCommandSelectionBehaviorArchive.table_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::_internal_mutable_table_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.table_info_ = p;
  }
  return _impl_.table_info_;
}
inline ::TSP::Reference* UndoRedoStateCommandSelectionBehaviorArchive::mutable_table_info() {
  ::TSP::Reference* _msg = _internal_mutable_table_info();
  // @@protoc_insertion_point(field_mutable:TST.UndoRedoStateCommandSelectionBehaviorArchive.table_info)
  return _msg;
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info));
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.table_info)
}

// optional .TST.SelectionArchive before_table_selection = 4;
inline bool UndoRedoStateCommandSelectionBehaviorArchive::_internal_has_before_table_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.before_table_selection_ != nullptr);
  return value;
}
inline bool UndoRedoStateCommandSelectionBehaviorArchive::has_before_table_selection() const {
  return _internal_has_before_table_selection();
}
inline const ::TST::SelectionArchive& UndoRedoStateCommandSelectionBehaviorArchive::_internal_before_table_selection() const {
  const ::TST::SelectionArchive* p = _impl_.before_table_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& UndoRedoStateCommandSelectionBehaviorArchive::before_table_selection() const {
  // @@protoc_insertion_point(field_get:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_table_selection)
  return _internal_before_table_selection();
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_before_table_selection(
    ::TST::SelectionArchive* before_table_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.before_table_selection_);
  }
  _impl_.before_table_selection_ = before_table_selection;
  if (before_table_selection) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_table_selection)
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::release_before_table_selection() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::SelectionArchive* temp = _impl_.before_table_selection_;
  _impl_.before_table_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_release_before_table_selection() {
  // @@protoc_insertion_point(field_release:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_table_selection)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::SelectionArchive* temp = _impl_.before_table_selection_;
  _impl_.before_table_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::_internal_mutable_before_table_selection() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.before_table_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.before_table_selection_ = p;
  }
  return _impl_.before_table_selection_;
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::mutable_before_table_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_before_table_selection();
  // @@protoc_insertion_point(field_mutable:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_table_selection)
  return _msg;
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::set_allocated_before_table_selection(::TST::SelectionArchive* before_table_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.before_table_selection_);
  }
  if (before_table_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(before_table_selection));
    if (message_arena != submessage_arena) {
      before_table_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, before_table_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.before_table_selection_ = before_table_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.before_table_selection)
}

// optional .TST.SelectionArchive after_table_selection = 6;
inline bool UndoRedoStateCommandSelectionBehaviorArchive::_internal_has_after_table_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.after_table_selection_ != nullptr);
  return value;
}
inline bool UndoRedoStateCommandSelectionBehaviorArchive::has_after_table_selection() const {
  return _internal_has_after_table_selection();
}
inline const ::TST::SelectionArchive& UndoRedoStateCommandSelectionBehaviorArchive::_internal_after_table_selection() const {
  const ::TST::SelectionArchive* p = _impl_.after_table_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& UndoRedoStateCommandSelectionBehaviorArchive::after_table_selection() const {
  // @@protoc_insertion_point(field_get:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_table_selection)
  return _internal_after_table_selection();
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_after_table_selection(
    ::TST::SelectionArchive* after_table_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.after_table_selection_);
  }
  _impl_.after_table_selection_ = after_table_selection;
  if (after_table_selection) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_table_selection)
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::release_after_table_selection() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::SelectionArchive* temp = _impl_.after_table_selection_;
  _impl_.after_table_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::unsafe_arena_release_after_table_selection() {
  // @@protoc_insertion_point(field_release:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_table_selection)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TST::SelectionArchive* temp = _impl_.after_table_selection_;
  _impl_.after_table_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::_internal_mutable_after_table_selection() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.after_table_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.after_table_selection_ = p;
  }
  return _impl_.after_table_selection_;
}
inline ::TST::SelectionArchive* UndoRedoStateCommandSelectionBehaviorArchive::mutable_after_table_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_after_table_selection();
  // @@protoc_insertion_point(field_mutable:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_table_selection)
  return _msg;
}
inline void UndoRedoStateCommandSelectionBehaviorArchive::set_allocated_after_table_selection(::TST::SelectionArchive* after_table_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.after_table_selection_);
  }
  if (after_table_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_table_selection));
    if (message_arena != submessage_arena) {
      after_table_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, after_table_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.after_table_selection_ = after_table_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.UndoRedoStateCommandSelectionBehaviorArchive.after_table_selection)
}

// -------------------------------------------------------------------

// TableCommandSelectionBehaviorArchive

// optional .TST.SelectionArchive before_table_selection = 1;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_before_table_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.before_table_selection_ != nullptr);
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_before_table_selection() const {
  return _internal_has_before_table_selection();
}
inline const ::TST::SelectionArchive& TableCommandSelectionBehaviorArchive::_internal_before_table_selection() const {
  const ::TST::SelectionArchive* p = _impl_.before_table_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& TableCommandSelectionBehaviorArchive::before_table_selection() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.before_table_selection)
  return _internal_before_table_selection();
}
inline void TableCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_before_table_selection(
    ::TST::SelectionArchive* before_table_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.before_table_selection_);
  }
  _impl_.before_table_selection_ = before_table_selection;
  if (before_table_selection) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandSelectionBehaviorArchive.before_table_selection)
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::release_before_table_selection() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.before_table_selection_;
  _impl_.before_table_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::unsafe_arena_release_before_table_selection() {
  // @@protoc_insertion_point(field_release:TST.TableCommandSelectionBehaviorArchive.before_table_selection)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::SelectionArchive* temp = _impl_.before_table_selection_;
  _impl_.before_table_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::_internal_mutable_before_table_selection() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.before_table_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.before_table_selection_ = p;
  }
  return _impl_.before_table_selection_;
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::mutable_before_table_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_before_table_selection();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandSelectionBehaviorArchive.before_table_selection)
  return _msg;
}
inline void TableCommandSelectionBehaviorArchive::set_allocated_before_table_selection(::TST::SelectionArchive* before_table_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.before_table_selection_);
  }
  if (before_table_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(before_table_selection));
    if (message_arena != submessage_arena) {
      before_table_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, before_table_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.before_table_selection_ = before_table_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandSelectionBehaviorArchive.before_table_selection)
}

// optional .TST.SelectionArchive after_table_selection = 2;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_after_table_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.after_table_selection_ != nullptr);
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_after_table_selection() const {
  return _internal_has_after_table_selection();
}
inline const ::TST::SelectionArchive& TableCommandSelectionBehaviorArchive::_internal_after_table_selection() const {
  const ::TST::SelectionArchive* p = _impl_.after_table_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& TableCommandSelectionBehaviorArchive::after_table_selection() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.after_table_selection)
  return _internal_after_table_selection();
}
inline void TableCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_after_table_selection(
    ::TST::SelectionArchive* after_table_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.after_table_selection_);
  }
  _impl_.after_table_selection_ = after_table_selection;
  if (after_table_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandSelectionBehaviorArchive.after_table_selection)
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::release_after_table_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.after_table_selection_;
  _impl_.after_table_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::unsafe_arena_release_after_table_selection() {
  // @@protoc_insertion_point(field_release:TST.TableCommandSelectionBehaviorArchive.after_table_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.after_table_selection_;
  _impl_.after_table_selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::_internal_mutable_after_table_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.after_table_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.after_table_selection_ = p;
  }
  return _impl_.after_table_selection_;
}
inline ::TST::SelectionArchive* TableCommandSelectionBehaviorArchive::mutable_after_table_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_after_table_selection();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandSelectionBehaviorArchive.after_table_selection)
  return _msg;
}
inline void TableCommandSelectionBehaviorArchive::set_allocated_after_table_selection(::TST::SelectionArchive* after_table_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.after_table_selection_);
  }
  if (after_table_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(after_table_selection));
    if (message_arena != submessage_arena) {
      after_table_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, after_table_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.after_table_selection_ = after_table_selection;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandSelectionBehaviorArchive.after_table_selection)
}

// optional .TSP.Reference table_info = 3;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_table_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_info_ != nullptr);
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& TableCommandSelectionBehaviorArchive::_internal_table_info() const {
  const ::TSP::Reference* p = _impl_.table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableCommandSelectionBehaviorArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.table_info)
  return _internal_table_info();
}
inline void TableCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  _impl_.table_info_ = table_info;
  if (table_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableCommandSelectionBehaviorArchive.table_info)
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::release_table_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.TableCommandSelectionBehaviorArchive.table_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.table_info_;
  _impl_.table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::_internal_mutable_table_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.table_info_ = p;
  }
  return _impl_.table_info_;
}
inline ::TSP::Reference* TableCommandSelectionBehaviorArchive::mutable_table_info() {
  ::TSP::Reference* _msg = _internal_mutable_table_info();
  // @@protoc_insertion_point(field_mutable:TST.TableCommandSelectionBehaviorArchive.table_info)
  return _msg;
}
inline void TableCommandSelectionBehaviorArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info));
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.TableCommandSelectionBehaviorArchive.table_info)
}

// optional uint32 last_column_hit_by_tap = 4;
inline bool TableCommandSelectionBehaviorArchive::_internal_has_last_column_hit_by_tap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TableCommandSelectionBehaviorArchive::has_last_column_hit_by_tap() const {
  return _internal_has_last_column_hit_by_tap();
}
inline void TableCommandSelectionBehaviorArchive::clear_last_column_hit_by_tap() {
  _impl_.last_column_hit_by_tap_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t TableCommandSelectionBehaviorArchive::_internal_last_column_hit_by_tap() const {
  return _impl_.last_column_hit_by_tap_;
}
inline uint32_t TableCommandSelectionBehaviorArchive::last_column_hit_by_tap() const {
  // @@protoc_insertion_point(field_get:TST.TableCommandSelectionBehaviorArchive.last_column_hit_by_tap)
  return _internal_last_column_hit_by_tap();
}
inline void TableCommandSelectionBehaviorArchive::_internal_set_last_column_hit_by_tap(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_column_hit_by_tap_ = value;
}
inline void TableCommandSelectionBehaviorArchive::set_last_column_hit_by_tap(uint32_t value) {
  _internal_set_last_column_hit_by_tap(value);
  // @@protoc_insertion_point(field_set:TST.TableCommandSelectionBehaviorArchive.last_column_hit_by_tap)
}

// -------------------------------------------------------------------

// DisableTableNameSelectionBehaviorArchive

// required .TST.TableCommandSelectionBehaviorArchive super = 1;
inline bool DisableTableNameSelectionBehaviorArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DisableTableNameSelectionBehaviorArchive::has_super() const {
  return _internal_has_super();
}
inline void DisableTableNameSelectionBehaviorArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandSelectionBehaviorArchive& DisableTableNameSelectionBehaviorArchive::_internal_super() const {
  const ::TST::TableCommandSelectionBehaviorArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandSelectionBehaviorArchive&>(
      ::TST::_TableCommandSelectionBehaviorArchive_default_instance_);
}
inline const ::TST::TableCommandSelectionBehaviorArchive& DisableTableNameSelectionBehaviorArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.DisableTableNameSelectionBehaviorArchive.super)
  return _internal_super();
}
inline void DisableTableNameSelectionBehaviorArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandSelectionBehaviorArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DisableTableNameSelectionBehaviorArchive.super)
}
inline ::TST::TableCommandSelectionBehaviorArchive* DisableTableNameSelectionBehaviorArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandSelectionBehaviorArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandSelectionBehaviorArchive* DisableTableNameSelectionBehaviorArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.DisableTableNameSelectionBehaviorArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandSelectionBehaviorArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandSelectionBehaviorArchive* DisableTableNameSelectionBehaviorArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandSelectionBehaviorArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandSelectionBehaviorArchive* DisableTableNameSelectionBehaviorArchive::mutable_super() {
  ::TST::TableCommandSelectionBehaviorArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.DisableTableNameSelectionBehaviorArchive.super)
  return _msg;
}
inline void DisableTableNameSelectionBehaviorArchive::set_allocated_super(::TST::TableCommandSelectionBehaviorArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.DisableTableNameSelectionBehaviorArchive.super)
}

// -------------------------------------------------------------------

// CommandApplyCellCommentArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyCellCommentArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyCellCommentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyCellCommentArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyCellCommentArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.super)
  return _internal_super();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyCellCommentArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.super)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.super)
}

// required .TST.CellID cell_id = 2;
inline bool CommandApplyCellCommentArchive::_internal_has_cell_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cell_id_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_cell_id() const {
  return _internal_has_cell_id();
}
inline const ::TST::CellID& CommandApplyCellCommentArchive::_internal_cell_id() const {
  const ::TST::CellID* p = _impl_.cell_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& CommandApplyCellCommentArchive::cell_id() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.cell_id)
  return _internal_cell_id();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_cell_id(
    ::TST::CellID* cell_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_id_);
  }
  _impl_.cell_id_ = cell_id;
  if (cell_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.cell_id)
}
inline ::TST::CellID* CommandApplyCellCommentArchive::release_cell_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellID* temp = _impl_.cell_id_;
  _impl_.cell_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellID* CommandApplyCellCommentArchive::unsafe_arena_release_cell_id() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.cell_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellID* temp = _impl_.cell_id_;
  _impl_.cell_id_ = nullptr;
  return temp;
}
inline ::TST::CellID* CommandApplyCellCommentArchive::_internal_mutable_cell_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cell_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArenaForAllocation());
    _impl_.cell_id_ = p;
  }
  return _impl_.cell_id_;
}
inline ::TST::CellID* CommandApplyCellCommentArchive::mutable_cell_id() {
  ::TST::CellID* _msg = _internal_mutable_cell_id();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.cell_id)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_cell_id(::TST::CellID* cell_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cell_id_);
  }
  if (cell_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_id));
    if (message_arena != submessage_arena) {
      cell_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cell_id_ = cell_id;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.cell_id)
}

// optional .TSP.Reference old_comment_storage = 3;
inline bool CommandApplyCellCommentArchive::_internal_has_old_comment_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_comment_storage_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_old_comment_storage() const {
  return _internal_has_old_comment_storage();
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::_internal_old_comment_storage() const {
  const ::TSP::Reference* p = _impl_.old_comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::old_comment_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.old_comment_storage)
  return _internal_old_comment_storage();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_old_comment_storage(
    ::TSP::Reference* old_comment_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_comment_storage_);
  }
  _impl_.old_comment_storage_ = old_comment_storage;
  if (old_comment_storage) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.old_comment_storage)
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::release_old_comment_storage() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_comment_storage_;
  _impl_.old_comment_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::unsafe_arena_release_old_comment_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.old_comment_storage)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_comment_storage_;
  _impl_.old_comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::_internal_mutable_old_comment_storage() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_comment_storage_ = p;
  }
  return _impl_.old_comment_storage_;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::mutable_old_comment_storage() {
  ::TSP::Reference* _msg = _internal_mutable_old_comment_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.old_comment_storage)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_old_comment_storage(::TSP::Reference* old_comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_comment_storage_);
  }
  if (old_comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_comment_storage));
    if (message_arena != submessage_arena) {
      old_comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_comment_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_comment_storage_ = old_comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.old_comment_storage)
}

// optional .TSP.Reference new_comment_storage = 4;
inline bool CommandApplyCellCommentArchive::_internal_has_new_comment_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_comment_storage_ != nullptr);
  return value;
}
inline bool CommandApplyCellCommentArchive::has_new_comment_storage() const {
  return _internal_has_new_comment_storage();
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::_internal_new_comment_storage() const {
  const ::TSP::Reference* p = _impl_.new_comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandApplyCellCommentArchive::new_comment_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyCellCommentArchive.new_comment_storage)
  return _internal_new_comment_storage();
}
inline void CommandApplyCellCommentArchive::unsafe_arena_set_allocated_new_comment_storage(
    ::TSP::Reference* new_comment_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_comment_storage_);
  }
  _impl_.new_comment_storage_ = new_comment_storage;
  if (new_comment_storage) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyCellCommentArchive.new_comment_storage)
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::release_new_comment_storage() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_comment_storage_;
  _impl_.new_comment_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::unsafe_arena_release_new_comment_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyCellCommentArchive.new_comment_storage)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.new_comment_storage_;
  _impl_.new_comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::_internal_mutable_new_comment_storage() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.new_comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_comment_storage_ = p;
  }
  return _impl_.new_comment_storage_;
}
inline ::TSP::Reference* CommandApplyCellCommentArchive::mutable_new_comment_storage() {
  ::TSP::Reference* _msg = _internal_mutable_new_comment_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyCellCommentArchive.new_comment_storage)
  return _msg;
}
inline void CommandApplyCellCommentArchive::set_allocated_new_comment_storage(::TSP::Reference* new_comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_comment_storage_);
  }
  if (new_comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_comment_storage));
    if (message_arena != submessage_arena) {
      new_comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_comment_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.new_comment_storage_ = new_comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyCellCommentArchive.new_comment_storage)
}

// -------------------------------------------------------------------

// CommandApplyConditionalStyleSetArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandApplyConditionalStyleSetArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandApplyConditionalStyleSetArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandApplyConditionalStyleSetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandApplyConditionalStyleSetArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandApplyConditionalStyleSetArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConditionalStyleSetArchive.super)
  return _internal_super();
}
inline void CommandApplyConditionalStyleSetArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConditionalStyleSetArchive.super)
}
inline ::TST::TableCommandArchive* CommandApplyConditionalStyleSetArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyConditionalStyleSetArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConditionalStyleSetArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandApplyConditionalStyleSetArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandApplyConditionalStyleSetArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConditionalStyleSetArchive.super)
  return _msg;
}
inline void CommandApplyConditionalStyleSetArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConditionalStyleSetArchive.super)
}

// required .TST.SelectionArchive selection = 2;
inline bool CommandApplyConditionalStyleSetArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandApplyConditionalStyleSetArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandApplyConditionalStyleSetArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandApplyConditionalStyleSetArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConditionalStyleSetArchive.selection)
  return _internal_selection();
}
inline void CommandApplyConditionalStyleSetArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConditionalStyleSetArchive.selection)
}
inline ::TST::SelectionArchive* CommandApplyConditionalStyleSetArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandApplyConditionalStyleSetArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConditionalStyleSetArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandApplyConditionalStyleSetArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandApplyConditionalStyleSetArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConditionalStyleSetArchive.selection)
  return _msg;
}
inline void CommandApplyConditionalStyleSetArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConditionalStyleSetArchive.selection)
}

// required .TST.CellMapArchive undo_cell_map = 3;
inline bool CommandApplyConditionalStyleSetArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyConditionalStyleSetArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyConditionalStyleSetArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyConditionalStyleSetArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConditionalStyleSetArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandApplyConditionalStyleSetArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConditionalStyleSetArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConditionalStyleSetArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConditionalStyleSetArchive.undo_cell_map)
  return _msg;
}
inline void CommandApplyConditionalStyleSetArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConditionalStyleSetArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandApplyConditionalStyleSetArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandApplyConditionalStyleSetArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandApplyConditionalStyleSetArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandApplyConditionalStyleSetArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandApplyConditionalStyleSetArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandApplyConditionalStyleSetArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandApplyConditionalStyleSetArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandApplyConditionalStyleSetArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandApplyConditionalStyleSetArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandApplyConditionalStyleSetArchive.redo_cell_map)
  return _msg;
}
inline void CommandApplyConditionalStyleSetArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandApplyConditionalStyleSetArchive.redo_cell_map)
}

// -------------------------------------------------------------------

// CommandSetFormulaTokenizationArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetFormulaTokenizationArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFormulaTokenizationArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetFormulaTokenizationArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetFormulaTokenizationArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFormulaTokenizationArchive.super)
  return _internal_super();
}
inline void CommandSetFormulaTokenizationArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFormulaTokenizationArchive.super)
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFormulaTokenizationArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetFormulaTokenizationArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFormulaTokenizationArchive.super)
  return _msg;
}
inline void CommandSetFormulaTokenizationArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFormulaTokenizationArchive.super)
}

// required bool tokenization = 2;
inline bool CommandSetFormulaTokenizationArchive::_internal_has_tokenization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFormulaTokenizationArchive::has_tokenization() const {
  return _internal_has_tokenization();
}
inline void CommandSetFormulaTokenizationArchive::clear_tokenization() {
  _impl_.tokenization_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CommandSetFormulaTokenizationArchive::_internal_tokenization() const {
  return _impl_.tokenization_;
}
inline bool CommandSetFormulaTokenizationArchive::tokenization() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFormulaTokenizationArchive.tokenization)
  return _internal_tokenization();
}
inline void CommandSetFormulaTokenizationArchive::_internal_set_tokenization(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tokenization_ = value;
}
inline void CommandSetFormulaTokenizationArchive::set_tokenization(bool value) {
  _internal_set_tokenization(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFormulaTokenizationArchive.tokenization)
}

// -------------------------------------------------------------------

// CommandSetFilterEnabledArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetFilterEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFilterEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFilterEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetFilterEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetFilterEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetFilterEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFilterEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetFilterEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFilterEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetFilterEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterEnabledArchive.super)
  return _msg;
}
inline void CommandSetFilterEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFilterEnabledArchive.super)
}

// required uint32 filter_index = 2;
inline bool CommandSetFilterEnabledArchive::_internal_has_filter_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFilterEnabledArchive::has_filter_index() const {
  return _internal_has_filter_index();
}
inline void CommandSetFilterEnabledArchive::clear_filter_index() {
  _impl_.filter_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetFilterEnabledArchive::_internal_filter_index() const {
  return _impl_.filter_index_;
}
inline uint32_t CommandSetFilterEnabledArchive::filter_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterEnabledArchive.filter_index)
  return _internal_filter_index();
}
inline void CommandSetFilterEnabledArchive::_internal_set_filter_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filter_index_ = value;
}
inline void CommandSetFilterEnabledArchive::set_filter_index(uint32_t value) {
  _internal_set_filter_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterEnabledArchive.filter_index)
}

// required bool enabled = 4;
inline bool CommandSetFilterEnabledArchive::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetFilterEnabledArchive::has_enabled() const {
  return _internal_has_enabled();
}
inline void CommandSetFilterEnabledArchive::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CommandSetFilterEnabledArchive::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool CommandSetFilterEnabledArchive::enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterEnabledArchive.enabled)
  return _internal_enabled();
}
inline void CommandSetFilterEnabledArchive::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.enabled_ = value;
}
inline void CommandSetFilterEnabledArchive::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterEnabledArchive.enabled)
}

// -------------------------------------------------------------------

// CommandSetFilterRuleEnabledArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetFilterRuleEnabledArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFilterRuleEnabledArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFilterRuleEnabledArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetFilterRuleEnabledArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetFilterRuleEnabledArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterRuleEnabledArchive.super)
  return _internal_super();
}
inline void CommandSetFilterRuleEnabledArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFilterRuleEnabledArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetFilterRuleEnabledArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterRuleEnabledArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFilterRuleEnabledArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterRuleEnabledArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetFilterRuleEnabledArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterRuleEnabledArchive.super)
  return _msg;
}
inline void CommandSetFilterRuleEnabledArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFilterRuleEnabledArchive.super)
}

// required uint32 filter_index = 2;
inline bool CommandSetFilterRuleEnabledArchive::_internal_has_filter_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFilterRuleEnabledArchive::has_filter_index() const {
  return _internal_has_filter_index();
}
inline void CommandSetFilterRuleEnabledArchive::clear_filter_index() {
  _impl_.filter_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandSetFilterRuleEnabledArchive::_internal_filter_index() const {
  return _impl_.filter_index_;
}
inline uint32_t CommandSetFilterRuleEnabledArchive::filter_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterRuleEnabledArchive.filter_index)
  return _internal_filter_index();
}
inline void CommandSetFilterRuleEnabledArchive::_internal_set_filter_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filter_index_ = value;
}
inline void CommandSetFilterRuleEnabledArchive::set_filter_index(uint32_t value) {
  _internal_set_filter_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterRuleEnabledArchive.filter_index)
}

// required uint32 rule_index = 3;
inline bool CommandSetFilterRuleEnabledArchive::_internal_has_rule_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetFilterRuleEnabledArchive::has_rule_index() const {
  return _internal_has_rule_index();
}
inline void CommandSetFilterRuleEnabledArchive::clear_rule_index() {
  _impl_.rule_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CommandSetFilterRuleEnabledArchive::_internal_rule_index() const {
  return _impl_.rule_index_;
}
inline uint32_t CommandSetFilterRuleEnabledArchive::rule_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterRuleEnabledArchive.rule_index)
  return _internal_rule_index();
}
inline void CommandSetFilterRuleEnabledArchive::_internal_set_rule_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rule_index_ = value;
}
inline void CommandSetFilterRuleEnabledArchive::set_rule_index(uint32_t value) {
  _internal_set_rule_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterRuleEnabledArchive.rule_index)
}

// required bool enabled = 4;
inline bool CommandSetFilterRuleEnabledArchive::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandSetFilterRuleEnabledArchive::has_enabled() const {
  return _internal_has_enabled();
}
inline void CommandSetFilterRuleEnabledArchive::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CommandSetFilterRuleEnabledArchive::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool CommandSetFilterRuleEnabledArchive::enabled() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterRuleEnabledArchive.enabled)
  return _internal_enabled();
}
inline void CommandSetFilterRuleEnabledArchive::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.enabled_ = value;
}
inline void CommandSetFilterRuleEnabledArchive::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterRuleEnabledArchive.enabled)
}

// -------------------------------------------------------------------

// CommandSetFilterSetTypeArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetFilterSetTypeArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetFilterSetTypeArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetFilterSetTypeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetFilterSetTypeArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetFilterSetTypeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetTypeArchive.super)
  return _internal_super();
}
inline void CommandSetFilterSetTypeArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetFilterSetTypeArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetFilterSetTypeArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetFilterSetTypeArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetFilterSetTypeArchive.super)
  return _msg;
}
inline void CommandSetFilterSetTypeArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetFilterSetTypeArchive.super)
}

// required .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
inline bool CommandSetFilterSetTypeArchive::_internal_has_old_filter_set_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandSetFilterSetTypeArchive::has_old_filter_set_type() const {
  return _internal_has_old_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::clear_old_filter_set_type() {
  _impl_.old_filter_set_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::_internal_old_filter_set_type() const {
  return static_cast< ::TST::FilterSetArchive_FilterSetType >(_impl_.old_filter_set_type_);
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::old_filter_set_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetTypeArchive.old_filter_set_type)
  return _internal_old_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::_internal_set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  assert(::TST::FilterSetArchive_FilterSetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.old_filter_set_type_ = value;
}
inline void CommandSetFilterSetTypeArchive::set_old_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  _internal_set_old_filter_set_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterSetTypeArchive.old_filter_set_type)
}

// required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
inline bool CommandSetFilterSetTypeArchive::_internal_has_new_filter_set_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandSetFilterSetTypeArchive::has_new_filter_set_type() const {
  return _internal_has_new_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::clear_new_filter_set_type() {
  _impl_.new_filter_set_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::_internal_new_filter_set_type() const {
  return static_cast< ::TST::FilterSetArchive_FilterSetType >(_impl_.new_filter_set_type_);
}
inline ::TST::FilterSetArchive_FilterSetType CommandSetFilterSetTypeArchive::new_filter_set_type() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetFilterSetTypeArchive.new_filter_set_type)
  return _internal_new_filter_set_type();
}
inline void CommandSetFilterSetTypeArchive::_internal_set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  assert(::TST::FilterSetArchive_FilterSetType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_filter_set_type_ = value;
}
inline void CommandSetFilterSetTypeArchive::set_new_filter_set_type(::TST::FilterSetArchive_FilterSetType value) {
  _internal_set_new_filter_set_type(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetFilterSetTypeArchive.new_filter_set_type)
}

// -------------------------------------------------------------------

// CommandSetStyleNetworkArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetStyleNetworkArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetStyleNetworkArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetStyleNetworkArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetStyleNetworkArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetStyleNetworkArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStyleNetworkArchive.super)
  return _internal_super();
}
inline void CommandSetStyleNetworkArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStyleNetworkArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetStyleNetworkArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetStyleNetworkArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStyleNetworkArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetStyleNetworkArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetStyleNetworkArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStyleNetworkArchive.super)
  return _msg;
}
inline void CommandSetStyleNetworkArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStyleNetworkArchive.super)
}

// required .TST.TableStyleNetworkArchive old_style_network = 2;
inline bool CommandSetStyleNetworkArchive::_internal_has_old_style_network() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_style_network_ != nullptr);
  return value;
}
inline bool CommandSetStyleNetworkArchive::has_old_style_network() const {
  return _internal_has_old_style_network();
}
inline const ::TST::TableStyleNetworkArchive& CommandSetStyleNetworkArchive::_internal_old_style_network() const {
  const ::TST::TableStyleNetworkArchive* p = _impl_.old_style_network_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableStyleNetworkArchive&>(
      ::TST::_TableStyleNetworkArchive_default_instance_);
}
inline const ::TST::TableStyleNetworkArchive& CommandSetStyleNetworkArchive::old_style_network() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStyleNetworkArchive.old_style_network)
  return _internal_old_style_network();
}
inline void CommandSetStyleNetworkArchive::unsafe_arena_set_allocated_old_style_network(
    ::TST::TableStyleNetworkArchive* old_style_network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_network_);
  }
  _impl_.old_style_network_ = old_style_network;
  if (old_style_network) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStyleNetworkArchive.old_style_network)
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::release_old_style_network() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.old_style_network_;
  _impl_.old_style_network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::unsafe_arena_release_old_style_network() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStyleNetworkArchive.old_style_network)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.old_style_network_;
  _impl_.old_style_network_ = nullptr;
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::_internal_mutable_old_style_network() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.old_style_network_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableStyleNetworkArchive>(GetArenaForAllocation());
    _impl_.old_style_network_ = p;
  }
  return _impl_.old_style_network_;
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::mutable_old_style_network() {
  ::TST::TableStyleNetworkArchive* _msg = _internal_mutable_old_style_network();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStyleNetworkArchive.old_style_network)
  return _msg;
}
inline void CommandSetStyleNetworkArchive::set_allocated_old_style_network(::TST::TableStyleNetworkArchive* old_style_network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_network_);
  }
  if (old_style_network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style_network));
    if (message_arena != submessage_arena) {
      old_style_network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style_network, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.old_style_network_ = old_style_network;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStyleNetworkArchive.old_style_network)
}

// required .TST.TableStyleNetworkArchive new_style_network = 3;
inline bool CommandSetStyleNetworkArchive::_internal_has_new_style_network() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_style_network_ != nullptr);
  return value;
}
inline bool CommandSetStyleNetworkArchive::has_new_style_network() const {
  return _internal_has_new_style_network();
}
inline const ::TST::TableStyleNetworkArchive& CommandSetStyleNetworkArchive::_internal_new_style_network() const {
  const ::TST::TableStyleNetworkArchive* p = _impl_.new_style_network_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableStyleNetworkArchive&>(
      ::TST::_TableStyleNetworkArchive_default_instance_);
}
inline const ::TST::TableStyleNetworkArchive& CommandSetStyleNetworkArchive::new_style_network() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStyleNetworkArchive.new_style_network)
  return _internal_new_style_network();
}
inline void CommandSetStyleNetworkArchive::unsafe_arena_set_allocated_new_style_network(
    ::TST::TableStyleNetworkArchive* new_style_network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_network_);
  }
  _impl_.new_style_network_ = new_style_network;
  if (new_style_network) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStyleNetworkArchive.new_style_network)
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::release_new_style_network() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.new_style_network_;
  _impl_.new_style_network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::unsafe_arena_release_new_style_network() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStyleNetworkArchive.new_style_network)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::TableStyleNetworkArchive* temp = _impl_.new_style_network_;
  _impl_.new_style_network_ = nullptr;
  return temp;
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::_internal_mutable_new_style_network() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_style_network_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableStyleNetworkArchive>(GetArenaForAllocation());
    _impl_.new_style_network_ = p;
  }
  return _impl_.new_style_network_;
}
inline ::TST::TableStyleNetworkArchive* CommandSetStyleNetworkArchive::mutable_new_style_network() {
  ::TST::TableStyleNetworkArchive* _msg = _internal_mutable_new_style_network();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStyleNetworkArchive.new_style_network)
  return _msg;
}
inline void CommandSetStyleNetworkArchive::set_allocated_new_style_network(::TST::TableStyleNetworkArchive* new_style_network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_network_);
  }
  if (new_style_network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_network));
    if (message_arena != submessage_arena) {
      new_style_network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style_network, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.new_style_network_ = new_style_network;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStyleNetworkArchive.new_style_network)
}

// -------------------------------------------------------------------

// CommandMutateCellsArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandMutateCellsArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandMutateCellsArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandMutateCellsArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandMutateCellsArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandMutateCellsArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellsArchive.super)
  return _internal_super();
}
inline void CommandMutateCellsArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellsArchive.super)
}
inline ::TST::TableCommandArchive* CommandMutateCellsArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandMutateCellsArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellsArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandMutateCellsArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandMutateCellsArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellsArchive.super)
  return _msg;
}
inline void CommandMutateCellsArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellsArchive.super)
}

// required .TST.CellMapArchive undo_cell_map = 2;
inline bool CommandMutateCellsArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandMutateCellsArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandMutateCellsArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandMutateCellsArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellsArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandMutateCellsArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellsArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellsArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellsArchive.undo_cell_map)
  return _msg;
}
inline void CommandMutateCellsArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellsArchive.undo_cell_map)
}

// required .TST.CellMapArchive redo_cell_map = 3;
inline bool CommandMutateCellsArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandMutateCellsArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandMutateCellsArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandMutateCellsArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellsArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandMutateCellsArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellsArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellsArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandMutateCellsArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellsArchive.redo_cell_map)
  return _msg;
}
inline void CommandMutateCellsArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellsArchive.redo_cell_map)
}

// optional .TST.SelectionArchive selection = 4;
inline bool CommandMutateCellsArchive::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selection_ != nullptr);
  return value;
}
inline bool CommandMutateCellsArchive::has_selection() const {
  return _internal_has_selection();
}
inline const ::TST::SelectionArchive& CommandMutateCellsArchive::_internal_selection() const {
  const ::TST::SelectionArchive* p = _impl_.selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SelectionArchive&>(
      ::TST::_SelectionArchive_default_instance_);
}
inline const ::TST::SelectionArchive& CommandMutateCellsArchive::selection() const {
  // @@protoc_insertion_point(field_get:TST.CommandMutateCellsArchive.selection)
  return _internal_selection();
}
inline void CommandMutateCellsArchive::unsafe_arena_set_allocated_selection(
    ::TST::SelectionArchive* selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  _impl_.selection_ = selection;
  if (selection) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandMutateCellsArchive.selection)
}
inline ::TST::SelectionArchive* CommandMutateCellsArchive::release_selection() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::SelectionArchive* CommandMutateCellsArchive::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_release:TST.CommandMutateCellsArchive.selection)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::SelectionArchive* temp = _impl_.selection_;
  _impl_.selection_ = nullptr;
  return temp;
}
inline ::TST::SelectionArchive* CommandMutateCellsArchive::_internal_mutable_selection() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SelectionArchive>(GetArenaForAllocation());
    _impl_.selection_ = p;
  }
  return _impl_.selection_;
}
inline ::TST::SelectionArchive* CommandMutateCellsArchive::mutable_selection() {
  ::TST::SelectionArchive* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:TST.CommandMutateCellsArchive.selection)
  return _msg;
}
inline void CommandMutateCellsArchive::set_allocated_selection(::TST::SelectionArchive* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selection_);
  }
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection));
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.selection_ = selection;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandMutateCellsArchive.selection)
}

// -------------------------------------------------------------------

// CommandDisableFilterRulesForColumnArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandDisableFilterRulesForColumnArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandDisableFilterRulesForColumnArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandDisableFilterRulesForColumnArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandDisableFilterRulesForColumnArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandDisableFilterRulesForColumnArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandDisableFilterRulesForColumnArchive.super)
  return _internal_super();
}
inline void CommandDisableFilterRulesForColumnArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandDisableFilterRulesForColumnArchive.super)
}
inline ::TST::TableCommandArchive* CommandDisableFilterRulesForColumnArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandDisableFilterRulesForColumnArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandDisableFilterRulesForColumnArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandDisableFilterRulesForColumnArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandDisableFilterRulesForColumnArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandDisableFilterRulesForColumnArchive.super)
  return _msg;
}
inline void CommandDisableFilterRulesForColumnArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandDisableFilterRulesForColumnArchive.super)
}

// required uint32 column_index = 2;
inline bool CommandDisableFilterRulesForColumnArchive::_internal_has_column_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandDisableFilterRulesForColumnArchive::has_column_index() const {
  return _internal_has_column_index();
}
inline void CommandDisableFilterRulesForColumnArchive::clear_column_index() {
  _impl_.column_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CommandDisableFilterRulesForColumnArchive::_internal_column_index() const {
  return _impl_.column_index_;
}
inline uint32_t CommandDisableFilterRulesForColumnArchive::column_index() const {
  // @@protoc_insertion_point(field_get:TST.CommandDisableFilterRulesForColumnArchive.column_index)
  return _internal_column_index();
}
inline void CommandDisableFilterRulesForColumnArchive::_internal_set_column_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.column_index_ = value;
}
inline void CommandDisableFilterRulesForColumnArchive::set_column_index(uint32_t value) {
  _internal_set_column_index(value);
  // @@protoc_insertion_point(field_set:TST.CommandDisableFilterRulesForColumnArchive.column_index)
}

// repeated uint32 rule_indices = 3;
inline int CommandDisableFilterRulesForColumnArchive::_internal_rule_indices_size() const {
  return _impl_.rule_indices_.size();
}
inline int CommandDisableFilterRulesForColumnArchive::rule_indices_size() const {
  return _internal_rule_indices_size();
}
inline void CommandDisableFilterRulesForColumnArchive::clear_rule_indices() {
  _impl_.rule_indices_.Clear();
}
inline uint32_t CommandDisableFilterRulesForColumnArchive::_internal_rule_indices(int index) const {
  return _impl_.rule_indices_.Get(index);
}
inline uint32_t CommandDisableFilterRulesForColumnArchive::rule_indices(int index) const {
  // @@protoc_insertion_point(field_get:TST.CommandDisableFilterRulesForColumnArchive.rule_indices)
  return _internal_rule_indices(index);
}
inline void CommandDisableFilterRulesForColumnArchive::set_rule_indices(int index, uint32_t value) {
  _impl_.rule_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CommandDisableFilterRulesForColumnArchive.rule_indices)
}
inline void CommandDisableFilterRulesForColumnArchive::_internal_add_rule_indices(uint32_t value) {
  _impl_.rule_indices_.Add(value);
}
inline void CommandDisableFilterRulesForColumnArchive::add_rule_indices(uint32_t value) {
  _internal_add_rule_indices(value);
  // @@protoc_insertion_point(field_add:TST.CommandDisableFilterRulesForColumnArchive.rule_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandDisableFilterRulesForColumnArchive::_internal_rule_indices() const {
  return _impl_.rule_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CommandDisableFilterRulesForColumnArchive::rule_indices() const {
  // @@protoc_insertion_point(field_list:TST.CommandDisableFilterRulesForColumnArchive.rule_indices)
  return _internal_rule_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandDisableFilterRulesForColumnArchive::_internal_mutable_rule_indices() {
  return &_impl_.rule_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CommandDisableFilterRulesForColumnArchive::mutable_rule_indices() {
  // @@protoc_insertion_point(field_mutable_list:TST.CommandDisableFilterRulesForColumnArchive.rule_indices)
  return _internal_mutable_rule_indices();
}

// -------------------------------------------------------------------

// CommandSetTextStyleArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandSetTextStyleArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandSetTextStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandSetTextStyleArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandSetTextStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.super)
  return _internal_super();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.super)
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandSetTextStyleArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.super)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.super)
}

// required .TST.CellRegion region = 2;
inline bool CommandSetTextStyleArchive::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.region_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_region() const {
  return _internal_has_region();
}
inline const ::TST::CellRegion& CommandSetTextStyleArchive::_internal_region() const {
  const ::TST::CellRegion* p = _impl_.region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRegion&>(
      ::TST::_CellRegion_default_instance_);
}
inline const ::TST::CellRegion& CommandSetTextStyleArchive::region() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.region)
  return _internal_region();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_region(
    ::TST::CellRegion* region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_);
  }
  _impl_.region_ = region;
  if (region) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.region)
}
inline ::TST::CellRegion* CommandSetTextStyleArchive::release_region() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellRegion* temp = _impl_.region_;
  _impl_.region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellRegion* CommandSetTextStyleArchive::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.region)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TST::CellRegion* temp = _impl_.region_;
  _impl_.region_ = nullptr;
  return temp;
}
inline ::TST::CellRegion* CommandSetTextStyleArchive::_internal_mutable_region() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRegion>(GetArenaForAllocation());
    _impl_.region_ = p;
  }
  return _impl_.region_;
}
inline ::TST::CellRegion* CommandSetTextStyleArchive::mutable_region() {
  ::TST::CellRegion* _msg = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.region)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_region(::TST::CellRegion* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region));
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.region_ = region;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.region)
}

// optional .TST.CellMapArchive undo_cell_map = 3;
inline bool CommandSetTextStyleArchive::_internal_has_undo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_undo_cell_map() const {
  return _internal_has_undo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetTextStyleArchive::_internal_undo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.undo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetTextStyleArchive::undo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.undo_cell_map)
  return _internal_undo_cell_map();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_undo_cell_map(
    ::TST::CellMapArchive* undo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  if (undo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.undo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::release_undo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::unsafe_arena_release_undo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.undo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TST::CellMapArchive* temp = _impl_.undo_cell_map_;
  _impl_.undo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::_internal_mutable_undo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.undo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.undo_cell_map_ = p;
  }
  return _impl_.undo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::mutable_undo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_undo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.undo_cell_map)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_undo_cell_map(::TST::CellMapArchive* undo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_cell_map_);
  }
  if (undo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_cell_map));
    if (message_arena != submessage_arena) {
      undo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.undo_cell_map_ = undo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.undo_cell_map)
}

// optional .TST.CellMapArchive redo_cell_map = 4;
inline bool CommandSetTextStyleArchive::_internal_has_redo_cell_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redo_cell_map_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_redo_cell_map() const {
  return _internal_has_redo_cell_map();
}
inline const ::TST::CellMapArchive& CommandSetTextStyleArchive::_internal_redo_cell_map() const {
  const ::TST::CellMapArchive* p = _impl_.redo_cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellMapArchive&>(
      ::TST::_CellMapArchive_default_instance_);
}
inline const ::TST::CellMapArchive& CommandSetTextStyleArchive::redo_cell_map() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.redo_cell_map)
  return _internal_redo_cell_map();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_redo_cell_map(
    ::TST::CellMapArchive* redo_cell_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  if (redo_cell_map) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.redo_cell_map)
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::release_redo_cell_map() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::unsafe_arena_release_redo_cell_map() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.redo_cell_map)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TST::CellMapArchive* temp = _impl_.redo_cell_map_;
  _impl_.redo_cell_map_ = nullptr;
  return temp;
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::_internal_mutable_redo_cell_map() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.redo_cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellMapArchive>(GetArenaForAllocation());
    _impl_.redo_cell_map_ = p;
  }
  return _impl_.redo_cell_map_;
}
inline ::TST::CellMapArchive* CommandSetTextStyleArchive::mutable_redo_cell_map() {
  ::TST::CellMapArchive* _msg = _internal_mutable_redo_cell_map();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.redo_cell_map)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_redo_cell_map(::TST::CellMapArchive* redo_cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.redo_cell_map_);
  }
  if (redo_cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_cell_map));
    if (message_arena != submessage_arena) {
      redo_cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_cell_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.redo_cell_map_ = redo_cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.redo_cell_map)
}

// optional .TSP.Reference subcommands = 5;
inline bool CommandSetTextStyleArchive::_internal_has_subcommands() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subcommands_ != nullptr);
  return value;
}
inline bool CommandSetTextStyleArchive::has_subcommands() const {
  return _internal_has_subcommands();
}
inline const ::TSP::Reference& CommandSetTextStyleArchive::_internal_subcommands() const {
  const ::TSP::Reference* p = _impl_.subcommands_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetTextStyleArchive::subcommands() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetTextStyleArchive.subcommands)
  return _internal_subcommands();
}
inline void CommandSetTextStyleArchive::unsafe_arena_set_allocated_subcommands(
    ::TSP::Reference* subcommands) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subcommands_);
  }
  _impl_.subcommands_ = subcommands;
  if (subcommands) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetTextStyleArchive.subcommands)
}
inline ::TSP::Reference* CommandSetTextStyleArchive::release_subcommands() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.subcommands_;
  _impl_.subcommands_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::unsafe_arena_release_subcommands() {
  // @@protoc_insertion_point(field_release:TST.CommandSetTextStyleArchive.subcommands)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.subcommands_;
  _impl_.subcommands_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::_internal_mutable_subcommands() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.subcommands_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.subcommands_ = p;
  }
  return _impl_.subcommands_;
}
inline ::TSP::Reference* CommandSetTextStyleArchive::mutable_subcommands() {
  ::TSP::Reference* _msg = _internal_mutable_subcommands();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetTextStyleArchive.subcommands)
  return _msg;
}
inline void CommandSetTextStyleArchive::set_allocated_subcommands(::TSP::Reference* subcommands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subcommands_);
  }
  if (subcommands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subcommands));
    if (message_arena != submessage_arena) {
      subcommands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subcommands, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.subcommands_ = subcommands;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetTextStyleArchive.subcommands)
}

// -------------------------------------------------------------------

// CommandNotifyForTransformingArchive

// required .TST.TableCommandArchive super = 1;
inline bool CommandNotifyForTransformingArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandNotifyForTransformingArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandNotifyForTransformingArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableCommandArchive& CommandNotifyForTransformingArchive::_internal_super() const {
  const ::TST::TableCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableCommandArchive&>(
      ::TST::_TableCommandArchive_default_instance_);
}
inline const ::TST::TableCommandArchive& CommandNotifyForTransformingArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandNotifyForTransformingArchive.super)
  return _internal_super();
}
inline void CommandNotifyForTransformingArchive::unsafe_arena_set_allocated_super(
    ::TST::TableCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandNotifyForTransformingArchive.super)
}
inline ::TST::TableCommandArchive* CommandNotifyForTransformingArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TST::TableCommandArchive* CommandNotifyForTransformingArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandNotifyForTransformingArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TST::TableCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TST::TableCommandArchive* CommandNotifyForTransformingArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TST::TableCommandArchive* CommandNotifyForTransformingArchive::mutable_super() {
  ::TST::TableCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandNotifyForTransformingArchive.super)
  return _msg;
}
inline void CommandNotifyForTransformingArchive::set_allocated_super(::TST::TableCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandNotifyForTransformingArchive.super)
}

// -------------------------------------------------------------------

// CommandSetStorageLanguageArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandSetStorageLanguageArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& CommandSetStorageLanguageArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandSetStorageLanguageArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.super)
  return _internal_super();
}
inline void CommandSetStorageLanguageArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStorageLanguageArchive.super)
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* CommandSetStorageLanguageArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.super)
  return _msg;
}
inline void CommandSetStorageLanguageArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.super)
}

// required .TSP.Reference storage = 2;
inline bool CommandSetStorageLanguageArchive::_internal_has_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.storage_ != nullptr);
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& CommandSetStorageLanguageArchive::_internal_storage() const {
  const ::TSP::Reference* p = _impl_.storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSetStorageLanguageArchive::storage() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.storage)
  return _internal_storage();
}
inline void CommandSetStorageLanguageArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  _impl_.storage_ = storage;
  if (storage) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStorageLanguageArchive.storage)
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::release_storage() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.storage)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.storage_;
  _impl_.storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::_internal_mutable_storage() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.storage_ = p;
  }
  return _impl_.storage_;
}
inline ::TSP::Reference* CommandSetStorageLanguageArchive::mutable_storage() {
  ::TSP::Reference* _msg = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.storage)
  return _msg;
}
inline void CommandSetStorageLanguageArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage));
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.storage)
}

// required string language = 3;
inline bool CommandSetStorageLanguageArchive::_internal_has_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_language() const {
  return _internal_has_language();
}
inline void CommandSetStorageLanguageArchive::clear_language() {
  _impl_.language_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandSetStorageLanguageArchive::language() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandSetStorageLanguageArchive::set_language(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TST.CommandSetStorageLanguageArchive.language)
}
inline std::string* CommandSetStorageLanguageArchive::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.language)
  return _s;
}
inline const std::string& CommandSetStorageLanguageArchive::_internal_language() const {
  return _impl_.language_.Get();
}
inline void CommandSetStorageLanguageArchive::_internal_set_language(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandSetStorageLanguageArchive::_internal_mutable_language() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandSetStorageLanguageArchive::release_language() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandSetStorageLanguageArchive::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.language)
}

// required uint32 range_location = 4;
inline bool CommandSetStorageLanguageArchive::_internal_has_range_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_range_location() const {
  return _internal_has_range_location();
}
inline void CommandSetStorageLanguageArchive::clear_range_location() {
  _impl_.range_location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CommandSetStorageLanguageArchive::_internal_range_location() const {
  return _impl_.range_location_;
}
inline uint32_t CommandSetStorageLanguageArchive::range_location() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.range_location)
  return _internal_range_location();
}
inline void CommandSetStorageLanguageArchive::_internal_set_range_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.range_location_ = value;
}
inline void CommandSetStorageLanguageArchive::set_range_location(uint32_t value) {
  _internal_set_range_location(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetStorageLanguageArchive.range_location)
}

// required uint32 range_length = 5;
inline bool CommandSetStorageLanguageArchive::_internal_has_range_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_range_length() const {
  return _internal_has_range_length();
}
inline void CommandSetStorageLanguageArchive::clear_range_length() {
  _impl_.range_length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CommandSetStorageLanguageArchive::_internal_range_length() const {
  return _impl_.range_length_;
}
inline uint32_t CommandSetStorageLanguageArchive::range_length() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.range_length)
  return _internal_range_length();
}
inline void CommandSetStorageLanguageArchive::_internal_set_range_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.range_length_ = value;
}
inline void CommandSetStorageLanguageArchive::set_range_length(uint32_t value) {
  _internal_set_range_length(value);
  // @@protoc_insertion_point(field_set:TST.CommandSetStorageLanguageArchive.range_length)
}

// optional .TSWP.UndoTransaction undo_transaction = 6;
inline bool CommandSetStorageLanguageArchive::_internal_has_undo_transaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.undo_transaction_ != nullptr);
  return value;
}
inline bool CommandSetStorageLanguageArchive::has_undo_transaction() const {
  return _internal_has_undo_transaction();
}
inline const ::TSWP::UndoTransaction& CommandSetStorageLanguageArchive::_internal_undo_transaction() const {
  const ::TSWP::UndoTransaction* p = _impl_.undo_transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UndoTransaction&>(
      ::TSWP::_UndoTransaction_default_instance_);
}
inline const ::TSWP::UndoTransaction& CommandSetStorageLanguageArchive::undo_transaction() const {
  // @@protoc_insertion_point(field_get:TST.CommandSetStorageLanguageArchive.undo_transaction)
  return _internal_undo_transaction();
}
inline void CommandSetStorageLanguageArchive::unsafe_arena_set_allocated_undo_transaction(
    ::TSWP::UndoTransaction* undo_transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_transaction_);
  }
  _impl_.undo_transaction_ = undo_transaction;
  if (undo_transaction) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommandSetStorageLanguageArchive.undo_transaction)
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::release_undo_transaction() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = _impl_.undo_transaction_;
  _impl_.undo_transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::unsafe_arena_release_undo_transaction() {
  // @@protoc_insertion_point(field_release:TST.CommandSetStorageLanguageArchive.undo_transaction)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSWP::UndoTransaction* temp = _impl_.undo_transaction_;
  _impl_.undo_transaction_ = nullptr;
  return temp;
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::_internal_mutable_undo_transaction() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.undo_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UndoTransaction>(GetArenaForAllocation());
    _impl_.undo_transaction_ = p;
  }
  return _impl_.undo_transaction_;
}
inline ::TSWP::UndoTransaction* CommandSetStorageLanguageArchive::mutable_undo_transaction() {
  ::TSWP::UndoTransaction* _msg = _internal_mutable_undo_transaction();
  // @@protoc_insertion_point(field_mutable:TST.CommandSetStorageLanguageArchive.undo_transaction)
  return _msg;
}
inline void CommandSetStorageLanguageArchive::set_allocated_undo_transaction(::TSWP::UndoTransaction* undo_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.undo_transaction_);
  }
  if (undo_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_transaction));
    if (message_arena != submessage_arena) {
      undo_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_transaction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.undo_transaction_ = undo_transaction;
  // @@protoc_insertion_point(field_set_allocated:TST.CommandSetStorageLanguageArchive.undo_transaction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TST::CommandDirectionArchive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::CommandDirectionArchive>() {
  return ::TST::CommandDirectionArchive_descriptor();
}
template <> struct is_proto_enum< ::TST::CommandRegionArchive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::CommandRegionArchive>() {
  return ::TST::CommandRegionArchive_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSTCommandArchives_2eproto
