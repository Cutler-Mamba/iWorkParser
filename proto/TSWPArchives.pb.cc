// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSWPArchives.proto

#include "TSWPArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSWP {
PROTOBUF_CONSTEXPR SelectionArchive::SelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.smart_field_range_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.styleinsertionbehavior_)*/0
  , /*decltype(_impl_.caretaffinity_)*/0} {}
struct SelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectionArchiveDefaultTypeInternal() {}
  union {
    SelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectionArchiveDefaultTypeInternal _SelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.character_index_)*/0u} {}
struct ObjectAttributeTable_ObjectAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectAttributeTable_ObjectAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectAttributeTable_ObjectAttributeDefaultTypeInternal() {}
  union {
    ObjectAttributeTable_ObjectAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectAttributeTable_ObjectAttributeDefaultTypeInternal _ObjectAttributeTable_ObjectAttribute_default_instance_;
PROTOBUF_CONSTEXPR ObjectAttributeTable::ObjectAttributeTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectAttributeTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectAttributeTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectAttributeTableDefaultTypeInternal() {}
  union {
    ObjectAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectAttributeTableDefaultTypeInternal _ObjectAttributeTable_default_instance_;
PROTOBUF_CONSTEXPR StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.character_index_)*/0u} {}
struct StringAttributeTable_StringAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringAttributeTable_StringAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringAttributeTable_StringAttributeDefaultTypeInternal() {}
  union {
    StringAttributeTable_StringAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringAttributeTable_StringAttributeDefaultTypeInternal _StringAttributeTable_StringAttribute_default_instance_;
PROTOBUF_CONSTEXPR StringAttributeTable::StringAttributeTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringAttributeTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringAttributeTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringAttributeTableDefaultTypeInternal() {}
  union {
    StringAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringAttributeTableDefaultTypeInternal _StringAttributeTable_default_instance_;
PROTOBUF_CONSTEXPR ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.character_index_)*/0u
  , /*decltype(_impl_.first_)*/0u
  , /*decltype(_impl_.second_)*/0u} {}
struct ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal() {}
  union {
    ParaDataAttributeTable_ParaDataAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParaDataAttributeTable_ParaDataAttributeDefaultTypeInternal _ParaDataAttributeTable_ParaDataAttribute_default_instance_;
PROTOBUF_CONSTEXPR ParaDataAttributeTable::ParaDataAttributeTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParaDataAttributeTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParaDataAttributeTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParaDataAttributeTableDefaultTypeInternal() {}
  union {
    ParaDataAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParaDataAttributeTableDefaultTypeInternal _ParaDataAttributeTable_default_instance_;
PROTOBUF_CONSTEXPR SparseObjectAttributeTable_SparseObjectAttribute::SparseObjectAttributeTable_SparseObjectAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.character_index_)*/0u
  , /*decltype(_impl_.run_length_)*/0u} {}
struct SparseObjectAttributeTable_SparseObjectAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseObjectAttributeTable_SparseObjectAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseObjectAttributeTable_SparseObjectAttributeDefaultTypeInternal() {}
  union {
    SparseObjectAttributeTable_SparseObjectAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseObjectAttributeTable_SparseObjectAttributeDefaultTypeInternal _SparseObjectAttributeTable_SparseObjectAttribute_default_instance_;
PROTOBUF_CONSTEXPR SparseObjectAttributeTable::SparseObjectAttributeTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.total_count_)*/0u} {}
struct SparseObjectAttributeTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseObjectAttributeTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseObjectAttributeTableDefaultTypeInternal() {}
  union {
    SparseObjectAttributeTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseObjectAttributeTableDefaultTypeInternal _SparseObjectAttributeTable_default_instance_;
PROTOBUF_CONSTEXPR StorageArchive::StorageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{}
  , /*decltype(_impl_.style_sheet_)*/nullptr
  , /*decltype(_impl_.table_para_style_)*/nullptr
  , /*decltype(_impl_.table_para_data_)*/nullptr
  , /*decltype(_impl_.table_list_style_)*/nullptr
  , /*decltype(_impl_.table_char_style_)*/nullptr
  , /*decltype(_impl_.table_attachment_)*/nullptr
  , /*decltype(_impl_.table_smartfield_)*/nullptr
  , /*decltype(_impl_.table_layout_style_)*/nullptr
  , /*decltype(_impl_.table_para_starts_)*/nullptr
  , /*decltype(_impl_.table_bookmark_)*/nullptr
  , /*decltype(_impl_.table_footnote_)*/nullptr
  , /*decltype(_impl_.table_section_)*/nullptr
  , /*decltype(_impl_.table_rubyfield_)*/nullptr
  , /*decltype(_impl_.table_language_)*/nullptr
  , /*decltype(_impl_.table_dictation_)*/nullptr
  , /*decltype(_impl_.table_insertion_)*/nullptr
  , /*decltype(_impl_.table_deletion_)*/nullptr
  , /*decltype(_impl_.table_highlight_)*/nullptr
  , /*decltype(_impl_.table_para_bidi_)*/nullptr
  , /*decltype(_impl_.has_itext_)*/false
  , /*decltype(_impl_.in_document_)*/false
  , /*decltype(_impl_.kind_)*/3} {}
struct StorageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageArchiveDefaultTypeInternal() {}
  union {
    StorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageArchiveDefaultTypeInternal _StorageArchive_default_instance_;
PROTOBUF_CONSTEXPR HighlightArchive::HighlightArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commentstorage_)*/nullptr} {}
struct HighlightArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HighlightArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HighlightArchiveDefaultTypeInternal() {}
  union {
    HighlightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HighlightArchiveDefaultTypeInternal _HighlightArchive_default_instance_;
PROTOBUF_CONSTEXPR FontFeatureArchive::FontFeatureArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feature_type_)*/0u
  , /*decltype(_impl_.feature_selector_)*/0u} {}
struct FontFeatureArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontFeatureArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontFeatureArchiveDefaultTypeInternal() {}
  union {
    FontFeatureArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontFeatureArchiveDefaultTypeInternal _FontFeatureArchive_default_instance_;
PROTOBUF_CONSTEXPR CharacterStylePropertiesArchive::CharacterStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.font_features_)*/{}
  , /*decltype(_impl_.font_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emphasis_marks_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compatibility_font_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.font_color_)*/nullptr
  , /*decltype(_impl_.outline_color_)*/nullptr
  , /*decltype(_impl_.shadow_)*/nullptr
  , /*decltype(_impl_.strikethru_color_)*/nullptr
  , /*decltype(_impl_.background_color_)*/nullptr
  , /*decltype(_impl_.underline_color_)*/nullptr
  , /*decltype(_impl_.font_size_)*/0
  , /*decltype(_impl_.bold_)*/false
  , /*decltype(_impl_.italic_)*/false
  , /*decltype(_impl_.font_name_null_)*/false
  , /*decltype(_impl_.font_color_null_)*/false
  , /*decltype(_impl_.superscript_)*/0
  , /*decltype(_impl_.underline_)*/0
  , /*decltype(_impl_.strikethru_)*/0
  , /*decltype(_impl_.capitalization_)*/0
  , /*decltype(_impl_.baseline_shift_)*/0
  , /*decltype(_impl_.kerning_)*/0
  , /*decltype(_impl_.ligatures_)*/0
  , /*decltype(_impl_.language_null_)*/false
  , /*decltype(_impl_.outline_color_null_)*/false
  , /*decltype(_impl_.shadow_null_)*/false
  , /*decltype(_impl_.strikethru_color_null_)*/false
  , /*decltype(_impl_.outline_)*/0
  , /*decltype(_impl_.strikethru_width_)*/0
  , /*decltype(_impl_.tracking_)*/0
  , /*decltype(_impl_.background_color_null_)*/false
  , /*decltype(_impl_.underline_color_null_)*/false
  , /*decltype(_impl_.word_strikethru_)*/false
  , /*decltype(_impl_.word_underline_)*/false
  , /*decltype(_impl_.underline_width_)*/0
  , /*decltype(_impl_.font_features_null_)*/false
  , /*decltype(_impl_.emphasis_marks_null_)*/false
  , /*decltype(_impl_.compatibility_font_name_null_)*/false
  , /*decltype(_impl_.writing_direction_)*/-1} {}
struct CharacterStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    CharacterStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterStylePropertiesArchiveDefaultTypeInternal _CharacterStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR CharacterStyleArchive::CharacterStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.char_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct CharacterStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterStyleArchiveDefaultTypeInternal() {}
  union {
    CharacterStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterStyleArchiveDefaultTypeInternal _CharacterStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR TabArchive::TabArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.leader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.alignment_)*/0} {}
struct TabArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabArchiveDefaultTypeInternal() {}
  union {
    TabArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabArchiveDefaultTypeInternal _TabArchive_default_instance_;
PROTOBUF_CONSTEXPR TabsArchive::TabsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tabs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TabsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabsArchiveDefaultTypeInternal() {}
  union {
    TabsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabsArchiveDefaultTypeInternal _TabsArchive_default_instance_;
PROTOBUF_CONSTEXPR LineSpacingArchive::LineSpacingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.baselinerule_)*/0} {}
struct LineSpacingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineSpacingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineSpacingArchiveDefaultTypeInternal() {}
  union {
    LineSpacingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineSpacingArchiveDefaultTypeInternal _LineSpacingArchive_default_instance_;
PROTOBUF_CONSTEXPR ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.decimal_tab_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.following_style_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.toc_style_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fill_)*/nullptr
  , /*decltype(_impl_.line_spacing_)*/nullptr
  , /*decltype(_impl_.rule_offset_)*/nullptr
  , /*decltype(_impl_.tabs_)*/nullptr
  , /*decltype(_impl_.stroke_)*/nullptr
  , /*decltype(_impl_.list_style_)*/nullptr
  , /*decltype(_impl_.following_style_)*/nullptr
  , /*decltype(_impl_.alignment_)*/0
  , /*decltype(_impl_.default_tab_stops_)*/0
  , /*decltype(_impl_.decimal_tab_null_)*/false
  , /*decltype(_impl_.fill_null_)*/false
  , /*decltype(_impl_.hyphenate_)*/false
  , /*decltype(_impl_.keep_lines_together_)*/false
  , /*decltype(_impl_.first_line_indent_)*/0
  , /*decltype(_impl_.left_indent_)*/0
  , /*decltype(_impl_.keep_with_next_)*/false
  , /*decltype(_impl_.line_spacing_null_)*/false
  , /*decltype(_impl_.page_break_before_)*/false
  , /*decltype(_impl_.rule_offset_null_)*/false
  , /*decltype(_impl_.borders_)*/0
  , /*decltype(_impl_.rule_width_)*/0
  , /*decltype(_impl_.right_indent_)*/0
  , /*decltype(_impl_.space_after_)*/0
  , /*decltype(_impl_.space_before_)*/0
  , /*decltype(_impl_.outline_level_)*/0u
  , /*decltype(_impl_.tabs_null_)*/false
  , /*decltype(_impl_.widow_control_)*/false
  , /*decltype(_impl_.following_style_id_null_)*/false
  , /*decltype(_impl_.stroke_null_)*/false
  , /*decltype(_impl_.outline_style_)*/0
  , /*decltype(_impl_.show_in_toc_)*/false
  , /*decltype(_impl_.toc_style_id_null_)*/false
  , /*decltype(_impl_.list_style_null_)*/false
  , /*decltype(_impl_.following_style_null_)*/false
  , /*decltype(_impl_.writing_direction_)*/-1} {}
struct ParagraphStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParagraphStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParagraphStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    ParagraphStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParagraphStylePropertiesArchiveDefaultTypeInternal _ParagraphStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR ParagraphStyleArchive::ParagraphStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.char_properties_)*/nullptr
  , /*decltype(_impl_.para_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct ParagraphStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParagraphStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParagraphStyleArchiveDefaultTypeInternal() {}
  union {
    ParagraphStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParagraphStyleArchiveDefaultTypeInternal _ParagraphStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.baseline_offset_)*/0
  , /*decltype(_impl_.scale_)*/1
  , /*decltype(_impl_.scale_with_text_)*/true} {}
struct ListStyleArchive_LabelGeometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListStyleArchive_LabelGeometryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListStyleArchive_LabelGeometryDefaultTypeInternal() {}
  union {
    ListStyleArchive_LabelGeometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListStyleArchive_LabelGeometryDefaultTypeInternal _ListStyleArchive_LabelGeometry_default_instance_;
PROTOBUF_CONSTEXPR ListStyleArchive_LabelImage::ListStyleArchive_LabelImage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_image_)*/nullptr
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.image_null_)*/false} {}
struct ListStyleArchive_LabelImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListStyleArchive_LabelImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListStyleArchive_LabelImageDefaultTypeInternal() {}
  union {
    ListStyleArchive_LabelImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListStyleArchive_LabelImageDefaultTypeInternal _ListStyleArchive_LabelImage_default_instance_;
PROTOBUF_CONSTEXPR ListStyleArchive::ListStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.label_types_)*/{}
  , /*decltype(_impl_.text_indents_)*/{}
  , /*decltype(_impl_.indents_)*/{}
  , /*decltype(_impl_.geometries_)*/{}
  , /*decltype(_impl_.number_types_)*/{}
  , /*decltype(_impl_.strings_)*/{}
  , /*decltype(_impl_.images_)*/{}
  , /*decltype(_impl_.tiered_numbers_)*/{}
  , /*decltype(_impl_.font_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.shadow_)*/nullptr
  , /*decltype(_impl_.font_color_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u
  , /*decltype(_impl_.shadow_null_)*/false
  , /*decltype(_impl_.font_color_null_)*/false
  , /*decltype(_impl_.font_name_null_)*/false
  , /*decltype(_impl_.writing_direction_)*/-1} {}
struct ListStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListStyleArchiveDefaultTypeInternal() {}
  union {
    ListStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListStyleArchiveDefaultTypeInternal _ListStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR TextStylePresetArchive::TextStylePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preset_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paragraph_style_)*/nullptr
  , /*decltype(_impl_.list_style_)*/nullptr} {}
struct TextStylePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextStylePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextStylePresetArchiveDefaultTypeInternal() {}
  union {
    TextStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextStylePresetArchiveDefaultTypeInternal _TextStylePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.gap_)*/0} {}
struct ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive_EqualColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnsArchive_EqualColumnsArchiveDefaultTypeInternal _ColumnsArchive_EqualColumnsArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gap_)*/0
  , /*decltype(_impl_.width_)*/0} {}
struct ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnsArchive_NonEqualColumnsArchive_GapWidthArchiveDefaultTypeInternal _ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.following_)*/{}
  , /*decltype(_impl_.first_)*/0} {}
struct ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive_NonEqualColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnsArchive_NonEqualColumnsArchiveDefaultTypeInternal _ColumnsArchive_NonEqualColumnsArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnsArchive::ColumnsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.equal_columns_)*/nullptr
  , /*decltype(_impl_.non_equal_columns_)*/nullptr} {}
struct ColumnsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnsArchiveDefaultTypeInternal() {}
  union {
    ColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnsArchiveDefaultTypeInternal _ColumnsArchive_default_instance_;
PROTOBUF_CONSTEXPR PaddingArchive::PaddingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.top_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_.bottom_)*/0} {}
struct PaddingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaddingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaddingArchiveDefaultTypeInternal() {}
  union {
    PaddingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaddingArchiveDefaultTypeInternal _PaddingArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnStylePropertiesArchive::ColumnStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.columns_)*/nullptr
  , /*decltype(_impl_.margins_)*/nullptr
  , /*decltype(_impl_.padding_)*/nullptr
  , /*decltype(_impl_.continuous_)*/false
  , /*decltype(_impl_.shrink_to_fit_)*/false
  , /*decltype(_impl_.vertical_text_)*/false
  , /*decltype(_impl_.columns_null_)*/false
  , /*decltype(_impl_.min_horizontal_inset_)*/0
  , /*decltype(_impl_.vertical_alignment_)*/0
  , /*decltype(_impl_.margins_null_)*/false
  , /*decltype(_impl_.padding_null_)*/false
  , /*decltype(_impl_.writing_direction_)*/-1} {}
struct ColumnStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    ColumnStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnStylePropertiesArchiveDefaultTypeInternal _ColumnStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnStyleArchive::ColumnStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.column_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct ColumnStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnStyleArchiveDefaultTypeInternal() {}
  union {
    ColumnStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnStyleArchiveDefaultTypeInternal _ColumnStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.columns_)*/nullptr
  , /*decltype(_impl_.padding_)*/nullptr
  , /*decltype(_impl_.paragraph_style_)*/nullptr
  , /*decltype(_impl_.vertical_alignment_)*/0
  , /*decltype(_impl_.shrink_to_fit_)*/false
  , /*decltype(_impl_.columns_null_)*/false
  , /*decltype(_impl_.padding_null_)*/false
  , /*decltype(_impl_.vertical_text_)*/false
  , /*decltype(_impl_.default_text_preset_index_)*/0u
  , /*decltype(_impl_.paragraph_style_null_)*/false} {}
struct ShapeStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShapeStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShapeStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    ShapeStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShapeStylePropertiesArchiveDefaultTypeInternal _ShapeStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR ShapeStyleArchive::ShapeStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.shape_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct ShapeStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShapeStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShapeStyleArchiveDefaultTypeInternal() {}
  union {
    ShapeStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShapeStyleArchiveDefaultTypeInternal _ShapeStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemePresetsArchive::ThemePresetsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_style_presets_)*/{}
  , /*decltype(_impl_.text_style_presets_)*/{}
  , /*decltype(_impl_.imported_text_style_presets_)*/{}
  , /*decltype(_impl_.toc_entry_style_presets_)*/{}
  , /*decltype(_impl_.toc_settings_presets_)*/{}
  , /*decltype(_impl_.character_style_presets_)*/{}
  , /*decltype(_impl_.paragraph_style_presets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThemePresetsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemePresetsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemePresetsArchiveDefaultTypeInternal() {}
  union {
    ThemePresetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemePresetsArchiveDefaultTypeInternal _ThemePresetsArchive_default_instance_;
PROTOBUF_CONSTEXPR TextPresetDisplayItemArchive::TextPresetDisplayItemArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preset_)*/nullptr} {}
struct TextPresetDisplayItemArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextPresetDisplayItemArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextPresetDisplayItemArchiveDefaultTypeInternal() {}
  union {
    TextPresetDisplayItemArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextPresetDisplayItemArchiveDefaultTypeInternal _TextPresetDisplayItemArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.page_number_style_)*/nullptr
  , /*decltype(_impl_.page_number_style_null_)*/false
  , /*decltype(_impl_.show_page_number_)*/false} {}
struct TOCEntryStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCEntryStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCEntryStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    TOCEntryStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCEntryStylePropertiesArchiveDefaultTypeInternal _TOCEntryStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCEntryStyleArchive::TOCEntryStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.toc_properties_)*/nullptr} {}
struct TOCEntryStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCEntryStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCEntryStyleArchiveDefaultTypeInternal() {}
  union {
    TOCEntryStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCEntryStyleArchiveDefaultTypeInternal _TOCEntryStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paragraph_style_)*/nullptr
  , /*decltype(_impl_.toc_entry_style_)*/nullptr
  , /*decltype(_impl_.show_in_toc_)*/false} {}
struct TOCSettingsArchive_TOCEntryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCSettingsArchive_TOCEntryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCSettingsArchive_TOCEntryDataDefaultTypeInternal() {}
  union {
    TOCSettingsArchive_TOCEntryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCSettingsArchive_TOCEntryDataDefaultTypeInternal _TOCSettingsArchive_TOCEntryData_default_instance_;
PROTOBUF_CONSTEXPR TOCSettingsArchive::TOCSettingsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.toc_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.toc_scope_)*/0u} {}
struct TOCSettingsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCSettingsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCSettingsArchiveDefaultTypeInternal() {}
  union {
    TOCSettingsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCSettingsArchiveDefaultTypeInternal _TOCSettingsArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCEntryInstanceArchive::TOCEntryInstanceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.heading_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.indexed_style_)*/nullptr
  , /*decltype(_impl_.paragraph_index_)*/0u
  , /*decltype(_impl_.page_number_)*/0u
  , /*decltype(_impl_.number_format_)*/0u} {}
struct TOCEntryInstanceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCEntryInstanceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCEntryInstanceArchiveDefaultTypeInternal() {}
  union {
    TOCEntryInstanceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCEntryInstanceArchiveDefaultTypeInternal _TOCEntryInstanceArchive_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value1_)*/0u
  , /*decltype(_impl_.value2_)*/0u
  , /*decltype(_impl_.value3_)*/0u} {}
struct UndoTransaction_GenericTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_GenericTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_GenericTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_GenericTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_GenericTransactionDefaultTypeInternal _UndoTransaction_GenericTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_TextTransaction::UndoTransaction_TextTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_to_delete_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.insert_location_)*/0u
  , /*decltype(_impl_.insert_length_)*/0u} {}
struct UndoTransaction_TextTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_TextTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_TextTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_TextTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_TextTransactionDefaultTypeInternal _UndoTransaction_TextTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.char_index_)*/0u
  , /*decltype(_impl_.count_)*/0u} {}
struct UndoTransaction_CharIndexTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_CharIndexTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_CharIndexTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_CharIndexTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_CharIndexTransactionDefaultTypeInternal _UndoTransaction_CharIndexTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attribute_index_)*/0u
  , /*decltype(_impl_.char_index_)*/0u} {}
struct UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_ReplaceCharIndexTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_ReplaceCharIndexTransactionDefaultTypeInternal _UndoTransaction_ReplaceCharIndexTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.attribute_index_)*/0u
  , /*decltype(_impl_.char_index_)*/0u} {}
struct UndoTransaction_AttributeIndexTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_AttributeIndexTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_AttributeIndexTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_AttributeIndexTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_AttributeIndexTransactionDefaultTypeInternal _UndoTransaction_AttributeIndexTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.attribute_index_)*/0u
  , /*decltype(_impl_.attribute_count_)*/0u} {}
struct UndoTransaction_InsertAttributeTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_InsertAttributeTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_InsertAttributeTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_InsertAttributeTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_InsertAttributeTransactionDefaultTypeInternal _UndoTransaction_InsertAttributeTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attribute_index_)*/0u
  , /*decltype(_impl_.attribute_count_)*/0u} {}
struct UndoTransaction_InsertNilTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_InsertNilTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_InsertNilTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_InsertNilTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_InsertNilTransactionDefaultTypeInternal _UndoTransaction_InsertNilTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.char_index_)*/0u
  , /*decltype(_impl_.attribute_index_)*/0u
  , /*decltype(_impl_.char_delta_)*/0} {}
struct UndoTransaction_CharDeltaTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_CharDeltaTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_CharDeltaTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_CharDeltaTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_CharDeltaTransactionDefaultTypeInternal _UndoTransaction_CharDeltaTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attribute_index_)*/0u
  , /*decltype(_impl_.first_)*/0u
  , /*decltype(_impl_.second_)*/0u
  , /*decltype(_impl_.char_index_)*/0u} {}
struct UndoTransaction_ParagraphDataTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_ParagraphDataTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_ParagraphDataTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_ParagraphDataTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_ParagraphDataTransactionDefaultTypeInternal _UndoTransaction_ParagraphDataTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_.flags_)*/0u} {}
struct UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_ObjectDOLCTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_ObjectDOLCTransactionDefaultTypeInternal _UndoTransaction_ObjectDOLCTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.attribute_index_)*/0u} {}
struct UndoTransaction_CTDateTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_CTDateTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_CTDateTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_CTDateTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_CTDateTransactionDefaultTypeInternal _UndoTransaction_CTDateTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.generic_)*/nullptr
  , /*decltype(_impl_.text_)*/nullptr
  , /*decltype(_impl_.char_index_)*/nullptr
  , /*decltype(_impl_.replace_char_index_)*/nullptr
  , /*decltype(_impl_.attribute_index_)*/nullptr
  , /*decltype(_impl_.insert_nil_)*/nullptr
  , /*decltype(_impl_.insert_attribute_)*/nullptr
  , /*decltype(_impl_.char_delta_)*/nullptr
  , /*decltype(_impl_.paragraph_data_)*/nullptr
  , /*decltype(_impl_.object_dolc_)*/nullptr
  , /*decltype(_impl_.ct_date_)*/nullptr
  , /*decltype(_impl_.table_)*/0u
  , /*decltype(_impl_.kind_)*/1} {}
struct UndoTransaction_UnionTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransaction_UnionTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransaction_UnionTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction_UnionTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransaction_UnionTransactionDefaultTypeInternal _UndoTransaction_UnionTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransaction::UndoTransaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UndoTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransactionDefaultTypeInternal() {}
  union {
    UndoTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransactionDefaultTypeInternal _UndoTransaction_default_instance_;
PROTOBUF_CONSTEXPR UndoTransactionWrapperArchive::UndoTransactionWrapperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undo_transaction_)*/nullptr} {}
struct UndoTransactionWrapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoTransactionWrapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoTransactionWrapperArchiveDefaultTypeInternal() {}
  union {
    UndoTransactionWrapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoTransactionWrapperArchiveDefaultTypeInternal _UndoTransactionWrapperArchive_default_instance_;
PROTOBUF_CONSTEXPR ShapeInfoArchive::ShapeInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.containedstorage_)*/nullptr} {}
struct ShapeInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShapeInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShapeInfoArchiveDefaultTypeInternal() {}
  union {
    ShapeInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShapeInfoArchiveDefaultTypeInternal _ShapeInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR CommentInfoArchive::CommentInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.comment_storage_)*/nullptr} {}
struct CommentInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommentInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommentInfoArchiveDefaultTypeInternal() {}
  union {
    CommentInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommentInfoArchiveDefaultTypeInternal _CommentInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCInfoArchive::TOCInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.toc_entry_data_)*/{}
  , /*decltype(_impl_.page_number_ranges_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.toc_settings_)*/nullptr} {}
struct TOCInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCInfoArchiveDefaultTypeInternal() {}
  union {
    TOCInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCInfoArchiveDefaultTypeInternal _TOCInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCLayoutHintArchive::TOCLayoutHintArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.charrange_)*/nullptr} {}
struct TOCLayoutHintArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCLayoutHintArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCLayoutHintArchiveDefaultTypeInternal() {}
  union {
    TOCLayoutHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCLayoutHintArchiveDefaultTypeInternal _TOCLayoutHintArchive_default_instance_;
PROTOBUF_CONSTEXPR TextualAttachmentArchive::TextualAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_equivalent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0} {}
struct TextualAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextualAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextualAttachmentArchiveDefaultTypeInternal() {}
  union {
    TextualAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextualAttachmentArchiveDefaultTypeInternal _TextualAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.page_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bookmark_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal() {}
  union {
    TSWPTOCPageNumberAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSWPTOCPageNumberAttachmentArchiveDefaultTypeInternal _TSWPTOCPageNumberAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR UIGraphicalAttachment::UIGraphicalAttachment(
    ::_pbi::ConstantInitialized) {}
struct UIGraphicalAttachmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIGraphicalAttachmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIGraphicalAttachmentDefaultTypeInternal() {}
  union {
    UIGraphicalAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIGraphicalAttachmentDefaultTypeInternal _UIGraphicalAttachment_default_instance_;
PROTOBUF_CONSTEXPR DrawableAttachmentArchive::DrawableAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_)*/nullptr
  , /*decltype(_impl_.h_offset_type_)*/0u
  , /*decltype(_impl_.h_offset_)*/0
  , /*decltype(_impl_.v_offset_type_)*/0u
  , /*decltype(_impl_.v_offset_)*/0} {}
struct DrawableAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableAttachmentArchiveDefaultTypeInternal() {}
  union {
    DrawableAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableAttachmentArchiveDefaultTypeInternal _DrawableAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCAttachmentArchive::TOCAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct TOCAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCAttachmentArchiveDefaultTypeInternal() {}
  union {
    TOCAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCAttachmentArchiveDefaultTypeInternal _TOCAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_mark_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.contained_storage_)*/nullptr} {}
struct FootnoteReferenceAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FootnoteReferenceAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FootnoteReferenceAttachmentArchiveDefaultTypeInternal() {}
  union {
    FootnoteReferenceAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FootnoteReferenceAttachmentArchiveDefaultTypeInternal _FootnoteReferenceAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR NumberAttachmentArchive::NumberAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.number_format_)*/0u} {}
struct NumberAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberAttachmentArchiveDefaultTypeInternal() {}
  union {
    NumberAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberAttachmentArchiveDefaultTypeInternal _NumberAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR SmartFieldArchive::SmartFieldArchive(
    ::_pbi::ConstantInitialized) {}
struct SmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartFieldArchiveDefaultTypeInternal() {}
  union {
    SmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartFieldArchiveDefaultTypeInternal _SmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR HyperlinkFieldArchive::HyperlinkFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct HyperlinkFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HyperlinkFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HyperlinkFieldArchiveDefaultTypeInternal() {}
  union {
    HyperlinkFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HyperlinkFieldArchiveDefaultTypeInternal _HyperlinkFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.localizable_)*/false} {}
struct PlaceholderSmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceholderSmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceholderSmartFieldArchiveDefaultTypeInternal() {}
  union {
    PlaceholderSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceholderSmartFieldArchiveDefaultTypeInternal _PlaceholderSmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_ref_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct UnsupportedHyperlinkFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsupportedHyperlinkFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsupportedHyperlinkFieldArchiveDefaultTypeInternal() {}
  union {
    UnsupportedHyperlinkFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsupportedHyperlinkFieldArchiveDefaultTypeInternal _UnsupportedHyperlinkFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR BibliographySmartFieldArchive::BibliographySmartFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.citation_records_)*/{}
  , /*decltype(_impl_.old_super_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.localizable_)*/false} {}
struct BibliographySmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BibliographySmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BibliographySmartFieldArchiveDefaultTypeInternal() {}
  union {
    BibliographySmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BibliographySmartFieldArchiveDefaultTypeInternal _BibliographySmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR CitationRecordArchive::CitationRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.endnote_xml_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_range_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suffix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authors_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.year_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hide_author_names_)*/false
  , /*decltype(_impl_.hide_year_)*/false} {}
struct CitationRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CitationRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CitationRecordArchiveDefaultTypeInternal() {}
  union {
    CitationRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CitationRecordArchiveDefaultTypeInternal _CitationRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR CitationSmartFieldArchive::CitationSmartFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.citation_records_)*/{}
  , /*decltype(_impl_.old_super_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.localizable_)*/false} {}
struct CitationSmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CitationSmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CitationSmartFieldArchiveDefaultTypeInternal() {}
  union {
    CitationSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CitationSmartFieldArchiveDefaultTypeInternal _CitationSmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR DateTimeSmartFieldArchive::DateTimeSmartFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locale_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.date_style_)*/0
  , /*decltype(_impl_.time_style_)*/0
  , /*decltype(_impl_.update_plan_)*/0
  , /*decltype(_impl_.needs_update_)*/false} {}
struct DateTimeSmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateTimeSmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateTimeSmartFieldArchiveDefaultTypeInternal() {}
  union {
    DateTimeSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateTimeSmartFieldArchiveDefaultTypeInternal _DateTimeSmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR BookmarkFieldArchive::BookmarkFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.ranged_)*/0u
  , /*decltype(_impl_.hidden_)*/0u} {}
struct BookmarkFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookmarkFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookmarkFieldArchiveDefaultTypeInternal() {}
  union {
    BookmarkFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookmarkFieldArchiveDefaultTypeInternal _BookmarkFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR FilenameSmartFieldArchive::FilenameSmartFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.display_flags_)*/0u} {}
struct FilenameSmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilenameSmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilenameSmartFieldArchiveDefaultTypeInternal() {}
  union {
    FilenameSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilenameSmartFieldArchiveDefaultTypeInternal _FilenameSmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR MergeSmartFieldArchive::MergeSmartFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.whitespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_.requires_following_whitespace_)*/false} {}
struct MergeSmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeSmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeSmartFieldArchiveDefaultTypeInternal() {}
  union {
    MergeSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeSmartFieldArchiveDefaultTypeInternal _MergeSmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bookmark_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_style_)*/nullptr
  , /*decltype(_impl_.range_)*/nullptr} {}
struct TOCSmartFieldArchive_TOCEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCSmartFieldArchive_TOCEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCSmartFieldArchive_TOCEntryDefaultTypeInternal() {}
  union {
    TOCSmartFieldArchive_TOCEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCSmartFieldArchive_TOCEntryDefaultTypeInternal _TOCSmartFieldArchive_TOCEntry_default_instance_;
PROTOBUF_CONSTEXPR TOCSmartFieldArchive::TOCSmartFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.toc_entries_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct TOCSmartFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOCSmartFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOCSmartFieldArchiveDefaultTypeInternal() {}
  union {
    TOCSmartFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOCSmartFieldArchiveDefaultTypeInternal _TOCSmartFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR RubyFieldArchive::RubyFieldArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ruby_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct RubyFieldArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RubyFieldArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RubyFieldArchiveDefaultTypeInternal() {}
  union {
    RubyFieldArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RubyFieldArchiveDefaultTypeInternal _RubyFieldArchive_default_instance_;
PROTOBUF_CONSTEXPR ChangeArchive::ChangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.session_)*/nullptr
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.hidden_)*/false
  , /*decltype(_impl_.kind_)*/1} {}
struct ChangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeArchiveDefaultTypeInternal() {}
  union {
    ChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeArchiveDefaultTypeInternal _ChangeArchive_default_instance_;
PROTOBUF_CONSTEXPR ChangeSessionArchive::ChangeSessionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_.date_)*/nullptr
  , /*decltype(_impl_.session_uid_)*/0u} {}
struct ChangeSessionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeSessionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeSessionArchiveDefaultTypeInternal() {}
  union {
    ChangeSessionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeSessionArchiveDefaultTypeInternal _ChangeSessionArchive_default_instance_;
PROTOBUF_CONSTEXPR SectionPlaceholderArchive::SectionPlaceholderArchive(
    ::_pbi::ConstantInitialized) {}
struct SectionPlaceholderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionPlaceholderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionPlaceholderArchiveDefaultTypeInternal() {}
  union {
    SectionPlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionPlaceholderArchiveDefaultTypeInternal _SectionPlaceholderArchive_default_instance_;
}  // namespace TSWP
static ::_pb::Metadata file_level_metadata_TSWPArchives_2eproto[81];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSWPArchives_2eproto[25];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSWPArchives_2eproto = nullptr;

const uint32_t TableStruct_TSWPArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _impl_.styleinsertionbehavior_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _impl_.caretaffinity_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SelectionArchive, _impl_.smart_field_range_),
  2,
  0,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, _impl_.character_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable_ObjectAttribute, _impl_.object_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ObjectAttributeTable, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, _impl_.character_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable_StringAttribute, _impl_.object_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::StringAttributeTable, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, _impl_.character_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable_ParaDataAttribute, _impl_.second_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParaDataAttributeTable, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable_SparseObjectAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable_SparseObjectAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable_SparseObjectAttribute, _impl_.character_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable_SparseObjectAttribute, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable_SparseObjectAttribute, _impl_.run_length_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable, _impl_.total_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::SparseObjectAttributeTable, _impl_.entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.style_sheet_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.has_itext_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.in_document_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_para_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_para_data_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_list_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_char_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_attachment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_smartfield_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_layout_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_para_starts_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_bookmark_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_footnote_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_section_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_rubyfield_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_language_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_dictation_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_insertion_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_deletion_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_highlight_),
  PROTOBUF_FIELD_OFFSET(::TSWP::StorageArchive, _impl_.table_para_bidi_),
  21,
  0,
  ~0u,
  19,
  20,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::TSWP::HighlightArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::HighlightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::HighlightArchive, _impl_.commentstorage_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, _impl_.feature_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FontFeatureArchive, _impl_.feature_selector_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.bold_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.italic_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.font_size_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.font_name_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.font_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.font_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.font_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.language_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.superscript_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.underline_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.strikethru_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.capitalization_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.baseline_shift_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.kerning_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.ligatures_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.outline_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.outline_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.outline_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.shadow_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.shadow_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.strikethru_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.strikethru_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.strikethru_width_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.background_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.background_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.tracking_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.underline_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.underline_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.underline_width_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.word_strikethru_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.word_underline_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.font_features_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.font_features_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.writing_direction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.emphasis_marks_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.emphasis_marks_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.compatibility_font_name_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStylePropertiesArchive, _impl_.compatibility_font_name_),
  11,
  12,
  10,
  13,
  0,
  14,
  4,
  22,
  1,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  23,
  5,
  26,
  24,
  6,
  25,
  7,
  27,
  29,
  8,
  28,
  30,
  9,
  33,
  31,
  32,
  34,
  ~0u,
  37,
  35,
  2,
  36,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CharacterStyleArchive, _impl_.char_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TabArchive, _impl_.leader_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::TabsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TabsArchive, _impl_.tabs_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::TSWP::LineSpacingArchive, _impl_.baselinerule_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.decimal_tab_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.decimal_tab_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.default_tab_stops_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.fill_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.fill_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.first_line_indent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.hyphenate_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.keep_lines_together_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.keep_with_next_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.left_indent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.line_spacing_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.line_spacing_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.page_break_before_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.borders_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.rule_offset_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.rule_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.rule_width_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.right_indent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.space_after_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.space_before_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.tabs_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.tabs_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.widow_control_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.outline_level_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.outline_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.following_style_id_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.following_style_id_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.stroke_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.stroke_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.show_in_toc_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.toc_style_id_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.toc_style_id_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.writing_direction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.list_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.list_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.following_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStylePropertiesArchive, _impl_.following_style_),
  10,
  12,
  0,
  11,
  13,
  3,
  16,
  14,
  15,
  18,
  17,
  19,
  4,
  20,
  22,
  21,
  5,
  23,
  24,
  25,
  26,
  28,
  6,
  29,
  27,
  32,
  30,
  1,
  31,
  7,
  33,
  34,
  2,
  37,
  35,
  8,
  36,
  9,
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _impl_.char_properties_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ParagraphStyleArchive, _impl_.para_properties_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, _impl_.baseline_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelGeometry, _impl_.scale_with_text_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, _impl_.image_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive_LabelImage, _impl_.database_image_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.label_types_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.text_indents_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.indents_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.geometries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.number_types_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.strings_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.images_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.shadow_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.shadow_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.font_color_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.font_color_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.font_name_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.font_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.writing_direction_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ListStyleArchive, _impl_.tiered_numbers_),
  1,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  2,
  6,
  3,
  7,
  0,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, _impl_.preset_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, _impl_.paragraph_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextStylePresetArchive, _impl_.list_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_EqualColumnsArchive, _impl_.gap_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _impl_.gap_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _impl_.width_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive_NonEqualColumnsArchive, _impl_.following_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, _impl_.equal_columns_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnsArchive, _impl_.non_equal_columns_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _impl_.top_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _impl_.right_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PaddingArchive, _impl_.bottom_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.continuous_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.shrink_to_fit_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.vertical_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.min_horizontal_inset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.columns_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.columns_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.margins_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.margins_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.padding_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStylePropertiesArchive, _impl_.writing_direction_),
  3,
  4,
  5,
  7,
  8,
  6,
  0,
  9,
  1,
  10,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ColumnStyleArchive, _impl_.column_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.shrink_to_fit_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.columns_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.columns_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.padding_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.default_text_preset_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.vertical_text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.paragraph_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStylePropertiesArchive, _impl_.paragraph_style_),
  4,
  3,
  5,
  0,
  6,
  1,
  8,
  7,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeStyleArchive, _impl_.shape_properties_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _impl_.list_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _impl_.text_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _impl_.imported_text_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _impl_.toc_entry_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _impl_.toc_settings_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _impl_.character_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ThemePresetsArchive, _impl_.paragraph_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextPresetDisplayItemArchive, _impl_.display_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, _impl_.page_number_style_null_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, _impl_.page_number_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStylePropertiesArchive, _impl_.show_page_number_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryStyleArchive, _impl_.toc_properties_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, _impl_.paragraph_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, _impl_.toc_entry_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive_TOCEntryData, _impl_.show_in_toc_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, _impl_.toc_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, _impl_.toc_scope_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSettingsArchive, _impl_.entries_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _impl_.paragraph_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _impl_.page_number_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _impl_.number_format_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCEntryInstanceArchive, _impl_.indexed_style_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, _impl_.value1_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, _impl_.value2_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_GenericTransaction, _impl_.value3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, _impl_.insert_location_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, _impl_.insert_length_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_TextTransaction, _impl_.string_to_delete_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, _impl_.char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharIndexTransaction, _impl_.object_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ReplaceCharIndexTransaction, _impl_.char_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _impl_.char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_AttributeIndexTransaction, _impl_.string_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _impl_.attribute_count_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertAttributeTransaction, _impl_.string_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_InsertNilTransaction, _impl_.attribute_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, _impl_.char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CharDeltaTransaction, _impl_.char_delta_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _impl_.first_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _impl_.second_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ParagraphDataTransaction, _impl_.char_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_ObjectDOLCTransaction, _impl_.object_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_CTDateTransaction, _impl_.date_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.generic_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.replace_char_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.attribute_index_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.insert_nil_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.insert_attribute_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.char_delta_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.paragraph_data_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.object_dolc_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction_UnionTransaction, _impl_.ct_date_),
  12,
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransaction, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransactionWrapperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransactionWrapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UndoTransactionWrapperArchive, _impl_.undo_transaction_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ShapeInfoArchive, _impl_.containedstorage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CommentInfoArchive, _impl_.comment_storage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _impl_.toc_settings_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _impl_.toc_entry_data_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCInfoArchive, _impl_.page_number_ranges_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCLayoutHintArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCLayoutHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCLayoutHintArchive, _impl_.charrange_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, _impl_.string_equivalent_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TextualAttachmentArchive, _impl_.kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, _impl_.page_number_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TSWPTOCPageNumberAttachmentArchive, _impl_.bookmark_name_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::UIGraphicalAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _impl_.drawable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _impl_.h_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _impl_.h_offset_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _impl_.v_offset_type_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DrawableAttachmentArchive, _impl_.v_offset_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCAttachmentArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, _impl_.contained_storage_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FootnoteReferenceAttachmentArchive, _impl_.custom_mark_string_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, _impl_.number_format_),
  PROTOBUF_FIELD_OFFSET(::TSWP::NumberAttachmentArchive, _impl_.string_value_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::SmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::HyperlinkFieldArchive, _impl_.url_ref_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::PlaceholderSmartFieldArchive, _impl_.localizable_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::UnsupportedHyperlinkFieldArchive, _impl_.url_ref_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _impl_.citation_records_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _impl_.localizable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BibliographySmartFieldArchive, _impl_.old_super_),
  1,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.endnote_xml_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.hide_author_names_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.hide_year_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.page_range_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.prefix_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.suffix_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.authors_string_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationRecordArchive, _impl_.type_),
  0,
  8,
  9,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _impl_.citation_records_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _impl_.localizable_),
  PROTOBUF_FIELD_OFFSET(::TSWP::CitationSmartFieldArchive, _impl_.old_super_),
  1,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.date_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.time_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.update_plan_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.needs_update_),
  PROTOBUF_FIELD_OFFSET(::TSWP::DateTimeSmartFieldArchive, _impl_.date_),
  2,
  0,
  1,
  4,
  5,
  6,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _impl_.ranged_),
  PROTOBUF_FIELD_OFFSET(::TSWP::BookmarkFieldArchive, _impl_.hidden_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::FilenameSmartFieldArchive, _impl_.display_flags_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.requires_following_whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::TSWP::MergeSmartFieldArchive, _impl_.table_field_),
  6,
  0,
  1,
  2,
  7,
  8,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, _impl_.bookmark_name_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, _impl_.target_style_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive_TOCEntry, _impl_.range_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::TOCSmartFieldArchive, _impl_.toc_entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSWP::RubyFieldArchive, _impl_.ruby_text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _impl_.session_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeArchive, _impl_.hidden_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, _impl_.session_uid_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::TSWP::ChangeSessionArchive, _impl_.date_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSWP::SectionPlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::TSWP::SelectionArchive)},
  { 16, 24, -1, sizeof(::TSWP::ObjectAttributeTable_ObjectAttribute)},
  { 26, -1, -1, sizeof(::TSWP::ObjectAttributeTable)},
  { 33, 41, -1, sizeof(::TSWP::StringAttributeTable_StringAttribute)},
  { 43, -1, -1, sizeof(::TSWP::StringAttributeTable)},
  { 50, 59, -1, sizeof(::TSWP::ParaDataAttributeTable_ParaDataAttribute)},
  { 62, -1, -1, sizeof(::TSWP::ParaDataAttributeTable)},
  { 69, 78, -1, sizeof(::TSWP::SparseObjectAttributeTable_SparseObjectAttribute)},
  { 81, 89, -1, sizeof(::TSWP::SparseObjectAttributeTable)},
  { 91, 120, -1, sizeof(::TSWP::StorageArchive)},
  { 143, 150, -1, sizeof(::TSWP::HighlightArchive)},
  { 151, 159, -1, sizeof(::TSWP::FontFeatureArchive)},
  { 161, 206, -1, sizeof(::TSWP::CharacterStylePropertiesArchive)},
  { 245, 254, -1, sizeof(::TSWP::CharacterStyleArchive)},
  { 257, 266, -1, sizeof(::TSWP::TabArchive)},
  { 269, -1, -1, sizeof(::TSWP::TabsArchive)},
  { 276, 285, -1, sizeof(::TSWP::LineSpacingArchive)},
  { 288, 332, -1, sizeof(::TSWP::ParagraphStylePropertiesArchive)},
  { 370, 380, -1, sizeof(::TSWP::ParagraphStyleArchive)},
  { 384, 393, -1, sizeof(::TSWP::ListStyleArchive_LabelGeometry)},
  { 396, 405, -1, sizeof(::TSWP::ListStyleArchive_LabelImage)},
  { 408, 431, -1, sizeof(::TSWP::ListStyleArchive)},
  { 448, 457, -1, sizeof(::TSWP::TextStylePresetArchive)},
  { 460, 468, -1, sizeof(::TSWP::ColumnsArchive_EqualColumnsArchive)},
  { 470, 478, -1, sizeof(::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive)},
  { 480, 488, -1, sizeof(::TSWP::ColumnsArchive_NonEqualColumnsArchive)},
  { 490, 498, -1, sizeof(::TSWP::ColumnsArchive)},
  { 500, 510, -1, sizeof(::TSWP::PaddingArchive)},
  { 514, 532, -1, sizeof(::TSWP::ColumnStylePropertiesArchive)},
  { 544, 553, -1, sizeof(::TSWP::ColumnStyleArchive)},
  { 556, 572, -1, sizeof(::TSWP::ShapeStylePropertiesArchive)},
  { 582, 591, -1, sizeof(::TSWP::ShapeStyleArchive)},
  { 594, -1, -1, sizeof(::TSWP::ThemePresetsArchive)},
  { 607, 615, -1, sizeof(::TSWP::TextPresetDisplayItemArchive)},
  { 617, 626, -1, sizeof(::TSWP::TOCEntryStylePropertiesArchive)},
  { 629, 637, -1, sizeof(::TSWP::TOCEntryStyleArchive)},
  { 639, 648, -1, sizeof(::TSWP::TOCSettingsArchive_TOCEntryData)},
  { 651, 660, -1, sizeof(::TSWP::TOCSettingsArchive)},
  { 663, 674, -1, sizeof(::TSWP::TOCEntryInstanceArchive)},
  { 679, 688, -1, sizeof(::TSWP::UndoTransaction_GenericTransaction)},
  { 691, 700, -1, sizeof(::TSWP::UndoTransaction_TextTransaction)},
  { 703, 712, -1, sizeof(::TSWP::UndoTransaction_CharIndexTransaction)},
  { 715, 723, -1, sizeof(::TSWP::UndoTransaction_ReplaceCharIndexTransaction)},
  { 725, 735, -1, sizeof(::TSWP::UndoTransaction_AttributeIndexTransaction)},
  { 739, 749, -1, sizeof(::TSWP::UndoTransaction_InsertAttributeTransaction)},
  { 753, 761, -1, sizeof(::TSWP::UndoTransaction_InsertNilTransaction)},
  { 763, 772, -1, sizeof(::TSWP::UndoTransaction_CharDeltaTransaction)},
  { 775, 785, -1, sizeof(::TSWP::UndoTransaction_ParagraphDataTransaction)},
  { 789, 797, -1, sizeof(::TSWP::UndoTransaction_ObjectDOLCTransaction)},
  { 799, 807, -1, sizeof(::TSWP::UndoTransaction_CTDateTransaction)},
  { 809, 828, -1, sizeof(::TSWP::UndoTransaction_UnionTransaction)},
  { 841, -1, -1, sizeof(::TSWP::UndoTransaction)},
  { 848, 855, -1, sizeof(::TSWP::UndoTransactionWrapperArchive)},
  { 856, 864, -1, sizeof(::TSWP::ShapeInfoArchive)},
  { 866, 874, -1, sizeof(::TSWP::CommentInfoArchive)},
  { 876, 886, -1, sizeof(::TSWP::TOCInfoArchive)},
  { 890, 897, -1, sizeof(::TSWP::TOCLayoutHintArchive)},
  { 898, 906, -1, sizeof(::TSWP::TextualAttachmentArchive)},
  { 908, 917, -1, sizeof(::TSWP::TSWPTOCPageNumberAttachmentArchive)},
  { 920, -1, -1, sizeof(::TSWP::UIGraphicalAttachment)},
  { 926, 937, -1, sizeof(::TSWP::DrawableAttachmentArchive)},
  { 942, 949, -1, sizeof(::TSWP::TOCAttachmentArchive)},
  { 950, 959, -1, sizeof(::TSWP::FootnoteReferenceAttachmentArchive)},
  { 962, 971, -1, sizeof(::TSWP::NumberAttachmentArchive)},
  { 974, -1, -1, sizeof(::TSWP::SmartFieldArchive)},
  { 980, 988, -1, sizeof(::TSWP::HyperlinkFieldArchive)},
  { 990, 998, -1, sizeof(::TSWP::PlaceholderSmartFieldArchive)},
  { 1000, 1008, -1, sizeof(::TSWP::UnsupportedHyperlinkFieldArchive)},
  { 1010, 1020, -1, sizeof(::TSWP::BibliographySmartFieldArchive)},
  { 1024, 1040, -1, sizeof(::TSWP::CitationRecordArchive)},
  { 1050, 1060, -1, sizeof(::TSWP::CitationSmartFieldArchive)},
  { 1064, 1078, -1, sizeof(::TSWP::DateTimeSmartFieldArchive)},
  { 1086, 1096, -1, sizeof(::TSWP::BookmarkFieldArchive)},
  { 1100, 1108, -1, sizeof(::TSWP::FilenameSmartFieldArchive)},
  { 1110, 1125, -1, sizeof(::TSWP::MergeSmartFieldArchive)},
  { 1134, 1143, -1, sizeof(::TSWP::TOCSmartFieldArchive_TOCEntry)},
  { 1146, 1154, -1, sizeof(::TSWP::TOCSmartFieldArchive)},
  { 1156, 1164, -1, sizeof(::TSWP::RubyFieldArchive)},
  { 1166, 1176, -1, sizeof(::TSWP::ChangeArchive)},
  { 1180, 1189, -1, sizeof(::TSWP::ChangeSessionArchive)},
  { 1192, -1, -1, sizeof(::TSWP::SectionPlaceholderArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSWP::_SelectionArchive_default_instance_._instance,
  &::TSWP::_ObjectAttributeTable_ObjectAttribute_default_instance_._instance,
  &::TSWP::_ObjectAttributeTable_default_instance_._instance,
  &::TSWP::_StringAttributeTable_StringAttribute_default_instance_._instance,
  &::TSWP::_StringAttributeTable_default_instance_._instance,
  &::TSWP::_ParaDataAttributeTable_ParaDataAttribute_default_instance_._instance,
  &::TSWP::_ParaDataAttributeTable_default_instance_._instance,
  &::TSWP::_SparseObjectAttributeTable_SparseObjectAttribute_default_instance_._instance,
  &::TSWP::_SparseObjectAttributeTable_default_instance_._instance,
  &::TSWP::_StorageArchive_default_instance_._instance,
  &::TSWP::_HighlightArchive_default_instance_._instance,
  &::TSWP::_FontFeatureArchive_default_instance_._instance,
  &::TSWP::_CharacterStylePropertiesArchive_default_instance_._instance,
  &::TSWP::_CharacterStyleArchive_default_instance_._instance,
  &::TSWP::_TabArchive_default_instance_._instance,
  &::TSWP::_TabsArchive_default_instance_._instance,
  &::TSWP::_LineSpacingArchive_default_instance_._instance,
  &::TSWP::_ParagraphStylePropertiesArchive_default_instance_._instance,
  &::TSWP::_ParagraphStyleArchive_default_instance_._instance,
  &::TSWP::_ListStyleArchive_LabelGeometry_default_instance_._instance,
  &::TSWP::_ListStyleArchive_LabelImage_default_instance_._instance,
  &::TSWP::_ListStyleArchive_default_instance_._instance,
  &::TSWP::_TextStylePresetArchive_default_instance_._instance,
  &::TSWP::_ColumnsArchive_EqualColumnsArchive_default_instance_._instance,
  &::TSWP::_ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_default_instance_._instance,
  &::TSWP::_ColumnsArchive_NonEqualColumnsArchive_default_instance_._instance,
  &::TSWP::_ColumnsArchive_default_instance_._instance,
  &::TSWP::_PaddingArchive_default_instance_._instance,
  &::TSWP::_ColumnStylePropertiesArchive_default_instance_._instance,
  &::TSWP::_ColumnStyleArchive_default_instance_._instance,
  &::TSWP::_ShapeStylePropertiesArchive_default_instance_._instance,
  &::TSWP::_ShapeStyleArchive_default_instance_._instance,
  &::TSWP::_ThemePresetsArchive_default_instance_._instance,
  &::TSWP::_TextPresetDisplayItemArchive_default_instance_._instance,
  &::TSWP::_TOCEntryStylePropertiesArchive_default_instance_._instance,
  &::TSWP::_TOCEntryStyleArchive_default_instance_._instance,
  &::TSWP::_TOCSettingsArchive_TOCEntryData_default_instance_._instance,
  &::TSWP::_TOCSettingsArchive_default_instance_._instance,
  &::TSWP::_TOCEntryInstanceArchive_default_instance_._instance,
  &::TSWP::_UndoTransaction_GenericTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_TextTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_CharIndexTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_ReplaceCharIndexTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_AttributeIndexTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_InsertAttributeTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_InsertNilTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_CharDeltaTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_ParagraphDataTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_ObjectDOLCTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_CTDateTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_UnionTransaction_default_instance_._instance,
  &::TSWP::_UndoTransaction_default_instance_._instance,
  &::TSWP::_UndoTransactionWrapperArchive_default_instance_._instance,
  &::TSWP::_ShapeInfoArchive_default_instance_._instance,
  &::TSWP::_CommentInfoArchive_default_instance_._instance,
  &::TSWP::_TOCInfoArchive_default_instance_._instance,
  &::TSWP::_TOCLayoutHintArchive_default_instance_._instance,
  &::TSWP::_TextualAttachmentArchive_default_instance_._instance,
  &::TSWP::_TSWPTOCPageNumberAttachmentArchive_default_instance_._instance,
  &::TSWP::_UIGraphicalAttachment_default_instance_._instance,
  &::TSWP::_DrawableAttachmentArchive_default_instance_._instance,
  &::TSWP::_TOCAttachmentArchive_default_instance_._instance,
  &::TSWP::_FootnoteReferenceAttachmentArchive_default_instance_._instance,
  &::TSWP::_NumberAttachmentArchive_default_instance_._instance,
  &::TSWP::_SmartFieldArchive_default_instance_._instance,
  &::TSWP::_HyperlinkFieldArchive_default_instance_._instance,
  &::TSWP::_PlaceholderSmartFieldArchive_default_instance_._instance,
  &::TSWP::_UnsupportedHyperlinkFieldArchive_default_instance_._instance,
  &::TSWP::_BibliographySmartFieldArchive_default_instance_._instance,
  &::TSWP::_CitationRecordArchive_default_instance_._instance,
  &::TSWP::_CitationSmartFieldArchive_default_instance_._instance,
  &::TSWP::_DateTimeSmartFieldArchive_default_instance_._instance,
  &::TSWP::_BookmarkFieldArchive_default_instance_._instance,
  &::TSWP::_FilenameSmartFieldArchive_default_instance_._instance,
  &::TSWP::_MergeSmartFieldArchive_default_instance_._instance,
  &::TSWP::_TOCSmartFieldArchive_TOCEntry_default_instance_._instance,
  &::TSWP::_TOCSmartFieldArchive_default_instance_._instance,
  &::TSWP::_RubyFieldArchive_default_instance_._instance,
  &::TSWP::_ChangeArchive_default_instance_._instance,
  &::TSWP::_ChangeSessionArchive_default_instance_._instance,
  &::TSWP::_SectionPlaceholderArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSWPArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSWPArchives.proto\022\004TSWP\032\021TSPMessages."
  "proto\032\021TSSArchives.proto\032\021TSDArchives.pr"
  "oto\032\021TSKArchives.proto\"\341\001\n\020SelectionArch"
  "ive\022!\n\004type\030\001 \002(\0162\023.TSWP.SelectionType\022\031"
  "\n\005range\030\002 \002(\0132\n.TSP.Range\022<\n\026styleInsert"
  "ionBehavior\030\003 \002(\0162\034.TSWP.StyleInsertionB"
  "ehavior\022*\n\rcaretAffinity\030\004 \002(\0162\023.TSWP.Ca"
  "retAffinity\022%\n\021smart_field_range\030\005 \002(\0132\n"
  ".TSP.Range\"\237\001\n\024ObjectAttributeTable\022;\n\007e"
  "ntries\030\001 \003(\0132*.TSWP.ObjectAttributeTable"
  ".ObjectAttribute\032J\n\017ObjectAttribute\022\027\n\017c"
  "haracter_index\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132\016.T"
  "SP.Reference\"\217\001\n\024StringAttributeTable\022;\n"
  "\007entries\030\001 \003(\0132*.TSWP.StringAttributeTab"
  "le.StringAttribute\032:\n\017StringAttribute\022\027\n"
  "\017character_index\030\001 \002(\r\022\016\n\006object\030\002 \001(\t\"\246"
  "\001\n\026ParaDataAttributeTable\022\?\n\007entries\030\001 \003"
  "(\0132..TSWP.ParaDataAttributeTable.ParaDat"
  "aAttribute\032K\n\021ParaDataAttribute\022\027\n\017chara"
  "cter_index\030\001 \002(\r\022\r\n\005first\030\002 \002(\r\022\016\n\006secon"
  "d\030\003 \002(\r\"\340\001\n\032SparseObjectAttributeTable\022\023"
  "\n\013total_count\030\001 \002(\r\022G\n\007entries\030\002 \003(\01326.T"
  "SWP.SparseObjectAttributeTable.SparseObj"
  "ectAttribute\032d\n\025SparseObjectAttribute\022\027\n"
  "\017character_index\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132\016"
  ".TSP.Reference\022\022\n\nrun_length\030\003 \002(\r\"\353\t\n\016S"
  "torageArchive\0224\n\004kind\030\001 \001(\0162\035.TSWP.Stora"
  "geArchive.KindType:\007TEXTBOX\022#\n\013style_she"
  "et\030\002 \001(\0132\016.TSP.Reference\022\014\n\004text\030\003 \003(\t\022\030"
  "\n\thas_itext\030\004 \001(\010:\005false\022\032\n\013in_document\030"
  "\n \001(\010:\005false\0224\n\020table_para_style\030\005 \001(\0132\032"
  ".TSWP.ObjectAttributeTable\0225\n\017table_para"
  "_data\030\006 \001(\0132\034.TSWP.ParaDataAttributeTabl"
  "e\0224\n\020table_list_style\030\007 \001(\0132\032.TSWP.Objec"
  "tAttributeTable\0224\n\020table_char_style\030\010 \001("
  "\0132\032.TSWP.ObjectAttributeTable\0224\n\020table_a"
  "ttachment\030\t \001(\0132\032.TSWP.ObjectAttributeTa"
  "ble\0224\n\020table_smartfield\030\013 \001(\0132\032.TSWP.Obj"
  "ectAttributeTable\0226\n\022table_layout_style\030"
  "\014 \001(\0132\032.TSWP.ObjectAttributeTable\0227\n\021tab"
  "le_para_starts\030\016 \001(\0132\034.TSWP.ParaDataAttr"
  "ibuteTable\0222\n\016table_bookmark\030\017 \001(\0132\032.TSW"
  "P.ObjectAttributeTable\0222\n\016table_footnote"
  "\030\020 \001(\0132\032.TSWP.ObjectAttributeTable\0221\n\rta"
  "ble_section\030\021 \001(\0132\032.TSWP.ObjectAttribute"
  "Table\0223\n\017table_rubyfield\030\022 \001(\0132\032.TSWP.Ob"
  "jectAttributeTable\0222\n\016table_language\030\023 \001"
  "(\0132\032.TSWP.StringAttributeTable\0223\n\017table_"
  "dictation\030\024 \001(\0132\032.TSWP.StringAttributeTa"
  "ble\0223\n\017table_insertion\030\025 \001(\0132\032.TSWP.Obje"
  "ctAttributeTable\0222\n\016table_deletion\030\026 \001(\013"
  "2\032.TSWP.ObjectAttributeTable\0223\n\017table_hi"
  "ghlight\030\027 \001(\0132\032.TSWP.ObjectAttributeTabl"
  "e\0225\n\017table_para_bidi\030\030 \001(\0132\034.TSWP.ParaDa"
  "taAttributeTable\"v\n\010KindType\022\010\n\004BODY\020\000\022\n"
  "\n\006HEADER\020\001\022\014\n\010FOOTNOTE\020\002\022\013\n\007TEXTBOX\020\003\022\010\n"
  "\004NOTE\020\004\022\010\n\004CELL\020\005\022\020\n\014UNCLASSIFIED\020\006\022\023\n\017T"
  "ABLEOFCONTENTS\020\007\":\n\020HighlightArchive\022&\n\016"
  "commentStorage\030\001 \001(\0132\016.TSP.Reference\"D\n\022"
  "FontFeatureArchive\022\024\n\014feature_type\030\001 \002(\r"
  "\022\030\n\020feature_selector\030\002 \002(\r\"\231\016\n\037Character"
  "StylePropertiesArchive\022\014\n\004bold\030\001 \001(\010\022\016\n\006"
  "italic\030\002 \001(\010\022\021\n\tfont_size\030\003 \001(\002\022\026\n\016font_"
  "name_null\030\004 \001(\010\022\021\n\tfont_name\030\005 \001(\t\022\027\n\017fo"
  "nt_color_null\030\006 \001(\010\022\036\n\nfont_color\030\007 \001(\0132"
  "\n.TSP.Color\022\025\n\rlanguage_null\030\010 \001(\010\022\020\n\010la"
  "nguage\030\t \001(\t\022J\n\013superscript\030\n \001(\01625.TSWP"
  ".CharacterStylePropertiesArchive.Supersc"
  "riptType\022F\n\tunderline\030\013 \001(\01623.TSWP.Chara"
  "cterStylePropertiesArchive.UnderlineType"
  "\022H\n\nstrikethru\030\014 \001(\01624.TSWP.CharacterSty"
  "lePropertiesArchive.StrikethruType\022P\n\016ca"
  "pitalization\030\r \001(\01628.TSWP.CharacterStyle"
  "PropertiesArchive.CapitalizationType\022\026\n\016"
  "baseline_shift\030\016 \001(\002\022\017\n\007kerning\030\017 \001(\002\022F\n"
  "\tligatures\030\020 \001(\01623.TSWP.CharacterStylePr"
  "opertiesArchive.LigaturesType\022\032\n\022outline"
  "_color_null\030\021 \001(\010\022!\n\routline_color\030\022 \001(\013"
  "2\n.TSP.Color\022\017\n\007outline\030\023 \001(\002\022\023\n\013shadow_"
  "null\030\024 \001(\010\022\"\n\006shadow\030\025 \001(\0132\022.TSD.ShadowA"
  "rchive\022\035\n\025strikethru_color_null\030\026 \001(\010\022$\n"
  "\020strikethru_color\030\027 \001(\0132\n.TSP.Color\022\030\n\020s"
  "trikethru_width\030\030 \001(\002\022\035\n\025background_colo"
  "r_null\030\031 \001(\010\022$\n\020background_color\030\032 \001(\0132\n"
  ".TSP.Color\022\020\n\010tracking\030\033 \001(\002\022\034\n\024underlin"
  "e_color_null\030\034 \001(\010\022#\n\017underline_color\030\035 "
  "\001(\0132\n.TSP.Color\022\027\n\017underline_width\030\036 \001(\002"
  "\022\027\n\017word_strikethru\030\037 \001(\010\022\026\n\016word_underl"
  "ine\030  \001(\010\022\032\n\022font_features_null\030! \001(\010\022/\n"
  "\rfont_features\030\" \003(\0132\030.TSWP.FontFeatureA"
  "rchive\022O\n\021writing_direction\030# \001(\0162\032.TSWP"
  ".WritingDirectionType:\030kWritingDirection"
  "Natural\022\033\n\023emphasis_marks_null\030$ \001(\010\022\026\n\016"
  "emphasis_marks\030% \001(\t\022$\n\034compatibility_fo"
  "nt_name_null\030& \001(\010\022\037\n\027compatibility_font"
  "_name\030\' \001(\t\"L\n\022CapitalizationType\022\013\n\007kNo"
  "Caps\020\000\022\014\n\010kAllCaps\020\001\022\016\n\nkSmallCaps\020\002\022\013\n\007"
  "kTitled\020\003\"a\n\rUnderlineType\022\020\n\014kNoUnderli"
  "ne\020\000\022\024\n\020kSingleUnderline\020\001\022\024\n\020kDoubleUnd"
  "erline\020\002\022\022\n\016kWavyUnderline\020\003\"R\n\rLigature"
  "sType\022\026\n\022kRequiredLigatures\020\000\022\026\n\022kStanda"
  "rdLigatures\020\001\022\021\n\rkAllLigatures\020\002\"h\n\016Stri"
  "kethruType\022\021\n\rkNoStrikethru\020\000\022\025\n\021kSingle"
  "Strikethru\020\001\022\025\n\021kDoubleStrikethru\020\002\022\025\n\021k"
  "TripleStrikethru\020\003\"B\n\017SuperscriptType\022\r\n"
  "\tkNoScript\020\000\022\020\n\014kSuperscript\020\001\022\016\n\nkSubsc"
  "ript\020\002\"\224\001\n\025CharacterStyleArchive\022 \n\005supe"
  "r\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016override_c"
  "ount\030\n \001(\r:\0010\022>\n\017char_properties\030\013 \001(\0132%"
  ".TSWP.CharacterStylePropertiesArchive\"\332\001"
  "\n\nTabArchive\022\020\n\010position\030\001 \001(\002\0224\n\talignm"
  "ent\030\002 \001(\0162!.TSWP.TabArchive.TabAlignment"
  "Type\022\016\n\006leader\030\003 \001(\t\"t\n\020TabAlignmentType"
  "\022\025\n\021kTabAlignmentLeft\020\000\022\027\n\023kTabAlignment"
  "Center\020\001\022\026\n\022kTabAlignmentRight\020\002\022\030\n\024kTab"
  "AlignmentDecimal\020\003\"-\n\013TabsArchive\022\036\n\004tab"
  "s\030\001 \003(\0132\020.TSWP.TabArchive\"\217\002\n\022LineSpacin"
  "gArchive\022:\n\004mode\030\001 \001(\0162,.TSWP.LineSpacin"
  "gArchive.LineSpacingModeType\022\016\n\006amount\030\002"
  " \001(\002\022\024\n\014baselineRule\030\003 \001(\002\"\226\001\n\023LineSpaci"
  "ngModeType\022\030\n\024kRelativeLineSpacing\020\000\022\027\n\023"
  "kMinimumLineSpacing\020\001\022\025\n\021kExactLineSpaci"
  "ng\020\002\022\027\n\023kMaximumLineSpacing\020\003\022\034\n\030kSpaceB"
  "etweenLineSpacing\020\004\"\343\013\n\037ParagraphStylePr"
  "opertiesArchive\022J\n\talignment\030\001 \001(\01627.TSW"
  "P.ParagraphStylePropertiesArchive.TextAl"
  "ignmentType\022\030\n\020decimal_tab_null\030\002 \001(\010\022\023\n"
  "\013decimal_tab\030\003 \001(\t\022\031\n\021default_tab_stops\030"
  "\004 \001(\002\022\021\n\tfill_null\030\005 \001(\010\022\030\n\004fill\030\006 \001(\0132\n"
  ".TSP.Color\022\031\n\021first_line_indent\030\007 \001(\002\022\021\n"
  "\thyphenate\030\010 \001(\010\022\033\n\023keep_lines_together\030"
  "\t \001(\010\022\026\n\016keep_with_next\030\n \001(\010\022\023\n\013left_in"
  "dent\030\013 \001(\002\022\031\n\021line_spacing_null\030\014 \001(\010\022.\n"
  "\014line_spacing\030\r \001(\0132\030.TSWP.LineSpacingAr"
  "chive\022\031\n\021page_break_before\030\016 \001(\010\022J\n\007bord"
  "ers\030\017 \001(\01629.TSWP.ParagraphStylePropertie"
  "sArchive.ParagraphBorderType\022\030\n\020rule_off"
  "set_null\030\020 \001(\010\022\037\n\013rule_offset\030\021 \001(\0132\n.TS"
  "P.Point\022\022\n\nrule_width\030\022 \001(\002\022\024\n\014right_ind"
  "ent\030\023 \001(\002\022\023\n\013space_after\030\024 \001(\002\022\024\n\014space_"
  "before\030\025 \001(\002\022\021\n\ttabs_null\030\030 \001(\010\022\037\n\004tabs\030"
  "\031 \001(\0132\021.TSWP.TabsArchive\022\025\n\rwidow_contro"
  "l\030\032 \001(\010\022\025\n\routline_level\030\033 \001(\r\022M\n\routlin"
  "e_style\030\034 \001(\01626.TSWP.ParagraphStylePrope"
  "rtiesArchive.OutlineStyleType\022\037\n\027followi"
  "ng_style_id_null\030\035 \001(\010\022\032\n\022following_styl"
  "e_id\030\036 \001(\t\022\023\n\013stroke_null\030\037 \001(\010\022\"\n\006strok"
  "e\030  \001(\0132\022.TSD.StrokeArchive\022\023\n\013show_in_t"
  "oc\030! \001(\010\022\031\n\021toc_style_id_null\030\" \001(\010\022\024\n\014t"
  "oc_style_id\030# \001(\t\022O\n\021writing_direction\030&"
  " \001(\0162\032.TSWP.WritingDirectionType:\030kWriti"
  "ngDirectionNatural\022\027\n\017list_style_null\030\' "
  "\001(\010\022\"\n\nlist_style\030( \001(\0132\016.TSP.Reference\022"
  "\034\n\024following_style_null\030) \001(\010\022\'\n\017followi"
  "ng_style\030* \001(\0132\016.TSP.Reference\"^\n\021TextAl"
  "ignmentType\022\r\n\tTATvalue0\020\000\022\r\n\tTATvalue1\020"
  "\001\022\r\n\tTATvalue2\020\002\022\r\n\tTATvalue3\020\003\022\r\n\tTATva"
  "lue4\020\004\"`\n\023ParagraphBorderType\022\r\n\tPBTvalu"
  "e0\020\000\022\r\n\tPBTvalue1\020\001\022\r\n\tPBTvalue2\020\002\022\r\n\tPB"
  "Tvalue3\020\003\022\r\n\tPBTvalue4\020\004\"\?\n\020OutlineStyle"
  "Type\022\r\n\tOSTvalue0\020\000\022\r\n\tOSTvalue1\020\001\022\r\n\tOS"
  "Tvalue2\020\002\"\324\001\n\025ParagraphStyleArchive\022 \n\005s"
  "uper\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016overrid"
  "e_count\030\n \001(\r:\0010\022>\n\017char_properties\030\013 \001("
  "\0132%.TSWP.CharacterStylePropertiesArchive"
  "\022>\n\017para_properties\030\014 \001(\0132%.TSWP.Paragra"
  "phStylePropertiesArchive\"\211\030\n\020ListStyleAr"
  "chive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022"
  "\031\n\016override_count\030\n \001(\r:\0010\0225\n\013label_type"
  "s\030\013 \003(\0162 .TSWP.ListStyleArchive.LabelTyp"
  "e\022\024\n\014text_indents\030\014 \003(\002\022\017\n\007indents\030\r \003(\002"
  "\0228\n\ngeometries\030\016 \003(\0132$.TSWP.ListStyleArc"
  "hive.LabelGeometry\0227\n\014number_types\030\017 \003(\016"
  "2!.TSWP.ListStyleArchive.NumberType\022\017\n\007s"
  "trings\030\020 \003(\t\0221\n\006images\030\021 \003(\0132!.TSWP.List"
  "StyleArchive.LabelImage\022\023\n\013shadow_null\030\022"
  " \001(\010\022\"\n\006shadow\030\023 \001(\0132\022.TSD.ShadowArchive"
  "\022\027\n\017font_color_null\030\024 \001(\010\022\036\n\nfont_color\030"
  "\025 \001(\0132\n.TSP.Color\022\026\n\016font_name_null\030\026 \001("
  "\010\022\021\n\tfont_name\030\027 \001(\t\022O\n\021writing_directio"
  "n\030\030 \001(\0162\032.TSWP.WritingDirectionType:\030kWr"
  "itingDirectionNatural\022\026\n\016tiered_numbers\030"
  "\031 \003(\010\032\\\n\rLabelGeometry\022\020\n\005scale\030\001 \001(\002:\0011"
  "\022\032\n\017baseline_offset\030\002 \001(\002:\0010\022\035\n\017scale_wi"
  "th_text\030\003 \001(\010:\004true\032k\n\nLabelImage\022!\n\005ima"
  "ge\030\003 \001(\0132\022.TSP.DataReference\022\022\n\nimage_nu"
  "ll\030\002 \001(\010\022&\n\016database_image\030\001 \001(\0132\016.TSP.R"
  "eference\"<\n\tLabelType\022\t\n\005kNone\020\000\022\n\n\006kIma"
  "ge\020\001\022\013\n\007kString\020\002\022\013\n\007kNumber\020\003\"\223\021\n\nNumbe"
  "rType\022\023\n\017kNumericDecimal\020\000\022\027\n\023kNumericDo"
  "ubleParen\020\001\022\026\n\022kNumericRightParen\020\002\022\026\n\022k"
  "RomanUpperDecimal\020\003\022\032\n\026kRomanUpperDouble"
  "Paren\020\004\022\031\n\025kRomanUpperRightParen\020\005\022\026\n\022kR"
  "omanLowerDecimal\020\006\022\032\n\026kRomanLowerDoubleP"
  "aren\020\007\022\031\n\025kRomanLowerRightParen\020\010\022\026\n\022kAl"
  "phaUpperDecimal\020\t\022\032\n\026kAlphaUpperDoublePa"
  "ren\020\n\022\031\n\025kAlphaUpperRightParen\020\013\022\026\n\022kAlp"
  "haLowerDecimal\020\014\022\032\n\026kAlphaLowerDoublePar"
  "en\020\r\022\031\n\025kAlphaLowerRightParen\020\016\022#\n\037kIdeo"
  "graphicJapaneseDecimalKind\020\017\022\'\n#kIdeogra"
  "phicJapaneseDoubleParenKind\020\020\022&\n\"kIdeogr"
  "aphicJapaneseRightParenKind\020\021\022\030\n\024kHiraga"
  "naDecimalKind\020\022\022\034\n\030kHiraganaDoubleParenK"
  "ind\020\023\022\033\n\027kHiraganaRightParenKind\020\024\022\030\n\024kK"
  "atakanaDecimalKind\020\025\022\034\n\030kKatakanaDoubleP"
  "arenKind\020\026\022\033\n\027kKatakanaRightParenKind\020\027\022"
  "\035\n\031kHiraganaIrohaDecimalKind\020\030\022!\n\035kHirag"
  "anaIrohaDoubleParenKind\020\031\022 \n\034kHiraganaIr"
  "ohaRightParenKind\020\032\022\035\n\031kKatakanaIrohaDec"
  "imalKind\020\033\022!\n\035kKatakanaIrohaDoubleParenK"
  "ind\020\034\022 \n\034kKatakanaIrohaRightParenKind\020\035\022"
  ",\n(kIdeographicSimplifiedChineseDecimalK"
  "ind\020\036\0220\n,kIdeographicSimplifiedChineseDo"
  "ubleParenKind\020\037\022/\n+kIdeographicSimplifie"
  "dChineseRightParenKind\020 \022-\n)kIdeographic"
  "TraditionalChineseDecimalKind\020!\0221\n-kIdeo"
  "graphicTraditionalChineseDoubleParenKind"
  "\020\"\0220\n,kIdeographicTraditionalChineseRigh"
  "tParenKind\020#\022)\n%kIdeographicFormalJapane"
  "seDecimalKind\020$\022-\n)kIdeographicFormalJap"
  "aneseDoubleParenKind\020%\022,\n(kIdeographicFo"
  "rmalJapaneseRightParenKind\020&\0222\n.kIdeogra"
  "phicFormalSimplifiedChineseDecimalKind\020\'"
  "\0226\n2kIdeographicFormalSimplifiedChineseD"
  "oubleParenKind\020(\0225\n1kIdeographicFormalSi"
  "mplifiedChineseRightParenKind\020)\0223\n/kIdeo"
  "graphicFormalTraditionalChineseDecimalKi"
  "nd\020*\0227\n3kIdeographicFormalTraditionalChi"
  "neseDoubleParenKind\020+\0226\n2kIdeographicFor"
  "malTraditionalChineseRightParenKind\020,\022\036\n"
  "\032kKoreanAlphabetDecimalKind\020-\022\"\n\036kKorean"
  "AlphabetDoubleParenKind\020.\022!\n\035kKoreanAlph"
  "abetRightParenKind\020/\022\026\n\022kCircledNumberKi"
  "nd\0200\022\036\n\032kArabianNumericDecimalKind\0201\022\"\n\036"
  "kArabianNumericDoubleParenKind\0202\022!\n\035kAra"
  "bianNumericRightParenKind\0203\022\034\n\030kArabianA"
  "lphaDecimalKind\0204\022 \n\034kArabianAlphaDouble"
  "ParenKind\0205\022\037\n\033kArabianAlphaRightParenKi"
  "nd\0206\022\034\n\030kArabianAbjadDecimalKind\0207\022 \n\034kA"
  "rabianAbjadDoubleParenKind\0208\022\037\n\033kArabian"
  "AbjadRightParenKind\0209\022\033\n\027kHebrewAlphaDec"
  "imalKind\020:\022\037\n\033kHebrewAlphaDoubleParenKin"
  "d\020;\022\036\n\032kHebrewAlphaRightParenKind\020<\022\037\n\033k"
  "HebrewBiblicalStandardKind\020=\"\200\001\n\026TextSty"
  "lePresetArchive\022\031\n\021preset_identifier\030\001 \001"
  "(\t\022\'\n\017paragraph_style\030\002 \001(\0132\016.TSP.Refere"
  "nce\022\"\n\nlist_style\030\003 \001(\0132\016.TSP.Reference\""
  "\365\002\n\016ColumnsArchive\022\?\n\requal_columns\030\001 \001("
  "\0132(.TSWP.ColumnsArchive.EqualColumnsArch"
  "ive\022F\n\021non_equal_columns\030\002 \001(\0132+.TSWP.Co"
  "lumnsArchive.NonEqualColumnsArchive\0321\n\023E"
  "qualColumnsArchive\022\r\n\005count\030\001 \001(\r\022\013\n\003gap"
  "\030\002 \001(\002\032\246\001\n\026NonEqualColumnsArchive\022\r\n\005fir"
  "st\030\001 \002(\002\022N\n\tfollowing\030\002 \003(\0132;.TSWP.Colum"
  "nsArchive.NonEqualColumnsArchive.GapWidt"
  "hArchive\032-\n\017GapWidthArchive\022\013\n\003gap\030\001 \002(\002"
  "\022\r\n\005width\030\002 \002(\002\"J\n\016PaddingArchive\022\014\n\004lef"
  "t\030\001 \001(\002\022\013\n\003top\030\002 \001(\002\022\r\n\005right\030\003 \001(\002\022\016\n\006b"
  "ottom\030\004 \001(\002\"\317\004\n\034ColumnStylePropertiesArc"
  "hive\022\022\n\ncontinuous\030\001 \001(\010\022\025\n\rshrink_to_fi"
  "t\030\002 \001(\010\022\025\n\rvertical_text\030\003 \001(\010\022\034\n\024min_ho"
  "rizontal_inset\030\004 \001(\002\022T\n\022vertical_alignme"
  "nt\030\005 \001(\01628.TSWP.ColumnStylePropertiesArc"
  "hive.VerticalAlignmentType\022\024\n\014columns_nu"
  "ll\030\006 \001(\010\022%\n\007columns\030\007 \001(\0132\024.TSWP.Columns"
  "Archive\022\024\n\014margins_null\030\010 \001(\010\022%\n\007margins"
  "\030\t \001(\0132\024.TSWP.PaddingArchive\022\024\n\014padding_"
  "null\030\n \001(\010\022%\n\007padding\030\013 \001(\0132\024.TSWP.Paddi"
  "ngArchive\022O\n\021writing_direction\030\014 \001(\0162\032.T"
  "SWP.WritingDirectionType:\030kWritingDirect"
  "ionNatural\"q\n\025VerticalAlignmentType\022\022\n\016k"
  "FrameAlignTop\020\000\022\025\n\021kFrameAlignMiddle\020\001\022\025"
  "\n\021kFrameAlignBottom\020\002\022\026\n\022kFrameAlignJust"
  "ify\020\003\"\220\001\n\022ColumnStyleArchive\022 \n\005super\030\001 "
  "\002(\0132\021.TSS.StyleArchive\022\031\n\016override_count"
  "\030\n \001(\r:\0010\022=\n\021column_properties\030\013 \001(\0132\".T"
  "SWP.ColumnStylePropertiesArchive\"\367\003\n\033Sha"
  "peStylePropertiesArchive\022\025\n\rshrink_to_fi"
  "t\030\001 \001(\010\022S\n\022vertical_alignment\030\002 \001(\01627.TS"
  "WP.ShapeStylePropertiesArchive.VerticalA"
  "lignmentType\022\024\n\014columns_null\030\003 \001(\010\022%\n\007co"
  "lumns\030\004 \001(\0132\024.TSWP.ColumnsArchive\022\024\n\014pad"
  "ding_null\030\005 \001(\010\022%\n\007padding\030\006 \001(\0132\024.TSWP."
  "PaddingArchive\022!\n\031default_text_preset_in"
  "dex\030\007 \001(\r\022\025\n\rvertical_text\030\010 \001(\010\022\034\n\024para"
  "graph_style_null\030\t \001(\010\022\'\n\017paragraph_styl"
  "e\030\n \001(\0132\016.TSP.Reference\"q\n\025VerticalAlign"
  "mentType\022\022\n\016kFrameAlignTop\020\000\022\025\n\021kFrameAl"
  "ignMiddle\020\001\022\025\n\021kFrameAlignBottom\020\002\022\026\n\022kF"
  "rameAlignJustify\020\003\"\222\001\n\021ShapeStyleArchive"
  "\022%\n\005super\030\001 \002(\0132\026.TSD.ShapeStyleArchive\022"
  "\031\n\016override_count\030\n \001(\r:\0010\022;\n\020shape_prop"
  "erties\030\013 \001(\0132!.TSWP.ShapeStyleProperties"
  "Archive\"\244\003\n\023ThemePresetsArchive\022*\n\022list_"
  "style_presets\030\001 \003(\0132\016.TSP.Reference\022*\n\022t"
  "ext_style_presets\030\002 \003(\0132\016.TSP.Reference\022"
  "3\n\033imported_text_style_presets\030\003 \003(\0132\016.T"
  "SP.Reference\022/\n\027toc_entry_style_presets\030"
  "\004 \003(\0132\016.TSP.Reference\022,\n\024toc_settings_pr"
  "esets\030\005 \003(\0132\016.TSP.Reference\022/\n\027character"
  "_style_presets\030\006 \003(\0132\016.TSP.Reference\022/\n\027"
  "paragraph_style_presets\030\007 \003(\0132\016.TSP.Refe"
  "rence2\?\n\textension\022\021.TSS.ThemeArchive\030n "
  "\001(\0132\031.TSWP.ThemePresetsArchive\"T\n\034TextPr"
  "esetDisplayItemArchive\022\036\n\006preset\030\001 \002(\0132\016"
  ".TSP.Reference\022\024\n\014display_name\030\002 \002(\t\"\205\001\n"
  "\036TOCEntryStylePropertiesArchive\022\036\n\026page_"
  "number_style_null\030\001 \001(\010\022)\n\021page_number_s"
  "tyle\030\002 \001(\0132\016.TSP.Reference\022\030\n\020show_page_"
  "number\030\003 \001(\010\"\200\001\n\024TOCEntryStyleArchive\022*\n"
  "\005super\030\001 \002(\0132\033.TSWP.ParagraphStyleArchiv"
  "e\022<\n\016toc_properties\030\002 \001(\0132$.TSWP.TOCEntr"
  "yStylePropertiesArchive\"\350\001\n\022TOCSettingsA"
  "rchive\022\020\n\010toc_name\030\001 \001(\t\022\021\n\ttoc_scope\030\002 "
  "\001(\r\0226\n\007entries\030\003 \003(\0132%.TSWP.TOCSettingsA"
  "rchive.TOCEntryData\032u\n\014TOCEntryData\022\'\n\017p"
  "aragraph_style\030\001 \001(\0132\016.TSP.Reference\022\'\n\017"
  "toc_entry_style\030\002 \001(\0132\016.TSP.Reference\022\023\n"
  "\013show_in_toc\030\003 \001(\010\"\226\001\n\027TOCEntryInstanceA"
  "rchive\022\027\n\017paragraph_index\030\001 \002(\r\022\023\n\013page_"
  "number\030\002 \002(\r\022\025\n\rnumber_format\030\003 \002(\r\022\017\n\007h"
  "eading\030\004 \002(\t\022%\n\rindexed_style\030\005 \002(\0132\016.TS"
  "P.Reference\"\274\020\n\017UndoTransaction\0227\n\007entri"
  "es\030\001 \003(\0132&.TSWP.UndoTransaction.UnionTra"
  "nsaction\032D\n\022GenericTransaction\022\016\n\006value1"
  "\030\001 \002(\r\022\016\n\006value2\030\002 \002(\r\022\016\n\006value3\030\003 \002(\r\032["
  "\n\017TextTransaction\022\027\n\017insert_location\030\001 \002"
  "(\r\022\025\n\rinsert_length\030\002 \002(\r\022\030\n\020string_to_d"
  "elete\030\003 \001(\t\032Y\n\024CharIndexTransaction\022\022\n\nc"
  "har_index\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\036\n\006object"
  "\030\003 \001(\0132\016.TSP.Reference\032J\n\033ReplaceCharInd"
  "exTransaction\022\027\n\017attribute_index\030\001 \002(\r\022\022"
  "\n\nchar_index\030\002 \002(\r\032x\n\031AttributeIndexTran"
  "saction\022\027\n\017attribute_index\030\001 \002(\r\022\022\n\nchar"
  "_index\030\002 \002(\r\022\036\n\006object\030\003 \001(\0132\016.TSP.Refer"
  "ence\022\016\n\006string\030\004 \001(\t\032~\n\032InsertAttributeT"
  "ransaction\022\027\n\017attribute_index\030\001 \002(\r\022\027\n\017a"
  "ttribute_count\030\002 \002(\r\022\036\n\006object\030\003 \001(\0132\016.T"
  "SP.Reference\022\016\n\006string\030\004 \001(\t\032H\n\024InsertNi"
  "lTransaction\022\027\n\017attribute_index\030\001 \002(\r\022\027\n"
  "\017attribute_count\030\002 \002(\r\032W\n\024CharDeltaTrans"
  "action\022\022\n\nchar_index\030\001 \002(\r\022\027\n\017attribute_"
  "index\030\002 \002(\r\022\022\n\nchar_delta\030\003 \002(\021\032f\n\030Parag"
  "raphDataTransaction\022\027\n\017attribute_index\030\001"
  " \002(\r\022\r\n\005first\030\002 \002(\r\022\016\n\006second\030\003 \002(\r\022\022\n\nc"
  "har_index\030\004 \002(\r\032F\n\025ObjectDOLCTransaction"
  "\022\r\n\005flags\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132\016.TSP.Re"
  "ference\032E\n\021CTDateTransaction\022\027\n\017attribut"
  "e_index\030\001 \002(\r\022\027\n\004date\030\002 \001(\0132\t.TSP.Date\032\250"
  "\006\n\020UnionTransaction\022,\n\004kind\030\001 \002(\0162\036.TSWP"
  ".UndoTransaction.UndoKind\022\r\n\005table\030\002 \001(\r"
  "\0229\n\007generic\030\005 \001(\0132(.TSWP.UndoTransaction"
  ".GenericTransaction\0223\n\004text\030\006 \001(\0132%.TSWP"
  ".UndoTransaction.TextTransaction\022>\n\nchar"
  "_index\030\007 \001(\0132*.TSWP.UndoTransaction.Char"
  "IndexTransaction\022M\n\022replace_char_index\030\010"
  " \001(\01321.TSWP.UndoTransaction.ReplaceCharI"
  "ndexTransaction\022H\n\017attribute_index\030\t \001(\013"
  "2/.TSWP.UndoTransaction.AttributeIndexTr"
  "ansaction\022>\n\ninsert_nil\030\n \001(\0132*.TSWP.Und"
  "oTransaction.InsertNilTransaction\022J\n\020ins"
  "ert_attribute\030\013 \001(\01320.TSWP.UndoTransacti"
  "on.InsertAttributeTransaction\022>\n\nchar_de"
  "lta\030\014 \001(\0132*.TSWP.UndoTransaction.CharDel"
  "taTransaction\022F\n\016paragraph_data\030\r \001(\0132.."
  "TSWP.UndoTransaction.ParagraphDataTransa"
  "ction\022@\n\013object_dolc\030\016 \001(\0132+.TSWP.UndoTr"
  "ansaction.ObjectDOLCTransaction\0228\n\007ct_da"
  "te\030\017 \001(\0132\'.TSWP.UndoTransaction.CTDateTr"
  "ansaction\"\346\001\n\010UndoKind\022\020\n\014REPLACE_TEXT\020\001"
  "\022\024\n\020INSERT_ATTRIBUTE\020\002\022\024\n\020DELETE_ATTRIBU"
  "TE\020\003\022\027\n\023ADJUST_CHAR_INDEXES\020\004\022\035\n\031COMPR_A"
  "DJUST_CHAR_INDEXES\020\005\022\026\n\022REPLACE_CHAR_IND"
  "EX\020\006\022\022\n\016REPLACE_OBJECT\020\007\022\032\n\026REPLACE_PARA"
  "GRAPH_DATA\020\010\022\017\n\013OBJECT_DOLC\020\t\022\013\n\007CT_DATE"
  "\020\n\"P\n\035UndoTransactionWrapperArchive\022/\n\020u"
  "ndo_transaction\030\001 \002(\0132\025.TSWP.UndoTransac"
  "tion\"^\n\020ShapeInfoArchive\022 \n\005super\030\001 \002(\0132"
  "\021.TSD.ShapeArchive\022(\n\020containedStorage\030\002"
  " \001(\0132\016.TSP.Reference\"d\n\022CommentInfoArchi"
  "ve\022%\n\005super\030\001 \002(\0132\026.TSWP.ShapeInfoArchiv"
  "e\022\'\n\017comment_storage\030\002 \001(\0132\016.TSP.Referen"
  "ce\"\255\001\n\016TOCInfoArchive\022%\n\005super\030\001 \002(\0132\026.T"
  "SWP.ShapeInfoArchive\022$\n\014toc_settings\030\002 \001"
  "(\0132\016.TSP.Reference\022&\n\016toc_entry_data\030\003 \003"
  "(\0132\016.TSP.Reference\022&\n\022page_number_ranges"
  "\030\004 \003(\0132\n.TSP.Range\"5\n\024TOCLayoutHintArchi"
  "ve\022\035\n\tcharRange\030\001 \002(\0132\n.TSP.Range\"\260\001\n\030Te"
  "xtualAttachmentArchive\022\031\n\021string_equival"
  "ent\030\001 \001(\t\0221\n\004kind\030\002 \001(\0162#.TSWP.TextualAt"
  "tachmentArchive.Kind\"F\n\004Kind\022\023\n\017kKindPag"
  "eNumber\020\000\022\022\n\016kKindPageCount\020\001\022\025\n\021kKindFo"
  "otnoteMark\020\002\"\177\n\"TSWPTOCPageNumberAttachm"
  "entArchive\022-\n\005super\030\001 \001(\0132\036.TSWP.Textual"
  "AttachmentArchive\022\023\n\013page_number\030\002 \001(\t\022\025"
  "\n\rbookmark_name\030\003 \001(\t\"\027\n\025UIGraphicalAtta"
  "chment\"\217\001\n\031DrawableAttachmentArchive\022 \n\010"
  "drawable\030\001 \001(\0132\016.TSP.Reference\022\025\n\rh_offs"
  "et_type\030\002 \001(\r\022\020\n\010h_offset\030\003 \001(\002\022\025\n\rv_off"
  "set_type\030\004 \001(\r\022\020\n\010v_offset\030\005 \001(\002\"F\n\024TOCA"
  "ttachmentArchive\022.\n\005super\030\001 \002(\0132\037.TSWP.D"
  "rawableAttachmentArchive\"\232\001\n\"FootnoteRef"
  "erenceAttachmentArchive\022-\n\005super\030\001 \001(\0132\036"
  ".TSWP.TextualAttachmentArchive\022)\n\021contai"
  "ned_storage\030\002 \001(\0132\016.TSP.Reference\022\032\n\022cus"
  "tom_mark_string\030\003 \001(\t\"u\n\027NumberAttachmen"
  "tArchive\022-\n\005super\030\001 \001(\0132\036.TSWP.TextualAt"
  "tachmentArchive\022\025\n\rnumber_format\030\002 \001(\r\022\024"
  "\n\014string_value\030\003 \001(\t\"\023\n\021SmartFieldArchiv"
  "e\"P\n\025HyperlinkFieldArchive\022&\n\005super\030\001 \001("
  "\0132\027.TSWP.SmartFieldArchive\022\017\n\007url_ref\030\002 "
  "\001(\t\"[\n\034PlaceholderSmartFieldArchive\022&\n\005s"
  "uper\030\001 \001(\0132\027.TSWP.SmartFieldArchive\022\023\n\013l"
  "ocalizable\030\002 \001(\010\"f\n UnsupportedHyperlink"
  "FieldArchive\0221\n\005super\030\001 \001(\0132\".TSWP.Place"
  "holderSmartFieldArchive\022\017\n\007url_ref\030\002 \001(\t"
  "\"\275\001\n\035BibliographySmartFieldArchive\022&\n\005su"
  "per\030\003 \001(\0132\027.TSWP.SmartFieldArchive\022(\n\020ci"
  "tation_records\030\002 \003(\0132\016.TSP.Reference\022\023\n\013"
  "localizable\030\004 \001(\010\0225\n\told_super\030\001 \001(\0132\".T"
  "SWP.PlaceholderSmartFieldArchive\"\321\001\n\025Cit"
  "ationRecordArchive\022\023\n\013endnote_xml\030\001 \001(\t\022"
  "\031\n\021hide_author_names\030\002 \001(\010\022\021\n\thide_year\030"
  "\003 \001(\010\022\022\n\npage_range\030\004 \001(\t\022\016\n\006prefix\030\005 \001("
  "\t\022\016\n\006suffix\030\006 \001(\t\022\026\n\016authors_string\030\007 \001("
  "\t\022\r\n\005title\030\010 \001(\t\022\014\n\004year\030\t \001(\t\022\014\n\004type\030\n"
  " \001(\t\"\271\001\n\031CitationSmartFieldArchive\022&\n\005su"
  "per\030\003 \001(\0132\027.TSWP.SmartFieldArchive\022(\n\020ci"
  "tation_records\030\002 \003(\0132\016.TSP.Reference\022\023\n\013"
  "localizable\030\004 \001(\010\0225\n\told_super\030\001 \001(\0132\".T"
  "SWP.PlaceholderSmartFieldArchive\"\257\005\n\031Dat"
  "eTimeSmartFieldArchive\022&\n\005super\030\001 \001(\0132\027."
  "TSWP.SmartFieldArchive\022\016\n\006format\030\002 \001(\t\022\031"
  "\n\021locale_identifier\030\003 \001(\t\022J\n\ndate_style\030"
  "\004 \001(\01626.TSWP.DateTimeSmartFieldArchive.D"
  "ateTimeFormatterStyle\022J\n\ntime_style\030\005 \001("
  "\01626.TSWP.DateTimeSmartFieldArchive.DateT"
  "imeFormatterStyle\022G\n\013update_plan\030\006 \001(\01622"
  ".TSWP.DateTimeSmartFieldArchive.DateTime"
  "UpdatePlan\022\024\n\014needs_update\030\007 \001(\010\022\027\n\004date"
  "\030\010 \001(\0132\t.TSP.Date\"l\n\022DateTimeUpdatePlan\022"
  "\034\n\030kDateTimeUpdatePlanNever\020\000\022\033\n\027kDateTi"
  "meUpdatePlanAuto\020\001\022\033\n\027kDateTimeUpdatePla"
  "nOnce\020\002\"\300\001\n\026DateTimeFormatterStyle\022\037\n\033kD"
  "ateTimeFormatterStyleNone\020\000\022 \n\034kDateTime"
  "FormatterStyleShort\020\001\022!\n\035kDateTimeFormat"
  "terStyleMedium\020\002\022\037\n\033kDateTimeFormatterSt"
  "yleLong\020\003\022\037\n\033kDateTimeFormatterStyleFull"
  "\020\004\"l\n\024BookmarkFieldArchive\022&\n\005super\030\001 \001("
  "\0132\027.TSWP.SmartFieldArchive\022\014\n\004name\030\002 \001(\t"
  "\022\016\n\006ranged\030\003 \001(\r\022\016\n\006hidden\030\004 \001(\r\"e\n\031File"
  "nameSmartFieldArchive\0221\n\005super\030\001 \001(\0132\".T"
  "SWP.PlaceholderSmartFieldArchive\022\025\n\rdisp"
  "lay_flags\030\002 \001(\r\"\324\002\n\026MergeSmartFieldArchi"
  "ve\0221\n\005super\030\001 \001(\0132\".TSWP.PlaceholderSmar"
  "tFieldArchive\022\020\n\010property\030\002 \001(\t\022\r\n\005label"
  "\030\003 \001(\t\022\013\n\003key\030\004 \001(\t\022<\n\010category\030\005 \001(\0162*."
  "TSWP.MergeSmartFieldArchive.MergeCategor"
  "y\022%\n\035requires_following_whitespace\030\006 \001(\010"
  "\022\022\n\nwhitespace\030\007 \001(\t\022\014\n\004guid\030\010 \001(\t\022\023\n\013ta"
  "ble_field\030\t \001(\t\"=\n\rMergeCategory\022\024\n\020kMer"
  "geCategoryTo\020\000\022\026\n\022kMergeCategoryFrom\020\001\"\347"
  "\001\n\024TOCSmartFieldArchive\0221\n\005super\030\001 \001(\0132\""
  ".TSWP.PlaceholderSmartFieldArchive\0228\n\013to"
  "c_entries\030\002 \003(\0132#.TSWP.TOCSmartFieldArch"
  "ive.TOCEntry\032b\n\010TOCEntry\022\025\n\rbookmark_nam"
  "e\030\001 \001(\t\022$\n\014target_style\030\002 \001(\0132\016.TSP.Refe"
  "rence\022\031\n\005range\030\003 \001(\0132\n.TSP.Range\"M\n\020Ruby"
  "FieldArchive\022&\n\005super\030\001 \001(\0132\027.TSWP.Smart"
  "FieldArchive\022\021\n\truby_text\030\002 \001(\t\"\310\001\n\rChan"
  "geArchive\022,\n\004kind\030\001 \001(\0162\036.TSWP.ChangeArc"
  "hive.ChangeKind\022\037\n\007session\030\002 \001(\0132\016.TSP.R"
  "eference\022\027\n\004date\030\003 \001(\0132\t.TSP.Date\022\016\n\006hid"
  "den\030\004 \001(\010\"\?\n\nChangeKind\022\030\n\024kChangeKindIn"
  "sertion\020\001\022\027\n\023kChangeKindDeletion\020\002\"d\n\024Ch"
  "angeSessionArchive\022\023\n\013session_uid\030\001 \001(\r\022"
  "\036\n\006author\030\002 \001(\0132\016.TSP.Reference\022\027\n\004date\030"
  "\003 \001(\0132\t.TSP.Date\"\033\n\031SectionPlaceholderAr"
  "chive*\364\001\n\rSelectionType\022\030\n\024SelectionType"
  "_Normal\020\000\022\033\n\027SelectionType_ListLabel\020\001\022\033"
  "\n\027SelectionType_ListTopic\020\002\022\031\n\025Selection"
  "Type_Replace\020\003\022 \n\034SelectionType_CopyPast"
  "eStyle\020\004\022\032\n\026SelectionType_Replace2\020\005\022\034\n\030"
  "SelectionType_SmartField\020\006\022\030\n\024SelectionT"
  "ype_Visual\020\007*\206\001\n\026StyleInsertionBehavior\022"
  "!\n\035StyleInsertionBehavior_NoGrow\020\000\022#\n\037St"
  "yleInsertionBehavior_GrowLeft\020\001\022$\n Style"
  "InsertionBehavior_GrowRight\020\002*\?\n\rCaretAf"
  "finity\022\027\n\023CaretAffinity_Start\020\000\022\025\n\021Caret"
  "Affinity_End\020\001*\201\001\n\024WritingDirectionType\022"
  "%\n\030kWritingDirectionNatural\020\377\377\377\377\377\377\377\377\377\001\022 "
  "\n\034kWritingDirectionLeftToRight\020\000\022 \n\034kWri"
  "tingDirectionRightToLeft\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSWPArchives_2eproto_deps[4] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSWPArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSWPArchives_2eproto = {
    false, false, 19706, descriptor_table_protodef_TSWPArchives_2eproto,
    "TSWPArchives.proto",
    &descriptor_table_TSWPArchives_2eproto_once, descriptor_table_TSWPArchives_2eproto_deps, 4, 81,
    schemas, file_default_instances, TableStruct_TSWPArchives_2eproto::offsets,
    file_level_metadata_TSWPArchives_2eproto, file_level_enum_descriptors_TSWPArchives_2eproto,
    file_level_service_descriptors_TSWPArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSWPArchives_2eproto_getter() {
  return &descriptor_table_TSWPArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSWPArchives_2eproto(&descriptor_table_TSWPArchives_2eproto);
namespace TSWP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageArchive_KindType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[0];
}
bool StorageArchive_KindType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StorageArchive_KindType StorageArchive::BODY;
constexpr StorageArchive_KindType StorageArchive::HEADER;
constexpr StorageArchive_KindType StorageArchive::FOOTNOTE;
constexpr StorageArchive_KindType StorageArchive::TEXTBOX;
constexpr StorageArchive_KindType StorageArchive::NOTE;
constexpr StorageArchive_KindType StorageArchive::CELL;
constexpr StorageArchive_KindType StorageArchive::UNCLASSIFIED;
constexpr StorageArchive_KindType StorageArchive::TABLEOFCONTENTS;
constexpr StorageArchive_KindType StorageArchive::KindType_MIN;
constexpr StorageArchive_KindType StorageArchive::KindType_MAX;
constexpr int StorageArchive::KindType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_CapitalizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[1];
}
bool CharacterStylePropertiesArchive_CapitalizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kNoCaps;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kAllCaps;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kSmallCaps;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kTitled;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::CapitalizationType_MIN;
constexpr CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::CapitalizationType_MAX;
constexpr int CharacterStylePropertiesArchive::CapitalizationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_UnderlineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[2];
}
bool CharacterStylePropertiesArchive_UnderlineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kNoUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kSingleUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kDoubleUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kWavyUnderline;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::UnderlineType_MIN;
constexpr CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::UnderlineType_MAX;
constexpr int CharacterStylePropertiesArchive::UnderlineType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_LigaturesType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[3];
}
bool CharacterStylePropertiesArchive_LigaturesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kRequiredLigatures;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kStandardLigatures;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kAllLigatures;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::LigaturesType_MIN;
constexpr CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::LigaturesType_MAX;
constexpr int CharacterStylePropertiesArchive::LigaturesType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_StrikethruType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[4];
}
bool CharacterStylePropertiesArchive_StrikethruType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kNoStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kSingleStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kDoubleStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kTripleStrikethru;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::StrikethruType_MIN;
constexpr CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::StrikethruType_MAX;
constexpr int CharacterStylePropertiesArchive::StrikethruType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterStylePropertiesArchive_SuperscriptType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[5];
}
bool CharacterStylePropertiesArchive_SuperscriptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kNoScript;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kSuperscript;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kSubscript;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::SuperscriptType_MIN;
constexpr CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::SuperscriptType_MAX;
constexpr int CharacterStylePropertiesArchive::SuperscriptType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TabArchive_TabAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[6];
}
bool TabArchive_TabAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentLeft;
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentCenter;
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentRight;
constexpr TabArchive_TabAlignmentType TabArchive::kTabAlignmentDecimal;
constexpr TabArchive_TabAlignmentType TabArchive::TabAlignmentType_MIN;
constexpr TabArchive_TabAlignmentType TabArchive::TabAlignmentType_MAX;
constexpr int TabArchive::TabAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineSpacingArchive_LineSpacingModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[7];
}
bool LineSpacingArchive_LineSpacingModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kRelativeLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kMinimumLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kExactLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kMaximumLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kSpaceBetweenLineSpacing;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::LineSpacingModeType_MIN;
constexpr LineSpacingArchive_LineSpacingModeType LineSpacingArchive::LineSpacingModeType_MAX;
constexpr int LineSpacingArchive::LineSpacingModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_TextAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[8];
}
bool ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue0;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue1;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue2;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue3;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue4;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TextAlignmentType_MIN;
constexpr ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TextAlignmentType_MAX;
constexpr int ParagraphStylePropertiesArchive::TextAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[9];
}
bool ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue0;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue1;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue2;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue3;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue4;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::ParagraphBorderType_MIN;
constexpr ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::ParagraphBorderType_MAX;
constexpr int ParagraphStylePropertiesArchive::ParagraphBorderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParagraphStylePropertiesArchive_OutlineStyleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[10];
}
bool ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue0;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue1;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue2;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OutlineStyleType_MIN;
constexpr ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OutlineStyleType_MAX;
constexpr int ParagraphStylePropertiesArchive::OutlineStyleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListStyleArchive_LabelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[11];
}
bool ListStyleArchive_LabelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ListStyleArchive_LabelType ListStyleArchive::kNone;
constexpr ListStyleArchive_LabelType ListStyleArchive::kImage;
constexpr ListStyleArchive_LabelType ListStyleArchive::kString;
constexpr ListStyleArchive_LabelType ListStyleArchive::kNumber;
constexpr ListStyleArchive_LabelType ListStyleArchive::LabelType_MIN;
constexpr ListStyleArchive_LabelType ListStyleArchive::LabelType_MAX;
constexpr int ListStyleArchive::LabelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListStyleArchive_NumberType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[12];
}
bool ListStyleArchive_NumberType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ListStyleArchive_NumberType ListStyleArchive::kNumericDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kNumericDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kNumericRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanUpperDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanUpperDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanUpperRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanLowerDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanLowerDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kRomanLowerRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerDecimal;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerDoubleParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerRightParen;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kCircledNumberKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianNumericDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianNumericDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianNumericRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaDecimalKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaDoubleParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaRightParenKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalStandardKind;
constexpr ListStyleArchive_NumberType ListStyleArchive::NumberType_MIN;
constexpr ListStyleArchive_NumberType ListStyleArchive::NumberType_MAX;
constexpr int ListStyleArchive::NumberType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[13];
}
bool ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignTop;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignMiddle;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignBottom;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignJustify;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::VerticalAlignmentType_MIN;
constexpr ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::VerticalAlignmentType_MAX;
constexpr int ColumnStylePropertiesArchive::VerticalAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[14];
}
bool ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignTop;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignMiddle;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignBottom;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignJustify;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::VerticalAlignmentType_MIN;
constexpr ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::VerticalAlignmentType_MAX;
constexpr int ShapeStylePropertiesArchive::VerticalAlignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UndoTransaction_UndoKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[15];
}
bool UndoTransaction_UndoKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_TEXT;
constexpr UndoTransaction_UndoKind UndoTransaction::INSERT_ATTRIBUTE;
constexpr UndoTransaction_UndoKind UndoTransaction::DELETE_ATTRIBUTE;
constexpr UndoTransaction_UndoKind UndoTransaction::ADJUST_CHAR_INDEXES;
constexpr UndoTransaction_UndoKind UndoTransaction::COMPR_ADJUST_CHAR_INDEXES;
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_CHAR_INDEX;
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_OBJECT;
constexpr UndoTransaction_UndoKind UndoTransaction::REPLACE_PARAGRAPH_DATA;
constexpr UndoTransaction_UndoKind UndoTransaction::OBJECT_DOLC;
constexpr UndoTransaction_UndoKind UndoTransaction::CT_DATE;
constexpr UndoTransaction_UndoKind UndoTransaction::UndoKind_MIN;
constexpr UndoTransaction_UndoKind UndoTransaction::UndoKind_MAX;
constexpr int UndoTransaction::UndoKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextualAttachmentArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[16];
}
bool TextualAttachmentArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindPageNumber;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindPageCount;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindFootnoteMark;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::Kind_MIN;
constexpr TextualAttachmentArchive_Kind TextualAttachmentArchive::Kind_MAX;
constexpr int TextualAttachmentArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[17];
}
bool DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanNever;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanAuto;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanOnce;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::DateTimeUpdatePlan_MIN;
constexpr DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::DateTimeUpdatePlan_MAX;
constexpr int DateTimeSmartFieldArchive::DateTimeUpdatePlan_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[18];
}
bool DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleNone;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleShort;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleMedium;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleLong;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleFull;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::DateTimeFormatterStyle_MIN;
constexpr DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::DateTimeFormatterStyle_MAX;
constexpr int DateTimeSmartFieldArchive::DateTimeFormatterStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeSmartFieldArchive_MergeCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[19];
}
bool MergeSmartFieldArchive_MergeCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::kMergeCategoryTo;
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::kMergeCategoryFrom;
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::MergeCategory_MIN;
constexpr MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::MergeCategory_MAX;
constexpr int MergeSmartFieldArchive::MergeCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeArchive_ChangeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[20];
}
bool ChangeArchive_ChangeKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChangeArchive_ChangeKind ChangeArchive::kChangeKindInsertion;
constexpr ChangeArchive_ChangeKind ChangeArchive::kChangeKindDeletion;
constexpr ChangeArchive_ChangeKind ChangeArchive::ChangeKind_MIN;
constexpr ChangeArchive_ChangeKind ChangeArchive::ChangeKind_MAX;
constexpr int ChangeArchive::ChangeKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[21];
}
bool SelectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StyleInsertionBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[22];
}
bool StyleInsertionBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaretAffinity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[23];
}
bool CaretAffinity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WritingDirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSWPArchives_2eproto);
  return file_level_enum_descriptors_TSWPArchives_2eproto[24];
}
bool WritingDirectionType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Range& range(const SelectionArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_styleinsertionbehavior(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caretaffinity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Range& smart_field_range(const SelectionArchive* msg);
  static void set_has_smart_field_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSP::Range&
SelectionArchive::_Internal::range(const SelectionArchive* msg) {
  return *msg->_impl_.range_;
}
const ::TSP::Range&
SelectionArchive::_Internal::smart_field_range(const SelectionArchive* msg) {
  return *msg->_impl_.smart_field_range_;
}
void SelectionArchive::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SelectionArchive::clear_smart_field_range() {
  if (_impl_.smart_field_range_ != nullptr) _impl_.smart_field_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SelectionArchive::SelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.SelectionArchive)
}
SelectionArchive::SelectionArchive(const SelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.smart_field_range_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.styleinsertionbehavior_){}
    , decltype(_impl_.caretaffinity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSP::Range(*from._impl_.range_);
  }
  if (from._internal_has_smart_field_range()) {
    _this->_impl_.smart_field_range_ = new ::TSP::Range(*from._impl_.smart_field_range_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.caretaffinity_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.caretaffinity_));
  // @@protoc_insertion_point(copy_constructor:TSWP.SelectionArchive)
}

inline void SelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.smart_field_range_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.styleinsertionbehavior_){0}
    , decltype(_impl_.caretaffinity_){0}
  };
}

SelectionArchive::~SelectionArchive() {
  // @@protoc_insertion_point(destructor:TSWP.SelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.smart_field_range_;
}

void SelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.smart_field_range_ != nullptr);
      _impl_.smart_field_range_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.caretaffinity_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.caretaffinity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.SelectionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::SelectionType_IsValid(val))) {
            _internal_set_type(static_cast<::TSWP::SelectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::StyleInsertionBehavior_IsValid(val))) {
            _internal_set_styleinsertionbehavior(static_cast<::TSWP::StyleInsertionBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSWP.CaretAffinity caretAffinity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CaretAffinity_IsValid(val))) {
            _internal_set_caretaffinity(static_cast<::TSWP::CaretAffinity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Range smart_field_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_smart_field_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.SelectionType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .TSP.Range range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_styleinsertionbehavior(), target);
  }

  // required .TSWP.CaretAffinity caretAffinity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_caretaffinity(), target);
  }

  // required .TSP.Range smart_field_range = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::smart_field_range(this),
        _Internal::smart_field_range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SelectionArchive)
  return target;
}

size_t SelectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.SelectionArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  if (_internal_has_smart_field_range()) {
    // required .TSP.Range smart_field_range = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.smart_field_range_);
  }

  if (_internal_has_type()) {
    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_styleinsertionbehavior()) {
    // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_styleinsertionbehavior());
  }

  if (_internal_has_caretaffinity()) {
    // required .TSWP.CaretAffinity caretAffinity = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_caretaffinity());
  }

  return total_size;
}
size_t SelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SelectionArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSP.Range range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);

    // required .TSP.Range smart_field_range = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.smart_field_range_);

    // required .TSWP.SelectionType type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_styleinsertionbehavior());

    // required .TSWP.CaretAffinity caretAffinity = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_caretaffinity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionArchive::GetClassData() const { return &_class_data_; }


void SelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectionArchive*>(&to_msg);
  auto& from = static_cast<const SelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range()->::TSP::Range::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_smart_field_range()->::TSP::Range::MergeFrom(
          from._internal_smart_field_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.styleinsertionbehavior_ = from._impl_.styleinsertionbehavior_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.caretaffinity_ = from._impl_.caretaffinity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionArchive::CopyFrom(const SelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  if (_internal_has_smart_field_range()) {
    if (!_impl_.smart_field_range_->IsInitialized()) return false;
  }
  return true;
}

void SelectionArchive::InternalSwap(SelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectionArchive, _impl_.caretaffinity_)
      + sizeof(SelectionArchive::_impl_.caretaffinity_)
      - PROTOBUF_FIELD_OFFSET(SelectionArchive, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[0]);
}

// ===================================================================

class ObjectAttributeTable_ObjectAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectAttributeTable_ObjectAttribute>()._impl_._has_bits_);
  static void set_has_character_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& object(const ObjectAttributeTable_ObjectAttribute* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
ObjectAttributeTable_ObjectAttribute::_Internal::object(const ObjectAttributeTable_ObjectAttribute* msg) {
  return *msg->_impl_.object_;
}
void ObjectAttributeTable_ObjectAttribute::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ObjectAttributeTable.ObjectAttribute)
}
ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute(const ObjectAttributeTable_ObjectAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectAttributeTable_ObjectAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.character_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  _this->_impl_.character_index_ = from._impl_.character_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ObjectAttributeTable.ObjectAttribute)
}

inline void ObjectAttributeTable_ObjectAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.character_index_){0u}
  };
}

ObjectAttributeTable_ObjectAttribute::~ObjectAttributeTable_ObjectAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.ObjectAttributeTable.ObjectAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectAttributeTable_ObjectAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void ObjectAttributeTable_ObjectAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectAttributeTable_ObjectAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  _impl_.character_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectAttributeTable_ObjectAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 character_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_character_index(&has_bits);
          _impl_.character_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectAttributeTable_ObjectAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 character_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_index(), target);
  }

  // optional .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ObjectAttributeTable.ObjectAttribute)
  return target;
}

size_t ObjectAttributeTable_ObjectAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  size_t total_size = 0;

  // required uint32 character_index = 1;
  if (_internal_has_character_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_character_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference object = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectAttributeTable_ObjectAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectAttributeTable_ObjectAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectAttributeTable_ObjectAttribute::GetClassData() const { return &_class_data_; }


void ObjectAttributeTable_ObjectAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectAttributeTable_ObjectAttribute*>(&to_msg);
  auto& from = static_cast<const ObjectAttributeTable_ObjectAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.character_index_ = from._impl_.character_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectAttributeTable_ObjectAttribute::CopyFrom(const ObjectAttributeTable_ObjectAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ObjectAttributeTable.ObjectAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeTable_ObjectAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeTable_ObjectAttribute::InternalSwap(ObjectAttributeTable_ObjectAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, _impl_.character_index_)
      + sizeof(ObjectAttributeTable_ObjectAttribute::_impl_.character_index_)
      - PROTOBUF_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAttributeTable_ObjectAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[1]);
}

// ===================================================================

class ObjectAttributeTable::_Internal {
 public:
};

ObjectAttributeTable::ObjectAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ObjectAttributeTable)
}
ObjectAttributeTable::ObjectAttributeTable(const ObjectAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectAttributeTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ObjectAttributeTable)
}

inline void ObjectAttributeTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectAttributeTable::~ObjectAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.ObjectAttributeTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void ObjectAttributeTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ObjectAttributeTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectAttributeTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectAttributeTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ObjectAttributeTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ObjectAttributeTable)
  return target;
}

size_t ObjectAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ObjectAttributeTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectAttributeTable::GetClassData() const { return &_class_data_; }


void ObjectAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectAttributeTable*>(&to_msg);
  auto& from = static_cast<const ObjectAttributeTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ObjectAttributeTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectAttributeTable::CopyFrom(const ObjectAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ObjectAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void ObjectAttributeTable::InternalSwap(ObjectAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAttributeTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[2]);
}

// ===================================================================

class StringAttributeTable_StringAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<StringAttributeTable_StringAttribute>()._impl_._has_bits_);
  static void set_has_character_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.StringAttributeTable.StringAttribute)
}
StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute(const StringAttributeTable_StringAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringAttributeTable_StringAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){}
    , decltype(_impl_.character_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object()) {
    _this->_impl_.object_.Set(from._internal_object(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.character_index_ = from._impl_.character_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.StringAttributeTable.StringAttribute)
}

inline void StringAttributeTable_StringAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){}
    , decltype(_impl_.character_index_){0u}
  };
  _impl_.object_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringAttributeTable_StringAttribute::~StringAttributeTable_StringAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.StringAttributeTable.StringAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringAttributeTable_StringAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_.Destroy();
}

void StringAttributeTable_StringAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringAttributeTable_StringAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StringAttributeTable.StringAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.object_.ClearNonDefaultToEmpty();
  }
  _impl_.character_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringAttributeTable_StringAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 character_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_character_index(&has_bits);
          _impl_.character_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_object();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.StringAttributeTable.StringAttribute.object");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringAttributeTable_StringAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StringAttributeTable.StringAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 character_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_index(), target);
  }

  // optional string object = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_object().data(), static_cast<int>(this->_internal_object().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.StringAttributeTable.StringAttribute.object");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StringAttributeTable.StringAttribute)
  return target;
}

size_t StringAttributeTable_StringAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StringAttributeTable.StringAttribute)
  size_t total_size = 0;

  // required uint32 character_index = 1;
  if (_internal_has_character_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_character_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string object = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringAttributeTable_StringAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringAttributeTable_StringAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringAttributeTable_StringAttribute::GetClassData() const { return &_class_data_; }


void StringAttributeTable_StringAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringAttributeTable_StringAttribute*>(&to_msg);
  auto& from = static_cast<const StringAttributeTable_StringAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StringAttributeTable.StringAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_object(from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.character_index_ = from._impl_.character_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringAttributeTable_StringAttribute::CopyFrom(const StringAttributeTable_StringAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StringAttributeTable.StringAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringAttributeTable_StringAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StringAttributeTable_StringAttribute::InternalSwap(StringAttributeTable_StringAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_, lhs_arena,
      &other->_impl_.object_, rhs_arena
  );
  swap(_impl_.character_index_, other->_impl_.character_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringAttributeTable_StringAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[3]);
}

// ===================================================================

class StringAttributeTable::_Internal {
 public:
};

StringAttributeTable::StringAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.StringAttributeTable)
}
StringAttributeTable::StringAttributeTable(const StringAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringAttributeTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.StringAttributeTable)
}

inline void StringAttributeTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StringAttributeTable::~StringAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.StringAttributeTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void StringAttributeTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StringAttributeTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringAttributeTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringAttributeTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StringAttributeTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StringAttributeTable)
  return target;
}

size_t StringAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StringAttributeTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringAttributeTable::GetClassData() const { return &_class_data_; }


void StringAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringAttributeTable*>(&to_msg);
  auto& from = static_cast<const StringAttributeTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StringAttributeTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringAttributeTable::CopyFrom(const StringAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StringAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringAttributeTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void StringAttributeTable::InternalSwap(StringAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringAttributeTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[4]);
}

// ===================================================================

class ParaDataAttributeTable_ParaDataAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaDataAttributeTable_ParaDataAttribute>()._impl_._has_bits_);
  static void set_has_character_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ParaDataAttributeTable.ParaDataAttribute)
}
ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute(const ParaDataAttributeTable_ParaDataAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParaDataAttributeTable_ParaDataAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_index_){}
    , decltype(_impl_.first_){}
    , decltype(_impl_.second_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.character_index_, &from._impl_.character_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.second_) -
    reinterpret_cast<char*>(&_impl_.character_index_)) + sizeof(_impl_.second_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ParaDataAttributeTable.ParaDataAttribute)
}

inline void ParaDataAttributeTable_ParaDataAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_index_){0u}
    , decltype(_impl_.first_){0u}
    , decltype(_impl_.second_){0u}
  };
}

ParaDataAttributeTable_ParaDataAttribute::~ParaDataAttributeTable_ParaDataAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParaDataAttributeTable_ParaDataAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParaDataAttributeTable_ParaDataAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParaDataAttributeTable_ParaDataAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.character_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.second_) -
        reinterpret_cast<char*>(&_impl_.character_index_)) + sizeof(_impl_.second_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaDataAttributeTable_ParaDataAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 character_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_character_index(&has_bits);
          _impl_.character_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_second(&has_bits);
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParaDataAttributeTable_ParaDataAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 character_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_index(), target);
  }

  // required uint32 first = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_first(), target);
  }

  // required uint32 second = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  return target;
}

size_t ParaDataAttributeTable_ParaDataAttribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  size_t total_size = 0;

  if (_internal_has_character_index()) {
    // required uint32 character_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_character_index());
  }

  if (_internal_has_first()) {
    // required uint32 first = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first());
  }

  if (_internal_has_second()) {
    // required uint32 second = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_second());
  }

  return total_size;
}
size_t ParaDataAttributeTable_ParaDataAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 character_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_character_index());

    // required uint32 first = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first());

    // required uint32 second = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_second());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaDataAttributeTable_ParaDataAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParaDataAttributeTable_ParaDataAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaDataAttributeTable_ParaDataAttribute::GetClassData() const { return &_class_data_; }


void ParaDataAttributeTable_ParaDataAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParaDataAttributeTable_ParaDataAttribute*>(&to_msg);
  auto& from = static_cast<const ParaDataAttributeTable_ParaDataAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.character_index_ = from._impl_.character_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.first_ = from._impl_.first_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.second_ = from._impl_.second_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaDataAttributeTable_ParaDataAttribute::CopyFrom(const ParaDataAttributeTable_ParaDataAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParaDataAttributeTable.ParaDataAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaDataAttributeTable_ParaDataAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ParaDataAttributeTable_ParaDataAttribute::InternalSwap(ParaDataAttributeTable_ParaDataAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, _impl_.second_)
      + sizeof(ParaDataAttributeTable_ParaDataAttribute::_impl_.second_)
      - PROTOBUF_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, _impl_.character_index_)>(
          reinterpret_cast<char*>(&_impl_.character_index_),
          reinterpret_cast<char*>(&other->_impl_.character_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaDataAttributeTable_ParaDataAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[5]);
}

// ===================================================================

class ParaDataAttributeTable::_Internal {
 public:
};

ParaDataAttributeTable::ParaDataAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ParaDataAttributeTable)
}
ParaDataAttributeTable::ParaDataAttributeTable(const ParaDataAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParaDataAttributeTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ParaDataAttributeTable)
}

inline void ParaDataAttributeTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ParaDataAttributeTable::~ParaDataAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.ParaDataAttributeTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParaDataAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void ParaDataAttributeTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParaDataAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParaDataAttributeTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaDataAttributeTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParaDataAttributeTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParaDataAttributeTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParaDataAttributeTable)
  return target;
}

size_t ParaDataAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParaDataAttributeTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParaDataAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParaDataAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParaDataAttributeTable::GetClassData() const { return &_class_data_; }


void ParaDataAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParaDataAttributeTable*>(&to_msg);
  auto& from = static_cast<const ParaDataAttributeTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParaDataAttributeTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParaDataAttributeTable::CopyFrom(const ParaDataAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParaDataAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaDataAttributeTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void ParaDataAttributeTable::InternalSwap(ParaDataAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaDataAttributeTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[6]);
}

// ===================================================================

class SparseObjectAttributeTable_SparseObjectAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseObjectAttributeTable_SparseObjectAttribute>()._impl_._has_bits_);
  static void set_has_character_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& object(const SparseObjectAttributeTable_SparseObjectAttribute* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_run_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSP::Reference&
SparseObjectAttributeTable_SparseObjectAttribute::_Internal::object(const SparseObjectAttributeTable_SparseObjectAttribute* msg) {
  return *msg->_impl_.object_;
}
void SparseObjectAttributeTable_SparseObjectAttribute::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SparseObjectAttributeTable_SparseObjectAttribute::SparseObjectAttributeTable_SparseObjectAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
}
SparseObjectAttributeTable_SparseObjectAttribute::SparseObjectAttributeTable_SparseObjectAttribute(const SparseObjectAttributeTable_SparseObjectAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseObjectAttributeTable_SparseObjectAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.character_index_){}
    , decltype(_impl_.run_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  ::memcpy(&_impl_.character_index_, &from._impl_.character_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.run_length_) -
    reinterpret_cast<char*>(&_impl_.character_index_)) + sizeof(_impl_.run_length_));
  // @@protoc_insertion_point(copy_constructor:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
}

inline void SparseObjectAttributeTable_SparseObjectAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.character_index_){0u}
    , decltype(_impl_.run_length_){0u}
  };
}

SparseObjectAttributeTable_SparseObjectAttribute::~SparseObjectAttributeTable_SparseObjectAttribute() {
  // @@protoc_insertion_point(destructor:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseObjectAttributeTable_SparseObjectAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void SparseObjectAttributeTable_SparseObjectAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseObjectAttributeTable_SparseObjectAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.character_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.run_length_) -
        reinterpret_cast<char*>(&_impl_.character_index_)) + sizeof(_impl_.run_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseObjectAttributeTable_SparseObjectAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 character_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_character_index(&has_bits);
          _impl_.character_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 run_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_run_length(&has_bits);
          _impl_.run_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseObjectAttributeTable_SparseObjectAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 character_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_index(), target);
  }

  // optional .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // required uint32 run_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_run_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  return target;
}

size_t SparseObjectAttributeTable_SparseObjectAttribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  size_t total_size = 0;

  if (_internal_has_character_index()) {
    // required uint32 character_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_character_index());
  }

  if (_internal_has_run_length()) {
    // required uint32 run_length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_run_length());
  }

  return total_size;
}
size_t SparseObjectAttributeTable_SparseObjectAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 character_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_character_index());

    // required uint32 run_length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_run_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference object = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseObjectAttributeTable_SparseObjectAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseObjectAttributeTable_SparseObjectAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseObjectAttributeTable_SparseObjectAttribute::GetClassData() const { return &_class_data_; }


void SparseObjectAttributeTable_SparseObjectAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseObjectAttributeTable_SparseObjectAttribute*>(&to_msg);
  auto& from = static_cast<const SparseObjectAttributeTable_SparseObjectAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.character_index_ = from._impl_.character_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.run_length_ = from._impl_.run_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseObjectAttributeTable_SparseObjectAttribute::CopyFrom(const SparseObjectAttributeTable_SparseObjectAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SparseObjectAttributeTable.SparseObjectAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseObjectAttributeTable_SparseObjectAttribute::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void SparseObjectAttributeTable_SparseObjectAttribute::InternalSwap(SparseObjectAttributeTable_SparseObjectAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseObjectAttributeTable_SparseObjectAttribute, _impl_.run_length_)
      + sizeof(SparseObjectAttributeTable_SparseObjectAttribute::_impl_.run_length_)
      - PROTOBUF_FIELD_OFFSET(SparseObjectAttributeTable_SparseObjectAttribute, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseObjectAttributeTable_SparseObjectAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[7]);
}

// ===================================================================

class SparseObjectAttributeTable::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseObjectAttributeTable>()._impl_._has_bits_);
  static void set_has_total_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SparseObjectAttributeTable::SparseObjectAttributeTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.SparseObjectAttributeTable)
}
SparseObjectAttributeTable::SparseObjectAttributeTable(const SparseObjectAttributeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SparseObjectAttributeTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.total_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_count_ = from._impl_.total_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.SparseObjectAttributeTable)
}

inline void SparseObjectAttributeTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.total_count_){0u}
  };
}

SparseObjectAttributeTable::~SparseObjectAttributeTable() {
  // @@protoc_insertion_point(destructor:TSWP.SparseObjectAttributeTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseObjectAttributeTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void SparseObjectAttributeTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SparseObjectAttributeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.SparseObjectAttributeTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.total_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseObjectAttributeTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 total_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_total_count(&has_bits);
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.SparseObjectAttributeTable.SparseObjectAttribute entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseObjectAttributeTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.SparseObjectAttributeTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 total_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_count(), target);
  }

  // repeated .TSWP.SparseObjectAttributeTable.SparseObjectAttribute entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.SparseObjectAttributeTable)
  return target;
}

size_t SparseObjectAttributeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.SparseObjectAttributeTable)
  size_t total_size = 0;

  // required uint32 total_count = 1;
  if (_internal_has_total_count()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.SparseObjectAttributeTable.SparseObjectAttribute entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseObjectAttributeTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SparseObjectAttributeTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseObjectAttributeTable::GetClassData() const { return &_class_data_; }


void SparseObjectAttributeTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SparseObjectAttributeTable*>(&to_msg);
  auto& from = static_cast<const SparseObjectAttributeTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.SparseObjectAttributeTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_has_total_count()) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseObjectAttributeTable::CopyFrom(const SparseObjectAttributeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.SparseObjectAttributeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseObjectAttributeTable::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void SparseObjectAttributeTable::InternalSwap(SparseObjectAttributeTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.total_count_, other->_impl_.total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseObjectAttributeTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[8]);
}

// ===================================================================

class StorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StorageArchive>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Reference& style_sheet(const StorageArchive* msg);
  static void set_has_style_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_itext(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_in_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSWP::ObjectAttributeTable& table_para_style(const StorageArchive* msg);
  static void set_has_table_para_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::ParaDataAttributeTable& table_para_data(const StorageArchive* msg);
  static void set_has_table_para_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::ObjectAttributeTable& table_list_style(const StorageArchive* msg);
  static void set_has_table_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSWP::ObjectAttributeTable& table_char_style(const StorageArchive* msg);
  static void set_has_table_char_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::ObjectAttributeTable& table_attachment(const StorageArchive* msg);
  static void set_has_table_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::ObjectAttributeTable& table_smartfield(const StorageArchive* msg);
  static void set_has_table_smartfield(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::ObjectAttributeTable& table_layout_style(const StorageArchive* msg);
  static void set_has_table_layout_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSWP::ParaDataAttributeTable& table_para_starts(const StorageArchive* msg);
  static void set_has_table_para_starts(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSWP::ObjectAttributeTable& table_bookmark(const StorageArchive* msg);
  static void set_has_table_bookmark(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSWP::ObjectAttributeTable& table_footnote(const StorageArchive* msg);
  static void set_has_table_footnote(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSWP::ObjectAttributeTable& table_section(const StorageArchive* msg);
  static void set_has_table_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSWP::ObjectAttributeTable& table_rubyfield(const StorageArchive* msg);
  static void set_has_table_rubyfield(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSWP::StringAttributeTable& table_language(const StorageArchive* msg);
  static void set_has_table_language(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSWP::StringAttributeTable& table_dictation(const StorageArchive* msg);
  static void set_has_table_dictation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSWP::ObjectAttributeTable& table_insertion(const StorageArchive* msg);
  static void set_has_table_insertion(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSWP::ObjectAttributeTable& table_deletion(const StorageArchive* msg);
  static void set_has_table_deletion(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSWP::ObjectAttributeTable& table_highlight(const StorageArchive* msg);
  static void set_has_table_highlight(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSWP::ParaDataAttributeTable& table_para_bidi(const StorageArchive* msg);
  static void set_has_table_para_bidi(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::TSP::Reference&
StorageArchive::_Internal::style_sheet(const StorageArchive* msg) {
  return *msg->_impl_.style_sheet_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_para_style(const StorageArchive* msg) {
  return *msg->_impl_.table_para_style_;
}
const ::TSWP::ParaDataAttributeTable&
StorageArchive::_Internal::table_para_data(const StorageArchive* msg) {
  return *msg->_impl_.table_para_data_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_list_style(const StorageArchive* msg) {
  return *msg->_impl_.table_list_style_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_char_style(const StorageArchive* msg) {
  return *msg->_impl_.table_char_style_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_attachment(const StorageArchive* msg) {
  return *msg->_impl_.table_attachment_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_smartfield(const StorageArchive* msg) {
  return *msg->_impl_.table_smartfield_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_layout_style(const StorageArchive* msg) {
  return *msg->_impl_.table_layout_style_;
}
const ::TSWP::ParaDataAttributeTable&
StorageArchive::_Internal::table_para_starts(const StorageArchive* msg) {
  return *msg->_impl_.table_para_starts_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_bookmark(const StorageArchive* msg) {
  return *msg->_impl_.table_bookmark_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_footnote(const StorageArchive* msg) {
  return *msg->_impl_.table_footnote_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_section(const StorageArchive* msg) {
  return *msg->_impl_.table_section_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_rubyfield(const StorageArchive* msg) {
  return *msg->_impl_.table_rubyfield_;
}
const ::TSWP::StringAttributeTable&
StorageArchive::_Internal::table_language(const StorageArchive* msg) {
  return *msg->_impl_.table_language_;
}
const ::TSWP::StringAttributeTable&
StorageArchive::_Internal::table_dictation(const StorageArchive* msg) {
  return *msg->_impl_.table_dictation_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_insertion(const StorageArchive* msg) {
  return *msg->_impl_.table_insertion_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_deletion(const StorageArchive* msg) {
  return *msg->_impl_.table_deletion_;
}
const ::TSWP::ObjectAttributeTable&
StorageArchive::_Internal::table_highlight(const StorageArchive* msg) {
  return *msg->_impl_.table_highlight_;
}
const ::TSWP::ParaDataAttributeTable&
StorageArchive::_Internal::table_para_bidi(const StorageArchive* msg) {
  return *msg->_impl_.table_para_bidi_;
}
void StorageArchive::clear_style_sheet() {
  if (_impl_.style_sheet_ != nullptr) _impl_.style_sheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StorageArchive::StorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.StorageArchive)
}
StorageArchive::StorageArchive(const StorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StorageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){from._impl_.text_}
    , decltype(_impl_.style_sheet_){nullptr}
    , decltype(_impl_.table_para_style_){nullptr}
    , decltype(_impl_.table_para_data_){nullptr}
    , decltype(_impl_.table_list_style_){nullptr}
    , decltype(_impl_.table_char_style_){nullptr}
    , decltype(_impl_.table_attachment_){nullptr}
    , decltype(_impl_.table_smartfield_){nullptr}
    , decltype(_impl_.table_layout_style_){nullptr}
    , decltype(_impl_.table_para_starts_){nullptr}
    , decltype(_impl_.table_bookmark_){nullptr}
    , decltype(_impl_.table_footnote_){nullptr}
    , decltype(_impl_.table_section_){nullptr}
    , decltype(_impl_.table_rubyfield_){nullptr}
    , decltype(_impl_.table_language_){nullptr}
    , decltype(_impl_.table_dictation_){nullptr}
    , decltype(_impl_.table_insertion_){nullptr}
    , decltype(_impl_.table_deletion_){nullptr}
    , decltype(_impl_.table_highlight_){nullptr}
    , decltype(_impl_.table_para_bidi_){nullptr}
    , decltype(_impl_.has_itext_){}
    , decltype(_impl_.in_document_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_style_sheet()) {
    _this->_impl_.style_sheet_ = new ::TSP::Reference(*from._impl_.style_sheet_);
  }
  if (from._internal_has_table_para_style()) {
    _this->_impl_.table_para_style_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_para_style_);
  }
  if (from._internal_has_table_para_data()) {
    _this->_impl_.table_para_data_ = new ::TSWP::ParaDataAttributeTable(*from._impl_.table_para_data_);
  }
  if (from._internal_has_table_list_style()) {
    _this->_impl_.table_list_style_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_list_style_);
  }
  if (from._internal_has_table_char_style()) {
    _this->_impl_.table_char_style_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_char_style_);
  }
  if (from._internal_has_table_attachment()) {
    _this->_impl_.table_attachment_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_attachment_);
  }
  if (from._internal_has_table_smartfield()) {
    _this->_impl_.table_smartfield_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_smartfield_);
  }
  if (from._internal_has_table_layout_style()) {
    _this->_impl_.table_layout_style_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_layout_style_);
  }
  if (from._internal_has_table_para_starts()) {
    _this->_impl_.table_para_starts_ = new ::TSWP::ParaDataAttributeTable(*from._impl_.table_para_starts_);
  }
  if (from._internal_has_table_bookmark()) {
    _this->_impl_.table_bookmark_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_bookmark_);
  }
  if (from._internal_has_table_footnote()) {
    _this->_impl_.table_footnote_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_footnote_);
  }
  if (from._internal_has_table_section()) {
    _this->_impl_.table_section_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_section_);
  }
  if (from._internal_has_table_rubyfield()) {
    _this->_impl_.table_rubyfield_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_rubyfield_);
  }
  if (from._internal_has_table_language()) {
    _this->_impl_.table_language_ = new ::TSWP::StringAttributeTable(*from._impl_.table_language_);
  }
  if (from._internal_has_table_dictation()) {
    _this->_impl_.table_dictation_ = new ::TSWP::StringAttributeTable(*from._impl_.table_dictation_);
  }
  if (from._internal_has_table_insertion()) {
    _this->_impl_.table_insertion_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_insertion_);
  }
  if (from._internal_has_table_deletion()) {
    _this->_impl_.table_deletion_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_deletion_);
  }
  if (from._internal_has_table_highlight()) {
    _this->_impl_.table_highlight_ = new ::TSWP::ObjectAttributeTable(*from._impl_.table_highlight_);
  }
  if (from._internal_has_table_para_bidi()) {
    _this->_impl_.table_para_bidi_ = new ::TSWP::ParaDataAttributeTable(*from._impl_.table_para_bidi_);
  }
  ::memcpy(&_impl_.has_itext_, &from._impl_.has_itext_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.has_itext_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:TSWP.StorageArchive)
}

inline void StorageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){arena}
    , decltype(_impl_.style_sheet_){nullptr}
    , decltype(_impl_.table_para_style_){nullptr}
    , decltype(_impl_.table_para_data_){nullptr}
    , decltype(_impl_.table_list_style_){nullptr}
    , decltype(_impl_.table_char_style_){nullptr}
    , decltype(_impl_.table_attachment_){nullptr}
    , decltype(_impl_.table_smartfield_){nullptr}
    , decltype(_impl_.table_layout_style_){nullptr}
    , decltype(_impl_.table_para_starts_){nullptr}
    , decltype(_impl_.table_bookmark_){nullptr}
    , decltype(_impl_.table_footnote_){nullptr}
    , decltype(_impl_.table_section_){nullptr}
    , decltype(_impl_.table_rubyfield_){nullptr}
    , decltype(_impl_.table_language_){nullptr}
    , decltype(_impl_.table_dictation_){nullptr}
    , decltype(_impl_.table_insertion_){nullptr}
    , decltype(_impl_.table_deletion_){nullptr}
    , decltype(_impl_.table_highlight_){nullptr}
    , decltype(_impl_.table_para_bidi_){nullptr}
    , decltype(_impl_.has_itext_){false}
    , decltype(_impl_.in_document_){false}
    , decltype(_impl_.kind_){3}
  };
}

StorageArchive::~StorageArchive() {
  // @@protoc_insertion_point(destructor:TSWP.StorageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.style_sheet_;
  if (this != internal_default_instance()) delete _impl_.table_para_style_;
  if (this != internal_default_instance()) delete _impl_.table_para_data_;
  if (this != internal_default_instance()) delete _impl_.table_list_style_;
  if (this != internal_default_instance()) delete _impl_.table_char_style_;
  if (this != internal_default_instance()) delete _impl_.table_attachment_;
  if (this != internal_default_instance()) delete _impl_.table_smartfield_;
  if (this != internal_default_instance()) delete _impl_.table_layout_style_;
  if (this != internal_default_instance()) delete _impl_.table_para_starts_;
  if (this != internal_default_instance()) delete _impl_.table_bookmark_;
  if (this != internal_default_instance()) delete _impl_.table_footnote_;
  if (this != internal_default_instance()) delete _impl_.table_section_;
  if (this != internal_default_instance()) delete _impl_.table_rubyfield_;
  if (this != internal_default_instance()) delete _impl_.table_language_;
  if (this != internal_default_instance()) delete _impl_.table_dictation_;
  if (this != internal_default_instance()) delete _impl_.table_insertion_;
  if (this != internal_default_instance()) delete _impl_.table_deletion_;
  if (this != internal_default_instance()) delete _impl_.table_highlight_;
  if (this != internal_default_instance()) delete _impl_.table_para_bidi_;
}

void StorageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.StorageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.style_sheet_ != nullptr);
      _impl_.style_sheet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_para_style_ != nullptr);
      _impl_.table_para_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.table_para_data_ != nullptr);
      _impl_.table_para_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.table_list_style_ != nullptr);
      _impl_.table_list_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_char_style_ != nullptr);
      _impl_.table_char_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.table_attachment_ != nullptr);
      _impl_.table_attachment_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.table_smartfield_ != nullptr);
      _impl_.table_smartfield_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.table_layout_style_ != nullptr);
      _impl_.table_layout_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.table_para_starts_ != nullptr);
      _impl_.table_para_starts_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.table_bookmark_ != nullptr);
      _impl_.table_bookmark_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.table_footnote_ != nullptr);
      _impl_.table_footnote_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.table_section_ != nullptr);
      _impl_.table_section_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.table_rubyfield_ != nullptr);
      _impl_.table_rubyfield_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.table_language_ != nullptr);
      _impl_.table_language_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.table_dictation_ != nullptr);
      _impl_.table_dictation_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.table_insertion_ != nullptr);
      _impl_.table_insertion_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.table_deletion_ != nullptr);
      _impl_.table_deletion_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.table_highlight_ != nullptr);
      _impl_.table_highlight_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.table_para_bidi_ != nullptr);
      _impl_.table_para_bidi_->Clear();
    }
  }
  ::memset(&_impl_.has_itext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.in_document_) -
      reinterpret_cast<char*>(&_impl_.has_itext_)) + sizeof(_impl_.in_document_));
  _impl_.kind_ = 3;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::StorageArchive_KindType_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::StorageArchive_KindType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style_sheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_sheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_text();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSWP.StorageArchive.text");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool has_itext = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_has_itext(&has_bits);
          _impl_.has_itext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_para_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_list_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_list_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_char_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_char_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_attachment = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_attachment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_document = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_in_document(&has_bits);
          _impl_.in_document_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_smartfield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_layout_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_starts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_bookmark(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_footnote = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_footnote(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_section = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_section(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_rubyfield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.StringAttributeTable table_language = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_language(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.StringAttributeTable table_dictation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_dictation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_insertion = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_insertion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_deletion = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_deletion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ObjectAttributeTable table_highlight = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_highlight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_para_bidi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.StorageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional .TSP.Reference style_sheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::style_sheet(this),
        _Internal::style_sheet(this).GetCachedSize(), target, stream);
  }

  // repeated string text = 3;
  for (int i = 0, n = this->_internal_text_size(); i < n; i++) {
    const auto& s = this->_internal_text(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.StorageArchive.text");
    target = stream->WriteString(3, s, target);
  }

  // optional bool has_itext = 4 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_itext(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_para_style = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::table_para_style(this),
        _Internal::table_para_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::table_para_data(this),
        _Internal::table_para_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_list_style = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::table_list_style(this),
        _Internal::table_list_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_char_style = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::table_char_style(this),
        _Internal::table_char_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_attachment = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::table_attachment(this),
        _Internal::table_attachment(this).GetCachedSize(), target, stream);
  }

  // optional bool in_document = 10 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_in_document(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::table_smartfield(this),
        _Internal::table_smartfield(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::table_layout_style(this),
        _Internal::table_layout_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::table_para_starts(this),
        _Internal::table_para_starts(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::table_bookmark(this),
        _Internal::table_bookmark(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_footnote = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::table_footnote(this),
        _Internal::table_footnote(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_section = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::table_section(this),
        _Internal::table_section(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::table_rubyfield(this),
        _Internal::table_rubyfield(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.StringAttributeTable table_language = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::table_language(this),
        _Internal::table_language(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.StringAttributeTable table_dictation = 20;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::table_dictation(this),
        _Internal::table_dictation(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_insertion = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::table_insertion(this),
        _Internal::table_insertion(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_deletion = 22;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::table_deletion(this),
        _Internal::table_deletion(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ObjectAttributeTable table_highlight = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::table_highlight(this),
        _Internal::table_highlight(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::table_para_bidi(this),
        _Internal::table_para_bidi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.StorageArchive)
  return target;
}

size_t StorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.StorageArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string text = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.text_.size());
  for (int i = 0, n = _impl_.text_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.text_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference style_sheet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_sheet_);
    }

    // optional .TSWP.ObjectAttributeTable table_para_style = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_para_style_);
    }

    // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_para_data_);
    }

    // optional .TSWP.ObjectAttributeTable table_list_style = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_list_style_);
    }

    // optional .TSWP.ObjectAttributeTable table_char_style = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_char_style_);
    }

    // optional .TSWP.ObjectAttributeTable table_attachment = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_attachment_);
    }

    // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_smartfield_);
    }

    // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_layout_style_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_para_starts_);
    }

    // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_bookmark_);
    }

    // optional .TSWP.ObjectAttributeTable table_footnote = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_footnote_);
    }

    // optional .TSWP.ObjectAttributeTable table_section = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_section_);
    }

    // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_rubyfield_);
    }

    // optional .TSWP.StringAttributeTable table_language = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_language_);
    }

    // optional .TSWP.StringAttributeTable table_dictation = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_dictation_);
    }

    // optional .TSWP.ObjectAttributeTable table_insertion = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_insertion_);
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional .TSWP.ObjectAttributeTable table_deletion = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_deletion_);
    }

    // optional .TSWP.ObjectAttributeTable table_highlight = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_highlight_);
    }

    // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_para_bidi_);
    }

    // optional bool has_itext = 4 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool in_document = 10 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StorageArchive::GetClassData() const { return &_class_data_; }


void StorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StorageArchive*>(&to_msg);
  auto& from = static_cast<const StorageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.StorageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.text_.MergeFrom(from._impl_.text_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_style_sheet()->::TSP::Reference::MergeFrom(
          from._internal_style_sheet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_para_style()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_para_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_table_para_data()->::TSWP::ParaDataAttributeTable::MergeFrom(
          from._internal_table_para_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_table_list_style()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_list_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_char_style()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_char_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_table_attachment()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_attachment());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_table_smartfield()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_smartfield());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_table_layout_style()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_layout_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_table_para_starts()->::TSWP::ParaDataAttributeTable::MergeFrom(
          from._internal_table_para_starts());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_table_bookmark()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_bookmark());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_table_footnote()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_footnote());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_table_section()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_section());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_table_rubyfield()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_rubyfield());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_table_language()->::TSWP::StringAttributeTable::MergeFrom(
          from._internal_table_language());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_table_dictation()->::TSWP::StringAttributeTable::MergeFrom(
          from._internal_table_dictation());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_table_insertion()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_insertion());
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_table_deletion()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_deletion());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_table_highlight()->::TSWP::ObjectAttributeTable::MergeFrom(
          from._internal_table_highlight());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_table_para_bidi()->::TSWP::ParaDataAttributeTable::MergeFrom(
          from._internal_table_para_bidi());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.has_itext_ = from._impl_.has_itext_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.in_document_ = from._impl_.in_document_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StorageArchive::CopyFrom(const StorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.StorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageArchive::IsInitialized() const {
  if (_internal_has_style_sheet()) {
    if (!_impl_.style_sheet_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_style()) {
    if (!_impl_.table_para_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_data()) {
    if (!_impl_.table_para_data_->IsInitialized()) return false;
  }
  if (_internal_has_table_list_style()) {
    if (!_impl_.table_list_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_char_style()) {
    if (!_impl_.table_char_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_attachment()) {
    if (!_impl_.table_attachment_->IsInitialized()) return false;
  }
  if (_internal_has_table_smartfield()) {
    if (!_impl_.table_smartfield_->IsInitialized()) return false;
  }
  if (_internal_has_table_layout_style()) {
    if (!_impl_.table_layout_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_starts()) {
    if (!_impl_.table_para_starts_->IsInitialized()) return false;
  }
  if (_internal_has_table_bookmark()) {
    if (!_impl_.table_bookmark_->IsInitialized()) return false;
  }
  if (_internal_has_table_footnote()) {
    if (!_impl_.table_footnote_->IsInitialized()) return false;
  }
  if (_internal_has_table_section()) {
    if (!_impl_.table_section_->IsInitialized()) return false;
  }
  if (_internal_has_table_rubyfield()) {
    if (!_impl_.table_rubyfield_->IsInitialized()) return false;
  }
  if (_internal_has_table_language()) {
    if (!_impl_.table_language_->IsInitialized()) return false;
  }
  if (_internal_has_table_dictation()) {
    if (!_impl_.table_dictation_->IsInitialized()) return false;
  }
  if (_internal_has_table_insertion()) {
    if (!_impl_.table_insertion_->IsInitialized()) return false;
  }
  if (_internal_has_table_deletion()) {
    if (!_impl_.table_deletion_->IsInitialized()) return false;
  }
  if (_internal_has_table_highlight()) {
    if (!_impl_.table_highlight_->IsInitialized()) return false;
  }
  if (_internal_has_table_para_bidi()) {
    if (!_impl_.table_para_bidi_->IsInitialized()) return false;
  }
  return true;
}

void StorageArchive::InternalSwap(StorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.text_.InternalSwap(&other->_impl_.text_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StorageArchive, _impl_.in_document_)
      + sizeof(StorageArchive::_impl_.in_document_)
      - PROTOBUF_FIELD_OFFSET(StorageArchive, _impl_.style_sheet_)>(
          reinterpret_cast<char*>(&_impl_.style_sheet_),
          reinterpret_cast<char*>(&other->_impl_.style_sheet_));
  swap(_impl_.kind_, other->_impl_.kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[9]);
}

// ===================================================================

class HighlightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HighlightArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& commentstorage(const HighlightArchive* msg);
  static void set_has_commentstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
HighlightArchive::_Internal::commentstorage(const HighlightArchive* msg) {
  return *msg->_impl_.commentstorage_;
}
void HighlightArchive::clear_commentstorage() {
  if (_impl_.commentstorage_ != nullptr) _impl_.commentstorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HighlightArchive::HighlightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.HighlightArchive)
}
HighlightArchive::HighlightArchive(const HighlightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HighlightArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commentstorage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commentstorage()) {
    _this->_impl_.commentstorage_ = new ::TSP::Reference(*from._impl_.commentstorage_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.HighlightArchive)
}

inline void HighlightArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commentstorage_){nullptr}
  };
}

HighlightArchive::~HighlightArchive() {
  // @@protoc_insertion_point(destructor:TSWP.HighlightArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HighlightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.commentstorage_;
}

void HighlightArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HighlightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.HighlightArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.commentstorage_ != nullptr);
    _impl_.commentstorage_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HighlightArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference commentStorage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commentstorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HighlightArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.HighlightArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference commentStorage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::commentstorage(this),
        _Internal::commentstorage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.HighlightArchive)
  return target;
}

size_t HighlightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.HighlightArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference commentStorage = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commentstorage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HighlightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HighlightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HighlightArchive::GetClassData() const { return &_class_data_; }


void HighlightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HighlightArchive*>(&to_msg);
  auto& from = static_cast<const HighlightArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.HighlightArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_commentstorage()) {
    _this->_internal_mutable_commentstorage()->::TSP::Reference::MergeFrom(
        from._internal_commentstorage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HighlightArchive::CopyFrom(const HighlightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.HighlightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighlightArchive::IsInitialized() const {
  if (_internal_has_commentstorage()) {
    if (!_impl_.commentstorage_->IsInitialized()) return false;
  }
  return true;
}

void HighlightArchive::InternalSwap(HighlightArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.commentstorage_, other->_impl_.commentstorage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HighlightArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[10]);
}

// ===================================================================

class FontFeatureArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FontFeatureArchive>()._impl_._has_bits_);
  static void set_has_feature_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_feature_selector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FontFeatureArchive::FontFeatureArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.FontFeatureArchive)
}
FontFeatureArchive::FontFeatureArchive(const FontFeatureArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FontFeatureArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feature_type_){}
    , decltype(_impl_.feature_selector_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.feature_type_, &from._impl_.feature_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.feature_selector_) -
    reinterpret_cast<char*>(&_impl_.feature_type_)) + sizeof(_impl_.feature_selector_));
  // @@protoc_insertion_point(copy_constructor:TSWP.FontFeatureArchive)
}

inline void FontFeatureArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feature_type_){0u}
    , decltype(_impl_.feature_selector_){0u}
  };
}

FontFeatureArchive::~FontFeatureArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FontFeatureArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FontFeatureArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FontFeatureArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FontFeatureArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FontFeatureArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.feature_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.feature_selector_) -
        reinterpret_cast<char*>(&_impl_.feature_type_)) + sizeof(_impl_.feature_selector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FontFeatureArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 feature_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_feature_type(&has_bits);
          _impl_.feature_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 feature_selector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_feature_selector(&has_bits);
          _impl_.feature_selector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontFeatureArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FontFeatureArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 feature_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_feature_type(), target);
  }

  // required uint32 feature_selector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_feature_selector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FontFeatureArchive)
  return target;
}

size_t FontFeatureArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.FontFeatureArchive)
  size_t total_size = 0;

  if (_internal_has_feature_type()) {
    // required uint32 feature_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_feature_type());
  }

  if (_internal_has_feature_selector()) {
    // required uint32 feature_selector = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_feature_selector());
  }

  return total_size;
}
size_t FontFeatureArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FontFeatureArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 feature_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_feature_type());

    // required uint32 feature_selector = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_feature_selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FontFeatureArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FontFeatureArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FontFeatureArchive::GetClassData() const { return &_class_data_; }


void FontFeatureArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FontFeatureArchive*>(&to_msg);
  auto& from = static_cast<const FontFeatureArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FontFeatureArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.feature_type_ = from._impl_.feature_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.feature_selector_ = from._impl_.feature_selector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FontFeatureArchive::CopyFrom(const FontFeatureArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FontFeatureArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontFeatureArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FontFeatureArchive::InternalSwap(FontFeatureArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FontFeatureArchive, _impl_.feature_selector_)
      + sizeof(FontFeatureArchive::_impl_.feature_selector_)
      - PROTOBUF_FIELD_OFFSET(FontFeatureArchive, _impl_.feature_type_)>(
          reinterpret_cast<char*>(&_impl_.feature_type_),
          reinterpret_cast<char*>(&other->_impl_.feature_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FontFeatureArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[11]);
}

// ===================================================================

class CharacterStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterStylePropertiesArchive>()._impl_._has_bits_);
  static void set_has_bold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_italic(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_font_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_font_name_null(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_font_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Color& font_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_font_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_superscript(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_underline(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_strikethru(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_capitalization(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_baseline_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_kerning(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ligatures(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_outline_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Color& outline_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_outline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_outline(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_shadow_null(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSD::ShadowArchive& shadow(const CharacterStylePropertiesArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_strikethru_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Color& strikethru_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_strikethru_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_strikethru_width(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_background_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Color& background_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_underline_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSP::Color& underline_color(const CharacterStylePropertiesArchive* msg);
  static void set_has_underline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_underline_width(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_word_strikethru(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_word_underline(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_font_features_null(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_emphasis_marks_null(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_emphasis_marks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compatibility_font_name_null(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_compatibility_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::font_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->_impl_.font_color_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::outline_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->_impl_.outline_color_;
}
const ::TSD::ShadowArchive&
CharacterStylePropertiesArchive::_Internal::shadow(const CharacterStylePropertiesArchive* msg) {
  return *msg->_impl_.shadow_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::strikethru_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->_impl_.strikethru_color_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::background_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->_impl_.background_color_;
}
const ::TSP::Color&
CharacterStylePropertiesArchive::_Internal::underline_color(const CharacterStylePropertiesArchive* msg) {
  return *msg->_impl_.underline_color_;
}
void CharacterStylePropertiesArchive::clear_font_color() {
  if (_impl_.font_color_ != nullptr) _impl_.font_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CharacterStylePropertiesArchive::clear_outline_color() {
  if (_impl_.outline_color_ != nullptr) _impl_.outline_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CharacterStylePropertiesArchive::clear_shadow() {
  if (_impl_.shadow_ != nullptr) _impl_.shadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CharacterStylePropertiesArchive::clear_strikethru_color() {
  if (_impl_.strikethru_color_ != nullptr) _impl_.strikethru_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CharacterStylePropertiesArchive::clear_background_color() {
  if (_impl_.background_color_ != nullptr) _impl_.background_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CharacterStylePropertiesArchive::clear_underline_color() {
  if (_impl_.underline_color_ != nullptr) _impl_.underline_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
CharacterStylePropertiesArchive::CharacterStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.CharacterStylePropertiesArchive)
}
CharacterStylePropertiesArchive::CharacterStylePropertiesArchive(const CharacterStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.font_features_){from._impl_.font_features_}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.emphasis_marks_){}
    , decltype(_impl_.compatibility_font_name_){}
    , decltype(_impl_.font_color_){nullptr}
    , decltype(_impl_.outline_color_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.strikethru_color_){nullptr}
    , decltype(_impl_.background_color_){nullptr}
    , decltype(_impl_.underline_color_){nullptr}
    , decltype(_impl_.font_size_){}
    , decltype(_impl_.bold_){}
    , decltype(_impl_.italic_){}
    , decltype(_impl_.font_name_null_){}
    , decltype(_impl_.font_color_null_){}
    , decltype(_impl_.superscript_){}
    , decltype(_impl_.underline_){}
    , decltype(_impl_.strikethru_){}
    , decltype(_impl_.capitalization_){}
    , decltype(_impl_.baseline_shift_){}
    , decltype(_impl_.kerning_){}
    , decltype(_impl_.ligatures_){}
    , decltype(_impl_.language_null_){}
    , decltype(_impl_.outline_color_null_){}
    , decltype(_impl_.shadow_null_){}
    , decltype(_impl_.strikethru_color_null_){}
    , decltype(_impl_.outline_){}
    , decltype(_impl_.strikethru_width_){}
    , decltype(_impl_.tracking_){}
    , decltype(_impl_.background_color_null_){}
    , decltype(_impl_.underline_color_null_){}
    , decltype(_impl_.word_strikethru_){}
    , decltype(_impl_.word_underline_){}
    , decltype(_impl_.underline_width_){}
    , decltype(_impl_.font_features_null_){}
    , decltype(_impl_.emphasis_marks_null_){}
    , decltype(_impl_.compatibility_font_name_null_){}
    , decltype(_impl_.writing_direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_font_name()) {
    _this->_impl_.font_name_.Set(from._internal_font_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.emphasis_marks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emphasis_marks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_emphasis_marks()) {
    _this->_impl_.emphasis_marks_.Set(from._internal_emphasis_marks(), 
      _this->GetArenaForAllocation());
  }
  _impl_.compatibility_font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compatibility_font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_compatibility_font_name()) {
    _this->_impl_.compatibility_font_name_.Set(from._internal_compatibility_font_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_font_color()) {
    _this->_impl_.font_color_ = new ::TSP::Color(*from._impl_.font_color_);
  }
  if (from._internal_has_outline_color()) {
    _this->_impl_.outline_color_ = new ::TSP::Color(*from._impl_.outline_color_);
  }
  if (from._internal_has_shadow()) {
    _this->_impl_.shadow_ = new ::TSD::ShadowArchive(*from._impl_.shadow_);
  }
  if (from._internal_has_strikethru_color()) {
    _this->_impl_.strikethru_color_ = new ::TSP::Color(*from._impl_.strikethru_color_);
  }
  if (from._internal_has_background_color()) {
    _this->_impl_.background_color_ = new ::TSP::Color(*from._impl_.background_color_);
  }
  if (from._internal_has_underline_color()) {
    _this->_impl_.underline_color_ = new ::TSP::Color(*from._impl_.underline_color_);
  }
  ::memcpy(&_impl_.font_size_, &from._impl_.font_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.writing_direction_) -
    reinterpret_cast<char*>(&_impl_.font_size_)) + sizeof(_impl_.writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.CharacterStylePropertiesArchive)
}

inline void CharacterStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.font_features_){arena}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.emphasis_marks_){}
    , decltype(_impl_.compatibility_font_name_){}
    , decltype(_impl_.font_color_){nullptr}
    , decltype(_impl_.outline_color_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.strikethru_color_){nullptr}
    , decltype(_impl_.background_color_){nullptr}
    , decltype(_impl_.underline_color_){nullptr}
    , decltype(_impl_.font_size_){0}
    , decltype(_impl_.bold_){false}
    , decltype(_impl_.italic_){false}
    , decltype(_impl_.font_name_null_){false}
    , decltype(_impl_.font_color_null_){false}
    , decltype(_impl_.superscript_){0}
    , decltype(_impl_.underline_){0}
    , decltype(_impl_.strikethru_){0}
    , decltype(_impl_.capitalization_){0}
    , decltype(_impl_.baseline_shift_){0}
    , decltype(_impl_.kerning_){0}
    , decltype(_impl_.ligatures_){0}
    , decltype(_impl_.language_null_){false}
    , decltype(_impl_.outline_color_null_){false}
    , decltype(_impl_.shadow_null_){false}
    , decltype(_impl_.strikethru_color_null_){false}
    , decltype(_impl_.outline_){0}
    , decltype(_impl_.strikethru_width_){0}
    , decltype(_impl_.tracking_){0}
    , decltype(_impl_.background_color_null_){false}
    , decltype(_impl_.underline_color_null_){false}
    , decltype(_impl_.word_strikethru_){false}
    , decltype(_impl_.word_underline_){false}
    , decltype(_impl_.underline_width_){0}
    , decltype(_impl_.font_features_null_){false}
    , decltype(_impl_.emphasis_marks_null_){false}
    , decltype(_impl_.compatibility_font_name_null_){false}
    , decltype(_impl_.writing_direction_){-1}
  };
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.emphasis_marks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.emphasis_marks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.compatibility_font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compatibility_font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CharacterStylePropertiesArchive::~CharacterStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CharacterStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.font_features_.~RepeatedPtrField();
  _impl_.font_name_.Destroy();
  _impl_.language_.Destroy();
  _impl_.emphasis_marks_.Destroy();
  _impl_.compatibility_font_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.font_color_;
  if (this != internal_default_instance()) delete _impl_.outline_color_;
  if (this != internal_default_instance()) delete _impl_.shadow_;
  if (this != internal_default_instance()) delete _impl_.strikethru_color_;
  if (this != internal_default_instance()) delete _impl_.background_color_;
  if (this != internal_default_instance()) delete _impl_.underline_color_;
}

void CharacterStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CharacterStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.font_features_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.emphasis_marks_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.compatibility_font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.font_color_ != nullptr);
      _impl_.font_color_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.outline_color_ != nullptr);
      _impl_.outline_color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.shadow_ != nullptr);
      _impl_.shadow_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.strikethru_color_ != nullptr);
      _impl_.strikethru_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.background_color_ != nullptr);
      _impl_.background_color_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.underline_color_ != nullptr);
      _impl_.underline_color_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.font_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.superscript_) -
        reinterpret_cast<char*>(&_impl_.font_size_)) + sizeof(_impl_.superscript_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.underline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.outline_color_null_) -
        reinterpret_cast<char*>(&_impl_.underline_)) + sizeof(_impl_.outline_color_null_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.shadow_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.word_strikethru_) -
        reinterpret_cast<char*>(&_impl_.shadow_null_)) + sizeof(_impl_.word_strikethru_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.word_underline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.compatibility_font_name_null_) -
        reinterpret_cast<char*>(&_impl_.word_underline_)) + sizeof(_impl_.compatibility_font_name_null_));
    _impl_.writing_direction_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bold(&_impl_._has_bits_);
          _impl_.bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool italic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_italic(&_impl_._has_bits_);
          _impl_.italic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float font_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_font_size(&_impl_._has_bits_);
          _impl_.font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool font_name_null = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_font_name_null(&_impl_._has_bits_);
          _impl_.font_name_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string font_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_font_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.font_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool font_color_null = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_font_color_null(&_impl_._has_bits_);
          _impl_.font_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color font_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_font_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool language_null = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_language_null(&_impl_._has_bits_);
          _impl_.language_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_SuperscriptType_IsValid(val))) {
            _internal_set_superscript(static_cast<::TSWP::CharacterStylePropertiesArchive_SuperscriptType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_UnderlineType_IsValid(val))) {
            _internal_set_underline(static_cast<::TSWP::CharacterStylePropertiesArchive_UnderlineType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_StrikethruType_IsValid(val))) {
            _internal_set_strikethru(static_cast<::TSWP::CharacterStylePropertiesArchive_StrikethruType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_CapitalizationType_IsValid(val))) {
            _internal_set_capitalization(static_cast<::TSWP::CharacterStylePropertiesArchive_CapitalizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float baseline_shift = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_baseline_shift(&_impl_._has_bits_);
          _impl_.baseline_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float kerning = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_kerning(&_impl_._has_bits_);
          _impl_.kerning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::CharacterStylePropertiesArchive_LigaturesType_IsValid(val))) {
            _internal_set_ligatures(static_cast<::TSWP::CharacterStylePropertiesArchive_LigaturesType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool outline_color_null = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_outline_color_null(&_impl_._has_bits_);
          _impl_.outline_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color outline_color = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float outline = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_outline(&_impl_._has_bits_);
          _impl_.outline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool shadow_null = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_shadow_null(&_impl_._has_bits_);
          _impl_.shadow_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive shadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool strikethru_color_null = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_strikethru_color_null(&_impl_._has_bits_);
          _impl_.strikethru_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color strikethru_color = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_strikethru_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float strikethru_width = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_strikethru_width(&_impl_._has_bits_);
          _impl_.strikethru_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool background_color_null = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_background_color_null(&_impl_._has_bits_);
          _impl_.background_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color background_color = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tracking = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_tracking(&_impl_._has_bits_);
          _impl_.tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool underline_color_null = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_underline_color_null(&_impl_._has_bits_);
          _impl_.underline_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color underline_color = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_underline_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float underline_width = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _Internal::set_has_underline_width(&_impl_._has_bits_);
          _impl_.underline_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool word_strikethru = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_word_strikethru(&_impl_._has_bits_);
          _impl_.word_strikethru_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool word_underline = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_word_underline(&_impl_._has_bits_);
          _impl_.word_underline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool font_features_null = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_font_features_null(&_impl_._has_bits_);
          _impl_.font_features_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.FontFeatureArchive font_features = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_font_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(35, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool emphasis_marks_null = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_emphasis_marks_null(&_impl_._has_bits_);
          _impl_.emphasis_marks_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string emphasis_marks = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_emphasis_marks();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.emphasis_marks");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool compatibility_font_name_null = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_compatibility_font_name_null(&_impl_._has_bits_);
          _impl_.compatibility_font_name_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string compatibility_font_name = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_compatibility_font_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CharacterStylePropertiesArchive.compatibility_font_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CharacterStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bold = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bold(), target);
  }

  // optional bool italic = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_italic(), target);
  }

  // optional float font_size = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_font_size(), target);
  }

  // optional bool font_name_null = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_font_name_null(), target);
  }

  // optional string font_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.font_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_font_name(), target);
  }

  // optional bool font_color_null = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_font_color_null(), target);
  }

  // optional .TSP.Color font_color = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::font_color(this),
        _Internal::font_color(this).GetCachedSize(), target, stream);
  }

  // optional bool language_null = 8;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_language_null(), target);
  }

  // optional string language = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.language");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_language(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_superscript(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_underline(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_strikethru(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_capitalization(), target);
  }

  // optional float baseline_shift = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_baseline_shift(), target);
  }

  // optional float kerning = 15;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_kerning(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_ligatures(), target);
  }

  // optional bool outline_color_null = 17;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_outline_color_null(), target);
  }

  // optional .TSP.Color outline_color = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::outline_color(this),
        _Internal::outline_color(this).GetCachedSize(), target, stream);
  }

  // optional float outline = 19;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_outline(), target);
  }

  // optional bool shadow_null = 20;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_shadow_null(), target);
  }

  // optional .TSD.ShadowArchive shadow = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::shadow(this),
        _Internal::shadow(this).GetCachedSize(), target, stream);
  }

  // optional bool strikethru_color_null = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_strikethru_color_null(), target);
  }

  // optional .TSP.Color strikethru_color = 23;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::strikethru_color(this),
        _Internal::strikethru_color(this).GetCachedSize(), target, stream);
  }

  // optional float strikethru_width = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_strikethru_width(), target);
  }

  // optional bool background_color_null = 25;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_background_color_null(), target);
  }

  // optional .TSP.Color background_color = 26;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::background_color(this),
        _Internal::background_color(this).GetCachedSize(), target, stream);
  }

  // optional float tracking = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_tracking(), target);
  }

  // optional bool underline_color_null = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_underline_color_null(), target);
  }

  // optional .TSP.Color underline_color = 29;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::underline_color(this),
        _Internal::underline_color(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float underline_width = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_underline_width(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool word_strikethru = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_word_strikethru(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool word_underline = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_word_underline(), target);
  }

  // optional bool font_features_null = 33;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_font_features_null(), target);
  }

  // repeated .TSWP.FontFeatureArchive font_features = 34;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_font_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_font_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      35, this->_internal_writing_direction(), target);
  }

  // optional bool emphasis_marks_null = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_emphasis_marks_null(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string emphasis_marks = 37;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_emphasis_marks().data(), static_cast<int>(this->_internal_emphasis_marks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.emphasis_marks");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_emphasis_marks(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool compatibility_font_name_null = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_compatibility_font_name_null(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string compatibility_font_name = 39;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_compatibility_font_name().data(), static_cast<int>(this->_internal_compatibility_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CharacterStylePropertiesArchive.compatibility_font_name");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_compatibility_font_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CharacterStylePropertiesArchive)
  return target;
}

size_t CharacterStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CharacterStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.FontFeatureArchive font_features = 34;
  total_size += 2UL * this->_internal_font_features_size();
  for (const auto& msg : this->_impl_.font_features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string font_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font_name());
    }

    // optional string language = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional string emphasis_marks = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_emphasis_marks());
    }

    // optional string compatibility_font_name = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_compatibility_font_name());
    }

    // optional .TSP.Color font_color = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.font_color_);
    }

    // optional .TSP.Color outline_color = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.outline_color_);
    }

    // optional .TSD.ShadowArchive shadow = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shadow_);
    }

    // optional .TSP.Color strikethru_color = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.strikethru_color_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Color background_color = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_color_);
    }

    // optional .TSP.Color underline_color = 29;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.underline_color_);
    }

    // optional float font_size = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional bool bold = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool italic = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool font_name_null = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool font_color_null = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_superscript());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_underline());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_strikethru());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_capitalization());
    }

    // optional float baseline_shift = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float kerning = 15;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ligatures());
    }

    // optional bool language_null = 8;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool outline_color_null = 17;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool shadow_null = 20;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool strikethru_color_null = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional float outline = 19;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float strikethru_width = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float tracking = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional bool background_color_null = 25;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool underline_color_null = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool word_strikethru = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool word_underline = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional float underline_width = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional bool font_features_null = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool emphasis_marks_null = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool compatibility_font_name_null = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_writing_direction());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void CharacterStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const CharacterStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CharacterStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.font_features_.MergeFrom(from._impl_.font_features_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_emphasis_marks(from._internal_emphasis_marks());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_compatibility_font_name(from._internal_compatibility_font_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_font_color()->::TSP::Color::MergeFrom(
          from._internal_font_color());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_outline_color()->::TSP::Color::MergeFrom(
          from._internal_outline_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_shadow());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_strikethru_color()->::TSP::Color::MergeFrom(
          from._internal_strikethru_color());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_background_color()->::TSP::Color::MergeFrom(
          from._internal_background_color());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_underline_color()->::TSP::Color::MergeFrom(
          from._internal_underline_color());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.font_size_ = from._impl_.font_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bold_ = from._impl_.bold_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.italic_ = from._impl_.italic_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.font_name_null_ = from._impl_.font_name_null_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.font_color_null_ = from._impl_.font_color_null_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.superscript_ = from._impl_.superscript_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.underline_ = from._impl_.underline_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.strikethru_ = from._impl_.strikethru_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.capitalization_ = from._impl_.capitalization_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.baseline_shift_ = from._impl_.baseline_shift_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.kerning_ = from._impl_.kerning_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ligatures_ = from._impl_.ligatures_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.language_null_ = from._impl_.language_null_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.outline_color_null_ = from._impl_.outline_color_null_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.shadow_null_ = from._impl_.shadow_null_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.strikethru_color_null_ = from._impl_.strikethru_color_null_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.outline_ = from._impl_.outline_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.strikethru_width_ = from._impl_.strikethru_width_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tracking_ = from._impl_.tracking_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.background_color_null_ = from._impl_.background_color_null_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.underline_color_null_ = from._impl_.underline_color_null_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.word_strikethru_ = from._impl_.word_strikethru_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.word_underline_ = from._impl_.word_underline_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.underline_width_ = from._impl_.underline_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.font_features_null_ = from._impl_.font_features_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.emphasis_marks_null_ = from._impl_.emphasis_marks_null_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.compatibility_font_name_null_ = from._impl_.compatibility_font_name_null_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.writing_direction_ = from._impl_.writing_direction_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterStylePropertiesArchive::CopyFrom(const CharacterStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CharacterStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStylePropertiesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.font_features_))
    return false;
  if (_internal_has_font_color()) {
    if (!_impl_.font_color_->IsInitialized()) return false;
  }
  if (_internal_has_outline_color()) {
    if (!_impl_.outline_color_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!_impl_.shadow_->IsInitialized()) return false;
  }
  if (_internal_has_strikethru_color()) {
    if (!_impl_.strikethru_color_->IsInitialized()) return false;
  }
  if (_internal_has_background_color()) {
    if (!_impl_.background_color_->IsInitialized()) return false;
  }
  if (_internal_has_underline_color()) {
    if (!_impl_.underline_color_->IsInitialized()) return false;
  }
  return true;
}

void CharacterStylePropertiesArchive::InternalSwap(CharacterStylePropertiesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.font_features_.InternalSwap(&other->_impl_.font_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.font_name_, lhs_arena,
      &other->_impl_.font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.emphasis_marks_, lhs_arena,
      &other->_impl_.emphasis_marks_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compatibility_font_name_, lhs_arena,
      &other->_impl_.compatibility_font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterStylePropertiesArchive, _impl_.compatibility_font_name_null_)
      + sizeof(CharacterStylePropertiesArchive::_impl_.compatibility_font_name_null_)
      - PROTOBUF_FIELD_OFFSET(CharacterStylePropertiesArchive, _impl_.font_color_)>(
          reinterpret_cast<char*>(&_impl_.font_color_),
          reinterpret_cast<char*>(&other->_impl_.font_color_));
  swap(_impl_.writing_direction_, other->_impl_.writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[12]);
}

// ===================================================================

class CharacterStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const CharacterStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::CharacterStylePropertiesArchive& char_properties(const CharacterStyleArchive* msg);
  static void set_has_char_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
CharacterStyleArchive::_Internal::super(const CharacterStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSWP::CharacterStylePropertiesArchive&
CharacterStyleArchive::_Internal::char_properties(const CharacterStyleArchive* msg) {
  return *msg->_impl_.char_properties_;
}
void CharacterStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CharacterStyleArchive::CharacterStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.CharacterStyleArchive)
}
CharacterStyleArchive::CharacterStyleArchive(const CharacterStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.char_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_char_properties()) {
    _this->_impl_.char_properties_ = new ::TSWP::CharacterStylePropertiesArchive(*from._impl_.char_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.CharacterStyleArchive)
}

inline void CharacterStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.char_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

CharacterStyleArchive::~CharacterStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CharacterStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.char_properties_;
}

void CharacterStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CharacterStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.char_properties_ != nullptr);
      _impl_.char_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CharacterStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::char_properties(this),
        _Internal::char_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CharacterStyleArchive)
  return target;
}

size_t CharacterStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CharacterStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.char_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterStyleArchive::GetClassData() const { return &_class_data_; }


void CharacterStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterStyleArchive*>(&to_msg);
  auto& from = static_cast<const CharacterStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CharacterStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(
          from._internal_char_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterStyleArchive::CopyFrom(const CharacterStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CharacterStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_char_properties()) {
    if (!_impl_.char_properties_->IsInitialized()) return false;
  }
  return true;
}

void CharacterStyleArchive::InternalSwap(CharacterStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterStyleArchive, _impl_.override_count_)
      + sizeof(CharacterStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(CharacterStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[13]);
}

// ===================================================================

class TabArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TabArchive>()._impl_._has_bits_);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TabArchive::TabArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TabArchive)
}
TabArchive::TabArchive(const TabArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TabArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.position_){}
    , decltype(_impl_.alignment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leader()) {
    _this->_impl_.leader_.Set(from._internal_leader(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alignment_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.alignment_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TabArchive)
}

inline void TabArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.alignment_){0}
  };
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TabArchive::~TabArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TabArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leader_.Destroy();
}

void TabArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TabArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TabArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.leader_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.alignment_) -
        reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.alignment_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_position(&has_bits);
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::TabArchive_TabAlignmentType_IsValid(val))) {
            _internal_set_alignment(static_cast<::TSWP::TabArchive_TabAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string leader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_leader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TabArchive.leader");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TabArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_position(), target);
  }

  // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alignment(), target);
  }

  // optional string leader = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TabArchive.leader");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TabArchive)
  return target;
}

size_t TabArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TabArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string leader = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leader());
    }

    // optional float position = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_alignment());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TabArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabArchive::GetClassData() const { return &_class_data_; }


void TabArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TabArchive*>(&to_msg);
  auto& from = static_cast<const TabArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TabArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_leader(from._internal_leader());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.position_ = from._impl_.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.alignment_ = from._impl_.alignment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabArchive::CopyFrom(const TabArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TabArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabArchive::IsInitialized() const {
  return true;
}

void TabArchive::InternalSwap(TabArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_, lhs_arena,
      &other->_impl_.leader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabArchive, _impl_.alignment_)
      + sizeof(TabArchive::_impl_.alignment_)
      - PROTOBUF_FIELD_OFFSET(TabArchive, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TabArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[14]);
}

// ===================================================================

class TabsArchive::_Internal {
 public:
};

TabsArchive::TabsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TabsArchive)
}
TabsArchive::TabsArchive(const TabsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TabsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tabs_){from._impl_.tabs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.TabsArchive)
}

inline void TabsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tabs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TabsArchive::~TabsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TabsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tabs_.~RepeatedPtrField();
}

void TabsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TabsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TabsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tabs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.TabArchive tabs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TabsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.TabArchive tabs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tabs_size()); i < n; i++) {
    const auto& repfield = this->_internal_tabs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TabsArchive)
  return target;
}

size_t TabsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TabsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.TabArchive tabs = 1;
  total_size += 1UL * this->_internal_tabs_size();
  for (const auto& msg : this->_impl_.tabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TabsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabsArchive::GetClassData() const { return &_class_data_; }


void TabsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TabsArchive*>(&to_msg);
  auto& from = static_cast<const TabsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TabsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tabs_.MergeFrom(from._impl_.tabs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabsArchive::CopyFrom(const TabsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TabsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabsArchive::IsInitialized() const {
  return true;
}

void TabsArchive::InternalSwap(TabsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tabs_.InternalSwap(&other->_impl_.tabs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TabsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[15]);
}

// ===================================================================

class LineSpacingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LineSpacingArchive>()._impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baselinerule(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LineSpacingArchive::LineSpacingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.LineSpacingArchive)
}
LineSpacingArchive::LineSpacingArchive(const LineSpacingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LineSpacingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.baselinerule_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.baselinerule_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.baselinerule_));
  // @@protoc_insertion_point(copy_constructor:TSWP.LineSpacingArchive)
}

inline void LineSpacingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.baselinerule_){0}
  };
}

LineSpacingArchive::~LineSpacingArchive() {
  // @@protoc_insertion_point(destructor:TSWP.LineSpacingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineSpacingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LineSpacingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineSpacingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.LineSpacingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.baselinerule_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.baselinerule_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineSpacingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::LineSpacingArchive_LineSpacingModeType_IsValid(val))) {
            _internal_set_mode(static_cast<::TSWP::LineSpacingArchive_LineSpacingModeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float baselineRule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_baselinerule(&has_bits);
          _impl_.baselinerule_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LineSpacingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.LineSpacingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // optional float amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_amount(), target);
  }

  // optional float baselineRule = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_baselinerule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.LineSpacingArchive)
  return target;
}

size_t LineSpacingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.LineSpacingArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional float amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float baselineRule = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LineSpacingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LineSpacingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LineSpacingArchive::GetClassData() const { return &_class_data_; }


void LineSpacingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LineSpacingArchive*>(&to_msg);
  auto& from = static_cast<const LineSpacingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.LineSpacingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.baselinerule_ = from._impl_.baselinerule_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LineSpacingArchive::CopyFrom(const LineSpacingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.LineSpacingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSpacingArchive::IsInitialized() const {
  return true;
}

void LineSpacingArchive::InternalSwap(LineSpacingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineSpacingArchive, _impl_.baselinerule_)
      + sizeof(LineSpacingArchive::_impl_.baselinerule_)
      - PROTOBUF_FIELD_OFFSET(LineSpacingArchive, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineSpacingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[16]);
}

// ===================================================================

class ParagraphStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ParagraphStylePropertiesArchive>()._impl_._has_bits_);
  static void set_has_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_decimal_tab_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_decimal_tab(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_tab_stops(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fill_null(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Color& fill(const ParagraphStylePropertiesArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_line_indent(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_hyphenate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_keep_lines_together(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_keep_with_next(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_left_indent(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_line_spacing_null(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSWP::LineSpacingArchive& line_spacing(const ParagraphStylePropertiesArchive* msg);
  static void set_has_line_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_page_break_before(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_borders(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_rule_offset_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Point& rule_offset(const ParagraphStylePropertiesArchive* msg);
  static void set_has_rule_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rule_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_right_indent(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_space_after(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_space_before(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tabs_null(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSWP::TabsArchive& tabs(const ParagraphStylePropertiesArchive* msg);
  static void set_has_tabs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_widow_control(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_outline_level(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_outline_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_following_style_id_null(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_following_style_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stroke_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& stroke(const ParagraphStylePropertiesArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_show_in_toc(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_toc_style_id_null(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_toc_style_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_list_style_null(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSP::Reference& list_style(const ParagraphStylePropertiesArchive* msg);
  static void set_has_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_following_style_null(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSP::Reference& following_style(const ParagraphStylePropertiesArchive* msg);
  static void set_has_following_style(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSP::Color&
ParagraphStylePropertiesArchive::_Internal::fill(const ParagraphStylePropertiesArchive* msg) {
  return *msg->_impl_.fill_;
}
const ::TSWP::LineSpacingArchive&
ParagraphStylePropertiesArchive::_Internal::line_spacing(const ParagraphStylePropertiesArchive* msg) {
  return *msg->_impl_.line_spacing_;
}
const ::TSP::Point&
ParagraphStylePropertiesArchive::_Internal::rule_offset(const ParagraphStylePropertiesArchive* msg) {
  return *msg->_impl_.rule_offset_;
}
const ::TSWP::TabsArchive&
ParagraphStylePropertiesArchive::_Internal::tabs(const ParagraphStylePropertiesArchive* msg) {
  return *msg->_impl_.tabs_;
}
const ::TSD::StrokeArchive&
ParagraphStylePropertiesArchive::_Internal::stroke(const ParagraphStylePropertiesArchive* msg) {
  return *msg->_impl_.stroke_;
}
const ::TSP::Reference&
ParagraphStylePropertiesArchive::_Internal::list_style(const ParagraphStylePropertiesArchive* msg) {
  return *msg->_impl_.list_style_;
}
const ::TSP::Reference&
ParagraphStylePropertiesArchive::_Internal::following_style(const ParagraphStylePropertiesArchive* msg) {
  return *msg->_impl_.following_style_;
}
void ParagraphStylePropertiesArchive::clear_fill() {
  if (_impl_.fill_ != nullptr) _impl_.fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ParagraphStylePropertiesArchive::clear_rule_offset() {
  if (_impl_.rule_offset_ != nullptr) _impl_.rule_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ParagraphStylePropertiesArchive::clear_stroke() {
  if (_impl_.stroke_ != nullptr) _impl_.stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ParagraphStylePropertiesArchive::clear_list_style() {
  if (_impl_.list_style_ != nullptr) _impl_.list_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ParagraphStylePropertiesArchive::clear_following_style() {
  if (_impl_.following_style_ != nullptr) _impl_.following_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ParagraphStylePropertiesArchive)
}
ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive(const ParagraphStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParagraphStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decimal_tab_){}
    , decltype(_impl_.following_style_id_){}
    , decltype(_impl_.toc_style_id_){}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.line_spacing_){nullptr}
    , decltype(_impl_.rule_offset_){nullptr}
    , decltype(_impl_.tabs_){nullptr}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.list_style_){nullptr}
    , decltype(_impl_.following_style_){nullptr}
    , decltype(_impl_.alignment_){}
    , decltype(_impl_.default_tab_stops_){}
    , decltype(_impl_.decimal_tab_null_){}
    , decltype(_impl_.fill_null_){}
    , decltype(_impl_.hyphenate_){}
    , decltype(_impl_.keep_lines_together_){}
    , decltype(_impl_.first_line_indent_){}
    , decltype(_impl_.left_indent_){}
    , decltype(_impl_.keep_with_next_){}
    , decltype(_impl_.line_spacing_null_){}
    , decltype(_impl_.page_break_before_){}
    , decltype(_impl_.rule_offset_null_){}
    , decltype(_impl_.borders_){}
    , decltype(_impl_.rule_width_){}
    , decltype(_impl_.right_indent_){}
    , decltype(_impl_.space_after_){}
    , decltype(_impl_.space_before_){}
    , decltype(_impl_.outline_level_){}
    , decltype(_impl_.tabs_null_){}
    , decltype(_impl_.widow_control_){}
    , decltype(_impl_.following_style_id_null_){}
    , decltype(_impl_.stroke_null_){}
    , decltype(_impl_.outline_style_){}
    , decltype(_impl_.show_in_toc_){}
    , decltype(_impl_.toc_style_id_null_){}
    , decltype(_impl_.list_style_null_){}
    , decltype(_impl_.following_style_null_){}
    , decltype(_impl_.writing_direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.decimal_tab_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_tab_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_decimal_tab()) {
    _this->_impl_.decimal_tab_.Set(from._internal_decimal_tab(), 
      _this->GetArenaForAllocation());
  }
  _impl_.following_style_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_style_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_following_style_id()) {
    _this->_impl_.following_style_id_.Set(from._internal_following_style_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.toc_style_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toc_style_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_toc_style_id()) {
    _this->_impl_.toc_style_id_.Set(from._internal_toc_style_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fill()) {
    _this->_impl_.fill_ = new ::TSP::Color(*from._impl_.fill_);
  }
  if (from._internal_has_line_spacing()) {
    _this->_impl_.line_spacing_ = new ::TSWP::LineSpacingArchive(*from._impl_.line_spacing_);
  }
  if (from._internal_has_rule_offset()) {
    _this->_impl_.rule_offset_ = new ::TSP::Point(*from._impl_.rule_offset_);
  }
  if (from._internal_has_tabs()) {
    _this->_impl_.tabs_ = new ::TSWP::TabsArchive(*from._impl_.tabs_);
  }
  if (from._internal_has_stroke()) {
    _this->_impl_.stroke_ = new ::TSD::StrokeArchive(*from._impl_.stroke_);
  }
  if (from._internal_has_list_style()) {
    _this->_impl_.list_style_ = new ::TSP::Reference(*from._impl_.list_style_);
  }
  if (from._internal_has_following_style()) {
    _this->_impl_.following_style_ = new ::TSP::Reference(*from._impl_.following_style_);
  }
  ::memcpy(&_impl_.alignment_, &from._impl_.alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.writing_direction_) -
    reinterpret_cast<char*>(&_impl_.alignment_)) + sizeof(_impl_.writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ParagraphStylePropertiesArchive)
}

inline void ParagraphStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decimal_tab_){}
    , decltype(_impl_.following_style_id_){}
    , decltype(_impl_.toc_style_id_){}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.line_spacing_){nullptr}
    , decltype(_impl_.rule_offset_){nullptr}
    , decltype(_impl_.tabs_){nullptr}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.list_style_){nullptr}
    , decltype(_impl_.following_style_){nullptr}
    , decltype(_impl_.alignment_){0}
    , decltype(_impl_.default_tab_stops_){0}
    , decltype(_impl_.decimal_tab_null_){false}
    , decltype(_impl_.fill_null_){false}
    , decltype(_impl_.hyphenate_){false}
    , decltype(_impl_.keep_lines_together_){false}
    , decltype(_impl_.first_line_indent_){0}
    , decltype(_impl_.left_indent_){0}
    , decltype(_impl_.keep_with_next_){false}
    , decltype(_impl_.line_spacing_null_){false}
    , decltype(_impl_.page_break_before_){false}
    , decltype(_impl_.rule_offset_null_){false}
    , decltype(_impl_.borders_){0}
    , decltype(_impl_.rule_width_){0}
    , decltype(_impl_.right_indent_){0}
    , decltype(_impl_.space_after_){0}
    , decltype(_impl_.space_before_){0}
    , decltype(_impl_.outline_level_){0u}
    , decltype(_impl_.tabs_null_){false}
    , decltype(_impl_.widow_control_){false}
    , decltype(_impl_.following_style_id_null_){false}
    , decltype(_impl_.stroke_null_){false}
    , decltype(_impl_.outline_style_){0}
    , decltype(_impl_.show_in_toc_){false}
    , decltype(_impl_.toc_style_id_null_){false}
    , decltype(_impl_.list_style_null_){false}
    , decltype(_impl_.following_style_null_){false}
    , decltype(_impl_.writing_direction_){-1}
  };
  _impl_.decimal_tab_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decimal_tab_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.following_style_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_style_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.toc_style_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toc_style_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParagraphStylePropertiesArchive::~ParagraphStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ParagraphStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParagraphStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decimal_tab_.Destroy();
  _impl_.following_style_id_.Destroy();
  _impl_.toc_style_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fill_;
  if (this != internal_default_instance()) delete _impl_.line_spacing_;
  if (this != internal_default_instance()) delete _impl_.rule_offset_;
  if (this != internal_default_instance()) delete _impl_.tabs_;
  if (this != internal_default_instance()) delete _impl_.stroke_;
  if (this != internal_default_instance()) delete _impl_.list_style_;
  if (this != internal_default_instance()) delete _impl_.following_style_;
}

void ParagraphStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParagraphStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParagraphStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.decimal_tab_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.following_style_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.toc_style_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.fill_ != nullptr);
      _impl_.fill_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.line_spacing_ != nullptr);
      _impl_.line_spacing_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.rule_offset_ != nullptr);
      _impl_.rule_offset_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tabs_ != nullptr);
      _impl_.tabs_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.stroke_ != nullptr);
      _impl_.stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.list_style_ != nullptr);
      _impl_.list_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.following_style_ != nullptr);
      _impl_.following_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.keep_lines_together_) -
        reinterpret_cast<char*>(&_impl_.alignment_)) + sizeof(_impl_.keep_lines_together_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.first_line_indent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rule_width_) -
        reinterpret_cast<char*>(&_impl_.first_line_indent_)) + sizeof(_impl_.rule_width_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.right_indent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stroke_null_) -
        reinterpret_cast<char*>(&_impl_.right_indent_)) + sizeof(_impl_.stroke_null_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.outline_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.following_style_null_) -
        reinterpret_cast<char*>(&_impl_.outline_style_)) + sizeof(_impl_.following_style_null_));
    _impl_.writing_direction_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParagraphStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(val))) {
            _internal_set_alignment(static_cast<::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool decimal_tab_null = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_decimal_tab_null(&_impl_._has_bits_);
          _impl_.decimal_tab_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string decimal_tab = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_decimal_tab();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.ParagraphStylePropertiesArchive.decimal_tab");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float default_tab_stops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_default_tab_stops(&_impl_._has_bits_);
          _impl_.default_tab_stops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool fill_null = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fill_null(&_impl_._has_bits_);
          _impl_.fill_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color fill = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float first_line_indent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_first_line_indent(&_impl_._has_bits_);
          _impl_.first_line_indent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool hyphenate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_hyphenate(&_impl_._has_bits_);
          _impl_.hyphenate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keep_lines_together = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_keep_lines_together(&_impl_._has_bits_);
          _impl_.keep_lines_together_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keep_with_next = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_keep_with_next(&_impl_._has_bits_);
          _impl_.keep_with_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float left_indent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_left_indent(&_impl_._has_bits_);
          _impl_.left_indent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool line_spacing_null = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_line_spacing_null(&_impl_._has_bits_);
          _impl_.line_spacing_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.LineSpacingArchive line_spacing = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_spacing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool page_break_before = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_page_break_before(&_impl_._has_bits_);
          _impl_.page_break_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(val))) {
            _internal_set_borders(static_cast<::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool rule_offset_null = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_rule_offset_null(&_impl_._has_bits_);
          _impl_.rule_offset_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point rule_offset = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rule_width = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_rule_width(&_impl_._has_bits_);
          _impl_.rule_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float right_indent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_right_indent(&_impl_._has_bits_);
          _impl_.right_indent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float space_after = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_space_after(&_impl_._has_bits_);
          _impl_.space_after_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float space_before = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_space_before(&_impl_._has_bits_);
          _impl_.space_before_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tabs_null = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tabs_null(&_impl_._has_bits_);
          _impl_.tabs_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.TabsArchive tabs = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tabs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool widow_control = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_widow_control(&_impl_._has_bits_);
          _impl_.widow_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 outline_level = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_outline_level(&_impl_._has_bits_);
          _impl_.outline_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(val))) {
            _internal_set_outline_style(static_cast<::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool following_style_id_null = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_following_style_id_null(&_impl_._has_bits_);
          _impl_.following_style_id_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string following_style_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_following_style_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.ParagraphStylePropertiesArchive.following_style_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool stroke_null = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_stroke_null(&_impl_._has_bits_);
          _impl_.stroke_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive stroke = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_in_toc = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_show_in_toc(&_impl_._has_bits_);
          _impl_.show_in_toc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool toc_style_id_null = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_toc_style_id_null(&_impl_._has_bits_);
          _impl_.toc_style_id_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string toc_style_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_toc_style_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.ParagraphStylePropertiesArchive.toc_style_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(38, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool list_style_null = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_list_style_null(&_impl_._has_bits_);
          _impl_.list_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference list_style = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool following_style_null = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_following_style_null(&_impl_._has_bits_);
          _impl_.following_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference following_style = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_following_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParagraphStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParagraphStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_alignment(), target);
  }

  // optional bool decimal_tab_null = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_decimal_tab_null(), target);
  }

  // optional string decimal_tab = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_tab().data(), static_cast<int>(this->_internal_decimal_tab().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ParagraphStylePropertiesArchive.decimal_tab");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_decimal_tab(), target);
  }

  // optional float default_tab_stops = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_default_tab_stops(), target);
  }

  // optional bool fill_null = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_fill_null(), target);
  }

  // optional .TSP.Color fill = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  // optional float first_line_indent = 7;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_first_line_indent(), target);
  }

  // optional bool hyphenate = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_hyphenate(), target);
  }

  // optional bool keep_lines_together = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_keep_lines_together(), target);
  }

  // optional bool keep_with_next = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_keep_with_next(), target);
  }

  // optional float left_indent = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_left_indent(), target);
  }

  // optional bool line_spacing_null = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_line_spacing_null(), target);
  }

  // optional .TSWP.LineSpacingArchive line_spacing = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::line_spacing(this),
        _Internal::line_spacing(this).GetCachedSize(), target, stream);
  }

  // optional bool page_break_before = 14;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_page_break_before(), target);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_borders(), target);
  }

  // optional bool rule_offset_null = 16;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_rule_offset_null(), target);
  }

  // optional .TSP.Point rule_offset = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::rule_offset(this),
        _Internal::rule_offset(this).GetCachedSize(), target, stream);
  }

  // optional float rule_width = 18;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_rule_width(), target);
  }

  // optional float right_indent = 19;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_right_indent(), target);
  }

  // optional float space_after = 20;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_space_after(), target);
  }

  // optional float space_before = 21;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_space_before(), target);
  }

  // optional bool tabs_null = 24;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_tabs_null(), target);
  }

  // optional .TSWP.TabsArchive tabs = 25;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::tabs(this),
        _Internal::tabs(this).GetCachedSize(), target, stream);
  }

  // optional bool widow_control = 26;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_widow_control(), target);
  }

  // optional uint32 outline_level = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_outline_level(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      28, this->_internal_outline_style(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool following_style_id_null = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_following_style_id_null(), target);
  }

  // optional string following_style_id = 30;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_following_style_id().data(), static_cast<int>(this->_internal_following_style_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ParagraphStylePropertiesArchive.following_style_id");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_following_style_id(), target);
  }

  // optional bool stroke_null = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_stroke_null(), target);
  }

  // optional .TSD.StrokeArchive stroke = 32;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::stroke(this),
        _Internal::stroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool show_in_toc = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_show_in_toc(), target);
  }

  // optional bool toc_style_id_null = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_toc_style_id_null(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string toc_style_id = 35;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toc_style_id().data(), static_cast<int>(this->_internal_toc_style_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ParagraphStylePropertiesArchive.toc_style_id");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_toc_style_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      38, this->_internal_writing_direction(), target);
  }

  // optional bool list_style_null = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_list_style_null(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference list_style = 40;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::list_style(this),
        _Internal::list_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool following_style_null = 41;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_following_style_null(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference following_style = 42;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::following_style(this),
        _Internal::following_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParagraphStylePropertiesArchive)
  return target;
}

size_t ParagraphStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParagraphStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string decimal_tab = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_tab());
    }

    // optional string following_style_id = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_following_style_id());
    }

    // optional string toc_style_id = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toc_style_id());
    }

    // optional .TSP.Color fill = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fill_);
    }

    // optional .TSWP.LineSpacingArchive line_spacing = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.line_spacing_);
    }

    // optional .TSP.Point rule_offset = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rule_offset_);
    }

    // optional .TSWP.TabsArchive tabs = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tabs_);
    }

    // optional .TSD.StrokeArchive stroke = 32;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Reference list_style = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.list_style_);
    }

    // optional .TSP.Reference following_style = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.following_style_);
    }

    // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_alignment());
    }

    // optional float default_tab_stops = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional bool decimal_tab_null = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool fill_null = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool hyphenate = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool keep_lines_together = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float first_line_indent = 7;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float left_indent = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional bool keep_with_next = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool line_spacing_null = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool page_break_before = 14;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool rule_offset_null = 16;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_borders());
    }

    // optional float rule_width = 18;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float right_indent = 19;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float space_after = 20;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float space_before = 21;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 outline_level = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_outline_level());
    }

    // optional bool tabs_null = 24;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool widow_control = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool following_style_id_null = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool stroke_null = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_outline_style());
    }

    // optional bool show_in_toc = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool toc_style_id_null = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool list_style_null = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool following_style_null = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_writing_direction());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParagraphStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParagraphStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParagraphStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void ParagraphStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParagraphStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const ParagraphStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParagraphStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_decimal_tab(from._internal_decimal_tab());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_following_style_id(from._internal_following_style_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_toc_style_id(from._internal_toc_style_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_fill()->::TSP::Color::MergeFrom(
          from._internal_fill());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_line_spacing()->::TSWP::LineSpacingArchive::MergeFrom(
          from._internal_line_spacing());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_rule_offset()->::TSP::Point::MergeFrom(
          from._internal_rule_offset());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tabs()->::TSWP::TabsArchive::MergeFrom(
          from._internal_tabs());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_stroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_list_style()->::TSP::Reference::MergeFrom(
          from._internal_list_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_following_style()->::TSP::Reference::MergeFrom(
          from._internal_following_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.alignment_ = from._impl_.alignment_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.default_tab_stops_ = from._impl_.default_tab_stops_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.decimal_tab_null_ = from._impl_.decimal_tab_null_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.fill_null_ = from._impl_.fill_null_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.hyphenate_ = from._impl_.hyphenate_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.keep_lines_together_ = from._impl_.keep_lines_together_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.first_line_indent_ = from._impl_.first_line_indent_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.left_indent_ = from._impl_.left_indent_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.keep_with_next_ = from._impl_.keep_with_next_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.line_spacing_null_ = from._impl_.line_spacing_null_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.page_break_before_ = from._impl_.page_break_before_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.rule_offset_null_ = from._impl_.rule_offset_null_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.borders_ = from._impl_.borders_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.rule_width_ = from._impl_.rule_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.right_indent_ = from._impl_.right_indent_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.space_after_ = from._impl_.space_after_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.space_before_ = from._impl_.space_before_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.outline_level_ = from._impl_.outline_level_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tabs_null_ = from._impl_.tabs_null_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.widow_control_ = from._impl_.widow_control_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.following_style_id_null_ = from._impl_.following_style_id_null_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.stroke_null_ = from._impl_.stroke_null_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.outline_style_ = from._impl_.outline_style_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.show_in_toc_ = from._impl_.show_in_toc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.toc_style_id_null_ = from._impl_.toc_style_id_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.list_style_null_ = from._impl_.list_style_null_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.following_style_null_ = from._impl_.following_style_null_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.writing_direction_ = from._impl_.writing_direction_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParagraphStylePropertiesArchive::CopyFrom(const ParagraphStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParagraphStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParagraphStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!_impl_.fill_->IsInitialized()) return false;
  }
  if (_internal_has_rule_offset()) {
    if (!_impl_.rule_offset_->IsInitialized()) return false;
  }
  if (_internal_has_stroke()) {
    if (!_impl_.stroke_->IsInitialized()) return false;
  }
  if (_internal_has_list_style()) {
    if (!_impl_.list_style_->IsInitialized()) return false;
  }
  if (_internal_has_following_style()) {
    if (!_impl_.following_style_->IsInitialized()) return false;
  }
  return true;
}

void ParagraphStylePropertiesArchive::InternalSwap(ParagraphStylePropertiesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decimal_tab_, lhs_arena,
      &other->_impl_.decimal_tab_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.following_style_id_, lhs_arena,
      &other->_impl_.following_style_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toc_style_id_, lhs_arena,
      &other->_impl_.toc_style_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParagraphStylePropertiesArchive, _impl_.following_style_null_)
      + sizeof(ParagraphStylePropertiesArchive::_impl_.following_style_null_)
      - PROTOBUF_FIELD_OFFSET(ParagraphStylePropertiesArchive, _impl_.fill_)>(
          reinterpret_cast<char*>(&_impl_.fill_),
          reinterpret_cast<char*>(&other->_impl_.fill_));
  swap(_impl_.writing_direction_, other->_impl_.writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParagraphStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[17]);
}

// ===================================================================

class ParagraphStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ParagraphStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ParagraphStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSWP::CharacterStylePropertiesArchive& char_properties(const ParagraphStyleArchive* msg);
  static void set_has_char_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::ParagraphStylePropertiesArchive& para_properties(const ParagraphStyleArchive* msg);
  static void set_has_para_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ParagraphStyleArchive::_Internal::super(const ParagraphStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSWP::CharacterStylePropertiesArchive&
ParagraphStyleArchive::_Internal::char_properties(const ParagraphStyleArchive* msg) {
  return *msg->_impl_.char_properties_;
}
const ::TSWP::ParagraphStylePropertiesArchive&
ParagraphStyleArchive::_Internal::para_properties(const ParagraphStyleArchive* msg) {
  return *msg->_impl_.para_properties_;
}
void ParagraphStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ParagraphStyleArchive::ParagraphStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ParagraphStyleArchive)
}
ParagraphStyleArchive::ParagraphStyleArchive(const ParagraphStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ParagraphStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.char_properties_){nullptr}
    , decltype(_impl_.para_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_char_properties()) {
    _this->_impl_.char_properties_ = new ::TSWP::CharacterStylePropertiesArchive(*from._impl_.char_properties_);
  }
  if (from._internal_has_para_properties()) {
    _this->_impl_.para_properties_ = new ::TSWP::ParagraphStylePropertiesArchive(*from._impl_.para_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ParagraphStyleArchive)
}

inline void ParagraphStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.char_properties_){nullptr}
    , decltype(_impl_.para_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

ParagraphStyleArchive::~ParagraphStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ParagraphStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParagraphStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.char_properties_;
  if (this != internal_default_instance()) delete _impl_.para_properties_;
}

void ParagraphStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParagraphStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ParagraphStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.char_properties_ != nullptr);
      _impl_.char_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.para_properties_ != nullptr);
      _impl_.para_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParagraphStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParagraphStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ParagraphStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::char_properties(this),
        _Internal::char_properties(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::para_properties(this),
        _Internal::para_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ParagraphStyleArchive)
  return target;
}

size_t ParagraphStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ParagraphStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.char_properties_);
    }

    // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.para_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParagraphStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ParagraphStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParagraphStyleArchive::GetClassData() const { return &_class_data_; }


void ParagraphStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ParagraphStyleArchive*>(&to_msg);
  auto& from = static_cast<const ParagraphStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ParagraphStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(
          from._internal_char_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_para_properties()->::TSWP::ParagraphStylePropertiesArchive::MergeFrom(
          from._internal_para_properties());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParagraphStyleArchive::CopyFrom(const ParagraphStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ParagraphStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParagraphStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_char_properties()) {
    if (!_impl_.char_properties_->IsInitialized()) return false;
  }
  if (_internal_has_para_properties()) {
    if (!_impl_.para_properties_->IsInitialized()) return false;
  }
  return true;
}

void ParagraphStyleArchive::InternalSwap(ParagraphStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParagraphStyleArchive, _impl_.override_count_)
      + sizeof(ParagraphStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(ParagraphStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParagraphStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[18]);
}

// ===================================================================

class ListStyleArchive_LabelGeometry::_Internal {
 public:
  using HasBits = decltype(std::declval<ListStyleArchive_LabelGeometry>()._impl_._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baseline_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale_with_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ListStyleArchive.LabelGeometry)
}
ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry(const ListStyleArchive_LabelGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListStyleArchive_LabelGeometry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.baseline_offset_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.scale_with_text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.baseline_offset_, &from._impl_.baseline_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_with_text_) -
    reinterpret_cast<char*>(&_impl_.baseline_offset_)) + sizeof(_impl_.scale_with_text_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ListStyleArchive.LabelGeometry)
}

inline void ListStyleArchive_LabelGeometry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.baseline_offset_){0}
    , decltype(_impl_.scale_){1}
    , decltype(_impl_.scale_with_text_){true}
  };
}

ListStyleArchive_LabelGeometry::~ListStyleArchive_LabelGeometry() {
  // @@protoc_insertion_point(destructor:TSWP.ListStyleArchive.LabelGeometry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListStyleArchive_LabelGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListStyleArchive_LabelGeometry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListStyleArchive_LabelGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ListStyleArchive.LabelGeometry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.baseline_offset_ = 0;
    _impl_.scale_ = 1;
    _impl_.scale_with_text_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStyleArchive_LabelGeometry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float scale = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float baseline_offset = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_baseline_offset(&has_bits);
          _impl_.baseline_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool scale_with_text = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_scale_with_text(&has_bits);
          _impl_.scale_with_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListStyleArchive_LabelGeometry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ListStyleArchive.LabelGeometry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(), target);
  }

  // optional float baseline_offset = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_baseline_offset(), target);
  }

  // optional bool scale_with_text = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_scale_with_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ListStyleArchive.LabelGeometry)
  return target;
}

size_t ListStyleArchive_LabelGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ListStyleArchive.LabelGeometry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float baseline_offset = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float scale = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool scale_with_text = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStyleArchive_LabelGeometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListStyleArchive_LabelGeometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStyleArchive_LabelGeometry::GetClassData() const { return &_class_data_; }


void ListStyleArchive_LabelGeometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListStyleArchive_LabelGeometry*>(&to_msg);
  auto& from = static_cast<const ListStyleArchive_LabelGeometry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ListStyleArchive.LabelGeometry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.baseline_offset_ = from._impl_.baseline_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scale_with_text_ = from._impl_.scale_with_text_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListStyleArchive_LabelGeometry::CopyFrom(const ListStyleArchive_LabelGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ListStyleArchive.LabelGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive_LabelGeometry::IsInitialized() const {
  return true;
}

void ListStyleArchive_LabelGeometry::InternalSwap(ListStyleArchive_LabelGeometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.baseline_offset_, other->_impl_.baseline_offset_);
  swap(_impl_.scale_, other->_impl_.scale_);
  swap(_impl_.scale_with_text_, other->_impl_.scale_with_text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStyleArchive_LabelGeometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[19]);
}

// ===================================================================

class ListStyleArchive_LabelImage::_Internal {
 public:
  using HasBits = decltype(std::declval<ListStyleArchive_LabelImage>()._impl_._has_bits_);
  static const ::TSP::DataReference& image(const ListStyleArchive_LabelImage* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& database_image(const ListStyleArchive_LabelImage* msg);
  static void set_has_database_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataReference&
ListStyleArchive_LabelImage::_Internal::image(const ListStyleArchive_LabelImage* msg) {
  return *msg->_impl_.image_;
}
const ::TSP::Reference&
ListStyleArchive_LabelImage::_Internal::database_image(const ListStyleArchive_LabelImage* msg) {
  return *msg->_impl_.database_image_;
}
void ListStyleArchive_LabelImage::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ListStyleArchive_LabelImage::clear_database_image() {
  if (_impl_.database_image_ != nullptr) _impl_.database_image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListStyleArchive_LabelImage::ListStyleArchive_LabelImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ListStyleArchive.LabelImage)
}
ListStyleArchive_LabelImage::ListStyleArchive_LabelImage(const ListStyleArchive_LabelImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListStyleArchive_LabelImage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_image_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.image_null_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_image()) {
    _this->_impl_.database_image_ = new ::TSP::Reference(*from._impl_.database_image_);
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::TSP::DataReference(*from._impl_.image_);
  }
  _this->_impl_.image_null_ = from._impl_.image_null_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ListStyleArchive.LabelImage)
}

inline void ListStyleArchive_LabelImage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_image_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.image_null_){false}
  };
}

ListStyleArchive_LabelImage::~ListStyleArchive_LabelImage() {
  // @@protoc_insertion_point(destructor:TSWP.ListStyleArchive.LabelImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListStyleArchive_LabelImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.database_image_;
  if (this != internal_default_instance()) delete _impl_.image_;
}

void ListStyleArchive_LabelImage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListStyleArchive_LabelImage::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ListStyleArchive.LabelImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.database_image_ != nullptr);
      _impl_.database_image_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
  }
  _impl_.image_null_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStyleArchive_LabelImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference database_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool image_null = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_image_null(&has_bits);
          _impl_.image_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListStyleArchive_LabelImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ListStyleArchive.LabelImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference database_image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::database_image(this),
        _Internal::database_image(this).GetCachedSize(), target, stream);
  }

  // optional bool image_null = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_image_null(), target);
  }

  // optional .TSP.DataReference image = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ListStyleArchive.LabelImage)
  return target;
}

size_t ListStyleArchive_LabelImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ListStyleArchive.LabelImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference database_image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_image_);
    }

    // optional .TSP.DataReference image = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

    // optional bool image_null = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStyleArchive_LabelImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListStyleArchive_LabelImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStyleArchive_LabelImage::GetClassData() const { return &_class_data_; }


void ListStyleArchive_LabelImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListStyleArchive_LabelImage*>(&to_msg);
  auto& from = static_cast<const ListStyleArchive_LabelImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ListStyleArchive.LabelImage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_database_image()->::TSP::Reference::MergeFrom(
          from._internal_database_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_image()->::TSP::DataReference::MergeFrom(
          from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.image_null_ = from._impl_.image_null_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListStyleArchive_LabelImage::CopyFrom(const ListStyleArchive_LabelImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ListStyleArchive.LabelImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive_LabelImage::IsInitialized() const {
  if (_internal_has_database_image()) {
    if (!_impl_.database_image_->IsInitialized()) return false;
  }
  if (_internal_has_image()) {
    if (!_impl_.image_->IsInitialized()) return false;
  }
  return true;
}

void ListStyleArchive_LabelImage::InternalSwap(ListStyleArchive_LabelImage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListStyleArchive_LabelImage, _impl_.image_null_)
      + sizeof(ListStyleArchive_LabelImage::_impl_.image_null_)
      - PROTOBUF_FIELD_OFFSET(ListStyleArchive_LabelImage, _impl_.database_image_)>(
          reinterpret_cast<char*>(&_impl_.database_image_),
          reinterpret_cast<char*>(&other->_impl_.database_image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStyleArchive_LabelImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[20]);
}

// ===================================================================

class ListStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ListStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ListStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shadow_null(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::ShadowArchive& shadow(const ListStyleArchive* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_font_color_null(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Color& font_color(const ListStyleArchive* msg);
  static void set_has_font_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_font_name_null(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ListStyleArchive::_Internal::super(const ListStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::ShadowArchive&
ListStyleArchive::_Internal::shadow(const ListStyleArchive* msg) {
  return *msg->_impl_.shadow_;
}
const ::TSP::Color&
ListStyleArchive::_Internal::font_color(const ListStyleArchive* msg) {
  return *msg->_impl_.font_color_;
}
void ListStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ListStyleArchive::clear_shadow() {
  if (_impl_.shadow_ != nullptr) _impl_.shadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ListStyleArchive::clear_font_color() {
  if (_impl_.font_color_ != nullptr) _impl_.font_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ListStyleArchive::ListStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ListStyleArchive)
}
ListStyleArchive::ListStyleArchive(const ListStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.label_types_){from._impl_.label_types_}
    , decltype(_impl_.text_indents_){from._impl_.text_indents_}
    , decltype(_impl_.indents_){from._impl_.indents_}
    , decltype(_impl_.geometries_){from._impl_.geometries_}
    , decltype(_impl_.number_types_){from._impl_.number_types_}
    , decltype(_impl_.strings_){from._impl_.strings_}
    , decltype(_impl_.images_){from._impl_.images_}
    , decltype(_impl_.tiered_numbers_){from._impl_.tiered_numbers_}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.font_color_){nullptr}
    , decltype(_impl_.override_count_){}
    , decltype(_impl_.shadow_null_){}
    , decltype(_impl_.font_color_null_){}
    , decltype(_impl_.font_name_null_){}
    , decltype(_impl_.writing_direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_font_name()) {
    _this->_impl_.font_name_.Set(from._internal_font_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_shadow()) {
    _this->_impl_.shadow_ = new ::TSD::ShadowArchive(*from._impl_.shadow_);
  }
  if (from._internal_has_font_color()) {
    _this->_impl_.font_color_ = new ::TSP::Color(*from._impl_.font_color_);
  }
  ::memcpy(&_impl_.override_count_, &from._impl_.override_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.writing_direction_) -
    reinterpret_cast<char*>(&_impl_.override_count_)) + sizeof(_impl_.writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ListStyleArchive)
}

inline void ListStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.label_types_){arena}
    , decltype(_impl_.text_indents_){arena}
    , decltype(_impl_.indents_){arena}
    , decltype(_impl_.geometries_){arena}
    , decltype(_impl_.number_types_){arena}
    , decltype(_impl_.strings_){arena}
    , decltype(_impl_.images_){arena}
    , decltype(_impl_.tiered_numbers_){arena}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.shadow_){nullptr}
    , decltype(_impl_.font_color_){nullptr}
    , decltype(_impl_.override_count_){0u}
    , decltype(_impl_.shadow_null_){false}
    , decltype(_impl_.font_color_null_){false}
    , decltype(_impl_.font_name_null_){false}
    , decltype(_impl_.writing_direction_){-1}
  };
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListStyleArchive::~ListStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ListStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_types_.~RepeatedField();
  _impl_.text_indents_.~RepeatedField();
  _impl_.indents_.~RepeatedField();
  _impl_.geometries_.~RepeatedPtrField();
  _impl_.number_types_.~RepeatedField();
  _impl_.strings_.~RepeatedPtrField();
  _impl_.images_.~RepeatedPtrField();
  _impl_.tiered_numbers_.~RepeatedField();
  _impl_.font_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.shadow_;
  if (this != internal_default_instance()) delete _impl_.font_color_;
}

void ListStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ListStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_types_.Clear();
  _impl_.text_indents_.Clear();
  _impl_.indents_.Clear();
  _impl_.geometries_.Clear();
  _impl_.number_types_.Clear();
  _impl_.strings_.Clear();
  _impl_.images_.Clear();
  _impl_.tiered_numbers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.shadow_ != nullptr);
      _impl_.shadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.font_color_ != nullptr);
      _impl_.font_color_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.override_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.font_name_null_) -
        reinterpret_cast<char*>(&_impl_.override_count_)) + sizeof(_impl_.font_name_null_));
  }
  _impl_.writing_direction_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TSWP::ListStyleArchive_LabelType_IsValid(val))) {
              _internal_add_label_types(static_cast<::TSWP::ListStyleArchive_LabelType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_label_types(), ptr, ctx, ::TSWP::ListStyleArchive_LabelType_IsValid, &_internal_metadata_, 11);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float text_indents = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_text_indents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_text_indents(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float indents = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_indents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_indents(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geometries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TSWP::ListStyleArchive_NumberType_IsValid(val))) {
              _internal_add_number_types(static_cast<::TSWP::ListStyleArchive_NumberType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_number_types(), ptr, ctx, ::TSWP::ListStyleArchive_NumberType_IsValid, &_internal_metadata_, 15);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string strings = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_strings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSWP.ListStyleArchive.strings");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool shadow_null = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_shadow_null(&has_bits);
          _impl_.shadow_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive shadow = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool font_color_null = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_font_color_null(&has_bits);
          _impl_.font_color_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color font_color = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_font_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool font_name_null = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_font_name_null(&has_bits);
          _impl_.font_name_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string font_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_font_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.ListStyleArchive.font_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated bool tiered_numbers = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_tiered_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<uint8_t>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_tiered_numbers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ListStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  for (int i = 0, n = this->_internal_label_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_label_types(i), target);
  }

  // repeated float text_indents = 12;
  for (int i = 0, n = this->_internal_text_indents_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_text_indents(i), target);
  }

  // repeated float indents = 13;
  for (int i = 0, n = this->_internal_indents_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_indents(i), target);
  }

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geometries_size()); i < n; i++) {
    const auto& repfield = this->_internal_geometries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  for (int i = 0, n = this->_internal_number_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        15, this->_internal_number_types(i), target);
  }

  // repeated string strings = 16;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ListStyleArchive.strings");
    target = stream->WriteString(16, s, target);
  }

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_images_size()); i < n; i++) {
    const auto& repfield = this->_internal_images(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool shadow_null = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_shadow_null(), target);
  }

  // optional .TSD.ShadowArchive shadow = 19;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::shadow(this),
        _Internal::shadow(this).GetCachedSize(), target, stream);
  }

  // optional bool font_color_null = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_font_color_null(), target);
  }

  // optional .TSP.Color font_color = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::font_color(this),
        _Internal::font_color(this).GetCachedSize(), target, stream);
  }

  // optional bool font_name_null = 22;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_font_name_null(), target);
  }

  // optional string font_name = 23;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.ListStyleArchive.font_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_font_name(), target);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_writing_direction(), target);
  }

  // repeated bool tiered_numbers = 25;
  for (int i = 0, n = this->_internal_tiered_numbers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_tiered_numbers(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ListStyleArchive)
  return target;
}

size_t ListStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ListStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_label_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_label_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated float text_indents = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_text_indents_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_text_indents_size());
    total_size += data_size;
  }

  // repeated float indents = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_indents_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_indents_size());
    total_size += data_size;
  }

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  total_size += 1UL * this->_internal_geometries_size();
  for (const auto& msg : this->_impl_.geometries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_number_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_number_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string strings = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.strings_.size());
  for (int i = 0, n = _impl_.strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.strings_.Get(i));
  }

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  total_size += 2UL * this->_internal_images_size();
  for (const auto& msg : this->_impl_.images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool tiered_numbers = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tiered_numbers_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_tiered_numbers_size());
    total_size += data_size;
  }

  // optional string font_name = 23;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSD.ShadowArchive shadow = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shadow_);
    }

    // optional .TSP.Color font_color = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.font_color_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

    // optional bool shadow_null = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool font_color_null = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool font_name_null = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_writing_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStyleArchive::GetClassData() const { return &_class_data_; }


void ListStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListStyleArchive*>(&to_msg);
  auto& from = static_cast<const ListStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ListStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.label_types_.MergeFrom(from._impl_.label_types_);
  _this->_impl_.text_indents_.MergeFrom(from._impl_.text_indents_);
  _this->_impl_.indents_.MergeFrom(from._impl_.indents_);
  _this->_impl_.geometries_.MergeFrom(from._impl_.geometries_);
  _this->_impl_.number_types_.MergeFrom(from._impl_.number_types_);
  _this->_impl_.strings_.MergeFrom(from._impl_.strings_);
  _this->_impl_.images_.MergeFrom(from._impl_.images_);
  _this->_impl_.tiered_numbers_.MergeFrom(from._impl_.tiered_numbers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_shadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_shadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_font_color()->::TSP::Color::MergeFrom(
          from._internal_font_color());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.shadow_null_ = from._impl_.shadow_null_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.font_color_null_ = from._impl_.font_color_null_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.font_name_null_ = from._impl_.font_name_null_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_writing_direction(from._internal_writing_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListStyleArchive::CopyFrom(const ListStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ListStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.images_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_shadow()) {
    if (!_impl_.shadow_->IsInitialized()) return false;
  }
  if (_internal_has_font_color()) {
    if (!_impl_.font_color_->IsInitialized()) return false;
  }
  return true;
}

void ListStyleArchive::InternalSwap(ListStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.label_types_.InternalSwap(&other->_impl_.label_types_);
  _impl_.text_indents_.InternalSwap(&other->_impl_.text_indents_);
  _impl_.indents_.InternalSwap(&other->_impl_.indents_);
  _impl_.geometries_.InternalSwap(&other->_impl_.geometries_);
  _impl_.number_types_.InternalSwap(&other->_impl_.number_types_);
  _impl_.strings_.InternalSwap(&other->_impl_.strings_);
  _impl_.images_.InternalSwap(&other->_impl_.images_);
  _impl_.tiered_numbers_.InternalSwap(&other->_impl_.tiered_numbers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.font_name_, lhs_arena,
      &other->_impl_.font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListStyleArchive, _impl_.font_name_null_)
      + sizeof(ListStyleArchive::_impl_.font_name_null_)
      - PROTOBUF_FIELD_OFFSET(ListStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.writing_direction_, other->_impl_.writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[21]);
}

// ===================================================================

class TextStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextStylePresetArchive>()._impl_._has_bits_);
  static void set_has_preset_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& paragraph_style(const TextStylePresetArchive* msg);
  static void set_has_paragraph_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& list_style(const TextStylePresetArchive* msg);
  static void set_has_list_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TextStylePresetArchive::_Internal::paragraph_style(const TextStylePresetArchive* msg) {
  return *msg->_impl_.paragraph_style_;
}
const ::TSP::Reference&
TextStylePresetArchive::_Internal::list_style(const TextStylePresetArchive* msg) {
  return *msg->_impl_.list_style_;
}
void TextStylePresetArchive::clear_paragraph_style() {
  if (_impl_.paragraph_style_ != nullptr) _impl_.paragraph_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TextStylePresetArchive::clear_list_style() {
  if (_impl_.list_style_ != nullptr) _impl_.list_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TextStylePresetArchive::TextStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TextStylePresetArchive)
}
TextStylePresetArchive::TextStylePresetArchive(const TextStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextStylePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preset_identifier_){}
    , decltype(_impl_.paragraph_style_){nullptr}
    , decltype(_impl_.list_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preset_identifier()) {
    _this->_impl_.preset_identifier_.Set(from._internal_preset_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_paragraph_style()) {
    _this->_impl_.paragraph_style_ = new ::TSP::Reference(*from._impl_.paragraph_style_);
  }
  if (from._internal_has_list_style()) {
    _this->_impl_.list_style_ = new ::TSP::Reference(*from._impl_.list_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TextStylePresetArchive)
}

inline void TextStylePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preset_identifier_){}
    , decltype(_impl_.paragraph_style_){nullptr}
    , decltype(_impl_.list_style_){nullptr}
  };
  _impl_.preset_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextStylePresetArchive::~TextStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextStylePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preset_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.paragraph_style_;
  if (this != internal_default_instance()) delete _impl_.list_style_;
}

void TextStylePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextStylePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.preset_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.paragraph_style_ != nullptr);
      _impl_.paragraph_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.list_style_ != nullptr);
      _impl_.list_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextStylePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string preset_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_preset_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TextStylePresetArchive.preset_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference paragraph_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference list_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextStylePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextStylePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string preset_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preset_identifier().data(), static_cast<int>(this->_internal_preset_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TextStylePresetArchive.preset_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preset_identifier(), target);
  }

  // optional .TSP.Reference paragraph_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paragraph_style(this),
        _Internal::paragraph_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference list_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::list_style(this),
        _Internal::list_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextStylePresetArchive)
  return target;
}

size_t TextStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextStylePresetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string preset_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preset_identifier());
    }

    // optional .TSP.Reference paragraph_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paragraph_style_);
    }

    // optional .TSP.Reference list_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.list_style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextStylePresetArchive::GetClassData() const { return &_class_data_; }


void TextStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextStylePresetArchive*>(&to_msg);
  auto& from = static_cast<const TextStylePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_preset_identifier(from._internal_preset_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_paragraph_style()->::TSP::Reference::MergeFrom(
          from._internal_paragraph_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_list_style()->::TSP::Reference::MergeFrom(
          from._internal_list_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextStylePresetArchive::CopyFrom(const TextStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextStylePresetArchive::IsInitialized() const {
  if (_internal_has_paragraph_style()) {
    if (!_impl_.paragraph_style_->IsInitialized()) return false;
  }
  if (_internal_has_list_style()) {
    if (!_impl_.list_style_->IsInitialized()) return false;
  }
  return true;
}

void TextStylePresetArchive::InternalSwap(TextStylePresetArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preset_identifier_, lhs_arena,
      &other->_impl_.preset_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextStylePresetArchive, _impl_.list_style_)
      + sizeof(TextStylePresetArchive::_impl_.list_style_)
      - PROTOBUF_FIELD_OFFSET(TextStylePresetArchive, _impl_.paragraph_style_)>(
          reinterpret_cast<char*>(&_impl_.paragraph_style_),
          reinterpret_cast<char*>(&other->_impl_.paragraph_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextStylePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[22]);
}

// ===================================================================

class ColumnsArchive_EqualColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive_EqualColumnsArchive>()._impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive.EqualColumnsArchive)
}
ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive(const ColumnsArchive_EqualColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnsArchive_EqualColumnsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){}
    , decltype(_impl_.gap_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gap_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.gap_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive.EqualColumnsArchive)
}

inline void ColumnsArchive_EqualColumnsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.gap_){0}
  };
}

ColumnsArchive_EqualColumnsArchive::~ColumnsArchive_EqualColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive.EqualColumnsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnsArchive_EqualColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnsArchive_EqualColumnsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnsArchive_EqualColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gap_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.gap_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive_EqualColumnsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float gap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_gap(&has_bits);
          _impl_.gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnsArchive_EqualColumnsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // optional float gap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_gap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive.EqualColumnsArchive)
  return target;
}

size_t ColumnsArchive_EqualColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

    // optional float gap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive_EqualColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnsArchive_EqualColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive_EqualColumnsArchive::GetClassData() const { return &_class_data_; }


void ColumnsArchive_EqualColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnsArchive_EqualColumnsArchive*>(&to_msg);
  auto& from = static_cast<const ColumnsArchive_EqualColumnsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gap_ = from._impl_.gap_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive_EqualColumnsArchive::CopyFrom(const ColumnsArchive_EqualColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive.EqualColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_EqualColumnsArchive::IsInitialized() const {
  return true;
}

void ColumnsArchive_EqualColumnsArchive::InternalSwap(ColumnsArchive_EqualColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, _impl_.gap_)
      + sizeof(ColumnsArchive_EqualColumnsArchive::_impl_.gap_)
      - PROTOBUF_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive_EqualColumnsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[23]);
}

// ===================================================================

class ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive>()._impl_._has_bits_);
  static void set_has_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
}
ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gap_){}
    , decltype(_impl_.width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gap_, &from._impl_.gap_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) -
    reinterpret_cast<char*>(&_impl_.gap_)) + sizeof(_impl_.width_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
}

inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gap_){0}
    , decltype(_impl_.width_){0}
  };
}

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::~ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.gap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.gap_)) + sizeof(_impl_.width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float gap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_gap(&has_bits);
          _impl_.gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float gap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_gap(), target);
  }

  // required float width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  return target;
}

size_t ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  size_t total_size = 0;

  if (_internal_has_gap()) {
    // required float gap = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_width()) {
    // required float width = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float gap = 1;
    total_size += 1 + 4;

    // required float width = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::GetClassData() const { return &_class_data_; }


void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive*>(&to_msg);
  auto& from = static_cast<const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gap_ = from._impl_.gap_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::CopyFrom(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::InternalSwap(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _impl_.width_)
      + sizeof(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _impl_.gap_)>(
          reinterpret_cast<char*>(&_impl_.gap_),
          reinterpret_cast<char*>(&other->_impl_.gap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[24]);
}

// ===================================================================

class ColumnsArchive_NonEqualColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive_NonEqualColumnsArchive>()._impl_._has_bits_);
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive)
}
ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive(const ColumnsArchive_NonEqualColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnsArchive_NonEqualColumnsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.following_){from._impl_.following_}
    , decltype(_impl_.first_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.first_ = from._impl_.first_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive.NonEqualColumnsArchive)
}

inline void ColumnsArchive_NonEqualColumnsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.following_){arena}
    , decltype(_impl_.first_){0}
  };
}

ColumnsArchive_NonEqualColumnsArchive::~ColumnsArchive_NonEqualColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnsArchive_NonEqualColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.following_.~RepeatedPtrField();
}

void ColumnsArchive_NonEqualColumnsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnsArchive_NonEqualColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.following_.Clear();
  _impl_.first_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive_NonEqualColumnsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_following(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnsArchive_NonEqualColumnsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_first(), target);
  }

  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_following_size()); i < n; i++) {
    const auto& repfield = this->_internal_following(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  return target;
}

size_t ColumnsArchive_NonEqualColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  size_t total_size = 0;

  // required float first = 1;
  if (_internal_has_first()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  total_size += 1UL * this->_internal_following_size();
  for (const auto& msg : this->_impl_.following_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive_NonEqualColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnsArchive_NonEqualColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive_NonEqualColumnsArchive::GetClassData() const { return &_class_data_; }


void ColumnsArchive_NonEqualColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnsArchive_NonEqualColumnsArchive*>(&to_msg);
  auto& from = static_cast<const ColumnsArchive_NonEqualColumnsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.following_.MergeFrom(from._impl_.following_);
  if (from._internal_has_first()) {
    _this->_internal_set_first(from._internal_first());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive_NonEqualColumnsArchive::CopyFrom(const ColumnsArchive_NonEqualColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive.NonEqualColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_NonEqualColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.following_))
    return false;
  return true;
}

void ColumnsArchive_NonEqualColumnsArchive::InternalSwap(ColumnsArchive_NonEqualColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.following_.InternalSwap(&other->_impl_.following_);
  swap(_impl_.first_, other->_impl_.first_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive_NonEqualColumnsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[25]);
}

// ===================================================================

class ColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnsArchive>()._impl_._has_bits_);
  static const ::TSWP::ColumnsArchive_EqualColumnsArchive& equal_columns(const ColumnsArchive* msg);
  static void set_has_equal_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::ColumnsArchive_NonEqualColumnsArchive& non_equal_columns(const ColumnsArchive* msg);
  static void set_has_non_equal_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::ColumnsArchive_EqualColumnsArchive&
ColumnsArchive::_Internal::equal_columns(const ColumnsArchive* msg) {
  return *msg->_impl_.equal_columns_;
}
const ::TSWP::ColumnsArchive_NonEqualColumnsArchive&
ColumnsArchive::_Internal::non_equal_columns(const ColumnsArchive* msg) {
  return *msg->_impl_.non_equal_columns_;
}
ColumnsArchive::ColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnsArchive)
}
ColumnsArchive::ColumnsArchive(const ColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.equal_columns_){nullptr}
    , decltype(_impl_.non_equal_columns_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_equal_columns()) {
    _this->_impl_.equal_columns_ = new ::TSWP::ColumnsArchive_EqualColumnsArchive(*from._impl_.equal_columns_);
  }
  if (from._internal_has_non_equal_columns()) {
    _this->_impl_.non_equal_columns_ = new ::TSWP::ColumnsArchive_NonEqualColumnsArchive(*from._impl_.non_equal_columns_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnsArchive)
}

inline void ColumnsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.equal_columns_){nullptr}
    , decltype(_impl_.non_equal_columns_){nullptr}
  };
}

ColumnsArchive::~ColumnsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.equal_columns_;
  if (this != internal_default_instance()) delete _impl_.non_equal_columns_;
}

void ColumnsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.equal_columns_ != nullptr);
      _impl_.equal_columns_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.non_equal_columns_ != nullptr);
      _impl_.non_equal_columns_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_equal_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_equal_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::equal_columns(this),
        _Internal::equal_columns(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::non_equal_columns(this),
        _Internal::non_equal_columns(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnsArchive)
  return target;
}

size_t ColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.equal_columns_);
    }

    // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.non_equal_columns_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnsArchive::GetClassData() const { return &_class_data_; }


void ColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnsArchive*>(&to_msg);
  auto& from = static_cast<const ColumnsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_equal_columns()->::TSWP::ColumnsArchive_EqualColumnsArchive::MergeFrom(
          from._internal_equal_columns());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_non_equal_columns()->::TSWP::ColumnsArchive_NonEqualColumnsArchive::MergeFrom(
          from._internal_non_equal_columns());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnsArchive::CopyFrom(const ColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive::IsInitialized() const {
  if (_internal_has_non_equal_columns()) {
    if (!_impl_.non_equal_columns_->IsInitialized()) return false;
  }
  return true;
}

void ColumnsArchive::InternalSwap(ColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnsArchive, _impl_.non_equal_columns_)
      + sizeof(ColumnsArchive::_impl_.non_equal_columns_)
      - PROTOBUF_FIELD_OFFSET(ColumnsArchive, _impl_.equal_columns_)>(
          reinterpret_cast<char*>(&_impl_.equal_columns_),
          reinterpret_cast<char*>(&other->_impl_.equal_columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[26]);
}

// ===================================================================

class PaddingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PaddingArchive>()._impl_._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PaddingArchive::PaddingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.PaddingArchive)
}
PaddingArchive::PaddingArchive(const PaddingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaddingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_){}
    , decltype(_impl_.top_){}
    , decltype(_impl_.right_){}
    , decltype(_impl_.bottom_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.left_, &from._impl_.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bottom_) -
    reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.bottom_));
  // @@protoc_insertion_point(copy_constructor:TSWP.PaddingArchive)
}

inline void PaddingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.top_){0}
    , decltype(_impl_.right_){0}
    , decltype(_impl_.bottom_){0}
  };
}

PaddingArchive::~PaddingArchive() {
  // @@protoc_insertion_point(destructor:TSWP.PaddingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaddingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PaddingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaddingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.PaddingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_) -
        reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.bottom_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaddingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_left(&has_bits);
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_top(&has_bits);
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_right(&has_bits);
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_bottom(&has_bits);
          _impl_.bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaddingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.PaddingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_left(), target);
  }

  // optional float top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_top(), target);
  }

  // optional float right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_right(), target);
  }

  // optional float bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_bottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.PaddingArchive)
  return target;
}

size_t PaddingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.PaddingArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float top = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float bottom = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaddingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaddingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaddingArchive::GetClassData() const { return &_class_data_; }


void PaddingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaddingArchive*>(&to_msg);
  auto& from = static_cast<const PaddingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.PaddingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.left_ = from._impl_.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.top_ = from._impl_.top_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.right_ = from._impl_.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bottom_ = from._impl_.bottom_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaddingArchive::CopyFrom(const PaddingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.PaddingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingArchive::IsInitialized() const {
  return true;
}

void PaddingArchive::InternalSwap(PaddingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaddingArchive, _impl_.bottom_)
      + sizeof(PaddingArchive::_impl_.bottom_)
      - PROTOBUF_FIELD_OFFSET(PaddingArchive, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaddingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[27]);
}

// ===================================================================

class ColumnStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnStylePropertiesArchive>()._impl_._has_bits_);
  static void set_has_continuous(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shrink_to_fit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vertical_text(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_horizontal_inset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_columns_null(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::ColumnsArchive& columns(const ColumnStylePropertiesArchive* msg);
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_margins_null(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSWP::PaddingArchive& margins(const ColumnStylePropertiesArchive* msg);
  static void set_has_margins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_padding_null(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSWP::PaddingArchive& padding(const ColumnStylePropertiesArchive* msg);
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::TSWP::ColumnsArchive&
ColumnStylePropertiesArchive::_Internal::columns(const ColumnStylePropertiesArchive* msg) {
  return *msg->_impl_.columns_;
}
const ::TSWP::PaddingArchive&
ColumnStylePropertiesArchive::_Internal::margins(const ColumnStylePropertiesArchive* msg) {
  return *msg->_impl_.margins_;
}
const ::TSWP::PaddingArchive&
ColumnStylePropertiesArchive::_Internal::padding(const ColumnStylePropertiesArchive* msg) {
  return *msg->_impl_.padding_;
}
ColumnStylePropertiesArchive::ColumnStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnStylePropertiesArchive)
}
ColumnStylePropertiesArchive::ColumnStylePropertiesArchive(const ColumnStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.columns_){nullptr}
    , decltype(_impl_.margins_){nullptr}
    , decltype(_impl_.padding_){nullptr}
    , decltype(_impl_.continuous_){}
    , decltype(_impl_.shrink_to_fit_){}
    , decltype(_impl_.vertical_text_){}
    , decltype(_impl_.columns_null_){}
    , decltype(_impl_.min_horizontal_inset_){}
    , decltype(_impl_.vertical_alignment_){}
    , decltype(_impl_.margins_null_){}
    , decltype(_impl_.padding_null_){}
    , decltype(_impl_.writing_direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_columns()) {
    _this->_impl_.columns_ = new ::TSWP::ColumnsArchive(*from._impl_.columns_);
  }
  if (from._internal_has_margins()) {
    _this->_impl_.margins_ = new ::TSWP::PaddingArchive(*from._impl_.margins_);
  }
  if (from._internal_has_padding()) {
    _this->_impl_.padding_ = new ::TSWP::PaddingArchive(*from._impl_.padding_);
  }
  ::memcpy(&_impl_.continuous_, &from._impl_.continuous_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.writing_direction_) -
    reinterpret_cast<char*>(&_impl_.continuous_)) + sizeof(_impl_.writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnStylePropertiesArchive)
}

inline void ColumnStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.columns_){nullptr}
    , decltype(_impl_.margins_){nullptr}
    , decltype(_impl_.padding_){nullptr}
    , decltype(_impl_.continuous_){false}
    , decltype(_impl_.shrink_to_fit_){false}
    , decltype(_impl_.vertical_text_){false}
    , decltype(_impl_.columns_null_){false}
    , decltype(_impl_.min_horizontal_inset_){0}
    , decltype(_impl_.vertical_alignment_){0}
    , decltype(_impl_.margins_null_){false}
    , decltype(_impl_.padding_null_){false}
    , decltype(_impl_.writing_direction_){-1}
  };
}

ColumnStylePropertiesArchive::~ColumnStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.columns_;
  if (this != internal_default_instance()) delete _impl_.margins_;
  if (this != internal_default_instance()) delete _impl_.padding_;
}

void ColumnStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.columns_ != nullptr);
      _impl_.columns_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.margins_ != nullptr);
      _impl_.margins_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.padding_ != nullptr);
      _impl_.padding_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.continuous_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.min_horizontal_inset_) -
        reinterpret_cast<char*>(&_impl_.continuous_)) + sizeof(_impl_.min_horizontal_inset_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.vertical_alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.padding_null_) -
        reinterpret_cast<char*>(&_impl_.vertical_alignment_)) + sizeof(_impl_.padding_null_));
    _impl_.writing_direction_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool continuous = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_continuous(&has_bits);
          _impl_.continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shrink_to_fit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shrink_to_fit(&has_bits);
          _impl_.shrink_to_fit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vertical_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vertical_text(&has_bits);
          _impl_.vertical_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float min_horizontal_inset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_min_horizontal_inset(&has_bits);
          _impl_.min_horizontal_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool columns_null = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_columns_null(&has_bits);
          _impl_.columns_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ColumnsArchive columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool margins_null = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_margins_null(&has_bits);
          _impl_.margins_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.PaddingArchive margins = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_margins(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool padding_null = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_padding_null(&has_bits);
          _impl_.padding_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.PaddingArchive padding = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool continuous = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_continuous(), target);
  }

  // optional bool shrink_to_fit = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_shrink_to_fit(), target);
  }

  // optional bool vertical_text = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_vertical_text(), target);
  }

  // optional float min_horizontal_inset = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_min_horizontal_inset(), target);
  }

  // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_vertical_alignment(), target);
  }

  // optional bool columns_null = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_columns_null(), target);
  }

  // optional .TSWP.ColumnsArchive columns = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::columns(this),
        _Internal::columns(this).GetCachedSize(), target, stream);
  }

  // optional bool margins_null = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_margins_null(), target);
  }

  // optional .TSWP.PaddingArchive margins = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::margins(this),
        _Internal::margins(this).GetCachedSize(), target, stream);
  }

  // optional bool padding_null = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_padding_null(), target);
  }

  // optional .TSWP.PaddingArchive padding = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::padding(this),
        _Internal::padding(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_writing_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnStylePropertiesArchive)
  return target;
}

size_t ColumnStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.ColumnsArchive columns = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.columns_);
    }

    // optional .TSWP.PaddingArchive margins = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.margins_);
    }

    // optional .TSWP.PaddingArchive padding = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.padding_);
    }

    // optional bool continuous = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool shrink_to_fit = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool vertical_text = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool columns_null = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional float min_horizontal_inset = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional bool margins_null = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool padding_null = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_writing_direction());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void ColumnStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const ColumnStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_columns()->::TSWP::ColumnsArchive::MergeFrom(
          from._internal_columns());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_margins()->::TSWP::PaddingArchive::MergeFrom(
          from._internal_margins());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_padding()->::TSWP::PaddingArchive::MergeFrom(
          from._internal_padding());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.continuous_ = from._impl_.continuous_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shrink_to_fit_ = from._impl_.shrink_to_fit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.vertical_text_ = from._impl_.vertical_text_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.columns_null_ = from._impl_.columns_null_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.min_horizontal_inset_ = from._impl_.min_horizontal_inset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.vertical_alignment_ = from._impl_.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.margins_null_ = from._impl_.margins_null_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.padding_null_ = from._impl_.padding_null_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.writing_direction_ = from._impl_.writing_direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnStylePropertiesArchive::CopyFrom(const ColumnStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_columns()) {
    if (!_impl_.columns_->IsInitialized()) return false;
  }
  return true;
}

void ColumnStylePropertiesArchive::InternalSwap(ColumnStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnStylePropertiesArchive, _impl_.padding_null_)
      + sizeof(ColumnStylePropertiesArchive::_impl_.padding_null_)
      - PROTOBUF_FIELD_OFFSET(ColumnStylePropertiesArchive, _impl_.columns_)>(
          reinterpret_cast<char*>(&_impl_.columns_),
          reinterpret_cast<char*>(&other->_impl_.columns_));
  swap(_impl_.writing_direction_, other->_impl_.writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[28]);
}

// ===================================================================

class ColumnStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ColumnStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::ColumnStylePropertiesArchive& column_properties(const ColumnStyleArchive* msg);
  static void set_has_column_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ColumnStyleArchive::_Internal::super(const ColumnStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSWP::ColumnStylePropertiesArchive&
ColumnStyleArchive::_Internal::column_properties(const ColumnStyleArchive* msg) {
  return *msg->_impl_.column_properties_;
}
void ColumnStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ColumnStyleArchive::ColumnStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ColumnStyleArchive)
}
ColumnStyleArchive::ColumnStyleArchive(const ColumnStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.column_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_column_properties()) {
    _this->_impl_.column_properties_ = new ::TSWP::ColumnStylePropertiesArchive(*from._impl_.column_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ColumnStyleArchive)
}

inline void ColumnStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.column_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

ColumnStyleArchive::~ColumnStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ColumnStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.column_properties_;
}

void ColumnStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ColumnStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.column_properties_ != nullptr);
      _impl_.column_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ColumnStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::column_properties(this),
        _Internal::column_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ColumnStyleArchive)
  return target;
}

size_t ColumnStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ColumnStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnStyleArchive::GetClassData() const { return &_class_data_; }


void ColumnStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnStyleArchive*>(&to_msg);
  auto& from = static_cast<const ColumnStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ColumnStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_column_properties()->::TSWP::ColumnStylePropertiesArchive::MergeFrom(
          from._internal_column_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnStyleArchive::CopyFrom(const ColumnStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ColumnStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_column_properties()) {
    if (!_impl_.column_properties_->IsInitialized()) return false;
  }
  return true;
}

void ColumnStyleArchive::InternalSwap(ColumnStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnStyleArchive, _impl_.override_count_)
      + sizeof(ColumnStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(ColumnStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[29]);
}

// ===================================================================

class ShapeStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStylePropertiesArchive>()._impl_._has_bits_);
  static void set_has_shrink_to_fit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_columns_null(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::ColumnsArchive& columns(const ShapeStylePropertiesArchive* msg);
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_padding_null(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::PaddingArchive& padding(const ShapeStylePropertiesArchive* msg);
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_text_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vertical_text(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_paragraph_style_null(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& paragraph_style(const ShapeStylePropertiesArchive* msg);
  static void set_has_paragraph_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSWP::ColumnsArchive&
ShapeStylePropertiesArchive::_Internal::columns(const ShapeStylePropertiesArchive* msg) {
  return *msg->_impl_.columns_;
}
const ::TSWP::PaddingArchive&
ShapeStylePropertiesArchive::_Internal::padding(const ShapeStylePropertiesArchive* msg) {
  return *msg->_impl_.padding_;
}
const ::TSP::Reference&
ShapeStylePropertiesArchive::_Internal::paragraph_style(const ShapeStylePropertiesArchive* msg) {
  return *msg->_impl_.paragraph_style_;
}
void ShapeStylePropertiesArchive::clear_paragraph_style() {
  if (_impl_.paragraph_style_ != nullptr) _impl_.paragraph_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeStylePropertiesArchive)
}
ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(const ShapeStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShapeStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.columns_){nullptr}
    , decltype(_impl_.padding_){nullptr}
    , decltype(_impl_.paragraph_style_){nullptr}
    , decltype(_impl_.vertical_alignment_){}
    , decltype(_impl_.shrink_to_fit_){}
    , decltype(_impl_.columns_null_){}
    , decltype(_impl_.padding_null_){}
    , decltype(_impl_.vertical_text_){}
    , decltype(_impl_.default_text_preset_index_){}
    , decltype(_impl_.paragraph_style_null_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_columns()) {
    _this->_impl_.columns_ = new ::TSWP::ColumnsArchive(*from._impl_.columns_);
  }
  if (from._internal_has_padding()) {
    _this->_impl_.padding_ = new ::TSWP::PaddingArchive(*from._impl_.padding_);
  }
  if (from._internal_has_paragraph_style()) {
    _this->_impl_.paragraph_style_ = new ::TSP::Reference(*from._impl_.paragraph_style_);
  }
  ::memcpy(&_impl_.vertical_alignment_, &from._impl_.vertical_alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.paragraph_style_null_) -
    reinterpret_cast<char*>(&_impl_.vertical_alignment_)) + sizeof(_impl_.paragraph_style_null_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeStylePropertiesArchive)
}

inline void ShapeStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.columns_){nullptr}
    , decltype(_impl_.padding_){nullptr}
    , decltype(_impl_.paragraph_style_){nullptr}
    , decltype(_impl_.vertical_alignment_){0}
    , decltype(_impl_.shrink_to_fit_){false}
    , decltype(_impl_.columns_null_){false}
    , decltype(_impl_.padding_null_){false}
    , decltype(_impl_.vertical_text_){false}
    , decltype(_impl_.default_text_preset_index_){0u}
    , decltype(_impl_.paragraph_style_null_){false}
  };
}

ShapeStylePropertiesArchive::~ShapeStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShapeStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.columns_;
  if (this != internal_default_instance()) delete _impl_.padding_;
  if (this != internal_default_instance()) delete _impl_.paragraph_style_;
}

void ShapeStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShapeStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.columns_ != nullptr);
      _impl_.columns_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.padding_ != nullptr);
      _impl_.padding_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.paragraph_style_ != nullptr);
      _impl_.paragraph_style_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.vertical_alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vertical_text_) -
        reinterpret_cast<char*>(&_impl_.vertical_alignment_)) + sizeof(_impl_.vertical_text_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.default_text_preset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.paragraph_style_null_) -
        reinterpret_cast<char*>(&_impl_.default_text_preset_index_)) + sizeof(_impl_.paragraph_style_null_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool shrink_to_fit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shrink_to_fit(&has_bits);
          _impl_.shrink_to_fit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool columns_null = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_columns_null(&has_bits);
          _impl_.columns_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ColumnsArchive columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool padding_null = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_padding_null(&has_bits);
          _impl_.padding_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.PaddingArchive padding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 default_text_preset_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_default_text_preset_index(&has_bits);
          _impl_.default_text_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vertical_text = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_vertical_text(&has_bits);
          _impl_.vertical_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool paragraph_style_null = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_paragraph_style_null(&has_bits);
          _impl_.paragraph_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference paragraph_style = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShapeStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool shrink_to_fit = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_shrink_to_fit(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vertical_alignment(), target);
  }

  // optional bool columns_null = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_columns_null(), target);
  }

  // optional .TSWP.ColumnsArchive columns = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::columns(this),
        _Internal::columns(this).GetCachedSize(), target, stream);
  }

  // optional bool padding_null = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_padding_null(), target);
  }

  // optional .TSWP.PaddingArchive padding = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::padding(this),
        _Internal::padding(this).GetCachedSize(), target, stream);
  }

  // optional uint32 default_text_preset_index = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_default_text_preset_index(), target);
  }

  // optional bool vertical_text = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_vertical_text(), target);
  }

  // optional bool paragraph_style_null = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_paragraph_style_null(), target);
  }

  // optional .TSP.Reference paragraph_style = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::paragraph_style(this),
        _Internal::paragraph_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeStylePropertiesArchive)
  return target;
}

size_t ShapeStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.ColumnsArchive columns = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.columns_);
    }

    // optional .TSWP.PaddingArchive padding = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.padding_);
    }

    // optional .TSP.Reference paragraph_style = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paragraph_style_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional bool shrink_to_fit = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool columns_null = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool padding_null = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool vertical_text = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 default_text_preset_index = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_default_text_preset_index());
    }

    // optional bool paragraph_style_null = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShapeStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void ShapeStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShapeStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const ShapeStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_columns()->::TSWP::ColumnsArchive::MergeFrom(
          from._internal_columns());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_padding()->::TSWP::PaddingArchive::MergeFrom(
          from._internal_padding());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_paragraph_style()->::TSP::Reference::MergeFrom(
          from._internal_paragraph_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vertical_alignment_ = from._impl_.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shrink_to_fit_ = from._impl_.shrink_to_fit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.columns_null_ = from._impl_.columns_null_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.padding_null_ = from._impl_.padding_null_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.vertical_text_ = from._impl_.vertical_text_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.default_text_preset_index_ = from._impl_.default_text_preset_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.paragraph_style_null_ = from._impl_.paragraph_style_null_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeStylePropertiesArchive::CopyFrom(const ShapeStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_columns()) {
    if (!_impl_.columns_->IsInitialized()) return false;
  }
  if (_internal_has_paragraph_style()) {
    if (!_impl_.paragraph_style_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStylePropertiesArchive::InternalSwap(ShapeStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStylePropertiesArchive, _impl_.paragraph_style_null_)
      + sizeof(ShapeStylePropertiesArchive::_impl_.paragraph_style_null_)
      - PROTOBUF_FIELD_OFFSET(ShapeStylePropertiesArchive, _impl_.columns_)>(
          reinterpret_cast<char*>(&_impl_.columns_),
          reinterpret_cast<char*>(&other->_impl_.columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[30]);
}

// ===================================================================

class ShapeStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStyleArchive>()._impl_._has_bits_);
  static const ::TSD::ShapeStyleArchive& super(const ShapeStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& shape_properties(const ShapeStyleArchive* msg);
  static void set_has_shape_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ShapeStyleArchive&
ShapeStyleArchive::_Internal::super(const ShapeStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSWP::ShapeStylePropertiesArchive&
ShapeStyleArchive::_Internal::shape_properties(const ShapeStyleArchive* msg) {
  return *msg->_impl_.shape_properties_;
}
void ShapeStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ShapeStyleArchive::ShapeStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeStyleArchive)
}
ShapeStyleArchive::ShapeStyleArchive(const ShapeStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShapeStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.shape_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ShapeStyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_shape_properties()) {
    _this->_impl_.shape_properties_ = new ::TSWP::ShapeStylePropertiesArchive(*from._impl_.shape_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeStyleArchive)
}

inline void ShapeStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.shape_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

ShapeStyleArchive::~ShapeStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShapeStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.shape_properties_;
}

void ShapeStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShapeStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.shape_properties_ != nullptr);
      _impl_.shape_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ShapeStyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShapeStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ShapeStyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::shape_properties(this),
        _Internal::shape_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeStyleArchive)
  return target;
}

size_t ShapeStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeStyleArchive)
  size_t total_size = 0;

  // required .TSD.ShapeStyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shape_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShapeStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeStyleArchive::GetClassData() const { return &_class_data_; }


void ShapeStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShapeStyleArchive*>(&to_msg);
  auto& from = static_cast<const ShapeStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::ShapeStyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shape_properties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(
          from._internal_shape_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeStyleArchive::CopyFrom(const ShapeStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_shape_properties()) {
    if (!_impl_.shape_properties_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleArchive::InternalSwap(ShapeStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStyleArchive, _impl_.override_count_)
      + sizeof(ShapeStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(ShapeStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[31]);
}

// ===================================================================

class ThemePresetsArchive::_Internal {
 public:
};

void ThemePresetsArchive::clear_list_style_presets() {
  _impl_.list_style_presets_.Clear();
}
void ThemePresetsArchive::clear_text_style_presets() {
  _impl_.text_style_presets_.Clear();
}
void ThemePresetsArchive::clear_imported_text_style_presets() {
  _impl_.imported_text_style_presets_.Clear();
}
void ThemePresetsArchive::clear_toc_entry_style_presets() {
  _impl_.toc_entry_style_presets_.Clear();
}
void ThemePresetsArchive::clear_toc_settings_presets() {
  _impl_.toc_settings_presets_.Clear();
}
void ThemePresetsArchive::clear_character_style_presets() {
  _impl_.character_style_presets_.Clear();
}
void ThemePresetsArchive::clear_paragraph_style_presets() {
  _impl_.paragraph_style_presets_.Clear();
}
ThemePresetsArchive::ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ThemePresetsArchive)
}
ThemePresetsArchive::ThemePresetsArchive(const ThemePresetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemePresetsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_style_presets_){from._impl_.list_style_presets_}
    , decltype(_impl_.text_style_presets_){from._impl_.text_style_presets_}
    , decltype(_impl_.imported_text_style_presets_){from._impl_.imported_text_style_presets_}
    , decltype(_impl_.toc_entry_style_presets_){from._impl_.toc_entry_style_presets_}
    , decltype(_impl_.toc_settings_presets_){from._impl_.toc_settings_presets_}
    , decltype(_impl_.character_style_presets_){from._impl_.character_style_presets_}
    , decltype(_impl_.paragraph_style_presets_){from._impl_.paragraph_style_presets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.ThemePresetsArchive)
}

inline void ThemePresetsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_style_presets_){arena}
    , decltype(_impl_.text_style_presets_){arena}
    , decltype(_impl_.imported_text_style_presets_){arena}
    , decltype(_impl_.toc_entry_style_presets_){arena}
    , decltype(_impl_.toc_settings_presets_){arena}
    , decltype(_impl_.character_style_presets_){arena}
    , decltype(_impl_.paragraph_style_presets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThemePresetsArchive::~ThemePresetsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ThemePresetsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemePresetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_style_presets_.~RepeatedPtrField();
  _impl_.text_style_presets_.~RepeatedPtrField();
  _impl_.imported_text_style_presets_.~RepeatedPtrField();
  _impl_.toc_entry_style_presets_.~RepeatedPtrField();
  _impl_.toc_settings_presets_.~RepeatedPtrField();
  _impl_.character_style_presets_.~RepeatedPtrField();
  _impl_.paragraph_style_presets_.~RepeatedPtrField();
}

void ThemePresetsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemePresetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ThemePresetsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_style_presets_.Clear();
  _impl_.text_style_presets_.Clear();
  _impl_.imported_text_style_presets_.Clear();
  _impl_.toc_entry_style_presets_.Clear();
  _impl_.toc_settings_presets_.Clear();
  _impl_.character_style_presets_.Clear();
  _impl_.paragraph_style_presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemePresetsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference list_style_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference text_style_presets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference imported_text_style_presets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imported_text_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_entry_style_presets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_entry_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_settings_presets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_settings_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference character_style_presets = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_character_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_style_presets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemePresetsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ThemePresetsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference list_style_presets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_list_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference text_style_presets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_text_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_text_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference imported_text_style_presets = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_imported_text_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_imported_text_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_toc_entry_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_toc_entry_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference toc_settings_presets = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_toc_settings_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_toc_settings_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference character_style_presets = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_character_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_character_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference paragraph_style_presets = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paragraph_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_paragraph_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ThemePresetsArchive)
  return target;
}

size_t ThemePresetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ThemePresetsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference list_style_presets = 1;
  total_size += 1UL * this->_internal_list_style_presets_size();
  for (const auto& msg : this->_impl_.list_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference text_style_presets = 2;
  total_size += 1UL * this->_internal_text_style_presets_size();
  for (const auto& msg : this->_impl_.text_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference imported_text_style_presets = 3;
  total_size += 1UL * this->_internal_imported_text_style_presets_size();
  for (const auto& msg : this->_impl_.imported_text_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  total_size += 1UL * this->_internal_toc_entry_style_presets_size();
  for (const auto& msg : this->_impl_.toc_entry_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference toc_settings_presets = 5;
  total_size += 1UL * this->_internal_toc_settings_presets_size();
  for (const auto& msg : this->_impl_.toc_settings_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference character_style_presets = 6;
  total_size += 1UL * this->_internal_character_style_presets_size();
  for (const auto& msg : this->_impl_.character_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_style_presets = 7;
  total_size += 1UL * this->_internal_paragraph_style_presets_size();
  for (const auto& msg : this->_impl_.paragraph_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemePresetsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemePresetsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemePresetsArchive::GetClassData() const { return &_class_data_; }


void ThemePresetsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemePresetsArchive*>(&to_msg);
  auto& from = static_cast<const ThemePresetsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ThemePresetsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_style_presets_.MergeFrom(from._impl_.list_style_presets_);
  _this->_impl_.text_style_presets_.MergeFrom(from._impl_.text_style_presets_);
  _this->_impl_.imported_text_style_presets_.MergeFrom(from._impl_.imported_text_style_presets_);
  _this->_impl_.toc_entry_style_presets_.MergeFrom(from._impl_.toc_entry_style_presets_);
  _this->_impl_.toc_settings_presets_.MergeFrom(from._impl_.toc_settings_presets_);
  _this->_impl_.character_style_presets_.MergeFrom(from._impl_.character_style_presets_);
  _this->_impl_.paragraph_style_presets_.MergeFrom(from._impl_.paragraph_style_presets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemePresetsArchive::CopyFrom(const ThemePresetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ThemePresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemePresetsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.list_style_presets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.text_style_presets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.imported_text_style_presets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.toc_entry_style_presets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.toc_settings_presets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.character_style_presets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.paragraph_style_presets_))
    return false;
  return true;
}

void ThemePresetsArchive::InternalSwap(ThemePresetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_style_presets_.InternalSwap(&other->_impl_.list_style_presets_);
  _impl_.text_style_presets_.InternalSwap(&other->_impl_.text_style_presets_);
  _impl_.imported_text_style_presets_.InternalSwap(&other->_impl_.imported_text_style_presets_);
  _impl_.toc_entry_style_presets_.InternalSwap(&other->_impl_.toc_entry_style_presets_);
  _impl_.toc_settings_presets_.InternalSwap(&other->_impl_.toc_settings_presets_);
  _impl_.character_style_presets_.InternalSwap(&other->_impl_.character_style_presets_);
  _impl_.paragraph_style_presets_.InternalSwap(&other->_impl_.paragraph_style_presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemePresetsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[32]);
}

// ===================================================================

class TextPresetDisplayItemArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextPresetDisplayItemArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& preset(const TextPresetDisplayItemArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
TextPresetDisplayItemArchive::_Internal::preset(const TextPresetDisplayItemArchive* msg) {
  return *msg->_impl_.preset_;
}
void TextPresetDisplayItemArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TextPresetDisplayItemArchive::TextPresetDisplayItemArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TextPresetDisplayItemArchive)
}
TextPresetDisplayItemArchive::TextPresetDisplayItemArchive(const TextPresetDisplayItemArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextPresetDisplayItemArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.preset_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TextPresetDisplayItemArchive)
}

inline void TextPresetDisplayItemArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.preset_){nullptr}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextPresetDisplayItemArchive::~TextPresetDisplayItemArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextPresetDisplayItemArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextPresetDisplayItemArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.display_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.preset_;
}

void TextPresetDisplayItemArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextPresetDisplayItemArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextPresetDisplayItemArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextPresetDisplayItemArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference preset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TextPresetDisplayItemArchive.display_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextPresetDisplayItemArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextPresetDisplayItemArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference preset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // required string display_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TextPresetDisplayItemArchive.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextPresetDisplayItemArchive)
  return target;
}

size_t TextPresetDisplayItemArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.TextPresetDisplayItemArchive)
  size_t total_size = 0;

  if (_internal_has_display_name()) {
    // required string display_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  if (_internal_has_preset()) {
    // required .TSP.Reference preset = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  return total_size;
}
size_t TextPresetDisplayItemArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextPresetDisplayItemArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string display_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());

    // required .TSP.Reference preset = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextPresetDisplayItemArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextPresetDisplayItemArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextPresetDisplayItemArchive::GetClassData() const { return &_class_data_; }


void TextPresetDisplayItemArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextPresetDisplayItemArchive*>(&to_msg);
  auto& from = static_cast<const TextPresetDisplayItemArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextPresetDisplayItemArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextPresetDisplayItemArchive::CopyFrom(const TextPresetDisplayItemArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextPresetDisplayItemArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextPresetDisplayItemArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  return true;
}

void TextPresetDisplayItemArchive::InternalSwap(TextPresetDisplayItemArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  swap(_impl_.preset_, other->_impl_.preset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextPresetDisplayItemArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[33]);
}

// ===================================================================

class TOCEntryStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCEntryStylePropertiesArchive>()._impl_._has_bits_);
  static void set_has_page_number_style_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& page_number_style(const TOCEntryStylePropertiesArchive* msg);
  static void set_has_page_number_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TOCEntryStylePropertiesArchive::_Internal::page_number_style(const TOCEntryStylePropertiesArchive* msg) {
  return *msg->_impl_.page_number_style_;
}
void TOCEntryStylePropertiesArchive::clear_page_number_style() {
  if (_impl_.page_number_style_ != nullptr) _impl_.page_number_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCEntryStylePropertiesArchive)
}
TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive(const TOCEntryStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCEntryStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_number_style_){nullptr}
    , decltype(_impl_.page_number_style_null_){}
    , decltype(_impl_.show_page_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_page_number_style()) {
    _this->_impl_.page_number_style_ = new ::TSP::Reference(*from._impl_.page_number_style_);
  }
  ::memcpy(&_impl_.page_number_style_null_, &from._impl_.page_number_style_null_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_page_number_) -
    reinterpret_cast<char*>(&_impl_.page_number_style_null_)) + sizeof(_impl_.show_page_number_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCEntryStylePropertiesArchive)
}

inline void TOCEntryStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_number_style_){nullptr}
    , decltype(_impl_.page_number_style_null_){false}
    , decltype(_impl_.show_page_number_){false}
  };
}

TOCEntryStylePropertiesArchive::~TOCEntryStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCEntryStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCEntryStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.page_number_style_;
}

void TOCEntryStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCEntryStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCEntryStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.page_number_style_ != nullptr);
    _impl_.page_number_style_->Clear();
  }
  ::memset(&_impl_.page_number_style_null_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.show_page_number_) -
      reinterpret_cast<char*>(&_impl_.page_number_style_null_)) + sizeof(_impl_.show_page_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCEntryStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool page_number_style_null = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_page_number_style_null(&has_bits);
          _impl_.page_number_style_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference page_number_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_number_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_page_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_show_page_number(&has_bits);
          _impl_.show_page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCEntryStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCEntryStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool page_number_style_null = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_page_number_style_null(), target);
  }

  // optional .TSP.Reference page_number_style = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::page_number_style(this),
        _Internal::page_number_style(this).GetCachedSize(), target, stream);
  }

  // optional bool show_page_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_show_page_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCEntryStylePropertiesArchive)
  return target;
}

size_t TOCEntryStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCEntryStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference page_number_style = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.page_number_style_);
    }

    // optional bool page_number_style_null = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool show_page_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCEntryStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCEntryStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCEntryStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void TOCEntryStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCEntryStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const TOCEntryStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCEntryStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_page_number_style()->::TSP::Reference::MergeFrom(
          from._internal_page_number_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.page_number_style_null_ = from._impl_.page_number_style_null_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.show_page_number_ = from._impl_.show_page_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCEntryStylePropertiesArchive::CopyFrom(const TOCEntryStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCEntryStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_page_number_style()) {
    if (!_impl_.page_number_style_->IsInitialized()) return false;
  }
  return true;
}

void TOCEntryStylePropertiesArchive::InternalSwap(TOCEntryStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCEntryStylePropertiesArchive, _impl_.show_page_number_)
      + sizeof(TOCEntryStylePropertiesArchive::_impl_.show_page_number_)
      - PROTOBUF_FIELD_OFFSET(TOCEntryStylePropertiesArchive, _impl_.page_number_style_)>(
          reinterpret_cast<char*>(&_impl_.page_number_style_),
          reinterpret_cast<char*>(&other->_impl_.page_number_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCEntryStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[34]);
}

// ===================================================================

class TOCEntryStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCEntryStyleArchive>()._impl_._has_bits_);
  static const ::TSWP::ParagraphStyleArchive& super(const TOCEntryStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::TOCEntryStylePropertiesArchive& toc_properties(const TOCEntryStyleArchive* msg);
  static void set_has_toc_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ParagraphStyleArchive&
TOCEntryStyleArchive::_Internal::super(const TOCEntryStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSWP::TOCEntryStylePropertiesArchive&
TOCEntryStyleArchive::_Internal::toc_properties(const TOCEntryStyleArchive* msg) {
  return *msg->_impl_.toc_properties_;
}
TOCEntryStyleArchive::TOCEntryStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCEntryStyleArchive)
}
TOCEntryStyleArchive::TOCEntryStyleArchive(const TOCEntryStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCEntryStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toc_properties_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::ParagraphStyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_toc_properties()) {
    _this->_impl_.toc_properties_ = new ::TSWP::TOCEntryStylePropertiesArchive(*from._impl_.toc_properties_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCEntryStyleArchive)
}

inline void TOCEntryStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toc_properties_){nullptr}
  };
}

TOCEntryStyleArchive::~TOCEntryStyleArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCEntryStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCEntryStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.toc_properties_;
}

void TOCEntryStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCEntryStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCEntryStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.toc_properties_ != nullptr);
      _impl_.toc_properties_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCEntryStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ParagraphStyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_toc_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCEntryStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCEntryStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.ParagraphStyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::toc_properties(this),
        _Internal::toc_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCEntryStyleArchive)
  return target;
}

size_t TOCEntryStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCEntryStyleArchive)
  size_t total_size = 0;

  // required .TSWP.ParagraphStyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.toc_properties_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCEntryStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCEntryStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCEntryStyleArchive::GetClassData() const { return &_class_data_; }


void TOCEntryStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCEntryStyleArchive*>(&to_msg);
  auto& from = static_cast<const TOCEntryStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCEntryStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::ParagraphStyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_toc_properties()->::TSWP::TOCEntryStylePropertiesArchive::MergeFrom(
          from._internal_toc_properties());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCEntryStyleArchive::CopyFrom(const TOCEntryStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCEntryStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_toc_properties()) {
    if (!_impl_.toc_properties_->IsInitialized()) return false;
  }
  return true;
}

void TOCEntryStyleArchive::InternalSwap(TOCEntryStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCEntryStyleArchive, _impl_.toc_properties_)
      + sizeof(TOCEntryStyleArchive::_impl_.toc_properties_)
      - PROTOBUF_FIELD_OFFSET(TOCEntryStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCEntryStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[35]);
}

// ===================================================================

class TOCSettingsArchive_TOCEntryData::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSettingsArchive_TOCEntryData>()._impl_._has_bits_);
  static const ::TSP::Reference& paragraph_style(const TOCSettingsArchive_TOCEntryData* msg);
  static void set_has_paragraph_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& toc_entry_style(const TOCSettingsArchive_TOCEntryData* msg);
  static void set_has_toc_entry_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_in_toc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TOCSettingsArchive_TOCEntryData::_Internal::paragraph_style(const TOCSettingsArchive_TOCEntryData* msg) {
  return *msg->_impl_.paragraph_style_;
}
const ::TSP::Reference&
TOCSettingsArchive_TOCEntryData::_Internal::toc_entry_style(const TOCSettingsArchive_TOCEntryData* msg) {
  return *msg->_impl_.toc_entry_style_;
}
void TOCSettingsArchive_TOCEntryData::clear_paragraph_style() {
  if (_impl_.paragraph_style_ != nullptr) _impl_.paragraph_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TOCSettingsArchive_TOCEntryData::clear_toc_entry_style() {
  if (_impl_.toc_entry_style_ != nullptr) _impl_.toc_entry_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSettingsArchive.TOCEntryData)
}
TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData(const TOCSettingsArchive_TOCEntryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCSettingsArchive_TOCEntryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paragraph_style_){nullptr}
    , decltype(_impl_.toc_entry_style_){nullptr}
    , decltype(_impl_.show_in_toc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_paragraph_style()) {
    _this->_impl_.paragraph_style_ = new ::TSP::Reference(*from._impl_.paragraph_style_);
  }
  if (from._internal_has_toc_entry_style()) {
    _this->_impl_.toc_entry_style_ = new ::TSP::Reference(*from._impl_.toc_entry_style_);
  }
  _this->_impl_.show_in_toc_ = from._impl_.show_in_toc_;
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSettingsArchive.TOCEntryData)
}

inline void TOCSettingsArchive_TOCEntryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paragraph_style_){nullptr}
    , decltype(_impl_.toc_entry_style_){nullptr}
    , decltype(_impl_.show_in_toc_){false}
  };
}

TOCSettingsArchive_TOCEntryData::~TOCSettingsArchive_TOCEntryData() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSettingsArchive.TOCEntryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCSettingsArchive_TOCEntryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.paragraph_style_;
  if (this != internal_default_instance()) delete _impl_.toc_entry_style_;
}

void TOCSettingsArchive_TOCEntryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCSettingsArchive_TOCEntryData::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSettingsArchive.TOCEntryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.paragraph_style_ != nullptr);
      _impl_.paragraph_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.toc_entry_style_ != nullptr);
      _impl_.toc_entry_style_->Clear();
    }
  }
  _impl_.show_in_toc_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSettingsArchive_TOCEntryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference paragraph_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference toc_entry_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_toc_entry_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_in_toc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_show_in_toc(&has_bits);
          _impl_.show_in_toc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCSettingsArchive_TOCEntryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSettingsArchive.TOCEntryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference paragraph_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paragraph_style(this),
        _Internal::paragraph_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference toc_entry_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::toc_entry_style(this),
        _Internal::toc_entry_style(this).GetCachedSize(), target, stream);
  }

  // optional bool show_in_toc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_show_in_toc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSettingsArchive.TOCEntryData)
  return target;
}

size_t TOCSettingsArchive_TOCEntryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSettingsArchive.TOCEntryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference paragraph_style = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paragraph_style_);
    }

    // optional .TSP.Reference toc_entry_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.toc_entry_style_);
    }

    // optional bool show_in_toc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSettingsArchive_TOCEntryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCSettingsArchive_TOCEntryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSettingsArchive_TOCEntryData::GetClassData() const { return &_class_data_; }


void TOCSettingsArchive_TOCEntryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCSettingsArchive_TOCEntryData*>(&to_msg);
  auto& from = static_cast<const TOCSettingsArchive_TOCEntryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSettingsArchive.TOCEntryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_paragraph_style()->::TSP::Reference::MergeFrom(
          from._internal_paragraph_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_toc_entry_style()->::TSP::Reference::MergeFrom(
          from._internal_toc_entry_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.show_in_toc_ = from._impl_.show_in_toc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSettingsArchive_TOCEntryData::CopyFrom(const TOCSettingsArchive_TOCEntryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSettingsArchive.TOCEntryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSettingsArchive_TOCEntryData::IsInitialized() const {
  if (_internal_has_paragraph_style()) {
    if (!_impl_.paragraph_style_->IsInitialized()) return false;
  }
  if (_internal_has_toc_entry_style()) {
    if (!_impl_.toc_entry_style_->IsInitialized()) return false;
  }
  return true;
}

void TOCSettingsArchive_TOCEntryData::InternalSwap(TOCSettingsArchive_TOCEntryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, _impl_.show_in_toc_)
      + sizeof(TOCSettingsArchive_TOCEntryData::_impl_.show_in_toc_)
      - PROTOBUF_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, _impl_.paragraph_style_)>(
          reinterpret_cast<char*>(&_impl_.paragraph_style_),
          reinterpret_cast<char*>(&other->_impl_.paragraph_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSettingsArchive_TOCEntryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[36]);
}

// ===================================================================

class TOCSettingsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSettingsArchive>()._impl_._has_bits_);
  static void set_has_toc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_toc_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TOCSettingsArchive::TOCSettingsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSettingsArchive)
}
TOCSettingsArchive::TOCSettingsArchive(const TOCSettingsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCSettingsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.toc_name_){}
    , decltype(_impl_.toc_scope_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.toc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_toc_name()) {
    _this->_impl_.toc_name_.Set(from._internal_toc_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.toc_scope_ = from._impl_.toc_scope_;
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSettingsArchive)
}

inline void TOCSettingsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.toc_name_){}
    , decltype(_impl_.toc_scope_){0u}
  };
  _impl_.toc_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toc_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TOCSettingsArchive::~TOCSettingsArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSettingsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCSettingsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.toc_name_.Destroy();
}

void TOCSettingsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCSettingsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSettingsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.toc_name_.ClearNonDefaultToEmpty();
  }
  _impl_.toc_scope_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSettingsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string toc_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_toc_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TOCSettingsArchive.toc_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 toc_scope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_toc_scope(&has_bits);
          _impl_.toc_scope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCSettingsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSettingsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string toc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toc_name().data(), static_cast<int>(this->_internal_toc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TOCSettingsArchive.toc_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_toc_name(), target);
  }

  // optional uint32 toc_scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_toc_scope(), target);
  }

  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSettingsArchive)
  return target;
}

size_t TOCSettingsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSettingsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string toc_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toc_name());
    }

    // optional uint32 toc_scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toc_scope());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSettingsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCSettingsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSettingsArchive::GetClassData() const { return &_class_data_; }


void TOCSettingsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCSettingsArchive*>(&to_msg);
  auto& from = static_cast<const TOCSettingsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSettingsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_toc_name(from._internal_toc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.toc_scope_ = from._impl_.toc_scope_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSettingsArchive::CopyFrom(const TOCSettingsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSettingsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSettingsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void TOCSettingsArchive::InternalSwap(TOCSettingsArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toc_name_, lhs_arena,
      &other->_impl_.toc_name_, rhs_arena
  );
  swap(_impl_.toc_scope_, other->_impl_.toc_scope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSettingsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[37]);
}

// ===================================================================

class TOCEntryInstanceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCEntryInstanceArchive>()._impl_._has_bits_);
  static void set_has_paragraph_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& indexed_style(const TOCEntryInstanceArchive* msg);
  static void set_has_indexed_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSP::Reference&
TOCEntryInstanceArchive::_Internal::indexed_style(const TOCEntryInstanceArchive* msg) {
  return *msg->_impl_.indexed_style_;
}
void TOCEntryInstanceArchive::clear_indexed_style() {
  if (_impl_.indexed_style_ != nullptr) _impl_.indexed_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TOCEntryInstanceArchive::TOCEntryInstanceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCEntryInstanceArchive)
}
TOCEntryInstanceArchive::TOCEntryInstanceArchive(const TOCEntryInstanceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCEntryInstanceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.indexed_style_){nullptr}
    , decltype(_impl_.paragraph_index_){}
    , decltype(_impl_.page_number_){}
    , decltype(_impl_.number_format_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.heading_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heading_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_heading()) {
    _this->_impl_.heading_.Set(from._internal_heading(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_indexed_style()) {
    _this->_impl_.indexed_style_ = new ::TSP::Reference(*from._impl_.indexed_style_);
  }
  ::memcpy(&_impl_.paragraph_index_, &from._impl_.paragraph_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_format_) -
    reinterpret_cast<char*>(&_impl_.paragraph_index_)) + sizeof(_impl_.number_format_));
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCEntryInstanceArchive)
}

inline void TOCEntryInstanceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.indexed_style_){nullptr}
    , decltype(_impl_.paragraph_index_){0u}
    , decltype(_impl_.page_number_){0u}
    , decltype(_impl_.number_format_){0u}
  };
  _impl_.heading_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heading_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TOCEntryInstanceArchive::~TOCEntryInstanceArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCEntryInstanceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCEntryInstanceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.heading_.Destroy();
  if (this != internal_default_instance()) delete _impl_.indexed_style_;
}

void TOCEntryInstanceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCEntryInstanceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCEntryInstanceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heading_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.indexed_style_ != nullptr);
      _impl_.indexed_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.paragraph_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.number_format_) -
        reinterpret_cast<char*>(&_impl_.paragraph_index_)) + sizeof(_impl_.number_format_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCEntryInstanceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 paragraph_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_paragraph_index(&has_bits);
          _impl_.paragraph_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_page_number(&has_bits);
          _impl_.page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 number_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_number_format(&has_bits);
          _impl_.number_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_heading();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TOCEntryInstanceArchive.heading");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference indexed_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexed_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCEntryInstanceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCEntryInstanceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 paragraph_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_paragraph_index(), target);
  }

  // required uint32 page_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page_number(), target);
  }

  // required uint32 number_format = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_format(), target);
  }

  // required string heading = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heading().data(), static_cast<int>(this->_internal_heading().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TOCEntryInstanceArchive.heading");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_heading(), target);
  }

  // required .TSP.Reference indexed_style = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::indexed_style(this),
        _Internal::indexed_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCEntryInstanceArchive)
  return target;
}

size_t TOCEntryInstanceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.TOCEntryInstanceArchive)
  size_t total_size = 0;

  if (_internal_has_heading()) {
    // required string heading = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heading());
  }

  if (_internal_has_indexed_style()) {
    // required .TSP.Reference indexed_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indexed_style_);
  }

  if (_internal_has_paragraph_index()) {
    // required uint32 paragraph_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_paragraph_index());
  }

  if (_internal_has_page_number()) {
    // required uint32 page_number = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_number());
  }

  if (_internal_has_number_format()) {
    // required uint32 number_format = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_format());
  }

  return total_size;
}
size_t TOCEntryInstanceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCEntryInstanceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string heading = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heading());

    // required .TSP.Reference indexed_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.indexed_style_);

    // required uint32 paragraph_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_paragraph_index());

    // required uint32 page_number = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page_number());

    // required uint32 number_format = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCEntryInstanceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCEntryInstanceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCEntryInstanceArchive::GetClassData() const { return &_class_data_; }


void TOCEntryInstanceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCEntryInstanceArchive*>(&to_msg);
  auto& from = static_cast<const TOCEntryInstanceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCEntryInstanceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_heading(from._internal_heading());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_indexed_style()->::TSP::Reference::MergeFrom(
          from._internal_indexed_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.paragraph_index_ = from._impl_.paragraph_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.page_number_ = from._impl_.page_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.number_format_ = from._impl_.number_format_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCEntryInstanceArchive::CopyFrom(const TOCEntryInstanceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCEntryInstanceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryInstanceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_indexed_style()) {
    if (!_impl_.indexed_style_->IsInitialized()) return false;
  }
  return true;
}

void TOCEntryInstanceArchive::InternalSwap(TOCEntryInstanceArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.heading_, lhs_arena,
      &other->_impl_.heading_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCEntryInstanceArchive, _impl_.number_format_)
      + sizeof(TOCEntryInstanceArchive::_impl_.number_format_)
      - PROTOBUF_FIELD_OFFSET(TOCEntryInstanceArchive, _impl_.indexed_style_)>(
          reinterpret_cast<char*>(&_impl_.indexed_style_),
          reinterpret_cast<char*>(&other->_impl_.indexed_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCEntryInstanceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[38]);
}

// ===================================================================

class UndoTransaction_GenericTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_GenericTransaction>()._impl_._has_bits_);
  static void set_has_value1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.GenericTransaction)
}
UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction(const UndoTransaction_GenericTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_GenericTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value1_){}
    , decltype(_impl_.value2_){}
    , decltype(_impl_.value3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value1_, &from._impl_.value1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value3_) -
    reinterpret_cast<char*>(&_impl_.value1_)) + sizeof(_impl_.value3_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.GenericTransaction)
}

inline void UndoTransaction_GenericTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value1_){0u}
    , decltype(_impl_.value2_){0u}
    , decltype(_impl_.value3_){0u}
  };
}

UndoTransaction_GenericTransaction::~UndoTransaction_GenericTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.GenericTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_GenericTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_GenericTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_GenericTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.GenericTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.value1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value3_) -
        reinterpret_cast<char*>(&_impl_.value1_)) + sizeof(_impl_.value3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_GenericTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 value1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value1(&has_bits);
          _impl_.value1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value2(&has_bits);
          _impl_.value2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 value3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value3(&has_bits);
          _impl_.value3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_GenericTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.GenericTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 value1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value1(), target);
  }

  // required uint32 value2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value2(), target);
  }

  // required uint32 value3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.GenericTransaction)
  return target;
}

size_t UndoTransaction_GenericTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.GenericTransaction)
  size_t total_size = 0;

  if (_internal_has_value1()) {
    // required uint32 value1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value1());
  }

  if (_internal_has_value2()) {
    // required uint32 value2 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value2());
  }

  if (_internal_has_value3()) {
    // required uint32 value3 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value3());
  }

  return total_size;
}
size_t UndoTransaction_GenericTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.GenericTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 value1 = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value1());

    // required uint32 value2 = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value2());

    // required uint32 value3 = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_GenericTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_GenericTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_GenericTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_GenericTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_GenericTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_GenericTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.GenericTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value1_ = from._impl_.value1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value2_ = from._impl_.value2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value3_ = from._impl_.value3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_GenericTransaction::CopyFrom(const UndoTransaction_GenericTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.GenericTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_GenericTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UndoTransaction_GenericTransaction::InternalSwap(UndoTransaction_GenericTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_GenericTransaction, _impl_.value3_)
      + sizeof(UndoTransaction_GenericTransaction::_impl_.value3_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_GenericTransaction, _impl_.value1_)>(
          reinterpret_cast<char*>(&_impl_.value1_),
          reinterpret_cast<char*>(&other->_impl_.value1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_GenericTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[39]);
}

// ===================================================================

class UndoTransaction_TextTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_TextTransaction>()._impl_._has_bits_);
  static void set_has_insert_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_insert_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_to_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

UndoTransaction_TextTransaction::UndoTransaction_TextTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.TextTransaction)
}
UndoTransaction_TextTransaction::UndoTransaction_TextTransaction(const UndoTransaction_TextTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_TextTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_to_delete_){}
    , decltype(_impl_.insert_location_){}
    , decltype(_impl_.insert_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_to_delete_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_to_delete_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_to_delete()) {
    _this->_impl_.string_to_delete_.Set(from._internal_string_to_delete(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.insert_location_, &from._impl_.insert_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.insert_length_) -
    reinterpret_cast<char*>(&_impl_.insert_location_)) + sizeof(_impl_.insert_length_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.TextTransaction)
}

inline void UndoTransaction_TextTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_to_delete_){}
    , decltype(_impl_.insert_location_){0u}
    , decltype(_impl_.insert_length_){0u}
  };
  _impl_.string_to_delete_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_to_delete_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UndoTransaction_TextTransaction::~UndoTransaction_TextTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.TextTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_TextTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_to_delete_.Destroy();
}

void UndoTransaction_TextTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_TextTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.TextTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_to_delete_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.insert_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.insert_length_) -
        reinterpret_cast<char*>(&_impl_.insert_location_)) + sizeof(_impl_.insert_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_TextTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 insert_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_insert_location(&has_bits);
          _impl_.insert_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 insert_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_insert_length(&has_bits);
          _impl_.insert_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_to_delete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_string_to_delete();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.UndoTransaction.TextTransaction.string_to_delete");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_TextTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.TextTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 insert_location = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_insert_location(), target);
  }

  // required uint32 insert_length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_insert_length(), target);
  }

  // optional string string_to_delete = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_to_delete().data(), static_cast<int>(this->_internal_string_to_delete().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.TextTransaction.string_to_delete");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string_to_delete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.TextTransaction)
  return target;
}

size_t UndoTransaction_TextTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.TextTransaction)
  size_t total_size = 0;

  if (_internal_has_insert_location()) {
    // required uint32 insert_location = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_insert_location());
  }

  if (_internal_has_insert_length()) {
    // required uint32 insert_length = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_insert_length());
  }

  return total_size;
}
size_t UndoTransaction_TextTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.TextTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 insert_location = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_insert_location());

    // required uint32 insert_length = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_insert_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string string_to_delete = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_to_delete());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_TextTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_TextTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_TextTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_TextTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_TextTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_TextTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.TextTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_to_delete(from._internal_string_to_delete());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.insert_location_ = from._impl_.insert_location_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.insert_length_ = from._impl_.insert_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_TextTransaction::CopyFrom(const UndoTransaction_TextTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.TextTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_TextTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UndoTransaction_TextTransaction::InternalSwap(UndoTransaction_TextTransaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_to_delete_, lhs_arena,
      &other->_impl_.string_to_delete_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_TextTransaction, _impl_.insert_length_)
      + sizeof(UndoTransaction_TextTransaction::_impl_.insert_length_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_TextTransaction, _impl_.insert_location_)>(
          reinterpret_cast<char*>(&_impl_.insert_location_),
          reinterpret_cast<char*>(&other->_impl_.insert_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_TextTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[40]);
}

// ===================================================================

class UndoTransaction_CharIndexTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_CharIndexTransaction>()._impl_._has_bits_);
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_CharIndexTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_CharIndexTransaction::_Internal::object(const UndoTransaction_CharIndexTransaction* msg) {
  return *msg->_impl_.object_;
}
void UndoTransaction_CharIndexTransaction::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.CharIndexTransaction)
}
UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction(const UndoTransaction_CharIndexTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_CharIndexTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.char_index_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  ::memcpy(&_impl_.char_index_, &from._impl_.char_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.char_index_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.CharIndexTransaction)
}

inline void UndoTransaction_CharIndexTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.char_index_){0u}
    , decltype(_impl_.count_){0u}
  };
}

UndoTransaction_CharIndexTransaction::~UndoTransaction_CharIndexTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.CharIndexTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_CharIndexTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void UndoTransaction_CharIndexTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_CharIndexTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.CharIndexTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.char_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.char_index_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_CharIndexTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 char_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_char_index(&has_bits);
          _impl_.char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_CharIndexTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.CharIndexTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 char_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_index(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.CharIndexTransaction)
  return target;
}

size_t UndoTransaction_CharIndexTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.CharIndexTransaction)
  size_t total_size = 0;

  if (_internal_has_char_index()) {
    // required uint32 char_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t UndoTransaction_CharIndexTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.CharIndexTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 char_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());

    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference object = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_CharIndexTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_CharIndexTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_CharIndexTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_CharIndexTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_CharIndexTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_CharIndexTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.CharIndexTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.char_index_ = from._impl_.char_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_CharIndexTransaction::CopyFrom(const UndoTransaction_CharIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.CharIndexTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CharIndexTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_CharIndexTransaction::InternalSwap(UndoTransaction_CharIndexTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, _impl_.count_)
      + sizeof(UndoTransaction_CharIndexTransaction::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_CharIndexTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[41]);
}

// ===================================================================

class UndoTransaction_ReplaceCharIndexTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_ReplaceCharIndexTransaction>()._impl_._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
}
UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction(const UndoTransaction_ReplaceCharIndexTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_ReplaceCharIndexTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_index_){}
    , decltype(_impl_.char_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attribute_index_, &from._impl_.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.char_index_) -
    reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.char_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
}

inline void UndoTransaction_ReplaceCharIndexTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_index_){0u}
    , decltype(_impl_.char_index_){0u}
  };
}

UndoTransaction_ReplaceCharIndexTransaction::~UndoTransaction_ReplaceCharIndexTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_ReplaceCharIndexTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_ReplaceCharIndexTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_ReplaceCharIndexTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.char_index_) -
        reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.char_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_ReplaceCharIndexTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          _impl_.attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 char_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_char_index(&has_bits);
          _impl_.char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_ReplaceCharIndexTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 char_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  return target;
}

size_t UndoTransaction_ReplaceCharIndexTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());
  }

  if (_internal_has_char_index()) {
    // required uint32 char_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());
  }

  return total_size;
}
size_t UndoTransaction_ReplaceCharIndexTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());

    // required uint32 char_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_ReplaceCharIndexTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_ReplaceCharIndexTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_ReplaceCharIndexTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_ReplaceCharIndexTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_ReplaceCharIndexTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_ReplaceCharIndexTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.char_index_ = from._impl_.char_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_ReplaceCharIndexTransaction::CopyFrom(const UndoTransaction_ReplaceCharIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.ReplaceCharIndexTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ReplaceCharIndexTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UndoTransaction_ReplaceCharIndexTransaction::InternalSwap(UndoTransaction_ReplaceCharIndexTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, _impl_.char_index_)
      + sizeof(UndoTransaction_ReplaceCharIndexTransaction::_impl_.char_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, _impl_.attribute_index_)>(
          reinterpret_cast<char*>(&_impl_.attribute_index_),
          reinterpret_cast<char*>(&other->_impl_.attribute_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_ReplaceCharIndexTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[42]);
}

// ===================================================================

class UndoTransaction_AttributeIndexTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_AttributeIndexTransaction>()._impl_._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_AttributeIndexTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_AttributeIndexTransaction::_Internal::object(const UndoTransaction_AttributeIndexTransaction* msg) {
  return *msg->_impl_.object_;
}
void UndoTransaction_AttributeIndexTransaction::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.AttributeIndexTransaction)
}
UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction(const UndoTransaction_AttributeIndexTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_AttributeIndexTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.attribute_index_){}
    , decltype(_impl_.char_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string()) {
    _this->_impl_.string_.Set(from._internal_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  ::memcpy(&_impl_.attribute_index_, &from._impl_.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.char_index_) -
    reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.char_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.AttributeIndexTransaction)
}

inline void UndoTransaction_AttributeIndexTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.attribute_index_){0u}
    , decltype(_impl_.char_index_){0u}
  };
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UndoTransaction_AttributeIndexTransaction::~UndoTransaction_AttributeIndexTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.AttributeIndexTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_AttributeIndexTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
}

void UndoTransaction_AttributeIndexTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_AttributeIndexTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_ != nullptr);
      _impl_.object_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.char_index_) -
        reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.char_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_AttributeIndexTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          _impl_.attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 char_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_char_index(&has_bits);
          _impl_.char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.UndoTransaction.AttributeIndexTransaction.string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_AttributeIndexTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 char_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_char_index(), target);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // optional string string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.AttributeIndexTransaction.string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.AttributeIndexTransaction)
  return target;
}

size_t UndoTransaction_AttributeIndexTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());
  }

  if (_internal_has_char_index()) {
    // required uint32 char_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());
  }

  return total_size;
}
size_t UndoTransaction_AttributeIndexTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());

    // required uint32 char_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional .TSP.Reference object = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_AttributeIndexTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_AttributeIndexTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_AttributeIndexTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_AttributeIndexTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_AttributeIndexTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_AttributeIndexTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.char_index_ = from._impl_.char_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_AttributeIndexTransaction::CopyFrom(const UndoTransaction_AttributeIndexTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.AttributeIndexTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_AttributeIndexTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_AttributeIndexTransaction::InternalSwap(UndoTransaction_AttributeIndexTransaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_, lhs_arena,
      &other->_impl_.string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, _impl_.char_index_)
      + sizeof(UndoTransaction_AttributeIndexTransaction::_impl_.char_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_AttributeIndexTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[43]);
}

// ===================================================================

class UndoTransaction_InsertAttributeTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_InsertAttributeTransaction>()._impl_._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attribute_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_InsertAttributeTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_InsertAttributeTransaction::_Internal::object(const UndoTransaction_InsertAttributeTransaction* msg) {
  return *msg->_impl_.object_;
}
void UndoTransaction_InsertAttributeTransaction::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.InsertAttributeTransaction)
}
UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction(const UndoTransaction_InsertAttributeTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_InsertAttributeTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.attribute_index_){}
    , decltype(_impl_.attribute_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string()) {
    _this->_impl_.string_.Set(from._internal_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  ::memcpy(&_impl_.attribute_index_, &from._impl_.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attribute_count_) -
    reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.attribute_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.InsertAttributeTransaction)
}

inline void UndoTransaction_InsertAttributeTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.attribute_index_){0u}
    , decltype(_impl_.attribute_count_){0u}
  };
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UndoTransaction_InsertAttributeTransaction::~UndoTransaction_InsertAttributeTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.InsertAttributeTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_InsertAttributeTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.object_;
}

void UndoTransaction_InsertAttributeTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_InsertAttributeTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_ != nullptr);
      _impl_.object_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attribute_count_) -
        reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.attribute_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_InsertAttributeTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          _impl_.attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 attribute_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attribute_count(&has_bits);
          _impl_.attribute_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.UndoTransaction.InsertAttributeTransaction.string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_InsertAttributeTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 attribute_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attribute_count(), target);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  // optional string string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UndoTransaction.InsertAttributeTransaction.string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.InsertAttributeTransaction)
  return target;
}

size_t UndoTransaction_InsertAttributeTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());
  }

  if (_internal_has_attribute_count()) {
    // required uint32 attribute_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_count());
  }

  return total_size;
}
size_t UndoTransaction_InsertAttributeTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());

    // required uint32 attribute_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional .TSP.Reference object = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_InsertAttributeTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_InsertAttributeTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_InsertAttributeTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_InsertAttributeTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_InsertAttributeTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_InsertAttributeTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.attribute_count_ = from._impl_.attribute_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_InsertAttributeTransaction::CopyFrom(const UndoTransaction_InsertAttributeTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.InsertAttributeTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_InsertAttributeTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_InsertAttributeTransaction::InternalSwap(UndoTransaction_InsertAttributeTransaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_, lhs_arena,
      &other->_impl_.string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, _impl_.attribute_count_)
      + sizeof(UndoTransaction_InsertAttributeTransaction::_impl_.attribute_count_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_InsertAttributeTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[44]);
}

// ===================================================================

class UndoTransaction_InsertNilTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_InsertNilTransaction>()._impl_._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attribute_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.InsertNilTransaction)
}
UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction(const UndoTransaction_InsertNilTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_InsertNilTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_index_){}
    , decltype(_impl_.attribute_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attribute_index_, &from._impl_.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attribute_count_) -
    reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.attribute_count_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.InsertNilTransaction)
}

inline void UndoTransaction_InsertNilTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_index_){0u}
    , decltype(_impl_.attribute_count_){0u}
  };
}

UndoTransaction_InsertNilTransaction::~UndoTransaction_InsertNilTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.InsertNilTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_InsertNilTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_InsertNilTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_InsertNilTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.InsertNilTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attribute_count_) -
        reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.attribute_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_InsertNilTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          _impl_.attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 attribute_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attribute_count(&has_bits);
          _impl_.attribute_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_InsertNilTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.InsertNilTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 attribute_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attribute_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.InsertNilTransaction)
  return target;
}

size_t UndoTransaction_InsertNilTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.InsertNilTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());
  }

  if (_internal_has_attribute_count()) {
    // required uint32 attribute_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_count());
  }

  return total_size;
}
size_t UndoTransaction_InsertNilTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.InsertNilTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());

    // required uint32 attribute_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_InsertNilTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_InsertNilTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_InsertNilTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_InsertNilTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_InsertNilTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_InsertNilTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.InsertNilTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attribute_count_ = from._impl_.attribute_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_InsertNilTransaction::CopyFrom(const UndoTransaction_InsertNilTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.InsertNilTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_InsertNilTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UndoTransaction_InsertNilTransaction::InternalSwap(UndoTransaction_InsertNilTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, _impl_.attribute_count_)
      + sizeof(UndoTransaction_InsertNilTransaction::_impl_.attribute_count_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, _impl_.attribute_index_)>(
          reinterpret_cast<char*>(&_impl_.attribute_index_),
          reinterpret_cast<char*>(&other->_impl_.attribute_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_InsertNilTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[45]);
}

// ===================================================================

class UndoTransaction_CharDeltaTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_CharDeltaTransaction>()._impl_._has_bits_);
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_char_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.CharDeltaTransaction)
}
UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction(const UndoTransaction_CharDeltaTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_CharDeltaTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.char_index_){}
    , decltype(_impl_.attribute_index_){}
    , decltype(_impl_.char_delta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.char_index_, &from._impl_.char_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.char_delta_) -
    reinterpret_cast<char*>(&_impl_.char_index_)) + sizeof(_impl_.char_delta_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.CharDeltaTransaction)
}

inline void UndoTransaction_CharDeltaTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.char_index_){0u}
    , decltype(_impl_.attribute_index_){0u}
    , decltype(_impl_.char_delta_){0}
  };
}

UndoTransaction_CharDeltaTransaction::~UndoTransaction_CharDeltaTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.CharDeltaTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_CharDeltaTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_CharDeltaTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_CharDeltaTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.CharDeltaTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.char_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.char_delta_) -
        reinterpret_cast<char*>(&_impl_.char_index_)) + sizeof(_impl_.char_delta_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_CharDeltaTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 char_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_char_index(&has_bits);
          _impl_.char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 attribute_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attribute_index(&has_bits);
          _impl_.attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sint32 char_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_char_delta(&has_bits);
          _impl_.char_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_CharDeltaTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.CharDeltaTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 char_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_char_index(), target);
  }

  // required uint32 attribute_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attribute_index(), target);
  }

  // required sint32 char_delta = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_char_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.CharDeltaTransaction)
  return target;
}

size_t UndoTransaction_CharDeltaTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.CharDeltaTransaction)
  size_t total_size = 0;

  if (_internal_has_char_index()) {
    // required uint32 char_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());
  }

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());
  }

  if (_internal_has_char_delta()) {
    // required sint32 char_delta = 3;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_char_delta());
  }

  return total_size;
}
size_t UndoTransaction_CharDeltaTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.CharDeltaTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 char_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());

    // required uint32 attribute_index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());

    // required sint32 char_delta = 3;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_char_delta());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_CharDeltaTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_CharDeltaTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_CharDeltaTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_CharDeltaTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_CharDeltaTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_CharDeltaTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.CharDeltaTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.char_index_ = from._impl_.char_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.char_delta_ = from._impl_.char_delta_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_CharDeltaTransaction::CopyFrom(const UndoTransaction_CharDeltaTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.CharDeltaTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CharDeltaTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UndoTransaction_CharDeltaTransaction::InternalSwap(UndoTransaction_CharDeltaTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, _impl_.char_delta_)
      + sizeof(UndoTransaction_CharDeltaTransaction::_impl_.char_delta_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, _impl_.char_index_)>(
          reinterpret_cast<char*>(&_impl_.char_index_),
          reinterpret_cast<char*>(&other->_impl_.char_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_CharDeltaTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[46]);
}

// ===================================================================

class UndoTransaction_ParagraphDataTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_ParagraphDataTransaction>()._impl_._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.ParagraphDataTransaction)
}
UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction(const UndoTransaction_ParagraphDataTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_ParagraphDataTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_index_){}
    , decltype(_impl_.first_){}
    , decltype(_impl_.second_){}
    , decltype(_impl_.char_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attribute_index_, &from._impl_.attribute_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.char_index_) -
    reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.char_index_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.ParagraphDataTransaction)
}

inline void UndoTransaction_ParagraphDataTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_index_){0u}
    , decltype(_impl_.first_){0u}
    , decltype(_impl_.second_){0u}
    , decltype(_impl_.char_index_){0u}
  };
}

UndoTransaction_ParagraphDataTransaction::~UndoTransaction_ParagraphDataTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.ParagraphDataTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_ParagraphDataTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoTransaction_ParagraphDataTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_ParagraphDataTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.attribute_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.char_index_) -
        reinterpret_cast<char*>(&_impl_.attribute_index_)) + sizeof(_impl_.char_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_ParagraphDataTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          _impl_.attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_first(&has_bits);
          _impl_.first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_second(&has_bits);
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 char_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_char_index(&has_bits);
          _impl_.char_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_ParagraphDataTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // required uint32 first = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_first(), target);
  }

  // required uint32 second = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_second(), target);
  }

  // required uint32 char_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_char_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.ParagraphDataTransaction)
  return target;
}

size_t UndoTransaction_ParagraphDataTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  size_t total_size = 0;

  if (_internal_has_attribute_index()) {
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());
  }

  if (_internal_has_first()) {
    // required uint32 first = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first());
  }

  if (_internal_has_second()) {
    // required uint32 second = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_second());
  }

  if (_internal_has_char_index()) {
    // required uint32 char_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());
  }

  return total_size;
}
size_t UndoTransaction_ParagraphDataTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 attribute_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());

    // required uint32 first = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first());

    // required uint32 second = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_second());

    // required uint32 char_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_char_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_ParagraphDataTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_ParagraphDataTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_ParagraphDataTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_ParagraphDataTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_ParagraphDataTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_ParagraphDataTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.first_ = from._impl_.first_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.second_ = from._impl_.second_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.char_index_ = from._impl_.char_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_ParagraphDataTransaction::CopyFrom(const UndoTransaction_ParagraphDataTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.ParagraphDataTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ParagraphDataTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UndoTransaction_ParagraphDataTransaction::InternalSwap(UndoTransaction_ParagraphDataTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, _impl_.char_index_)
      + sizeof(UndoTransaction_ParagraphDataTransaction::_impl_.char_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, _impl_.attribute_index_)>(
          reinterpret_cast<char*>(&_impl_.attribute_index_),
          reinterpret_cast<char*>(&other->_impl_.attribute_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_ParagraphDataTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[47]);
}

// ===================================================================

class UndoTransaction_ObjectDOLCTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_ObjectDOLCTransaction>()._impl_._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& object(const UndoTransaction_ObjectDOLCTransaction* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
UndoTransaction_ObjectDOLCTransaction::_Internal::object(const UndoTransaction_ObjectDOLCTransaction* msg) {
  return *msg->_impl_.object_;
}
void UndoTransaction_ObjectDOLCTransaction::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.ObjectDOLCTransaction)
}
UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction(const UndoTransaction_ObjectDOLCTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_ObjectDOLCTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  _this->_impl_.flags_ = from._impl_.flags_;
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.ObjectDOLCTransaction)
}

inline void UndoTransaction_ObjectDOLCTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_){nullptr}
    , decltype(_impl_.flags_){0u}
  };
}

UndoTransaction_ObjectDOLCTransaction::~UndoTransaction_ObjectDOLCTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.ObjectDOLCTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_ObjectDOLCTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void UndoTransaction_ObjectDOLCTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_ObjectDOLCTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.object_ != nullptr);
    _impl_.object_->Clear();
  }
  _impl_.flags_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_ObjectDOLCTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_ObjectDOLCTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 flags = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // optional .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.ObjectDOLCTransaction)
  return target;
}

size_t UndoTransaction_ObjectDOLCTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  size_t total_size = 0;

  // required uint32 flags = 1;
  if (_internal_has_flags()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference object = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_ObjectDOLCTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_ObjectDOLCTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_ObjectDOLCTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_ObjectDOLCTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_ObjectDOLCTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_ObjectDOLCTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_ObjectDOLCTransaction::CopyFrom(const UndoTransaction_ObjectDOLCTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.ObjectDOLCTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ObjectDOLCTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_ObjectDOLCTransaction::InternalSwap(UndoTransaction_ObjectDOLCTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, _impl_.flags_)
      + sizeof(UndoTransaction_ObjectDOLCTransaction::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, _impl_.object_)>(
          reinterpret_cast<char*>(&_impl_.object_),
          reinterpret_cast<char*>(&other->_impl_.object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_ObjectDOLCTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[48]);
}

// ===================================================================

class UndoTransaction_CTDateTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_CTDateTransaction>()._impl_._has_bits_);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Date& date(const UndoTransaction_CTDateTransaction* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Date&
UndoTransaction_CTDateTransaction::_Internal::date(const UndoTransaction_CTDateTransaction* msg) {
  return *msg->_impl_.date_;
}
void UndoTransaction_CTDateTransaction::clear_date() {
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.CTDateTransaction)
}
UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction(const UndoTransaction_CTDateTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_CTDateTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.attribute_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::TSP::Date(*from._impl_.date_);
  }
  _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.CTDateTransaction)
}

inline void UndoTransaction_CTDateTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.attribute_index_){0u}
  };
}

UndoTransaction_CTDateTransaction::~UndoTransaction_CTDateTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.CTDateTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_CTDateTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.date_;
}

void UndoTransaction_CTDateTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_CTDateTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.CTDateTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.date_ != nullptr);
    _impl_.date_->Clear();
  }
  _impl_.attribute_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_CTDateTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute_index(&has_bits);
          _impl_.attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_CTDateTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.CTDateTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 attribute_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute_index(), target);
  }

  // optional .TSP.Date date = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.CTDateTransaction)
  return target;
}

size_t UndoTransaction_CTDateTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.CTDateTransaction)
  size_t total_size = 0;

  // required uint32 attribute_index = 1;
  if (_internal_has_attribute_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Date date = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.date_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_CTDateTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_CTDateTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_CTDateTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_CTDateTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_CTDateTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_CTDateTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.CTDateTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_date()->::TSP::Date::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attribute_index_ = from._impl_.attribute_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_CTDateTransaction::CopyFrom(const UndoTransaction_CTDateTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.CTDateTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CTDateTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_date()) {
    if (!_impl_.date_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_CTDateTransaction::InternalSwap(UndoTransaction_CTDateTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_CTDateTransaction, _impl_.attribute_index_)
      + sizeof(UndoTransaction_CTDateTransaction::_impl_.attribute_index_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_CTDateTransaction, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_CTDateTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[49]);
}

// ===================================================================

class UndoTransaction_UnionTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransaction_UnionTransaction>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSWP::UndoTransaction_GenericTransaction& generic(const UndoTransaction_UnionTransaction* msg);
  static void set_has_generic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSWP::UndoTransaction_TextTransaction& text(const UndoTransaction_UnionTransaction* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSWP::UndoTransaction_CharIndexTransaction& char_index(const UndoTransaction_UnionTransaction* msg);
  static void set_has_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction& replace_char_index(const UndoTransaction_UnionTransaction* msg);
  static void set_has_replace_char_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSWP::UndoTransaction_AttributeIndexTransaction& attribute_index(const UndoTransaction_UnionTransaction* msg);
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSWP::UndoTransaction_InsertNilTransaction& insert_nil(const UndoTransaction_UnionTransaction* msg);
  static void set_has_insert_nil(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::UndoTransaction_InsertAttributeTransaction& insert_attribute(const UndoTransaction_UnionTransaction* msg);
  static void set_has_insert_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSWP::UndoTransaction_CharDeltaTransaction& char_delta(const UndoTransaction_UnionTransaction* msg);
  static void set_has_char_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSWP::UndoTransaction_ParagraphDataTransaction& paragraph_data(const UndoTransaction_UnionTransaction* msg);
  static void set_has_paragraph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSWP::UndoTransaction_ObjectDOLCTransaction& object_dolc(const UndoTransaction_UnionTransaction* msg);
  static void set_has_object_dolc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSWP::UndoTransaction_CTDateTransaction& ct_date(const UndoTransaction_UnionTransaction* msg);
  static void set_has_ct_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001000) ^ 0x00001000) != 0;
  }
};

const ::TSWP::UndoTransaction_GenericTransaction&
UndoTransaction_UnionTransaction::_Internal::generic(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.generic_;
}
const ::TSWP::UndoTransaction_TextTransaction&
UndoTransaction_UnionTransaction::_Internal::text(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.text_;
}
const ::TSWP::UndoTransaction_CharIndexTransaction&
UndoTransaction_UnionTransaction::_Internal::char_index(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.char_index_;
}
const ::TSWP::UndoTransaction_ReplaceCharIndexTransaction&
UndoTransaction_UnionTransaction::_Internal::replace_char_index(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.replace_char_index_;
}
const ::TSWP::UndoTransaction_AttributeIndexTransaction&
UndoTransaction_UnionTransaction::_Internal::attribute_index(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.attribute_index_;
}
const ::TSWP::UndoTransaction_InsertNilTransaction&
UndoTransaction_UnionTransaction::_Internal::insert_nil(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.insert_nil_;
}
const ::TSWP::UndoTransaction_InsertAttributeTransaction&
UndoTransaction_UnionTransaction::_Internal::insert_attribute(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.insert_attribute_;
}
const ::TSWP::UndoTransaction_CharDeltaTransaction&
UndoTransaction_UnionTransaction::_Internal::char_delta(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.char_delta_;
}
const ::TSWP::UndoTransaction_ParagraphDataTransaction&
UndoTransaction_UnionTransaction::_Internal::paragraph_data(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.paragraph_data_;
}
const ::TSWP::UndoTransaction_ObjectDOLCTransaction&
UndoTransaction_UnionTransaction::_Internal::object_dolc(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.object_dolc_;
}
const ::TSWP::UndoTransaction_CTDateTransaction&
UndoTransaction_UnionTransaction::_Internal::ct_date(const UndoTransaction_UnionTransaction* msg) {
  return *msg->_impl_.ct_date_;
}
UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction.UnionTransaction)
}
UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction(const UndoTransaction_UnionTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction_UnionTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.generic_){nullptr}
    , decltype(_impl_.text_){nullptr}
    , decltype(_impl_.char_index_){nullptr}
    , decltype(_impl_.replace_char_index_){nullptr}
    , decltype(_impl_.attribute_index_){nullptr}
    , decltype(_impl_.insert_nil_){nullptr}
    , decltype(_impl_.insert_attribute_){nullptr}
    , decltype(_impl_.char_delta_){nullptr}
    , decltype(_impl_.paragraph_data_){nullptr}
    , decltype(_impl_.object_dolc_){nullptr}
    , decltype(_impl_.ct_date_){nullptr}
    , decltype(_impl_.table_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_generic()) {
    _this->_impl_.generic_ = new ::TSWP::UndoTransaction_GenericTransaction(*from._impl_.generic_);
  }
  if (from._internal_has_text()) {
    _this->_impl_.text_ = new ::TSWP::UndoTransaction_TextTransaction(*from._impl_.text_);
  }
  if (from._internal_has_char_index()) {
    _this->_impl_.char_index_ = new ::TSWP::UndoTransaction_CharIndexTransaction(*from._impl_.char_index_);
  }
  if (from._internal_has_replace_char_index()) {
    _this->_impl_.replace_char_index_ = new ::TSWP::UndoTransaction_ReplaceCharIndexTransaction(*from._impl_.replace_char_index_);
  }
  if (from._internal_has_attribute_index()) {
    _this->_impl_.attribute_index_ = new ::TSWP::UndoTransaction_AttributeIndexTransaction(*from._impl_.attribute_index_);
  }
  if (from._internal_has_insert_nil()) {
    _this->_impl_.insert_nil_ = new ::TSWP::UndoTransaction_InsertNilTransaction(*from._impl_.insert_nil_);
  }
  if (from._internal_has_insert_attribute()) {
    _this->_impl_.insert_attribute_ = new ::TSWP::UndoTransaction_InsertAttributeTransaction(*from._impl_.insert_attribute_);
  }
  if (from._internal_has_char_delta()) {
    _this->_impl_.char_delta_ = new ::TSWP::UndoTransaction_CharDeltaTransaction(*from._impl_.char_delta_);
  }
  if (from._internal_has_paragraph_data()) {
    _this->_impl_.paragraph_data_ = new ::TSWP::UndoTransaction_ParagraphDataTransaction(*from._impl_.paragraph_data_);
  }
  if (from._internal_has_object_dolc()) {
    _this->_impl_.object_dolc_ = new ::TSWP::UndoTransaction_ObjectDOLCTransaction(*from._impl_.object_dolc_);
  }
  if (from._internal_has_ct_date()) {
    _this->_impl_.ct_date_ = new ::TSWP::UndoTransaction_CTDateTransaction(*from._impl_.ct_date_);
  }
  ::memcpy(&_impl_.table_, &from._impl_.table_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.table_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction.UnionTransaction)
}

inline void UndoTransaction_UnionTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.generic_){nullptr}
    , decltype(_impl_.text_){nullptr}
    , decltype(_impl_.char_index_){nullptr}
    , decltype(_impl_.replace_char_index_){nullptr}
    , decltype(_impl_.attribute_index_){nullptr}
    , decltype(_impl_.insert_nil_){nullptr}
    , decltype(_impl_.insert_attribute_){nullptr}
    , decltype(_impl_.char_delta_){nullptr}
    , decltype(_impl_.paragraph_data_){nullptr}
    , decltype(_impl_.object_dolc_){nullptr}
    , decltype(_impl_.ct_date_){nullptr}
    , decltype(_impl_.table_){0u}
    , decltype(_impl_.kind_){1}
  };
}

UndoTransaction_UnionTransaction::~UndoTransaction_UnionTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction.UnionTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction_UnionTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.generic_;
  if (this != internal_default_instance()) delete _impl_.text_;
  if (this != internal_default_instance()) delete _impl_.char_index_;
  if (this != internal_default_instance()) delete _impl_.replace_char_index_;
  if (this != internal_default_instance()) delete _impl_.attribute_index_;
  if (this != internal_default_instance()) delete _impl_.insert_nil_;
  if (this != internal_default_instance()) delete _impl_.insert_attribute_;
  if (this != internal_default_instance()) delete _impl_.char_delta_;
  if (this != internal_default_instance()) delete _impl_.paragraph_data_;
  if (this != internal_default_instance()) delete _impl_.object_dolc_;
  if (this != internal_default_instance()) delete _impl_.ct_date_;
}

void UndoTransaction_UnionTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction_UnionTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction.UnionTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.generic_ != nullptr);
      _impl_.generic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.text_ != nullptr);
      _impl_.text_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.char_index_ != nullptr);
      _impl_.char_index_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.replace_char_index_ != nullptr);
      _impl_.replace_char_index_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.attribute_index_ != nullptr);
      _impl_.attribute_index_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.insert_nil_ != nullptr);
      _impl_.insert_nil_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.insert_attribute_ != nullptr);
      _impl_.insert_attribute_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.char_delta_ != nullptr);
      _impl_.char_delta_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.paragraph_data_ != nullptr);
      _impl_.paragraph_data_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.object_dolc_ != nullptr);
      _impl_.object_dolc_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.ct_date_ != nullptr);
      _impl_.ct_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    _impl_.table_ = 0u;
    _impl_.kind_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction_UnionTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UndoTransaction.UndoKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::UndoTransaction_UndoKind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::UndoTransaction_UndoKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_table(&has_bits);
          _impl_.table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.TextTransaction text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_replace_char_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_nil(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_char_delta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_dolc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ct_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction_UnionTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction.UnionTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.UndoTransaction.UndoKind kind = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional uint32 table = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_table(), target);
  }

  // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::generic(this),
        _Internal::generic(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.TextTransaction text = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::text(this),
        _Internal::text(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::char_index(this),
        _Internal::char_index(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::replace_char_index(this),
        _Internal::replace_char_index(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::attribute_index(this),
        _Internal::attribute_index(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::insert_nil(this),
        _Internal::insert_nil(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::insert_attribute(this),
        _Internal::insert_attribute(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::char_delta(this),
        _Internal::char_delta(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::paragraph_data(this),
        _Internal::paragraph_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::object_dolc(this),
        _Internal::object_dolc(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ct_date(this),
        _Internal::ct_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction.UnionTransaction)
  return target;
}

size_t UndoTransaction_UnionTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction.UnionTransaction)
  size_t total_size = 0;

  // required .TSWP.UndoTransaction.UndoKind kind = 1;
  if (_internal_has_kind()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.generic_);
    }

    // optional .TSWP.UndoTransaction.TextTransaction text = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_);
    }

    // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.char_index_);
    }

    // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.replace_char_index_);
    }

    // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.attribute_index_);
    }

    // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.insert_nil_);
    }

    // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.insert_attribute_);
    }

    // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.char_delta_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paragraph_data_);
    }

    // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_dolc_);
    }

    // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ct_date_);
    }

    // optional uint32 table = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_table());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction_UnionTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction_UnionTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction_UnionTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction_UnionTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction_UnionTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction_UnionTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction.UnionTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_generic()->::TSWP::UndoTransaction_GenericTransaction::MergeFrom(
          from._internal_generic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_text()->::TSWP::UndoTransaction_TextTransaction::MergeFrom(
          from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_char_index()->::TSWP::UndoTransaction_CharIndexTransaction::MergeFrom(
          from._internal_char_index());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_replace_char_index()->::TSWP::UndoTransaction_ReplaceCharIndexTransaction::MergeFrom(
          from._internal_replace_char_index());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_attribute_index()->::TSWP::UndoTransaction_AttributeIndexTransaction::MergeFrom(
          from._internal_attribute_index());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_insert_nil()->::TSWP::UndoTransaction_InsertNilTransaction::MergeFrom(
          from._internal_insert_nil());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_insert_attribute()->::TSWP::UndoTransaction_InsertAttributeTransaction::MergeFrom(
          from._internal_insert_attribute());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_char_delta()->::TSWP::UndoTransaction_CharDeltaTransaction::MergeFrom(
          from._internal_char_delta());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_paragraph_data()->::TSWP::UndoTransaction_ParagraphDataTransaction::MergeFrom(
          from._internal_paragraph_data());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_object_dolc()->::TSWP::UndoTransaction_ObjectDOLCTransaction::MergeFrom(
          from._internal_object_dolc());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_ct_date()->::TSWP::UndoTransaction_CTDateTransaction::MergeFrom(
          from._internal_ct_date());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.table_ = from._impl_.table_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction_UnionTransaction::CopyFrom(const UndoTransaction_UnionTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction.UnionTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_UnionTransaction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_generic()) {
    if (!_impl_.generic_->IsInitialized()) return false;
  }
  if (_internal_has_text()) {
    if (!_impl_.text_->IsInitialized()) return false;
  }
  if (_internal_has_char_index()) {
    if (!_impl_.char_index_->IsInitialized()) return false;
  }
  if (_internal_has_replace_char_index()) {
    if (!_impl_.replace_char_index_->IsInitialized()) return false;
  }
  if (_internal_has_attribute_index()) {
    if (!_impl_.attribute_index_->IsInitialized()) return false;
  }
  if (_internal_has_insert_nil()) {
    if (!_impl_.insert_nil_->IsInitialized()) return false;
  }
  if (_internal_has_insert_attribute()) {
    if (!_impl_.insert_attribute_->IsInitialized()) return false;
  }
  if (_internal_has_char_delta()) {
    if (!_impl_.char_delta_->IsInitialized()) return false;
  }
  if (_internal_has_paragraph_data()) {
    if (!_impl_.paragraph_data_->IsInitialized()) return false;
  }
  if (_internal_has_object_dolc()) {
    if (!_impl_.object_dolc_->IsInitialized()) return false;
  }
  if (_internal_has_ct_date()) {
    if (!_impl_.ct_date_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_UnionTransaction::InternalSwap(UndoTransaction_UnionTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoTransaction_UnionTransaction, _impl_.table_)
      + sizeof(UndoTransaction_UnionTransaction::_impl_.table_)
      - PROTOBUF_FIELD_OFFSET(UndoTransaction_UnionTransaction, _impl_.generic_)>(
          reinterpret_cast<char*>(&_impl_.generic_),
          reinterpret_cast<char*>(&other->_impl_.generic_));
  swap(_impl_.kind_, other->_impl_.kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction_UnionTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[50]);
}

// ===================================================================

class UndoTransaction::_Internal {
 public:
};

UndoTransaction::UndoTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransaction)
}
UndoTransaction::UndoTransaction(const UndoTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransaction)
}

inline void UndoTransaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UndoTransaction::~UndoTransaction() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void UndoTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransaction)
  return target;
}

size_t UndoTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransaction::GetClassData() const { return &_class_data_; }


void UndoTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransaction*>(&to_msg);
  auto& from = static_cast<const UndoTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransaction::CopyFrom(const UndoTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void UndoTransaction::InternalSwap(UndoTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[51]);
}

// ===================================================================

class UndoTransactionWrapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoTransactionWrapperArchive>()._impl_._has_bits_);
  static const ::TSWP::UndoTransaction& undo_transaction(const UndoTransactionWrapperArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::UndoTransaction&
UndoTransactionWrapperArchive::_Internal::undo_transaction(const UndoTransactionWrapperArchive* msg) {
  return *msg->_impl_.undo_transaction_;
}
UndoTransactionWrapperArchive::UndoTransactionWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UndoTransactionWrapperArchive)
}
UndoTransactionWrapperArchive::UndoTransactionWrapperArchive(const UndoTransactionWrapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoTransactionWrapperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_transaction_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_undo_transaction()) {
    _this->_impl_.undo_transaction_ = new ::TSWP::UndoTransaction(*from._impl_.undo_transaction_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.UndoTransactionWrapperArchive)
}

inline void UndoTransactionWrapperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_transaction_){nullptr}
  };
}

UndoTransactionWrapperArchive::~UndoTransactionWrapperArchive() {
  // @@protoc_insertion_point(destructor:TSWP.UndoTransactionWrapperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoTransactionWrapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.undo_transaction_;
}

void UndoTransactionWrapperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoTransactionWrapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UndoTransactionWrapperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.undo_transaction_ != nullptr);
    _impl_.undo_transaction_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoTransactionWrapperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UndoTransaction undo_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoTransactionWrapperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UndoTransactionWrapperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.UndoTransaction undo_transaction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::undo_transaction(this),
        _Internal::undo_transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UndoTransactionWrapperArchive)
  return target;
}

size_t UndoTransactionWrapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UndoTransactionWrapperArchive)
  size_t total_size = 0;

  // required .TSWP.UndoTransaction undo_transaction = 1;
  if (_internal_has_undo_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_transaction_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoTransactionWrapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoTransactionWrapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoTransactionWrapperArchive::GetClassData() const { return &_class_data_; }


void UndoTransactionWrapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoTransactionWrapperArchive*>(&to_msg);
  auto& from = static_cast<const UndoTransactionWrapperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UndoTransactionWrapperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_undo_transaction()) {
    _this->_internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(
        from._internal_undo_transaction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoTransactionWrapperArchive::CopyFrom(const UndoTransactionWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UndoTransactionWrapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransactionWrapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_undo_transaction()) {
    if (!_impl_.undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void UndoTransactionWrapperArchive::InternalSwap(UndoTransactionWrapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.undo_transaction_, other->_impl_.undo_transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoTransactionWrapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[52]);
}

// ===================================================================

class ShapeInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeInfoArchive>()._impl_._has_bits_);
  static const ::TSD::ShapeArchive& super(const ShapeInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& containedstorage(const ShapeInfoArchive* msg);
  static void set_has_containedstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ShapeArchive&
ShapeInfoArchive::_Internal::super(const ShapeInfoArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ShapeInfoArchive::_Internal::containedstorage(const ShapeInfoArchive* msg) {
  return *msg->_impl_.containedstorage_;
}
void ShapeInfoArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ShapeInfoArchive::clear_containedstorage() {
  if (_impl_.containedstorage_ != nullptr) _impl_.containedstorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ShapeInfoArchive::ShapeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ShapeInfoArchive)
}
ShapeInfoArchive::ShapeInfoArchive(const ShapeInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShapeInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.containedstorage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ShapeArchive(*from._impl_.super_);
  }
  if (from._internal_has_containedstorage()) {
    _this->_impl_.containedstorage_ = new ::TSP::Reference(*from._impl_.containedstorage_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.ShapeInfoArchive)
}

inline void ShapeInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.containedstorage_){nullptr}
  };
}

ShapeInfoArchive::~ShapeInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ShapeInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShapeInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.containedstorage_;
}

void ShapeInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShapeInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ShapeInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.containedstorage_ != nullptr);
      _impl_.containedstorage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ShapeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference containedStorage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_containedstorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShapeInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ShapeInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ShapeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference containedStorage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::containedstorage(this),
        _Internal::containedstorage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ShapeInfoArchive)
  return target;
}

size_t ShapeInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ShapeInfoArchive)
  size_t total_size = 0;

  // required .TSD.ShapeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference containedStorage = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.containedstorage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShapeInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeInfoArchive::GetClassData() const { return &_class_data_; }


void ShapeInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShapeInfoArchive*>(&to_msg);
  auto& from = static_cast<const ShapeInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ShapeInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::ShapeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_containedstorage()->::TSP::Reference::MergeFrom(
          from._internal_containedstorage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeInfoArchive::CopyFrom(const ShapeInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ShapeInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_containedstorage()) {
    if (!_impl_.containedstorage_->IsInitialized()) return false;
  }
  return true;
}

void ShapeInfoArchive::InternalSwap(ShapeInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeInfoArchive, _impl_.containedstorage_)
      + sizeof(ShapeInfoArchive::_impl_.containedstorage_)
      - PROTOBUF_FIELD_OFFSET(ShapeInfoArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[53]);
}

// ===================================================================

class CommentInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentInfoArchive>()._impl_._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const CommentInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& comment_storage(const CommentInfoArchive* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
CommentInfoArchive::_Internal::super(const CommentInfoArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommentInfoArchive::_Internal::comment_storage(const CommentInfoArchive* msg) {
  return *msg->_impl_.comment_storage_;
}
void CommentInfoArchive::clear_comment_storage() {
  if (_impl_.comment_storage_ != nullptr) _impl_.comment_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommentInfoArchive::CommentInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.CommentInfoArchive)
}
CommentInfoArchive::CommentInfoArchive(const CommentInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommentInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.comment_storage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::ShapeInfoArchive(*from._impl_.super_);
  }
  if (from._internal_has_comment_storage()) {
    _this->_impl_.comment_storage_ = new ::TSP::Reference(*from._impl_.comment_storage_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.CommentInfoArchive)
}

inline void CommentInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.comment_storage_){nullptr}
  };
}

CommentInfoArchive::~CommentInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CommentInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommentInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.comment_storage_;
}

void CommentInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommentInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CommentInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.comment_storage_ != nullptr);
      _impl_.comment_storage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference comment_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommentInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CommentInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference comment_storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::comment_storage(this),
        _Internal::comment_storage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CommentInfoArchive)
  return target;
}

size_t CommentInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CommentInfoArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference comment_storage = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.comment_storage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommentInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommentInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommentInfoArchive::GetClassData() const { return &_class_data_; }


void CommentInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommentInfoArchive*>(&to_msg);
  auto& from = static_cast<const CommentInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CommentInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(
          from._internal_comment_storage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommentInfoArchive::CopyFrom(const CommentInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CommentInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_comment_storage()) {
    if (!_impl_.comment_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommentInfoArchive::InternalSwap(CommentInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommentInfoArchive, _impl_.comment_storage_)
      + sizeof(CommentInfoArchive::_impl_.comment_storage_)
      - PROTOBUF_FIELD_OFFSET(CommentInfoArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[54]);
}

// ===================================================================

class TOCInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCInfoArchive>()._impl_._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const TOCInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& toc_settings(const TOCInfoArchive* msg);
  static void set_has_toc_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
TOCInfoArchive::_Internal::super(const TOCInfoArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
TOCInfoArchive::_Internal::toc_settings(const TOCInfoArchive* msg) {
  return *msg->_impl_.toc_settings_;
}
void TOCInfoArchive::clear_toc_settings() {
  if (_impl_.toc_settings_ != nullptr) _impl_.toc_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TOCInfoArchive::clear_toc_entry_data() {
  _impl_.toc_entry_data_.Clear();
}
void TOCInfoArchive::clear_page_number_ranges() {
  _impl_.page_number_ranges_.Clear();
}
TOCInfoArchive::TOCInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCInfoArchive)
}
TOCInfoArchive::TOCInfoArchive(const TOCInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.toc_entry_data_){from._impl_.toc_entry_data_}
    , decltype(_impl_.page_number_ranges_){from._impl_.page_number_ranges_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toc_settings_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::ShapeInfoArchive(*from._impl_.super_);
  }
  if (from._internal_has_toc_settings()) {
    _this->_impl_.toc_settings_ = new ::TSP::Reference(*from._impl_.toc_settings_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCInfoArchive)
}

inline void TOCInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.toc_entry_data_){arena}
    , decltype(_impl_.page_number_ranges_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.toc_settings_){nullptr}
  };
}

TOCInfoArchive::~TOCInfoArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.toc_entry_data_.~RepeatedPtrField();
  _impl_.page_number_ranges_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.toc_settings_;
}

void TOCInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.toc_entry_data_.Clear();
  _impl_.page_number_ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.toc_settings_ != nullptr);
      _impl_.toc_settings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference toc_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_toc_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference toc_entry_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_entry_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Range page_number_ranges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_number_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference toc_settings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::toc_settings(this),
        _Internal::toc_settings(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference toc_entry_data = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_toc_entry_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_toc_entry_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Range page_number_ranges = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_page_number_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_page_number_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCInfoArchive)
  return target;
}

size_t TOCInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCInfoArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference toc_entry_data = 3;
  total_size += 1UL * this->_internal_toc_entry_data_size();
  for (const auto& msg : this->_impl_.toc_entry_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Range page_number_ranges = 4;
  total_size += 1UL * this->_internal_page_number_ranges_size();
  for (const auto& msg : this->_impl_.page_number_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference toc_settings = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.toc_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCInfoArchive::GetClassData() const { return &_class_data_; }


void TOCInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCInfoArchive*>(&to_msg);
  auto& from = static_cast<const TOCInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.toc_entry_data_.MergeFrom(from._impl_.toc_entry_data_);
  _this->_impl_.page_number_ranges_.MergeFrom(from._impl_.page_number_ranges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_toc_settings()->::TSP::Reference::MergeFrom(
          from._internal_toc_settings());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCInfoArchive::CopyFrom(const TOCInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.toc_entry_data_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.page_number_ranges_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_toc_settings()) {
    if (!_impl_.toc_settings_->IsInitialized()) return false;
  }
  return true;
}

void TOCInfoArchive::InternalSwap(TOCInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.toc_entry_data_.InternalSwap(&other->_impl_.toc_entry_data_);
  _impl_.page_number_ranges_.InternalSwap(&other->_impl_.page_number_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCInfoArchive, _impl_.toc_settings_)
      + sizeof(TOCInfoArchive::_impl_.toc_settings_)
      - PROTOBUF_FIELD_OFFSET(TOCInfoArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[55]);
}

// ===================================================================

class TOCLayoutHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCLayoutHintArchive>()._impl_._has_bits_);
  static const ::TSP::Range& charrange(const TOCLayoutHintArchive* msg);
  static void set_has_charrange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Range&
TOCLayoutHintArchive::_Internal::charrange(const TOCLayoutHintArchive* msg) {
  return *msg->_impl_.charrange_;
}
void TOCLayoutHintArchive::clear_charrange() {
  if (_impl_.charrange_ != nullptr) _impl_.charrange_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TOCLayoutHintArchive::TOCLayoutHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCLayoutHintArchive)
}
TOCLayoutHintArchive::TOCLayoutHintArchive(const TOCLayoutHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCLayoutHintArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.charrange_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_charrange()) {
    _this->_impl_.charrange_ = new ::TSP::Range(*from._impl_.charrange_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCLayoutHintArchive)
}

inline void TOCLayoutHintArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.charrange_){nullptr}
  };
}

TOCLayoutHintArchive::~TOCLayoutHintArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCLayoutHintArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCLayoutHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.charrange_;
}

void TOCLayoutHintArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCLayoutHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCLayoutHintArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.charrange_ != nullptr);
    _impl_.charrange_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCLayoutHintArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Range charRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_charrange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCLayoutHintArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCLayoutHintArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Range charRange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::charrange(this),
        _Internal::charrange(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCLayoutHintArchive)
  return target;
}

size_t TOCLayoutHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCLayoutHintArchive)
  size_t total_size = 0;

  // required .TSP.Range charRange = 1;
  if (_internal_has_charrange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.charrange_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCLayoutHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCLayoutHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCLayoutHintArchive::GetClassData() const { return &_class_data_; }


void TOCLayoutHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCLayoutHintArchive*>(&to_msg);
  auto& from = static_cast<const TOCLayoutHintArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCLayoutHintArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charrange()) {
    _this->_internal_mutable_charrange()->::TSP::Range::MergeFrom(
        from._internal_charrange());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCLayoutHintArchive::CopyFrom(const TOCLayoutHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCLayoutHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCLayoutHintArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_charrange()) {
    if (!_impl_.charrange_->IsInitialized()) return false;
  }
  return true;
}

void TOCLayoutHintArchive::InternalSwap(TOCLayoutHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.charrange_, other->_impl_.charrange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCLayoutHintArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[56]);
}

// ===================================================================

class TextualAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TextualAttachmentArchive>()._impl_._has_bits_);
  static void set_has_string_equivalent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TextualAttachmentArchive::TextualAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TextualAttachmentArchive)
}
TextualAttachmentArchive::TextualAttachmentArchive(const TextualAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextualAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_equivalent_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_equivalent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_equivalent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_equivalent()) {
    _this->_impl_.string_equivalent_.Set(from._internal_string_equivalent(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:TSWP.TextualAttachmentArchive)
}

inline void TextualAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_equivalent_){}
    , decltype(_impl_.kind_){0}
  };
  _impl_.string_equivalent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_equivalent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextualAttachmentArchive::~TextualAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TextualAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextualAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_equivalent_.Destroy();
}

void TextualAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextualAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TextualAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_equivalent_.ClearNonDefaultToEmpty();
  }
  _impl_.kind_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextualAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string string_equivalent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_equivalent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TextualAttachmentArchive.string_equivalent");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::TextualAttachmentArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::TextualAttachmentArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextualAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TextualAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string string_equivalent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_equivalent().data(), static_cast<int>(this->_internal_string_equivalent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TextualAttachmentArchive.string_equivalent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_equivalent(), target);
  }

  // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TextualAttachmentArchive)
  return target;
}

size_t TextualAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TextualAttachmentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string_equivalent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_equivalent());
    }

    // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextualAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextualAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextualAttachmentArchive::GetClassData() const { return &_class_data_; }


void TextualAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextualAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const TextualAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TextualAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_equivalent(from._internal_string_equivalent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextualAttachmentArchive::CopyFrom(const TextualAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TextualAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextualAttachmentArchive::IsInitialized() const {
  return true;
}

void TextualAttachmentArchive::InternalSwap(TextualAttachmentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_equivalent_, lhs_arena,
      &other->_impl_.string_equivalent_, rhs_arena
  );
  swap(_impl_.kind_, other->_impl_.kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextualAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[57]);
}

// ===================================================================

class TSWPTOCPageNumberAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TSWPTOCPageNumberAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const TSWPTOCPageNumberAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_page_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bookmark_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::TextualAttachmentArchive&
TSWPTOCPageNumberAttachmentArchive::_Internal::super(const TSWPTOCPageNumberAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TSWPTOCPageNumberAttachmentArchive)
}
TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive(const TSWPTOCPageNumberAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSWPTOCPageNumberAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_number_){}
    , decltype(_impl_.bookmark_name_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.page_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_page_number()) {
    _this->_impl_.page_number_.Set(from._internal_page_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bookmark_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bookmark_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bookmark_name()) {
    _this->_impl_.bookmark_name_.Set(from._internal_bookmark_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::TextualAttachmentArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TSWPTOCPageNumberAttachmentArchive)
}

inline void TSWPTOCPageNumberAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.page_number_){}
    , decltype(_impl_.bookmark_name_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.page_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bookmark_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bookmark_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TSWPTOCPageNumberAttachmentArchive::~TSWPTOCPageNumberAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TSWPTOCPageNumberAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSWPTOCPageNumberAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.page_number_.Destroy();
  _impl_.bookmark_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void TSWPTOCPageNumberAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSWPTOCPageNumberAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.page_number_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bookmark_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSWPTOCPageNumberAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_page_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TSWPTOCPageNumberAttachmentArchive.page_number");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string bookmark_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bookmark_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TSWPTOCPageNumberAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string page_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page_number().data(), static_cast<int>(this->_internal_page_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TSWPTOCPageNumberAttachmentArchive.page_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_number(), target);
  }

  // optional string bookmark_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bookmark_name().data(), static_cast<int>(this->_internal_bookmark_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TSWPTOCPageNumberAttachmentArchive.bookmark_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bookmark_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TSWPTOCPageNumberAttachmentArchive)
  return target;
}

size_t TSWPTOCPageNumberAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string page_number = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_number());
    }

    // optional string bookmark_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_name());
    }

    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSWPTOCPageNumberAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSWPTOCPageNumberAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSWPTOCPageNumberAttachmentArchive::GetClassData() const { return &_class_data_; }


void TSWPTOCPageNumberAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSWPTOCPageNumberAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const TSWPTOCPageNumberAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_page_number(from._internal_page_number());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bookmark_name(from._internal_bookmark_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSWPTOCPageNumberAttachmentArchive::CopyFrom(const TSWPTOCPageNumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TSWPTOCPageNumberAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSWPTOCPageNumberAttachmentArchive::IsInitialized() const {
  return true;
}

void TSWPTOCPageNumberAttachmentArchive::InternalSwap(TSWPTOCPageNumberAttachmentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_number_, lhs_arena,
      &other->_impl_.page_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bookmark_name_, lhs_arena,
      &other->_impl_.bookmark_name_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TSWPTOCPageNumberAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[58]);
}

// ===================================================================

class UIGraphicalAttachment::_Internal {
 public:
};

UIGraphicalAttachment::UIGraphicalAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSWP.UIGraphicalAttachment)
}
UIGraphicalAttachment::UIGraphicalAttachment(const UIGraphicalAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UIGraphicalAttachment* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.UIGraphicalAttachment)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIGraphicalAttachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIGraphicalAttachment::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UIGraphicalAttachment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[59]);
}

// ===================================================================

class DrawableAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableAttachmentArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& drawable(const DrawableAttachmentArchive* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_offset_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
DrawableAttachmentArchive::_Internal::drawable(const DrawableAttachmentArchive* msg) {
  return *msg->_impl_.drawable_;
}
void DrawableAttachmentArchive::clear_drawable() {
  if (_impl_.drawable_ != nullptr) _impl_.drawable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DrawableAttachmentArchive::DrawableAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.DrawableAttachmentArchive)
}
DrawableAttachmentArchive::DrawableAttachmentArchive(const DrawableAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_){nullptr}
    , decltype(_impl_.h_offset_type_){}
    , decltype(_impl_.h_offset_){}
    , decltype(_impl_.v_offset_type_){}
    , decltype(_impl_.v_offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drawable()) {
    _this->_impl_.drawable_ = new ::TSP::Reference(*from._impl_.drawable_);
  }
  ::memcpy(&_impl_.h_offset_type_, &from._impl_.h_offset_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v_offset_) -
    reinterpret_cast<char*>(&_impl_.h_offset_type_)) + sizeof(_impl_.v_offset_));
  // @@protoc_insertion_point(copy_constructor:TSWP.DrawableAttachmentArchive)
}

inline void DrawableAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_){nullptr}
    , decltype(_impl_.h_offset_type_){0u}
    , decltype(_impl_.h_offset_){0}
    , decltype(_impl_.v_offset_type_){0u}
    , decltype(_impl_.v_offset_){0}
  };
}

DrawableAttachmentArchive::~DrawableAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DrawableAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.drawable_;
}

void DrawableAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DrawableAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.drawable_ != nullptr);
    _impl_.drawable_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.h_offset_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.v_offset_) -
        reinterpret_cast<char*>(&_impl_.h_offset_type_)) + sizeof(_impl_.v_offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 h_offset_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_h_offset_type(&has_bits);
          _impl_.h_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float h_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_h_offset(&has_bits);
          _impl_.h_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 v_offset_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_v_offset_type(&has_bits);
          _impl_.v_offset_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float v_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_v_offset(&has_bits);
          _impl_.v_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DrawableAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drawable(this),
        _Internal::drawable(this).GetCachedSize(), target, stream);
  }

  // optional uint32 h_offset_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_h_offset_type(), target);
  }

  // optional float h_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_h_offset(), target);
  }

  // optional uint32 v_offset_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v_offset_type(), target);
  }

  // optional float v_offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_v_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DrawableAttachmentArchive)
  return target;
}

size_t DrawableAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DrawableAttachmentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSP.Reference drawable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.drawable_);
    }

    // optional uint32 h_offset_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_h_offset_type());
    }

    // optional float h_offset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 v_offset_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v_offset_type());
    }

    // optional float v_offset = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableAttachmentArchive::GetClassData() const { return &_class_data_; }


void DrawableAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const DrawableAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DrawableAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_drawable()->::TSP::Reference::MergeFrom(
          from._internal_drawable());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.h_offset_type_ = from._impl_.h_offset_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.h_offset_ = from._impl_.h_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.v_offset_type_ = from._impl_.v_offset_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.v_offset_ = from._impl_.v_offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableAttachmentArchive::CopyFrom(const DrawableAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DrawableAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAttachmentArchive::IsInitialized() const {
  if (_internal_has_drawable()) {
    if (!_impl_.drawable_->IsInitialized()) return false;
  }
  return true;
}

void DrawableAttachmentArchive::InternalSwap(DrawableAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableAttachmentArchive, _impl_.v_offset_)
      + sizeof(DrawableAttachmentArchive::_impl_.v_offset_)
      - PROTOBUF_FIELD_OFFSET(DrawableAttachmentArchive, _impl_.drawable_)>(
          reinterpret_cast<char*>(&_impl_.drawable_),
          reinterpret_cast<char*>(&other->_impl_.drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[60]);
}

// ===================================================================

class TOCAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::DrawableAttachmentArchive& super(const TOCAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::DrawableAttachmentArchive&
TOCAttachmentArchive::_Internal::super(const TOCAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
TOCAttachmentArchive::TOCAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCAttachmentArchive)
}
TOCAttachmentArchive::TOCAttachmentArchive(const TOCAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::DrawableAttachmentArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCAttachmentArchive)
}

inline void TOCAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

TOCAttachmentArchive::~TOCAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void TOCAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.DrawableAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.DrawableAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCAttachmentArchive)
  return target;
}

size_t TOCAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.DrawableAttachmentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCAttachmentArchive::GetClassData() const { return &_class_data_; }


void TOCAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const TOCAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSWP::DrawableAttachmentArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCAttachmentArchive::CopyFrom(const TOCAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void TOCAttachmentArchive::InternalSwap(TOCAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[61]);
}

// ===================================================================

class FootnoteReferenceAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FootnoteReferenceAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const FootnoteReferenceAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& contained_storage(const FootnoteReferenceAttachmentArchive* msg);
  static void set_has_contained_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_mark_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::TextualAttachmentArchive&
FootnoteReferenceAttachmentArchive::_Internal::super(const FootnoteReferenceAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
FootnoteReferenceAttachmentArchive::_Internal::contained_storage(const FootnoteReferenceAttachmentArchive* msg) {
  return *msg->_impl_.contained_storage_;
}
void FootnoteReferenceAttachmentArchive::clear_contained_storage() {
  if (_impl_.contained_storage_ != nullptr) _impl_.contained_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.FootnoteReferenceAttachmentArchive)
}
FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive(const FootnoteReferenceAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FootnoteReferenceAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_mark_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.contained_storage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.custom_mark_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_mark_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_mark_string()) {
    _this->_impl_.custom_mark_string_.Set(from._internal_custom_mark_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::TextualAttachmentArchive(*from._impl_.super_);
  }
  if (from._internal_has_contained_storage()) {
    _this->_impl_.contained_storage_ = new ::TSP::Reference(*from._impl_.contained_storage_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.FootnoteReferenceAttachmentArchive)
}

inline void FootnoteReferenceAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_mark_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.contained_storage_){nullptr}
  };
  _impl_.custom_mark_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_mark_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FootnoteReferenceAttachmentArchive::~FootnoteReferenceAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FootnoteReferenceAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FootnoteReferenceAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_mark_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.contained_storage_;
}

void FootnoteReferenceAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FootnoteReferenceAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FootnoteReferenceAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.custom_mark_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.contained_storage_ != nullptr);
      _impl_.contained_storage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootnoteReferenceAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference contained_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contained_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_mark_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_custom_mark_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FootnoteReferenceAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FootnoteReferenceAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference contained_storage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contained_storage(this),
        _Internal::contained_storage(this).GetCachedSize(), target, stream);
  }

  // optional string custom_mark_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_mark_string().data(), static_cast<int>(this->_internal_custom_mark_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.FootnoteReferenceAttachmentArchive.custom_mark_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_custom_mark_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FootnoteReferenceAttachmentArchive)
  return target;
}

size_t FootnoteReferenceAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FootnoteReferenceAttachmentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string custom_mark_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_mark_string());
    }

    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional .TSP.Reference contained_storage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.contained_storage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FootnoteReferenceAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FootnoteReferenceAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FootnoteReferenceAttachmentArchive::GetClassData() const { return &_class_data_; }


void FootnoteReferenceAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FootnoteReferenceAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const FootnoteReferenceAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FootnoteReferenceAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_custom_mark_string(from._internal_custom_mark_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_contained_storage()->::TSP::Reference::MergeFrom(
          from._internal_contained_storage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FootnoteReferenceAttachmentArchive::CopyFrom(const FootnoteReferenceAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FootnoteReferenceAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootnoteReferenceAttachmentArchive::IsInitialized() const {
  if (_internal_has_contained_storage()) {
    if (!_impl_.contained_storage_->IsInitialized()) return false;
  }
  return true;
}

void FootnoteReferenceAttachmentArchive::InternalSwap(FootnoteReferenceAttachmentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_mark_string_, lhs_arena,
      &other->_impl_.custom_mark_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, _impl_.contained_storage_)
      + sizeof(FootnoteReferenceAttachmentArchive::_impl_.contained_storage_)
      - PROTOBUF_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootnoteReferenceAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[62]);
}

// ===================================================================

class NumberAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const NumberAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::TextualAttachmentArchive&
NumberAttachmentArchive::_Internal::super(const NumberAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
NumberAttachmentArchive::NumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.NumberAttachmentArchive)
}
NumberAttachmentArchive::NumberAttachmentArchive(const NumberAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.number_format_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::TextualAttachmentArchive(*from._impl_.super_);
  }
  _this->_impl_.number_format_ = from._impl_.number_format_;
  // @@protoc_insertion_point(copy_constructor:TSWP.NumberAttachmentArchive)
}

inline void NumberAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.number_format_){0u}
  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NumberAttachmentArchive::~NumberAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TSWP.NumberAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void NumberAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.NumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.number_format_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_number_format(&has_bits);
          _impl_.number_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.NumberAttachmentArchive.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.NumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 number_format = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_format(), target);
  }

  // optional string string_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.NumberAttachmentArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.NumberAttachmentArchive)
  return target;
}

size_t NumberAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.NumberAttachmentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string string_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional uint32 number_format = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_format());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberAttachmentArchive::GetClassData() const { return &_class_data_; }


void NumberAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const NumberAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.NumberAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.number_format_ = from._impl_.number_format_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberAttachmentArchive::CopyFrom(const NumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.NumberAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberAttachmentArchive::IsInitialized() const {
  return true;
}

void NumberAttachmentArchive::InternalSwap(NumberAttachmentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberAttachmentArchive, _impl_.number_format_)
      + sizeof(NumberAttachmentArchive::_impl_.number_format_)
      - PROTOBUF_FIELD_OFFSET(NumberAttachmentArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[63]);
}

// ===================================================================

class SmartFieldArchive::_Internal {
 public:
};

SmartFieldArchive::SmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSWP.SmartFieldArchive)
}
SmartFieldArchive::SmartFieldArchive(const SmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SmartFieldArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.SmartFieldArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartFieldArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[64]);
}

// ===================================================================

class HyperlinkFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HyperlinkFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const HyperlinkFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
HyperlinkFieldArchive::_Internal::super(const HyperlinkFieldArchive* msg) {
  return *msg->_impl_.super_;
}
HyperlinkFieldArchive::HyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.HyperlinkFieldArchive)
}
HyperlinkFieldArchive::HyperlinkFieldArchive(const HyperlinkFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HyperlinkFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_ref_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_ref()) {
    _this->_impl_.url_ref_.Set(from._internal_url_ref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SmartFieldArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.HyperlinkFieldArchive)
}

inline void HyperlinkFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_ref_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.url_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HyperlinkFieldArchive::~HyperlinkFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.HyperlinkFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HyperlinkFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void HyperlinkFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HyperlinkFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.HyperlinkFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_ref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperlinkFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.HyperlinkFieldArchive.url_ref");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HyperlinkFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.HyperlinkFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string url_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_ref().data(), static_cast<int>(this->_internal_url_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.HyperlinkFieldArchive.url_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.HyperlinkFieldArchive)
  return target;
}

size_t HyperlinkFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.HyperlinkFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url_ref = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_ref());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HyperlinkFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HyperlinkFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HyperlinkFieldArchive::GetClassData() const { return &_class_data_; }


void HyperlinkFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HyperlinkFieldArchive*>(&to_msg);
  auto& from = static_cast<const HyperlinkFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.HyperlinkFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url_ref(from._internal_url_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HyperlinkFieldArchive::CopyFrom(const HyperlinkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.HyperlinkFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperlinkFieldArchive::IsInitialized() const {
  return true;
}

void HyperlinkFieldArchive::InternalSwap(HyperlinkFieldArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_ref_, lhs_arena,
      &other->_impl_.url_ref_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperlinkFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[65]);
}

// ===================================================================

class PlaceholderSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderSmartFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const PlaceholderSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localizable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::SmartFieldArchive&
PlaceholderSmartFieldArchive::_Internal::super(const PlaceholderSmartFieldArchive* msg) {
  return *msg->_impl_.super_;
}
PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.PlaceholderSmartFieldArchive)
}
PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive(const PlaceholderSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceholderSmartFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.localizable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SmartFieldArchive(*from._impl_.super_);
  }
  _this->_impl_.localizable_ = from._impl_.localizable_;
  // @@protoc_insertion_point(copy_constructor:TSWP.PlaceholderSmartFieldArchive)
}

inline void PlaceholderSmartFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.localizable_){false}
  };
}

PlaceholderSmartFieldArchive::~PlaceholderSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.PlaceholderSmartFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceholderSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PlaceholderSmartFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceholderSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.PlaceholderSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.localizable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderSmartFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool localizable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_localizable(&has_bits);
          _impl_.localizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceholderSmartFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.PlaceholderSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool localizable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_localizable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.PlaceholderSmartFieldArchive)
  return target;
}

size_t PlaceholderSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.PlaceholderSmartFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional bool localizable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceholderSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceholderSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceholderSmartFieldArchive::GetClassData() const { return &_class_data_; }


void PlaceholderSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceholderSmartFieldArchive*>(&to_msg);
  auto& from = static_cast<const PlaceholderSmartFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.PlaceholderSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.localizable_ = from._impl_.localizable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceholderSmartFieldArchive::CopyFrom(const PlaceholderSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.PlaceholderSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderSmartFieldArchive::IsInitialized() const {
  return true;
}

void PlaceholderSmartFieldArchive::InternalSwap(PlaceholderSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceholderSmartFieldArchive, _impl_.localizable_)
      + sizeof(PlaceholderSmartFieldArchive::_impl_.localizable_)
      - PROTOBUF_FIELD_OFFSET(PlaceholderSmartFieldArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderSmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[66]);
}

// ===================================================================

class UnsupportedHyperlinkFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsupportedHyperlinkFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const UnsupportedHyperlinkFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
UnsupportedHyperlinkFieldArchive::_Internal::super(const UnsupportedHyperlinkFieldArchive* msg) {
  return *msg->_impl_.super_;
}
UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.UnsupportedHyperlinkFieldArchive)
}
UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive(const UnsupportedHyperlinkFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsupportedHyperlinkFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_ref_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_ref()) {
    _this->_impl_.url_ref_.Set(from._internal_url_ref(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.UnsupportedHyperlinkFieldArchive)
}

inline void UnsupportedHyperlinkFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_ref_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.url_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_ref_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnsupportedHyperlinkFieldArchive::~UnsupportedHyperlinkFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.UnsupportedHyperlinkFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsupportedHyperlinkFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void UnsupportedHyperlinkFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsupportedHyperlinkFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.UnsupportedHyperlinkFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_ref_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsupportedHyperlinkFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.UnsupportedHyperlinkFieldArchive.url_ref");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsupportedHyperlinkFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.UnsupportedHyperlinkFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string url_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_ref().data(), static_cast<int>(this->_internal_url_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.UnsupportedHyperlinkFieldArchive.url_ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.UnsupportedHyperlinkFieldArchive)
  return target;
}

size_t UnsupportedHyperlinkFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.UnsupportedHyperlinkFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url_ref = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_ref());
    }

    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsupportedHyperlinkFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsupportedHyperlinkFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsupportedHyperlinkFieldArchive::GetClassData() const { return &_class_data_; }


void UnsupportedHyperlinkFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsupportedHyperlinkFieldArchive*>(&to_msg);
  auto& from = static_cast<const UnsupportedHyperlinkFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.UnsupportedHyperlinkFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url_ref(from._internal_url_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsupportedHyperlinkFieldArchive::CopyFrom(const UnsupportedHyperlinkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.UnsupportedHyperlinkFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsupportedHyperlinkFieldArchive::IsInitialized() const {
  return true;
}

void UnsupportedHyperlinkFieldArchive::InternalSwap(UnsupportedHyperlinkFieldArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_ref_, lhs_arena,
      &other->_impl_.url_ref_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsupportedHyperlinkFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[67]);
}

// ===================================================================

class BibliographySmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BibliographySmartFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const BibliographySmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localizable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::PlaceholderSmartFieldArchive& old_super(const BibliographySmartFieldArchive* msg);
  static void set_has_old_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
BibliographySmartFieldArchive::_Internal::super(const BibliographySmartFieldArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSWP::PlaceholderSmartFieldArchive&
BibliographySmartFieldArchive::_Internal::old_super(const BibliographySmartFieldArchive* msg) {
  return *msg->_impl_.old_super_;
}
void BibliographySmartFieldArchive::clear_citation_records() {
  _impl_.citation_records_.Clear();
}
BibliographySmartFieldArchive::BibliographySmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.BibliographySmartFieldArchive)
}
BibliographySmartFieldArchive::BibliographySmartFieldArchive(const BibliographySmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BibliographySmartFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.citation_records_){from._impl_.citation_records_}
    , decltype(_impl_.old_super_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.localizable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_old_super()) {
    _this->_impl_.old_super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from._impl_.old_super_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SmartFieldArchive(*from._impl_.super_);
  }
  _this->_impl_.localizable_ = from._impl_.localizable_;
  // @@protoc_insertion_point(copy_constructor:TSWP.BibliographySmartFieldArchive)
}

inline void BibliographySmartFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.citation_records_){arena}
    , decltype(_impl_.old_super_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.localizable_){false}
  };
}

BibliographySmartFieldArchive::~BibliographySmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.BibliographySmartFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BibliographySmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.citation_records_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.old_super_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void BibliographySmartFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BibliographySmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.BibliographySmartFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.citation_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.old_super_ != nullptr);
      _impl_.old_super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.localizable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BibliographySmartFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference citation_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_citation_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.SmartFieldArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool localizable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_localizable(&has_bits);
          _impl_.localizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BibliographySmartFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.BibliographySmartFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::old_super(this),
        _Internal::old_super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_citation_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_citation_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool localizable = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_localizable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.BibliographySmartFieldArchive)
  return target;
}

size_t BibliographySmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.BibliographySmartFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference citation_records = 2;
  total_size += 1UL * this->_internal_citation_records_size();
  for (const auto& msg : this->_impl_.citation_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_super_);
    }

    // optional .TSWP.SmartFieldArchive super = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional bool localizable = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BibliographySmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BibliographySmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BibliographySmartFieldArchive::GetClassData() const { return &_class_data_; }


void BibliographySmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BibliographySmartFieldArchive*>(&to_msg);
  auto& from = static_cast<const BibliographySmartFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.BibliographySmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.citation_records_.MergeFrom(from._impl_.citation_records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_old_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(
          from._internal_old_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.localizable_ = from._impl_.localizable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BibliographySmartFieldArchive::CopyFrom(const BibliographySmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.BibliographySmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BibliographySmartFieldArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.citation_records_))
    return false;
  return true;
}

void BibliographySmartFieldArchive::InternalSwap(BibliographySmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.citation_records_.InternalSwap(&other->_impl_.citation_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BibliographySmartFieldArchive, _impl_.localizable_)
      + sizeof(BibliographySmartFieldArchive::_impl_.localizable_)
      - PROTOBUF_FIELD_OFFSET(BibliographySmartFieldArchive, _impl_.old_super_)>(
          reinterpret_cast<char*>(&_impl_.old_super_),
          reinterpret_cast<char*>(&other->_impl_.old_super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BibliographySmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[68]);
}

// ===================================================================

class CitationRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CitationRecordArchive>()._impl_._has_bits_);
  static void set_has_endnote_xml(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hide_author_names(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hide_year(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_page_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_authors_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CitationRecordArchive::CitationRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.CitationRecordArchive)
}
CitationRecordArchive::CitationRecordArchive(const CitationRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CitationRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.endnote_xml_){}
    , decltype(_impl_.page_range_){}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.suffix_){}
    , decltype(_impl_.authors_string_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.year_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.hide_author_names_){}
    , decltype(_impl_.hide_year_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.endnote_xml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endnote_xml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_endnote_xml()) {
    _this->_impl_.endnote_xml_.Set(from._internal_endnote_xml(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_range_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_page_range()) {
    _this->_impl_.page_range_.Set(from._internal_page_range(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefix()) {
    _this->_impl_.prefix_.Set(from._internal_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suffix()) {
    _this->_impl_.suffix_.Set(from._internal_suffix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.authors_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authors_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authors_string()) {
    _this->_impl_.authors_string_.Set(from._internal_authors_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_year()) {
    _this->_impl_.year_.Set(from._internal_year(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hide_author_names_, &from._impl_.hide_author_names_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hide_year_) -
    reinterpret_cast<char*>(&_impl_.hide_author_names_)) + sizeof(_impl_.hide_year_));
  // @@protoc_insertion_point(copy_constructor:TSWP.CitationRecordArchive)
}

inline void CitationRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.endnote_xml_){}
    , decltype(_impl_.page_range_){}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.suffix_){}
    , decltype(_impl_.authors_string_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.year_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.hide_author_names_){false}
    , decltype(_impl_.hide_year_){false}
  };
  _impl_.endnote_xml_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endnote_xml_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_range_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authors_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authors_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CitationRecordArchive::~CitationRecordArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CitationRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CitationRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.endnote_xml_.Destroy();
  _impl_.page_range_.Destroy();
  _impl_.prefix_.Destroy();
  _impl_.suffix_.Destroy();
  _impl_.authors_string_.Destroy();
  _impl_.title_.Destroy();
  _impl_.year_.Destroy();
  _impl_.type_.Destroy();
}

void CitationRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CitationRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CitationRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.endnote_xml_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.page_range_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.authors_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.year_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.hide_author_names_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hide_year_) -
      reinterpret_cast<char*>(&_impl_.hide_author_names_)) + sizeof(_impl_.hide_year_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CitationRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string endnote_xml = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_endnote_xml();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.endnote_xml");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_author_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hide_author_names(&has_bits);
          _impl_.hide_author_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hide_year(&has_bits);
          _impl_.hide_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string page_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_page_range();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.page_range");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string prefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.prefix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string suffix = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_suffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.suffix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string authors_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_authors_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.authors_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string year = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_year();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.year");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.CitationRecordArchive.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CitationRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CitationRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string endnote_xml = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_endnote_xml().data(), static_cast<int>(this->_internal_endnote_xml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.endnote_xml");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_endnote_xml(), target);
  }

  // optional bool hide_author_names = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_hide_author_names(), target);
  }

  // optional bool hide_year = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_hide_year(), target);
  }

  // optional string page_range = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_page_range().data(), static_cast<int>(this->_internal_page_range().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.page_range");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_page_range(), target);
  }

  // optional string prefix = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.prefix");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prefix(), target);
  }

  // optional string suffix = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.suffix");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_suffix(), target);
  }

  // optional string authors_string = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_authors_string().data(), static_cast<int>(this->_internal_authors_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.authors_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_authors_string(), target);
  }

  // optional string title = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_title(), target);
  }

  // optional string year = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_year().data(), static_cast<int>(this->_internal_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.year");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_year(), target);
  }

  // optional string type = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.CitationRecordArchive.type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CitationRecordArchive)
  return target;
}

size_t CitationRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CitationRecordArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string endnote_xml = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_endnote_xml());
    }

    // optional string page_range = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_page_range());
    }

    // optional string prefix = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix());
    }

    // optional string suffix = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix());
    }

    // optional string authors_string = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authors_string());
    }

    // optional string title = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string year = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_year());
    }

    // optional string type = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool hide_author_names = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool hide_year = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CitationRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CitationRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CitationRecordArchive::GetClassData() const { return &_class_data_; }


void CitationRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CitationRecordArchive*>(&to_msg);
  auto& from = static_cast<const CitationRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CitationRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_endnote_xml(from._internal_endnote_xml());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_page_range(from._internal_page_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_prefix(from._internal_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_suffix(from._internal_suffix());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_authors_string(from._internal_authors_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_year(from._internal_year());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_type(from._internal_type());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hide_author_names_ = from._impl_.hide_author_names_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.hide_year_ = from._impl_.hide_year_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CitationRecordArchive::CopyFrom(const CitationRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CitationRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CitationRecordArchive::IsInitialized() const {
  return true;
}

void CitationRecordArchive::InternalSwap(CitationRecordArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endnote_xml_, lhs_arena,
      &other->_impl_.endnote_xml_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_range_, lhs_arena,
      &other->_impl_.page_range_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_, lhs_arena,
      &other->_impl_.prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suffix_, lhs_arena,
      &other->_impl_.suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authors_string_, lhs_arena,
      &other->_impl_.authors_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.year_, lhs_arena,
      &other->_impl_.year_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CitationRecordArchive, _impl_.hide_year_)
      + sizeof(CitationRecordArchive::_impl_.hide_year_)
      - PROTOBUF_FIELD_OFFSET(CitationRecordArchive, _impl_.hide_author_names_)>(
          reinterpret_cast<char*>(&_impl_.hide_author_names_),
          reinterpret_cast<char*>(&other->_impl_.hide_author_names_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CitationRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[69]);
}

// ===================================================================

class CitationSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CitationSmartFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const CitationSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localizable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSWP::PlaceholderSmartFieldArchive& old_super(const CitationSmartFieldArchive* msg);
  static void set_has_old_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
CitationSmartFieldArchive::_Internal::super(const CitationSmartFieldArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSWP::PlaceholderSmartFieldArchive&
CitationSmartFieldArchive::_Internal::old_super(const CitationSmartFieldArchive* msg) {
  return *msg->_impl_.old_super_;
}
void CitationSmartFieldArchive::clear_citation_records() {
  _impl_.citation_records_.Clear();
}
CitationSmartFieldArchive::CitationSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.CitationSmartFieldArchive)
}
CitationSmartFieldArchive::CitationSmartFieldArchive(const CitationSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CitationSmartFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.citation_records_){from._impl_.citation_records_}
    , decltype(_impl_.old_super_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.localizable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_old_super()) {
    _this->_impl_.old_super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from._impl_.old_super_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SmartFieldArchive(*from._impl_.super_);
  }
  _this->_impl_.localizable_ = from._impl_.localizable_;
  // @@protoc_insertion_point(copy_constructor:TSWP.CitationSmartFieldArchive)
}

inline void CitationSmartFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.citation_records_){arena}
    , decltype(_impl_.old_super_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.localizable_){false}
  };
}

CitationSmartFieldArchive::~CitationSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.CitationSmartFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CitationSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.citation_records_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.old_super_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CitationSmartFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CitationSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.CitationSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.citation_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.old_super_ != nullptr);
      _impl_.old_super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.localizable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CitationSmartFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference citation_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_citation_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.SmartFieldArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool localizable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_localizable(&has_bits);
          _impl_.localizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CitationSmartFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.CitationSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::old_super(this),
        _Internal::old_super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_citation_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_citation_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool localizable = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_localizable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.CitationSmartFieldArchive)
  return target;
}

size_t CitationSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.CitationSmartFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference citation_records = 2;
  total_size += 1UL * this->_internal_citation_records_size();
  for (const auto& msg : this->_impl_.citation_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_super_);
    }

    // optional .TSWP.SmartFieldArchive super = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional bool localizable = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CitationSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CitationSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CitationSmartFieldArchive::GetClassData() const { return &_class_data_; }


void CitationSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CitationSmartFieldArchive*>(&to_msg);
  auto& from = static_cast<const CitationSmartFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.CitationSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.citation_records_.MergeFrom(from._impl_.citation_records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_old_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(
          from._internal_old_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.localizable_ = from._impl_.localizable_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CitationSmartFieldArchive::CopyFrom(const CitationSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.CitationSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CitationSmartFieldArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.citation_records_))
    return false;
  return true;
}

void CitationSmartFieldArchive::InternalSwap(CitationSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.citation_records_.InternalSwap(&other->_impl_.citation_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CitationSmartFieldArchive, _impl_.localizable_)
      + sizeof(CitationSmartFieldArchive::_impl_.localizable_)
      - PROTOBUF_FIELD_OFFSET(CitationSmartFieldArchive, _impl_.old_super_)>(
          reinterpret_cast<char*>(&_impl_.old_super_),
          reinterpret_cast<char*>(&other->_impl_.old_super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CitationSmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[70]);
}

// ===================================================================

class DateTimeSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DateTimeSmartFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const DateTimeSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_update_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_needs_update(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Date& date(const DateTimeSmartFieldArchive* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSWP::SmartFieldArchive&
DateTimeSmartFieldArchive::_Internal::super(const DateTimeSmartFieldArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Date&
DateTimeSmartFieldArchive::_Internal::date(const DateTimeSmartFieldArchive* msg) {
  return *msg->_impl_.date_;
}
void DateTimeSmartFieldArchive::clear_date() {
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
DateTimeSmartFieldArchive::DateTimeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.DateTimeSmartFieldArchive)
}
DateTimeSmartFieldArchive::DateTimeSmartFieldArchive(const DateTimeSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DateTimeSmartFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){}
    , decltype(_impl_.locale_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.date_style_){}
    , decltype(_impl_.time_style_){}
    , decltype(_impl_.update_plan_){}
    , decltype(_impl_.needs_update_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_format()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale_identifier()) {
    _this->_impl_.locale_identifier_.Set(from._internal_locale_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SmartFieldArchive(*from._impl_.super_);
  }
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::TSP::Date(*from._impl_.date_);
  }
  ::memcpy(&_impl_.date_style_, &from._impl_.date_style_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.needs_update_) -
    reinterpret_cast<char*>(&_impl_.date_style_)) + sizeof(_impl_.needs_update_));
  // @@protoc_insertion_point(copy_constructor:TSWP.DateTimeSmartFieldArchive)
}

inline void DateTimeSmartFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){}
    , decltype(_impl_.locale_identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.date_style_){0}
    , decltype(_impl_.time_style_){0}
    , decltype(_impl_.update_plan_){0}
    , decltype(_impl_.needs_update_){false}
  };
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DateTimeSmartFieldArchive::~DateTimeSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.DateTimeSmartFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DateTimeSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.format_.Destroy();
  _impl_.locale_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.date_;
}

void DateTimeSmartFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DateTimeSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.DateTimeSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.date_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.needs_update_) -
        reinterpret_cast<char*>(&_impl_.date_style_)) + sizeof(_impl_.needs_update_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTimeSmartFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.DateTimeSmartFieldArchive.format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string locale_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_locale_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.DateTimeSmartFieldArchive.locale_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(val))) {
            _internal_set_date_style(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(val))) {
            _internal_set_time_style(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(val))) {
            _internal_set_update_plan(static_cast<::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_needs_update(&has_bits);
          _impl_.needs_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DateTimeSmartFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.DateTimeSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string format = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.DateTimeSmartFieldArchive.format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format(), target);
  }

  // optional string locale_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale_identifier().data(), static_cast<int>(this->_internal_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.DateTimeSmartFieldArchive.locale_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locale_identifier(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_date_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_time_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_update_plan(), target);
  }

  // optional bool needs_update = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_needs_update(), target);
  }

  // optional .TSP.Date date = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.DateTimeSmartFieldArchive)
  return target;
}

size_t DateTimeSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.DateTimeSmartFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string format = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format());
    }

    // optional string locale_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale_identifier());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional .TSP.Date date = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_);
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_date_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_time_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_update_plan());
    }

    // optional bool needs_update = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateTimeSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DateTimeSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateTimeSmartFieldArchive::GetClassData() const { return &_class_data_; }


void DateTimeSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DateTimeSmartFieldArchive*>(&to_msg);
  auto& from = static_cast<const DateTimeSmartFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.DateTimeSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_locale_identifier(from._internal_locale_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_date()->::TSP::Date::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.date_style_ = from._impl_.date_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_style_ = from._impl_.time_style_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.update_plan_ = from._impl_.update_plan_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.needs_update_ = from._impl_.needs_update_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateTimeSmartFieldArchive::CopyFrom(const DateTimeSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.DateTimeSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeSmartFieldArchive::IsInitialized() const {
  if (_internal_has_date()) {
    if (!_impl_.date_->IsInitialized()) return false;
  }
  return true;
}

void DateTimeSmartFieldArchive::InternalSwap(DateTimeSmartFieldArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locale_identifier_, lhs_arena,
      &other->_impl_.locale_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTimeSmartFieldArchive, _impl_.needs_update_)
      + sizeof(DateTimeSmartFieldArchive::_impl_.needs_update_)
      - PROTOBUF_FIELD_OFFSET(DateTimeSmartFieldArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTimeSmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[71]);
}

// ===================================================================

class BookmarkFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BookmarkFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const BookmarkFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ranged(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSWP::SmartFieldArchive&
BookmarkFieldArchive::_Internal::super(const BookmarkFieldArchive* msg) {
  return *msg->_impl_.super_;
}
BookmarkFieldArchive::BookmarkFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.BookmarkFieldArchive)
}
BookmarkFieldArchive::BookmarkFieldArchive(const BookmarkFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookmarkFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.ranged_){}
    , decltype(_impl_.hidden_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SmartFieldArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.ranged_, &from._impl_.ranged_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hidden_) -
    reinterpret_cast<char*>(&_impl_.ranged_)) + sizeof(_impl_.hidden_));
  // @@protoc_insertion_point(copy_constructor:TSWP.BookmarkFieldArchive)
}

inline void BookmarkFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.ranged_){0u}
    , decltype(_impl_.hidden_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookmarkFieldArchive::~BookmarkFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.BookmarkFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookmarkFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void BookmarkFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookmarkFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.BookmarkFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.ranged_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hidden_) -
        reinterpret_cast<char*>(&_impl_.ranged_)) + sizeof(_impl_.hidden_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookmarkFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.BookmarkFieldArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ranged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ranged(&has_bits);
          _impl_.ranged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hidden(&has_bits);
          _impl_.hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookmarkFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.BookmarkFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.BookmarkFieldArchive.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 ranged = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ranged(), target);
  }

  // optional uint32 hidden = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.BookmarkFieldArchive)
  return target;
}

size_t BookmarkFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.BookmarkFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional uint32 ranged = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ranged());
    }

    // optional uint32 hidden = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hidden());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookmarkFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookmarkFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookmarkFieldArchive::GetClassData() const { return &_class_data_; }


void BookmarkFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookmarkFieldArchive*>(&to_msg);
  auto& from = static_cast<const BookmarkFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.BookmarkFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ranged_ = from._impl_.ranged_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hidden_ = from._impl_.hidden_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookmarkFieldArchive::CopyFrom(const BookmarkFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.BookmarkFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkFieldArchive::IsInitialized() const {
  return true;
}

void BookmarkFieldArchive::InternalSwap(BookmarkFieldArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookmarkFieldArchive, _impl_.hidden_)
      + sizeof(BookmarkFieldArchive::_impl_.hidden_)
      - PROTOBUF_FIELD_OFFSET(BookmarkFieldArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BookmarkFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[72]);
}

// ===================================================================

class FilenameSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FilenameSmartFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const FilenameSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
FilenameSmartFieldArchive::_Internal::super(const FilenameSmartFieldArchive* msg) {
  return *msg->_impl_.super_;
}
FilenameSmartFieldArchive::FilenameSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.FilenameSmartFieldArchive)
}
FilenameSmartFieldArchive::FilenameSmartFieldArchive(const FilenameSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilenameSmartFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.display_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from._impl_.super_);
  }
  _this->_impl_.display_flags_ = from._impl_.display_flags_;
  // @@protoc_insertion_point(copy_constructor:TSWP.FilenameSmartFieldArchive)
}

inline void FilenameSmartFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.display_flags_){0u}
  };
}

FilenameSmartFieldArchive::~FilenameSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.FilenameSmartFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilenameSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FilenameSmartFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilenameSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.FilenameSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.display_flags_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilenameSmartFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 display_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_display_flags(&has_bits);
          _impl_.display_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilenameSmartFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.FilenameSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 display_flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_display_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.FilenameSmartFieldArchive)
  return target;
}

size_t FilenameSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.FilenameSmartFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional uint32 display_flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_display_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilenameSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilenameSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilenameSmartFieldArchive::GetClassData() const { return &_class_data_; }


void FilenameSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilenameSmartFieldArchive*>(&to_msg);
  auto& from = static_cast<const FilenameSmartFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.FilenameSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.display_flags_ = from._impl_.display_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilenameSmartFieldArchive::CopyFrom(const FilenameSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.FilenameSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilenameSmartFieldArchive::IsInitialized() const {
  return true;
}

void FilenameSmartFieldArchive::InternalSwap(FilenameSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilenameSmartFieldArchive, _impl_.display_flags_)
      + sizeof(FilenameSmartFieldArchive::_impl_.display_flags_)
      - PROTOBUF_FIELD_OFFSET(FilenameSmartFieldArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilenameSmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[73]);
}

// ===================================================================

class MergeSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeSmartFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const MergeSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_requires_following_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_table_field(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
MergeSmartFieldArchive::_Internal::super(const MergeSmartFieldArchive* msg) {
  return *msg->_impl_.super_;
}
MergeSmartFieldArchive::MergeSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.MergeSmartFieldArchive)
}
MergeSmartFieldArchive::MergeSmartFieldArchive(const MergeSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeSmartFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.whitespace_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.table_field_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.category_){}
    , decltype(_impl_.requires_following_whitespace_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.whitespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_whitespace()) {
    _this->_impl_.whitespace_.Set(from._internal_whitespace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid()) {
    _this->_impl_.guid_.Set(from._internal_guid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_field()) {
    _this->_impl_.table_field_.Set(from._internal_table_field(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.category_, &from._impl_.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requires_following_whitespace_) -
    reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.requires_following_whitespace_));
  // @@protoc_insertion_point(copy_constructor:TSWP.MergeSmartFieldArchive)
}

inline void MergeSmartFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.whitespace_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.table_field_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.category_){0}
    , decltype(_impl_.requires_following_whitespace_){false}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.whitespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MergeSmartFieldArchive::~MergeSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.MergeSmartFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  _impl_.label_.Destroy();
  _impl_.key_.Destroy();
  _impl_.whitespace_.Destroy();
  _impl_.guid_.Destroy();
  _impl_.table_field_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void MergeSmartFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.MergeSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.whitespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.table_field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.category_ = 0;
  _impl_.requires_following_whitespace_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeSmartFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.label");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::MergeSmartFieldArchive_MergeCategory_IsValid(val))) {
            _internal_set_category(static_cast<::TSWP::MergeSmartFieldArchive_MergeCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_following_whitespace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_requires_following_whitespace(&has_bits);
          _impl_.requires_following_whitespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string whitespace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_whitespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.whitespace");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string guid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.guid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string table_field = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_table_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.MergeSmartFieldArchive.table_field");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeSmartFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.MergeSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string property = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.property");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_property(), target);
  }

  // optional string label = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.label");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_label(), target);
  }

  // optional string key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_category(), target);
  }

  // optional bool requires_following_whitespace = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_requires_following_whitespace(), target);
  }

  // optional string whitespace = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace().data(), static_cast<int>(this->_internal_whitespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.whitespace");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_whitespace(), target);
  }

  // optional string guid = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.guid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_guid(), target);
  }

  // optional string table_field = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_field().data(), static_cast<int>(this->_internal_table_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.MergeSmartFieldArchive.table_field");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_table_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.MergeSmartFieldArchive)
  return target;
}

size_t MergeSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.MergeSmartFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string property = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property());
    }

    // optional string label = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string whitespace = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace());
    }

    // optional string guid = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guid());
    }

    // optional string table_field = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_table_field());
    }

    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
    }

  }
  // optional bool requires_following_whitespace = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeSmartFieldArchive::GetClassData() const { return &_class_data_; }


void MergeSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeSmartFieldArchive*>(&to_msg);
  auto& from = static_cast<const MergeSmartFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.MergeSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_whitespace(from._internal_whitespace());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_guid(from._internal_guid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_table_field(from._internal_table_field());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.category_ = from._impl_.category_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_requires_following_whitespace(from._internal_requires_following_whitespace());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeSmartFieldArchive::CopyFrom(const MergeSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.MergeSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeSmartFieldArchive::IsInitialized() const {
  return true;
}

void MergeSmartFieldArchive::InternalSwap(MergeSmartFieldArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.whitespace_, lhs_arena,
      &other->_impl_.whitespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guid_, lhs_arena,
      &other->_impl_.guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_field_, lhs_arena,
      &other->_impl_.table_field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeSmartFieldArchive, _impl_.requires_following_whitespace_)
      + sizeof(MergeSmartFieldArchive::_impl_.requires_following_whitespace_)
      - PROTOBUF_FIELD_OFFSET(MergeSmartFieldArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeSmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[74]);
}

// ===================================================================

class TOCSmartFieldArchive_TOCEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSmartFieldArchive_TOCEntry>()._impl_._has_bits_);
  static void set_has_bookmark_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& target_style(const TOCSmartFieldArchive_TOCEntry* msg);
  static void set_has_target_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Range& range(const TOCSmartFieldArchive_TOCEntry* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
TOCSmartFieldArchive_TOCEntry::_Internal::target_style(const TOCSmartFieldArchive_TOCEntry* msg) {
  return *msg->_impl_.target_style_;
}
const ::TSP::Range&
TOCSmartFieldArchive_TOCEntry::_Internal::range(const TOCSmartFieldArchive_TOCEntry* msg) {
  return *msg->_impl_.range_;
}
void TOCSmartFieldArchive_TOCEntry::clear_target_style() {
  if (_impl_.target_style_ != nullptr) _impl_.target_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TOCSmartFieldArchive_TOCEntry::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSmartFieldArchive.TOCEntry)
}
TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry(const TOCSmartFieldArchive_TOCEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCSmartFieldArchive_TOCEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bookmark_name_){}
    , decltype(_impl_.target_style_){nullptr}
    , decltype(_impl_.range_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bookmark_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bookmark_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bookmark_name()) {
    _this->_impl_.bookmark_name_.Set(from._internal_bookmark_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_target_style()) {
    _this->_impl_.target_style_ = new ::TSP::Reference(*from._impl_.target_style_);
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSP::Range(*from._impl_.range_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSmartFieldArchive.TOCEntry)
}

inline void TOCSmartFieldArchive_TOCEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bookmark_name_){}
    , decltype(_impl_.target_style_){nullptr}
    , decltype(_impl_.range_){nullptr}
  };
  _impl_.bookmark_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bookmark_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TOCSmartFieldArchive_TOCEntry::~TOCSmartFieldArchive_TOCEntry() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSmartFieldArchive.TOCEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCSmartFieldArchive_TOCEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bookmark_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_style_;
  if (this != internal_default_instance()) delete _impl_.range_;
}

void TOCSmartFieldArchive_TOCEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCSmartFieldArchive_TOCEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bookmark_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.target_style_ != nullptr);
      _impl_.target_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSmartFieldArchive_TOCEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string bookmark_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bookmark_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference target_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCSmartFieldArchive_TOCEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string bookmark_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bookmark_name().data(), static_cast<int>(this->_internal_bookmark_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.TOCSmartFieldArchive.TOCEntry.bookmark_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bookmark_name(), target);
  }

  // optional .TSP.Reference target_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target_style(this),
        _Internal::target_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Range range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSmartFieldArchive.TOCEntry)
  return target;
}

size_t TOCSmartFieldArchive_TOCEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string bookmark_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bookmark_name());
    }

    // optional .TSP.Reference target_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_style_);
    }

    // optional .TSP.Range range = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSmartFieldArchive_TOCEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCSmartFieldArchive_TOCEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSmartFieldArchive_TOCEntry::GetClassData() const { return &_class_data_; }


void TOCSmartFieldArchive_TOCEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCSmartFieldArchive_TOCEntry*>(&to_msg);
  auto& from = static_cast<const TOCSmartFieldArchive_TOCEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_bookmark_name(from._internal_bookmark_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_target_style()->::TSP::Reference::MergeFrom(
          from._internal_target_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_range()->::TSP::Range::MergeFrom(
          from._internal_range());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSmartFieldArchive_TOCEntry::CopyFrom(const TOCSmartFieldArchive_TOCEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSmartFieldArchive.TOCEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSmartFieldArchive_TOCEntry::IsInitialized() const {
  if (_internal_has_target_style()) {
    if (!_impl_.target_style_->IsInitialized()) return false;
  }
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  return true;
}

void TOCSmartFieldArchive_TOCEntry::InternalSwap(TOCSmartFieldArchive_TOCEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bookmark_name_, lhs_arena,
      &other->_impl_.bookmark_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, _impl_.range_)
      + sizeof(TOCSmartFieldArchive_TOCEntry::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, _impl_.target_style_)>(
          reinterpret_cast<char*>(&_impl_.target_style_),
          reinterpret_cast<char*>(&other->_impl_.target_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSmartFieldArchive_TOCEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[75]);
}

// ===================================================================

class TOCSmartFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TOCSmartFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::PlaceholderSmartFieldArchive& super(const TOCSmartFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::PlaceholderSmartFieldArchive&
TOCSmartFieldArchive::_Internal::super(const TOCSmartFieldArchive* msg) {
  return *msg->_impl_.super_;
}
TOCSmartFieldArchive::TOCSmartFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.TOCSmartFieldArchive)
}
TOCSmartFieldArchive::TOCSmartFieldArchive(const TOCSmartFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOCSmartFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.toc_entries_){from._impl_.toc_entries_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::PlaceholderSmartFieldArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.TOCSmartFieldArchive)
}

inline void TOCSmartFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.toc_entries_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

TOCSmartFieldArchive::~TOCSmartFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.TOCSmartFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOCSmartFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.toc_entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void TOCSmartFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOCSmartFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.TOCSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.toc_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOCSmartFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toc_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOCSmartFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.TOCSmartFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_toc_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_toc_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.TOCSmartFieldArchive)
  return target;
}

size_t TOCSmartFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.TOCSmartFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  total_size += 1UL * this->_internal_toc_entries_size();
  for (const auto& msg : this->_impl_.toc_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOCSmartFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOCSmartFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOCSmartFieldArchive::GetClassData() const { return &_class_data_; }


void TOCSmartFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOCSmartFieldArchive*>(&to_msg);
  auto& from = static_cast<const TOCSmartFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.TOCSmartFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.toc_entries_.MergeFrom(from._impl_.toc_entries_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOCSmartFieldArchive::CopyFrom(const TOCSmartFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.TOCSmartFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSmartFieldArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.toc_entries_))
    return false;
  return true;
}

void TOCSmartFieldArchive::InternalSwap(TOCSmartFieldArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.toc_entries_.InternalSwap(&other->_impl_.toc_entries_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOCSmartFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[76]);
}

// ===================================================================

class RubyFieldArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RubyFieldArchive>()._impl_._has_bits_);
  static const ::TSWP::SmartFieldArchive& super(const RubyFieldArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ruby_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSWP::SmartFieldArchive&
RubyFieldArchive::_Internal::super(const RubyFieldArchive* msg) {
  return *msg->_impl_.super_;
}
RubyFieldArchive::RubyFieldArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.RubyFieldArchive)
}
RubyFieldArchive::RubyFieldArchive(const RubyFieldArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RubyFieldArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ruby_text_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ruby_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ruby_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ruby_text()) {
    _this->_impl_.ruby_text_.Set(from._internal_ruby_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SmartFieldArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSWP.RubyFieldArchive)
}

inline void RubyFieldArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ruby_text_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.ruby_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ruby_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RubyFieldArchive::~RubyFieldArchive() {
  // @@protoc_insertion_point(destructor:TSWP.RubyFieldArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RubyFieldArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ruby_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void RubyFieldArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RubyFieldArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.RubyFieldArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ruby_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RubyFieldArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ruby_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ruby_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSWP.RubyFieldArchive.ruby_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RubyFieldArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.RubyFieldArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.SmartFieldArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string ruby_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ruby_text().data(), static_cast<int>(this->_internal_ruby_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSWP.RubyFieldArchive.ruby_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ruby_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.RubyFieldArchive)
  return target;
}

size_t RubyFieldArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.RubyFieldArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ruby_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ruby_text());
    }

    // optional .TSWP.SmartFieldArchive super = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RubyFieldArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RubyFieldArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RubyFieldArchive::GetClassData() const { return &_class_data_; }


void RubyFieldArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RubyFieldArchive*>(&to_msg);
  auto& from = static_cast<const RubyFieldArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.RubyFieldArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ruby_text(from._internal_ruby_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RubyFieldArchive::CopyFrom(const RubyFieldArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.RubyFieldArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RubyFieldArchive::IsInitialized() const {
  return true;
}

void RubyFieldArchive::InternalSwap(RubyFieldArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ruby_text_, lhs_arena,
      &other->_impl_.ruby_text_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RubyFieldArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[77]);
}

// ===================================================================

class ChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeArchive>()._impl_._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& session(const ChangeArchive* msg);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Date& date(const ChangeArchive* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
ChangeArchive::_Internal::session(const ChangeArchive* msg) {
  return *msg->_impl_.session_;
}
const ::TSP::Date&
ChangeArchive::_Internal::date(const ChangeArchive* msg) {
  return *msg->_impl_.date_;
}
void ChangeArchive::clear_session() {
  if (_impl_.session_ != nullptr) _impl_.session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChangeArchive::clear_date() {
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChangeArchive::ChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ChangeArchive)
}
ChangeArchive::ChangeArchive(const ChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.session_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.hidden_){}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_session()) {
    _this->_impl_.session_ = new ::TSP::Reference(*from._impl_.session_);
  }
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::TSP::Date(*from._impl_.date_);
  }
  ::memcpy(&_impl_.hidden_, &from._impl_.hidden_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.hidden_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:TSWP.ChangeArchive)
}

inline void ChangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.session_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.hidden_){false}
    , decltype(_impl_.kind_){1}
  };
}

ChangeArchive::~ChangeArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ChangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.session_;
  if (this != internal_default_instance()) delete _impl_.date_;
}

void ChangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ChangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.session_ != nullptr);
      _impl_.session_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.hidden_ = false;
    _impl_.kind_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::ChangeArchive_ChangeKind_IsValid(val))) {
            _internal_set_kind(static_cast<::TSWP::ChangeArchive_ChangeKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hidden(&has_bits);
          _impl_.hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ChangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional .TSP.Reference session = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::session(this),
        _Internal::session(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Date date = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // optional bool hidden = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ChangeArchive)
  return target;
}

size_t ChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ChangeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference session = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.session_);
    }

    // optional .TSP.Date date = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_);
    }

    // optional bool hidden = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeArchive::GetClassData() const { return &_class_data_; }


void ChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeArchive*>(&to_msg);
  auto& from = static_cast<const ChangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ChangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_session()->::TSP::Reference::MergeFrom(
          from._internal_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_date()->::TSP::Date::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hidden_ = from._impl_.hidden_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeArchive::CopyFrom(const ChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeArchive::IsInitialized() const {
  if (_internal_has_session()) {
    if (!_impl_.session_->IsInitialized()) return false;
  }
  if (_internal_has_date()) {
    if (!_impl_.date_->IsInitialized()) return false;
  }
  return true;
}

void ChangeArchive::InternalSwap(ChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeArchive, _impl_.hidden_)
      + sizeof(ChangeArchive::_impl_.hidden_)
      - PROTOBUF_FIELD_OFFSET(ChangeArchive, _impl_.session_)>(
          reinterpret_cast<char*>(&_impl_.session_),
          reinterpret_cast<char*>(&other->_impl_.session_));
  swap(_impl_.kind_, other->_impl_.kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[78]);
}

// ===================================================================

class ChangeSessionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeSessionArchive>()._impl_._has_bits_);
  static void set_has_session_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& author(const ChangeSessionArchive* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Date& date(const ChangeSessionArchive* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
ChangeSessionArchive::_Internal::author(const ChangeSessionArchive* msg) {
  return *msg->_impl_.author_;
}
const ::TSP::Date&
ChangeSessionArchive::_Internal::date(const ChangeSessionArchive* msg) {
  return *msg->_impl_.date_;
}
void ChangeSessionArchive::clear_author() {
  if (_impl_.author_ != nullptr) _impl_.author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChangeSessionArchive::clear_date() {
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChangeSessionArchive::ChangeSessionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSWP.ChangeSessionArchive)
}
ChangeSessionArchive::ChangeSessionArchive(const ChangeSessionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeSessionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.session_uid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::TSP::Reference(*from._impl_.author_);
  }
  if (from._internal_has_date()) {
    _this->_impl_.date_ = new ::TSP::Date(*from._impl_.date_);
  }
  _this->_impl_.session_uid_ = from._impl_.session_uid_;
  // @@protoc_insertion_point(copy_constructor:TSWP.ChangeSessionArchive)
}

inline void ChangeSessionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.date_){nullptr}
    , decltype(_impl_.session_uid_){0u}
  };
}

ChangeSessionArchive::~ChangeSessionArchive() {
  // @@protoc_insertion_point(destructor:TSWP.ChangeSessionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeSessionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.author_;
  if (this != internal_default_instance()) delete _impl_.date_;
}

void ChangeSessionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeSessionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSWP.ChangeSessionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.author_ != nullptr);
      _impl_.author_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
  }
  _impl_.session_uid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeSessionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 session_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_session_uid(&has_bits);
          _impl_.session_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeSessionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSWP.ChangeSessionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 session_uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_session_uid(), target);
  }

  // optional .TSP.Reference author = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Date date = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSWP.ChangeSessionArchive)
  return target;
}

size_t ChangeSessionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSWP.ChangeSessionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference author = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.author_);
    }

    // optional .TSP.Date date = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_);
    }

    // optional uint32 session_uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_session_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeSessionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeSessionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeSessionArchive::GetClassData() const { return &_class_data_; }


void ChangeSessionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeSessionArchive*>(&to_msg);
  auto& from = static_cast<const ChangeSessionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSWP.ChangeSessionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_author()->::TSP::Reference::MergeFrom(
          from._internal_author());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_date()->::TSP::Date::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.session_uid_ = from._impl_.session_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeSessionArchive::CopyFrom(const ChangeSessionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSWP.ChangeSessionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSessionArchive::IsInitialized() const {
  if (_internal_has_author()) {
    if (!_impl_.author_->IsInitialized()) return false;
  }
  if (_internal_has_date()) {
    if (!_impl_.date_->IsInitialized()) return false;
  }
  return true;
}

void ChangeSessionArchive::InternalSwap(ChangeSessionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeSessionArchive, _impl_.session_uid_)
      + sizeof(ChangeSessionArchive::_impl_.session_uid_)
      - PROTOBUF_FIELD_OFFSET(ChangeSessionArchive, _impl_.author_)>(
          reinterpret_cast<char*>(&_impl_.author_),
          reinterpret_cast<char*>(&other->_impl_.author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeSessionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[79]);
}

// ===================================================================

class SectionPlaceholderArchive::_Internal {
 public:
};

SectionPlaceholderArchive::SectionPlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSWP.SectionPlaceholderArchive)
}
SectionPlaceholderArchive::SectionPlaceholderArchive(const SectionPlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SectionPlaceholderArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSWP.SectionPlaceholderArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionPlaceholderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionPlaceholderArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SectionPlaceholderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSWPArchives_2eproto_getter, &descriptor_table_TSWPArchives_2eproto_once,
      file_level_metadata_TSWPArchives_2eproto[80]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ThemePresetsArchive::kExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSWP::ThemePresetsArchive >, 11, false>
  ThemePresetsArchive::extension(kExtensionFieldNumber, ::TSWP::ThemePresetsArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSWP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSWP::SelectionArchive*
Arena::CreateMaybeMessage< ::TSWP::SelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ObjectAttributeTable_ObjectAttribute*
Arena::CreateMaybeMessage< ::TSWP::ObjectAttributeTable_ObjectAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ObjectAttributeTable_ObjectAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ObjectAttributeTable*
Arena::CreateMaybeMessage< ::TSWP::ObjectAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ObjectAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StringAttributeTable_StringAttribute*
Arena::CreateMaybeMessage< ::TSWP::StringAttributeTable_StringAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StringAttributeTable_StringAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StringAttributeTable*
Arena::CreateMaybeMessage< ::TSWP::StringAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StringAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParaDataAttributeTable_ParaDataAttribute*
Arena::CreateMaybeMessage< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParaDataAttributeTable_ParaDataAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParaDataAttributeTable*
Arena::CreateMaybeMessage< ::TSWP::ParaDataAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParaDataAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SparseObjectAttributeTable_SparseObjectAttribute*
Arena::CreateMaybeMessage< ::TSWP::SparseObjectAttributeTable_SparseObjectAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SparseObjectAttributeTable_SparseObjectAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SparseObjectAttributeTable*
Arena::CreateMaybeMessage< ::TSWP::SparseObjectAttributeTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SparseObjectAttributeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::StorageArchive*
Arena::CreateMaybeMessage< ::TSWP::StorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::StorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::HighlightArchive*
Arena::CreateMaybeMessage< ::TSWP::HighlightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::HighlightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FontFeatureArchive*
Arena::CreateMaybeMessage< ::TSWP::FontFeatureArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FontFeatureArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CharacterStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TSWP::CharacterStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CharacterStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CharacterStyleArchive*
Arena::CreateMaybeMessage< ::TSWP::CharacterStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CharacterStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TabArchive*
Arena::CreateMaybeMessage< ::TSWP::TabArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TabArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TabsArchive*
Arena::CreateMaybeMessage< ::TSWP::TabsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TabsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::LineSpacingArchive*
Arena::CreateMaybeMessage< ::TSWP::LineSpacingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::LineSpacingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParagraphStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TSWP::ParagraphStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParagraphStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ParagraphStyleArchive*
Arena::CreateMaybeMessage< ::TSWP::ParagraphStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ParagraphStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ListStyleArchive_LabelGeometry*
Arena::CreateMaybeMessage< ::TSWP::ListStyleArchive_LabelGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ListStyleArchive_LabelGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ListStyleArchive_LabelImage*
Arena::CreateMaybeMessage< ::TSWP::ListStyleArchive_LabelImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ListStyleArchive_LabelImage >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ListStyleArchive*
Arena::CreateMaybeMessage< ::TSWP::ListStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ListStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextStylePresetArchive*
Arena::CreateMaybeMessage< ::TSWP::TextStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive_EqualColumnsArchive*
Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive_EqualColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive_EqualColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive*
Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive_NonEqualColumnsArchive*
Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive_NonEqualColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive_NonEqualColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnsArchive*
Arena::CreateMaybeMessage< ::TSWP::ColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::PaddingArchive*
Arena::CreateMaybeMessage< ::TSWP::PaddingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::PaddingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TSWP::ColumnStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ColumnStyleArchive*
Arena::CreateMaybeMessage< ::TSWP::ColumnStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ColumnStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TSWP::ShapeStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeStyleArchive*
Arena::CreateMaybeMessage< ::TSWP::ShapeStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ThemePresetsArchive*
Arena::CreateMaybeMessage< ::TSWP::ThemePresetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ThemePresetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextPresetDisplayItemArchive*
Arena::CreateMaybeMessage< ::TSWP::TextPresetDisplayItemArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextPresetDisplayItemArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCEntryStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCEntryStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCEntryStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCEntryStyleArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCEntryStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCEntryStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSettingsArchive_TOCEntryData*
Arena::CreateMaybeMessage< ::TSWP::TOCSettingsArchive_TOCEntryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSettingsArchive_TOCEntryData >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSettingsArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCSettingsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSettingsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCEntryInstanceArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCEntryInstanceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCEntryInstanceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_GenericTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_GenericTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_GenericTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_TextTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_TextTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_TextTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_CharIndexTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_CharIndexTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_CharIndexTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_ReplaceCharIndexTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_ReplaceCharIndexTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_ReplaceCharIndexTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_AttributeIndexTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_AttributeIndexTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_AttributeIndexTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_InsertAttributeTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_InsertAttributeTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_InsertAttributeTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_InsertNilTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_InsertNilTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_InsertNilTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_CharDeltaTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_CharDeltaTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_CharDeltaTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_ParagraphDataTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_ParagraphDataTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_ParagraphDataTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_ObjectDOLCTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_ObjectDOLCTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_ObjectDOLCTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_CTDateTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_CTDateTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_CTDateTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction_UnionTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction_UnionTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction_UnionTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransaction*
Arena::CreateMaybeMessage< ::TSWP::UndoTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UndoTransactionWrapperArchive*
Arena::CreateMaybeMessage< ::TSWP::UndoTransactionWrapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UndoTransactionWrapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ShapeInfoArchive*
Arena::CreateMaybeMessage< ::TSWP::ShapeInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ShapeInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CommentInfoArchive*
Arena::CreateMaybeMessage< ::TSWP::CommentInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CommentInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCInfoArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCLayoutHintArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCLayoutHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCLayoutHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TextualAttachmentArchive*
Arena::CreateMaybeMessage< ::TSWP::TextualAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TextualAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TSWPTOCPageNumberAttachmentArchive*
Arena::CreateMaybeMessage< ::TSWP::TSWPTOCPageNumberAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TSWPTOCPageNumberAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UIGraphicalAttachment*
Arena::CreateMaybeMessage< ::TSWP::UIGraphicalAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UIGraphicalAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::DrawableAttachmentArchive*
Arena::CreateMaybeMessage< ::TSWP::DrawableAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DrawableAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCAttachmentArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FootnoteReferenceAttachmentArchive*
Arena::CreateMaybeMessage< ::TSWP::FootnoteReferenceAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FootnoteReferenceAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::NumberAttachmentArchive*
Arena::CreateMaybeMessage< ::TSWP::NumberAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::NumberAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::SmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::HyperlinkFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::HyperlinkFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::HyperlinkFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::PlaceholderSmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::PlaceholderSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::PlaceholderSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::UnsupportedHyperlinkFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::UnsupportedHyperlinkFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::UnsupportedHyperlinkFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::BibliographySmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::BibliographySmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::BibliographySmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CitationRecordArchive*
Arena::CreateMaybeMessage< ::TSWP::CitationRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CitationRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::CitationSmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::CitationSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::CitationSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::DateTimeSmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::DateTimeSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::DateTimeSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::BookmarkFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::BookmarkFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::BookmarkFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::FilenameSmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::FilenameSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::FilenameSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::MergeSmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::MergeSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::MergeSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSmartFieldArchive_TOCEntry*
Arena::CreateMaybeMessage< ::TSWP::TOCSmartFieldArchive_TOCEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSmartFieldArchive_TOCEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::TOCSmartFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::TOCSmartFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::TOCSmartFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::RubyFieldArchive*
Arena::CreateMaybeMessage< ::TSWP::RubyFieldArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::RubyFieldArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ChangeArchive*
Arena::CreateMaybeMessage< ::TSWP::ChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::ChangeSessionArchive*
Arena::CreateMaybeMessage< ::TSWP::ChangeSessionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::ChangeSessionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSWP::SectionPlaceholderArchive*
Arena::CreateMaybeMessage< ::TSWP::SectionPlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSWP::SectionPlaceholderArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
