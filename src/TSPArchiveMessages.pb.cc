// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPArchiveMessages.proto

#include "TSPArchiveMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSP {
PROTOBUF_CONSTEXPR ArchiveInfo::ArchiveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_infos_)*/{}
  , /*decltype(_impl_.identifier_)*/uint64_t{0u}} {}
struct ArchiveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArchiveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArchiveInfoDefaultTypeInternal() {}
  union {
    ArchiveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArchiveInfoDefaultTypeInternal _ArchiveInfo_default_instance_;
PROTOBUF_CONSTEXPR MessageInfo::MessageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.field_infos_)*/{}
  , /*decltype(_impl_.object_references_)*/{}
  , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_references_)*/{}
  , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.length_)*/0u} {}
struct MessageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageInfoDefaultTypeInternal() {}
  union {
    MessageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
PROTOBUF_CONSTEXPR FieldInfo::FieldInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_references_)*/{}
  , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_references_)*/{}
  , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
  , /*decltype(_impl_.path_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.rule_)*/0} {}
struct FieldInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldInfoDefaultTypeInternal() {}
  union {
    FieldInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
PROTOBUF_CONSTEXPR FieldPath::FieldPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{}
  , /*decltype(_impl_._path_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FieldPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldPathDefaultTypeInternal() {}
  union {
    FieldPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldPathDefaultTypeInternal _FieldPath_default_instance_;
PROTOBUF_CONSTEXPR ComponentInfo::ComponentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.read_version_)*/{}
  , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.write_version_)*/{}
  , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.external_references_)*/{}
  , /*decltype(_impl_.data_references_)*/{}
  , /*decltype(_impl_.preferred_locator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.allows_duplicates_outside_of_document_package_)*/false
  , /*decltype(_impl_.is_stored_outside_object_archive_)*/false
  , /*decltype(_impl_.dirties_document_package_)*/true} {}
struct ComponentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentInfoDefaultTypeInternal() {}
  union {
    ComponentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentInfoDefaultTypeInternal _ComponentInfo_default_instance_;
PROTOBUF_CONSTEXPR ComponentExternalReference::ComponentExternalReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.component_identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.object_identifier_)*/uint64_t{0u}
  , /*decltype(_impl_.is_weak_)*/false} {}
struct ComponentExternalReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentExternalReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentExternalReferenceDefaultTypeInternal() {}
  union {
    ComponentExternalReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentExternalReferenceDefaultTypeInternal _ComponentExternalReference_default_instance_;
PROTOBUF_CONSTEXPR ComponentDataReference::ComponentDataReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_identifier_)*/uint64_t{0u}} {}
struct ComponentDataReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentDataReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentDataReferenceDefaultTypeInternal() {}
  union {
    ComponentDataReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentDataReferenceDefaultTypeInternal _ComponentDataReference_default_instance_;
PROTOBUF_CONSTEXPR PackageMetadata::PackageMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.components_)*/{}
  , /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_.read_version_)*/{}
  , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.write_version_)*/{}
  , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.last_object_identifier_)*/uint64_t{0u}} {}
struct PackageMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageMetadataDefaultTypeInternal() {}
  union {
    PackageMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageMetadataDefaultTypeInternal _PackageMetadata_default_instance_;
PROTOBUF_CONSTEXPR PasteboardMetadata::PasteboardMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_.app_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_document_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PasteboardMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasteboardMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasteboardMetadataDefaultTypeInternal() {}
  union {
    PasteboardMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasteboardMetadataDefaultTypeInternal _PasteboardMetadata_default_instance_;
PROTOBUF_CONSTEXPR DataInfo::DataInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferred_file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_resource_locator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_bookmark_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pasteboard_external_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/uint64_t{0u}} {}
struct DataInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataInfoDefaultTypeInternal() {}
  union {
    DataInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataInfoDefaultTypeInternal _DataInfo_default_instance_;
PROTOBUF_CONSTEXPR ViewStateMetadata::ViewStateMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{}
  , /*decltype(_impl_._version_cached_byte_size_)*/{0}
  , /*decltype(_impl_.document_version_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_)*/nullptr} {}
struct ViewStateMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewStateMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewStateMetadataDefaultTypeInternal() {}
  union {
    ViewStateMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewStateMetadataDefaultTypeInternal _ViewStateMetadata_default_instance_;
}  // namespace TSP
static ::_pb::Metadata file_level_metadata_TSPArchiveMessages_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSPArchiveMessages_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSPArchiveMessages_2eproto = nullptr;

const uint32_t TableStruct_TSPArchiveMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ArchiveInfo, _impl_.message_infos_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.field_infos_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.object_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::MessageInfo, _impl_.data_references_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.rule_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.object_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::FieldInfo, _impl_.data_references_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::FieldPath, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.preferred_locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.write_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.external_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.data_references_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.allows_duplicates_outside_of_document_package_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.dirties_document_package_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentInfo, _impl_.is_stored_outside_object_archive_),
  2,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_.component_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_.object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentExternalReference, _impl_.is_weak_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ComponentDataReference, _impl_.data_identifier_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.last_object_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.components_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.read_version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PackageMetadata, _impl_.write_version_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.app_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.datas_),
  PROTOBUF_FIELD_OFFSET(::TSP::PasteboardMetadata, _impl_.source_document_uuid_),
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.preferred_file_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.document_resource_locator_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.source_bookmark_data_),
  PROTOBUF_FIELD_OFFSET(::TSP::DataInfo, _impl_.pasteboard_external_file_path_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.document_version_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSP::ViewStateMetadata, _impl_.component_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::TSP::ArchiveInfo)},
  { 10, 22, -1, sizeof(::TSP::MessageInfo)},
  { 28, 39, -1, sizeof(::TSP::FieldInfo)},
  { 44, -1, -1, sizeof(::TSP::FieldPath)},
  { 51, 67, -1, sizeof(::TSP::ComponentInfo)},
  { 77, 86, -1, sizeof(::TSP::ComponentExternalReference)},
  { 89, 96, -1, sizeof(::TSP::ComponentDataReference)},
  { 97, 108, -1, sizeof(::TSP::PackageMetadata)},
  { 113, 123, -1, sizeof(::TSP::PasteboardMetadata)},
  { 127, 140, -1, sizeof(::TSP::DataInfo)},
  { 147, 156, -1, sizeof(::TSP::ViewStateMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSP::_ArchiveInfo_default_instance_._instance,
  &::TSP::_MessageInfo_default_instance_._instance,
  &::TSP::_FieldInfo_default_instance_._instance,
  &::TSP::_FieldPath_default_instance_._instance,
  &::TSP::_ComponentInfo_default_instance_._instance,
  &::TSP::_ComponentExternalReference_default_instance_._instance,
  &::TSP::_ComponentDataReference_default_instance_._instance,
  &::TSP::_PackageMetadata_default_instance_._instance,
  &::TSP::_PasteboardMetadata_default_instance_._instance,
  &::TSP::_DataInfo_default_instance_._instance,
  &::TSP::_ViewStateMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_TSPArchiveMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSPArchiveMessages.proto\022\003TSP\"J\n\013Archi"
  "veInfo\022\022\n\nidentifier\030\001 \001(\004\022\'\n\rmessage_in"
  "fos\030\002 \003(\0132\020.TSP.MessageInfo\"\241\001\n\013MessageI"
  "nfo\022\014\n\004type\030\001 \002(\r\022\023\n\007version\030\002 \003(\rB\002\020\001\022\016"
  "\n\006length\030\003 \002(\r\022#\n\013field_infos\030\004 \003(\0132\016.TS"
  "P.FieldInfo\022\035\n\021object_references\030\005 \003(\004B\002"
  "\020\001\022\033\n\017data_references\030\006 \003(\004B\002\020\001\"\352\002\n\tFiel"
  "dInfo\022\034\n\004path\030\001 \002(\0132\016.TSP.FieldPath\022(\n\004t"
  "ype\030\002 \001(\0162\023.TSP.FieldInfo.Type:\005Value\0220\n"
  "\004rule\030\003 \001(\0162\023.TSP.FieldInfo.Rule:\rIgnore"
  "AndDrop\022\035\n\021object_references\030\004 \003(\004B\002\020\001\022\033"
  "\n\017data_references\030\005 \003(\004B\002\020\001\"F\n\004Type\022\t\n\005V"
  "alue\020\000\022\023\n\017ObjectReference\020\001\022\021\n\rDataRefer"
  "ence\020\002\022\013\n\007Message\020\003\"_\n\004Rule\022\021\n\rIgnoreAnd"
  "Drop\020\000\022\025\n\021IgnoreAndPreserve\020\001\022\022\n\016MustUnd"
  "erstand\020\002\022\031\n\014NotSupported\020\377\377\377\377\377\377\377\377\377\001\"\035\n\t"
  "FieldPath\022\020\n\004path\030\001 \003(\rB\002\020\001\"\217\003\n\rComponen"
  "tInfo\022\022\n\nidentifier\030\001 \002(\004\022\031\n\021preferred_l"
  "ocator\030\002 \002(\t\022\017\n\007locator\030\003 \001(\t\022\030\n\014read_ve"
  "rsion\030\004 \003(\rB\002\020\001\022\031\n\rwrite_version\030\005 \003(\rB\002"
  "\020\001\022<\n\023external_references\030\006 \003(\0132\037.TSP.Co"
  "mponentExternalReference\0224\n\017data_referen"
  "ces\030\007 \003(\0132\033.TSP.ComponentDataReference\022<"
  "\n-allows_duplicates_outside_of_document_"
  "package\030\010 \001(\010:\005false\022&\n\030dirties_document"
  "_package\030\t \001(\010:\004true\022/\n is_stored_outsid"
  "e_object_archive\030\n \001(\010:\005false\"f\n\032Compone"
  "ntExternalReference\022\034\n\024component_identif"
  "ier\030\001 \002(\004\022\031\n\021object_identifier\030\002 \001(\004\022\017\n\007"
  "is_weak\030\003 \001(\010\"1\n\026ComponentDataReference\022"
  "\027\n\017data_identifier\030\001 \002(\004\"\254\001\n\017PackageMeta"
  "data\022\036\n\026last_object_identifier\030\001 \002(\004\022&\n\n"
  "components\030\003 \003(\0132\022.TSP.ComponentInfo\022\034\n\005"
  "datas\030\004 \003(\0132\r.TSP.DataInfo\022\030\n\014read_versi"
  "on\030\005 \003(\rB\002\020\001\022\031\n\rwrite_version\030\006 \003(\rB\002\020\001\""
  "w\n\022PasteboardMetadata\022\023\n\007version\030\001 \003(\rB\002"
  "\020\001\022\020\n\010app_name\030\002 \002(\t\022\034\n\005datas\030\003 \003(\0132\r.TS"
  "P.DataInfo\022\034\n\024source_document_uuid\030\004 \001(\t"
  "\"\306\001\n\010DataInfo\022\022\n\nidentifier\030\001 \002(\004\022\016\n\006dig"
  "est\030\002 \002(\014\022\033\n\023preferred_file_name\030\003 \002(\t\022\021"
  "\n\tfile_name\030\004 \001(\t\022!\n\031document_resource_l"
  "ocator\030\005 \001(\t\022\034\n\024source_bookmark_data\030\006 \001"
  "(\014\022%\n\035pasteboard_external_file_path\030c \001("
  "\t\"n\n\021ViewStateMetadata\022\023\n\007version\030\001 \003(\rB"
  "\002\020\001\022\035\n\025document_version_uuid\030\002 \002(\t\022%\n\tco"
  "mponent\030\003 \002(\0132\022.TSP.ComponentInfo"
  ;
static ::_pbi::once_flag descriptor_table_TSPArchiveMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSPArchiveMessages_2eproto = {
    false, false, 1833, descriptor_table_protodef_TSPArchiveMessages_2eproto,
    "TSPArchiveMessages.proto",
    &descriptor_table_TSPArchiveMessages_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_TSPArchiveMessages_2eproto::offsets,
    file_level_metadata_TSPArchiveMessages_2eproto, file_level_enum_descriptors_TSPArchiveMessages_2eproto,
    file_level_service_descriptors_TSPArchiveMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSPArchiveMessages_2eproto_getter() {
  return &descriptor_table_TSPArchiveMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSPArchiveMessages_2eproto(&descriptor_table_TSPArchiveMessages_2eproto);
namespace TSP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[0];
}
bool FieldInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FieldInfo_Type FieldInfo::Value;
constexpr FieldInfo_Type FieldInfo::ObjectReference;
constexpr FieldInfo_Type FieldInfo::DataReference;
constexpr FieldInfo_Type FieldInfo::Message;
constexpr FieldInfo_Type FieldInfo::Type_MIN;
constexpr FieldInfo_Type FieldInfo::Type_MAX;
constexpr int FieldInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_Rule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSPArchiveMessages_2eproto);
  return file_level_enum_descriptors_TSPArchiveMessages_2eproto[1];
}
bool FieldInfo_Rule_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FieldInfo_Rule FieldInfo::IgnoreAndDrop;
constexpr FieldInfo_Rule FieldInfo::IgnoreAndPreserve;
constexpr FieldInfo_Rule FieldInfo::MustUnderstand;
constexpr FieldInfo_Rule FieldInfo::NotSupported;
constexpr FieldInfo_Rule FieldInfo::Rule_MIN;
constexpr FieldInfo_Rule FieldInfo::Rule_MAX;
constexpr int FieldInfo::Rule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ArchiveInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ArchiveInfo>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArchiveInfo::ArchiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ArchiveInfo)
}
ArchiveInfo::ArchiveInfo(const ArchiveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArchiveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_infos_){from._impl_.message_infos_}
    , decltype(_impl_.identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.identifier_ = from._impl_.identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.ArchiveInfo)
}

inline void ArchiveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_infos_){arena}
    , decltype(_impl_.identifier_){uint64_t{0u}}
  };
}

ArchiveInfo::~ArchiveInfo() {
  // @@protoc_insertion_point(destructor:TSP.ArchiveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArchiveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_infos_.~RepeatedPtrField();
}

void ArchiveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArchiveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ArchiveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_infos_.Clear();
  _impl_.identifier_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArchiveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.MessageInfo message_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArchiveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ArchiveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // repeated .TSP.MessageInfo message_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ArchiveInfo)
  return target;
}

size_t ArchiveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ArchiveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.MessageInfo message_infos = 2;
  total_size += 1UL * this->_internal_message_infos_size();
  for (const auto& msg : this->_impl_.message_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 identifier = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArchiveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArchiveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArchiveInfo::GetClassData() const { return &_class_data_; }


void ArchiveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArchiveInfo*>(&to_msg);
  auto& from = static_cast<const ArchiveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ArchiveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.message_infos_.MergeFrom(from._impl_.message_infos_);
  if (from._internal_has_identifier()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArchiveInfo::CopyFrom(const ArchiveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ArchiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.message_infos_))
    return false;
  return true;
}

void ArchiveInfo::InternalSwap(ArchiveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.message_infos_.InternalSwap(&other->_impl_.message_infos_);
  swap(_impl_.identifier_, other->_impl_.identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchiveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[0]);
}

// ===================================================================

class MessageInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageInfo>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MessageInfo::MessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.MessageInfo)
}
MessageInfo::MessageInfo(const MessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.field_infos_){from._impl_.field_infos_}
    , decltype(_impl_.object_references_){from._impl_.object_references_}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){from._impl_.data_references_}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){}
    , decltype(_impl_.length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:TSP.MessageInfo)
}

inline void MessageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){arena}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.field_infos_){arena}
    , decltype(_impl_.object_references_){arena}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){arena}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.length_){0u}
  };
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:TSP.MessageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.field_infos_.~RepeatedPtrField();
  _impl_.object_references_.~RepeatedField();
  _impl_.data_references_.~RepeatedField();
}

void MessageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.MessageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  _impl_.field_infos_.Clear();
  _impl_.object_references_.Clear();
  _impl_.data_references_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.length_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 version = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.FieldInfo field_infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 object_references = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_object_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 data_references = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_data_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.MessageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated uint32 version = 2 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_version(), byte_size, target);
    }
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_length(), target);
  }

  // repeated .TSP.FieldInfo field_infos = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 object_references = 5 [packed = true];
  {
    int byte_size = _impl_._object_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_object_references(), byte_size, target);
    }
  }

  // repeated uint64 data_references = 6 [packed = true];
  {
    int byte_size = _impl_._data_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_data_references(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.MessageInfo)
  return target;
}

size_t MessageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.MessageInfo)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  if (_internal_has_length()) {
    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return total_size;
}
size_t MessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.MessageInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());

    // required uint32 length = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.FieldInfo field_infos = 4;
  total_size += 1UL * this->_internal_field_infos_size();
  for (const auto& msg : this->_impl_.field_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 object_references = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 data_references = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.data_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageInfo::GetClassData() const { return &_class_data_; }


void MessageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageInfo*>(&to_msg);
  auto& from = static_cast<const MessageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.MessageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_impl_.field_infos_.MergeFrom(from._impl_.field_infos_);
  _this->_impl_.object_references_.MergeFrom(from._impl_.object_references_);
  _this->_impl_.data_references_.MergeFrom(from._impl_.data_references_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.field_infos_))
    return false;
  return true;
}

void MessageInfo::InternalSwap(MessageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  _impl_.field_infos_.InternalSwap(&other->_impl_.field_infos_);
  _impl_.object_references_.InternalSwap(&other->_impl_.object_references_);
  _impl_.data_references_.InternalSwap(&other->_impl_.data_references_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageInfo, _impl_.length_)
      + sizeof(MessageInfo::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(MessageInfo, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[1]);
}

// ===================================================================

class FieldInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldInfo>()._impl_._has_bits_);
  static const ::TSP::FieldPath& path(const FieldInfo* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::FieldPath&
FieldInfo::_Internal::path(const FieldInfo* msg) {
  return *msg->_impl_.path_;
}
FieldInfo::FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.FieldInfo)
}
FieldInfo::FieldInfo(const FieldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_references_){from._impl_.object_references_}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){from._impl_.data_references_}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.rule_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    _this->_impl_.path_ = new ::TSP::FieldPath(*from._impl_.path_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rule_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.rule_));
  // @@protoc_insertion_point(copy_constructor:TSP.FieldInfo)
}

inline void FieldInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_references_){arena}
    , /*decltype(_impl_._object_references_cached_byte_size_)*/{0}
    , decltype(_impl_.data_references_){arena}
    , /*decltype(_impl_._data_references_cached_byte_size_)*/{0}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.rule_){0}
  };
}

FieldInfo::~FieldInfo() {
  // @@protoc_insertion_point(destructor:TSP.FieldInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_references_.~RepeatedField();
  _impl_.data_references_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.path_;
}

void FieldInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FieldInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_references_.Clear();
  _impl_.data_references_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.path_ != nullptr);
    _impl_.path_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rule_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.rule_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.FieldPath path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.Type type = 2 [default = Value];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_Type_IsValid(val))) {
            _internal_set_type(static_cast<::TSP::FieldInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.FieldInfo.Rule rule = 3 [default = IgnoreAndDrop];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::FieldInfo_Rule_IsValid(val))) {
            _internal_set_rule(static_cast<::TSP::FieldInfo_Rule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 object_references = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_object_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 data_references = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data_references(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_data_references(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FieldInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.FieldPath path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.FieldInfo.Type type = 2 [default = Value];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .TSP.FieldInfo.Rule rule = 3 [default = IgnoreAndDrop];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rule(), target);
  }

  // repeated uint64 object_references = 4 [packed = true];
  {
    int byte_size = _impl_._object_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_object_references(), byte_size, target);
    }
  }

  // repeated uint64 data_references = 5 [packed = true];
  {
    int byte_size = _impl_._data_references_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_data_references(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FieldInfo)
  return target;
}

size_t FieldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FieldInfo)
  size_t total_size = 0;

  // required .TSP.FieldPath path = 1;
  if (_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.path_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_references = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 data_references = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.data_references_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_references_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.FieldInfo.Type type = 2 [default = Value];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .TSP.FieldInfo.Rule rule = 3 [default = IgnoreAndDrop];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rule());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldInfo::GetClassData() const { return &_class_data_; }


void FieldInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldInfo*>(&to_msg);
  auto& from = static_cast<const FieldInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.FieldInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_references_.MergeFrom(from._impl_.object_references_);
  _this->_impl_.data_references_.MergeFrom(from._impl_.data_references_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_path()->::TSP::FieldPath::MergeFrom(
          from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rule_ = from._impl_.rule_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldInfo::CopyFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FieldInfo::InternalSwap(FieldInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.object_references_.InternalSwap(&other->_impl_.object_references_);
  _impl_.data_references_.InternalSwap(&other->_impl_.data_references_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldInfo, _impl_.rule_)
      + sizeof(FieldInfo::_impl_.rule_)
      - PROTOBUF_FIELD_OFFSET(FieldInfo, _impl_.path_)>(
          reinterpret_cast<char*>(&_impl_.path_),
          reinterpret_cast<char*>(&other->_impl_.path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[2]);
}

// ===================================================================

class FieldPath::_Internal {
 public:
};

FieldPath::FieldPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.FieldPath)
}
FieldPath::FieldPath(const FieldPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){from._impl_.path_}
    , /*decltype(_impl_._path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSP.FieldPath)
}

inline void FieldPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){arena}
    , /*decltype(_impl_._path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FieldPath::~FieldPath() {
  // @@protoc_insertion_point(destructor:TSP.FieldPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.~RepeatedField();
}

void FieldPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldPath::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.FieldPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 path = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.FieldPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 path = 1 [packed = true];
  {
    int byte_size = _impl_._path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_path(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.FieldPath)
  return target;
}

size_t FieldPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.FieldPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 path = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.path_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldPath::GetClassData() const { return &_class_data_; }


void FieldPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldPath*>(&to_msg);
  auto& from = static_cast<const FieldPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.FieldPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.path_.MergeFrom(from._impl_.path_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldPath::CopyFrom(const FieldPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.FieldPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldPath::IsInitialized() const {
  return true;
}

void FieldPath::InternalSwap(FieldPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[3]);
}

// ===================================================================

class ComponentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentInfo>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preferred_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allows_duplicates_outside_of_document_package(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dirties_document_package(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_stored_outside_object_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ComponentInfo::ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentInfo)
}
ComponentInfo::ComponentInfo(const ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.read_version_){from._impl_.read_version_}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){from._impl_.write_version_}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.external_references_){from._impl_.external_references_}
    , decltype(_impl_.data_references_){from._impl_.data_references_}
    , decltype(_impl_.preferred_locator_){}
    , decltype(_impl_.locator_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.allows_duplicates_outside_of_document_package_){}
    , decltype(_impl_.is_stored_outside_object_archive_){}
    , decltype(_impl_.dirties_document_package_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preferred_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_locator()) {
    _this->_impl_.preferred_locator_.Set(from._internal_preferred_locator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locator()) {
    _this->_impl_.locator_.Set(from._internal_locator(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.identifier_, &from._impl_.identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dirties_document_package_) -
    reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.dirties_document_package_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentInfo)
}

inline void ComponentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.read_version_){arena}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){arena}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.external_references_){arena}
    , decltype(_impl_.data_references_){arena}
    , decltype(_impl_.preferred_locator_){}
    , decltype(_impl_.locator_){}
    , decltype(_impl_.identifier_){uint64_t{0u}}
    , decltype(_impl_.allows_duplicates_outside_of_document_package_){false}
    , decltype(_impl_.is_stored_outside_object_archive_){false}
    , decltype(_impl_.dirties_document_package_){true}
  };
  _impl_.preferred_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentInfo::~ComponentInfo() {
  // @@protoc_insertion_point(destructor:TSP.ComponentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.read_version_.~RepeatedField();
  _impl_.write_version_.~RepeatedField();
  _impl_.external_references_.~RepeatedPtrField();
  _impl_.data_references_.~RepeatedPtrField();
  _impl_.preferred_locator_.Destroy();
  _impl_.locator_.Destroy();
}

void ComponentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.read_version_.Clear();
  _impl_.write_version_.Clear();
  _impl_.external_references_.Clear();
  _impl_.data_references_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.preferred_locator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.locator_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_stored_outside_object_archive_) -
        reinterpret_cast<char*>(&_impl_.identifier_)) + sizeof(_impl_.is_stored_outside_object_archive_));
    _impl_.dirties_document_package_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string preferred_locator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_preferred_locator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.ComponentInfo.preferred_locator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string locator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_locator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.ComponentInfo.locator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_version = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 write_version = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentExternalReference external_references = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentDataReference data_references = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool allows_duplicates_outside_of_document_package = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_allows_duplicates_outside_of_document_package(&has_bits);
          _impl_.allows_duplicates_outside_of_document_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dirties_document_package = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_dirties_document_package(&has_bits);
          _impl_.dirties_document_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_stored_outside_object_archive = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_stored_outside_object_archive(&has_bits);
          _impl_.is_stored_outside_object_archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required string preferred_locator = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_locator().data(), static_cast<int>(this->_internal_preferred_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ComponentInfo.preferred_locator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_preferred_locator(), target);
  }

  // optional string locator = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locator().data(), static_cast<int>(this->_internal_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ComponentInfo.locator");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locator(), target);
  }

  // repeated uint32 read_version = 4 [packed = true];
  {
    int byte_size = _impl_._read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_read_version(), byte_size, target);
    }
  }

  // repeated uint32 write_version = 5 [packed = true];
  {
    int byte_size = _impl_._write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_write_version(), byte_size, target);
    }
  }

  // repeated .TSP.ComponentExternalReference external_references = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_external_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_external_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.ComponentDataReference data_references = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool allows_duplicates_outside_of_document_package = 8 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_allows_duplicates_outside_of_document_package(), target);
  }

  // optional bool dirties_document_package = 9 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_dirties_document_package(), target);
  }

  // optional bool is_stored_outside_object_archive = 10 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_stored_outside_object_archive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentInfo)
  return target;
}

size_t ComponentInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ComponentInfo)
  size_t total_size = 0;

  if (_internal_has_preferred_locator()) {
    // required string preferred_locator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_locator());
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  return total_size;
}
size_t ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string preferred_locator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_locator());

    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 read_version = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_version = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.ComponentExternalReference external_references = 6;
  total_size += 1UL * this->_internal_external_references_size();
  for (const auto& msg : this->_impl_.external_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.ComponentDataReference data_references = 7;
  total_size += 1UL * this->_internal_data_references_size();
  for (const auto& msg : this->_impl_.data_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string locator = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locator());
  }

  if (cached_has_bits & 0x00000038u) {
    // optional bool allows_duplicates_outside_of_document_package = 8 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_stored_outside_object_archive = 10 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool dirties_document_package = 9 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentInfo::GetClassData() const { return &_class_data_; }


void ComponentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentInfo*>(&to_msg);
  auto& from = static_cast<const ComponentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.read_version_.MergeFrom(from._impl_.read_version_);
  _this->_impl_.write_version_.MergeFrom(from._impl_.write_version_);
  _this->_impl_.external_references_.MergeFrom(from._impl_.external_references_);
  _this->_impl_.data_references_.MergeFrom(from._impl_.data_references_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_preferred_locator(from._internal_preferred_locator());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_locator(from._internal_locator());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.identifier_ = from._impl_.identifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.allows_duplicates_outside_of_document_package_ = from._impl_.allows_duplicates_outside_of_document_package_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_stored_outside_object_archive_ = from._impl_.is_stored_outside_object_archive_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dirties_document_package_ = from._impl_.dirties_document_package_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentInfo::CopyFrom(const ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.external_references_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.data_references_))
    return false;
  return true;
}

void ComponentInfo::InternalSwap(ComponentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.read_version_.InternalSwap(&other->_impl_.read_version_);
  _impl_.write_version_.InternalSwap(&other->_impl_.write_version_);
  _impl_.external_references_.InternalSwap(&other->_impl_.external_references_);
  _impl_.data_references_.InternalSwap(&other->_impl_.data_references_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_locator_, lhs_arena,
      &other->_impl_.preferred_locator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.locator_, lhs_arena,
      &other->_impl_.locator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentInfo, _impl_.is_stored_outside_object_archive_)
      + sizeof(ComponentInfo::_impl_.is_stored_outside_object_archive_)
      - PROTOBUF_FIELD_OFFSET(ComponentInfo, _impl_.identifier_)>(
          reinterpret_cast<char*>(&_impl_.identifier_),
          reinterpret_cast<char*>(&other->_impl_.identifier_));
  swap(_impl_.dirties_document_package_, other->_impl_.dirties_document_package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[4]);
}

// ===================================================================

class ComponentExternalReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentExternalReference>()._impl_._has_bits_);
  static void set_has_component_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_weak(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ComponentExternalReference::ComponentExternalReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentExternalReference)
}
ComponentExternalReference::ComponentExternalReference(const ComponentExternalReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentExternalReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_identifier_){}
    , decltype(_impl_.object_identifier_){}
    , decltype(_impl_.is_weak_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.component_identifier_, &from._impl_.component_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_weak_) -
    reinterpret_cast<char*>(&_impl_.component_identifier_)) + sizeof(_impl_.is_weak_));
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentExternalReference)
}

inline void ComponentExternalReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_identifier_){uint64_t{0u}}
    , decltype(_impl_.object_identifier_){uint64_t{0u}}
    , decltype(_impl_.is_weak_){false}
  };
}

ComponentExternalReference::~ComponentExternalReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentExternalReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentExternalReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComponentExternalReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentExternalReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentExternalReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.component_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_weak_) -
        reinterpret_cast<char*>(&_impl_.component_identifier_)) + sizeof(_impl_.is_weak_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentExternalReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 component_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_component_identifier(&has_bits);
          _impl_.component_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 object_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_object_identifier(&has_bits);
          _impl_.object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_weak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_weak(&has_bits);
          _impl_.is_weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentExternalReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentExternalReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 component_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_component_identifier(), target);
  }

  // optional uint64 object_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_identifier(), target);
  }

  // optional bool is_weak = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_weak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentExternalReference)
  return target;
}

size_t ComponentExternalReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentExternalReference)
  size_t total_size = 0;

  // required uint64 component_identifier = 1;
  if (_internal_has_component_identifier()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_component_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 object_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_identifier());
    }

    // optional bool is_weak = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentExternalReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentExternalReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentExternalReference::GetClassData() const { return &_class_data_; }


void ComponentExternalReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentExternalReference*>(&to_msg);
  auto& from = static_cast<const ComponentExternalReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentExternalReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.component_identifier_ = from._impl_.component_identifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.object_identifier_ = from._impl_.object_identifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_weak_ = from._impl_.is_weak_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentExternalReference::CopyFrom(const ComponentExternalReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentExternalReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentExternalReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ComponentExternalReference::InternalSwap(ComponentExternalReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentExternalReference, _impl_.is_weak_)
      + sizeof(ComponentExternalReference::_impl_.is_weak_)
      - PROTOBUF_FIELD_OFFSET(ComponentExternalReference, _impl_.component_identifier_)>(
          reinterpret_cast<char*>(&_impl_.component_identifier_),
          reinterpret_cast<char*>(&other->_impl_.component_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentExternalReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[5]);
}

// ===================================================================

class ComponentDataReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentDataReference>()._impl_._has_bits_);
  static void set_has_data_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ComponentDataReference::ComponentDataReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ComponentDataReference)
}
ComponentDataReference::ComponentDataReference(const ComponentDataReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentDataReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_identifier_ = from._impl_.data_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.ComponentDataReference)
}

inline void ComponentDataReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_identifier_){uint64_t{0u}}
  };
}

ComponentDataReference::~ComponentDataReference() {
  // @@protoc_insertion_point(destructor:TSP.ComponentDataReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentDataReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComponentDataReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentDataReference::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ComponentDataReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_identifier_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentDataReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 data_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_identifier(&has_bits);
          _impl_.data_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentDataReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ComponentDataReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 data_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ComponentDataReference)
  return target;
}

size_t ComponentDataReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ComponentDataReference)
  size_t total_size = 0;

  // required uint64 data_identifier = 1;
  if (_internal_has_data_identifier()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentDataReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentDataReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentDataReference::GetClassData() const { return &_class_data_; }


void ComponentDataReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentDataReference*>(&to_msg);
  auto& from = static_cast<const ComponentDataReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ComponentDataReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_identifier()) {
    _this->_internal_set_data_identifier(from._internal_data_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentDataReference::CopyFrom(const ComponentDataReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ComponentDataReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDataReference::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ComponentDataReference::InternalSwap(ComponentDataReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_identifier_, other->_impl_.data_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentDataReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[6]);
}

// ===================================================================

class PackageMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PackageMetadata>()._impl_._has_bits_);
  static void set_has_last_object_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PackageMetadata::PackageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.PackageMetadata)
}
PackageMetadata::PackageMetadata(const PackageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PackageMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){from._impl_.components_}
    , decltype(_impl_.datas_){from._impl_.datas_}
    , decltype(_impl_.read_version_){from._impl_.read_version_}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){from._impl_.write_version_}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.last_object_identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.last_object_identifier_ = from._impl_.last_object_identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.PackageMetadata)
}

inline void PackageMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.components_){arena}
    , decltype(_impl_.datas_){arena}
    , decltype(_impl_.read_version_){arena}
    , /*decltype(_impl_._read_version_cached_byte_size_)*/{0}
    , decltype(_impl_.write_version_){arena}
    , /*decltype(_impl_._write_version_cached_byte_size_)*/{0}
    , decltype(_impl_.last_object_identifier_){uint64_t{0u}}
  };
}

PackageMetadata::~PackageMetadata() {
  // @@protoc_insertion_point(destructor:TSP.PackageMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackageMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.components_.~RepeatedPtrField();
  _impl_.datas_.~RepeatedPtrField();
  _impl_.read_version_.~RepeatedField();
  _impl_.write_version_.~RepeatedField();
}

void PackageMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PackageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.PackageMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.components_.Clear();
  _impl_.datas_.Clear();
  _impl_.read_version_.Clear();
  _impl_.write_version_.Clear();
  _impl_.last_object_identifier_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 last_object_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_object_identifier(&has_bits);
          _impl_.last_object_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.ComponentInfo components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_version = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_read_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 write_version = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_write_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackageMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.PackageMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 last_object_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_last_object_identifier(), target);
  }

  // repeated .TSP.ComponentInfo components = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.DataInfo datas = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 read_version = 5 [packed = true];
  {
    int byte_size = _impl_._read_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_read_version(), byte_size, target);
    }
  }

  // repeated uint32 write_version = 6 [packed = true];
  {
    int byte_size = _impl_._write_version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_write_version(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.PackageMetadata)
  return target;
}

size_t PackageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.PackageMetadata)
  size_t total_size = 0;

  // required uint64 last_object_identifier = 1;
  if (_internal_has_last_object_identifier()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_object_identifier());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.ComponentInfo components = 3;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->_impl_.components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataInfo datas = 4;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 read_version = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.read_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._read_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_version = 6 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.write_version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._write_version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackageMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PackageMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackageMetadata::GetClassData() const { return &_class_data_; }


void PackageMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PackageMetadata*>(&to_msg);
  auto& from = static_cast<const PackageMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.PackageMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_impl_.read_version_.MergeFrom(from._impl_.read_version_);
  _this->_impl_.write_version_.MergeFrom(from._impl_.write_version_);
  if (from._internal_has_last_object_identifier()) {
    _this->_internal_set_last_object_identifier(from._internal_last_object_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackageMetadata::CopyFrom(const PackageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.PackageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.components_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.datas_))
    return false;
  return true;
}

void PackageMetadata::InternalSwap(PackageMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.components_.InternalSwap(&other->_impl_.components_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
  _impl_.read_version_.InternalSwap(&other->_impl_.read_version_);
  _impl_.write_version_.InternalSwap(&other->_impl_.write_version_);
  swap(_impl_.last_object_identifier_, other->_impl_.last_object_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[7]);
}

// ===================================================================

class PasteboardMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardMetadata>()._impl_._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_document_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PasteboardMetadata::PasteboardMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.PasteboardMetadata)
}
PasteboardMetadata::PasteboardMetadata(const PasteboardMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PasteboardMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.datas_){from._impl_.datas_}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.source_document_uuid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_document_uuid()) {
    _this->_impl_.source_document_uuid_.Set(from._internal_source_document_uuid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSP.PasteboardMetadata)
}

inline void PasteboardMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){arena}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.datas_){arena}
    , decltype(_impl_.app_name_){}
    , decltype(_impl_.source_document_uuid_){}
  };
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_document_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_document_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PasteboardMetadata::~PasteboardMetadata() {
  // @@protoc_insertion_point(destructor:TSP.PasteboardMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasteboardMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.datas_.~RepeatedPtrField();
  _impl_.app_name_.Destroy();
  _impl_.source_document_uuid_.Destroy();
}

void PasteboardMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PasteboardMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.PasteboardMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  _impl_.datas_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.source_document_uuid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.PasteboardMetadata.app_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataInfo datas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string source_document_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source_document_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.PasteboardMetadata.source_document_uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasteboardMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.PasteboardMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string app_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.PasteboardMetadata.app_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_name(), target);
  }

  // repeated .TSP.DataInfo datas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string source_document_uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_document_uuid().data(), static_cast<int>(this->_internal_source_document_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.PasteboardMetadata.source_document_uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source_document_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.PasteboardMetadata)
  return target;
}

size_t PasteboardMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.PasteboardMetadata)
  size_t total_size = 0;

  // required string app_name = 2;
  if (_internal_has_app_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TSP.DataInfo datas = 3;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string source_document_uuid = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_document_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasteboardMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PasteboardMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasteboardMetadata::GetClassData() const { return &_class_data_; }


void PasteboardMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PasteboardMetadata*>(&to_msg);
  auto& from = static_cast<const PasteboardMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.PasteboardMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_source_document_uuid(from._internal_source_document_uuid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasteboardMetadata::CopyFrom(const PasteboardMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.PasteboardMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.datas_))
    return false;
  return true;
}

void PasteboardMetadata::InternalSwap(PasteboardMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_name_, lhs_arena,
      &other->_impl_.app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_document_uuid_, lhs_arena,
      &other->_impl_.source_document_uuid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[8]);
}

// ===================================================================

class DataInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DataInfo>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_document_resource_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_bookmark_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pasteboard_external_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000043) ^ 0x00000043) != 0;
  }
};

DataInfo::DataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.DataInfo)
}
DataInfo::DataInfo(const DataInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.preferred_file_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.document_resource_locator_){}
    , decltype(_impl_.source_bookmark_data_){}
    , decltype(_impl_.pasteboard_external_file_path_){}
    , decltype(_impl_.identifier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_digest()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preferred_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_file_name()) {
    _this->_impl_.preferred_file_name_.Set(from._internal_preferred_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_resource_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_resource_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_document_resource_locator()) {
    _this->_impl_.document_resource_locator_.Set(from._internal_document_resource_locator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_bookmark_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_bookmark_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_bookmark_data()) {
    _this->_impl_.source_bookmark_data_.Set(from._internal_source_bookmark_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pasteboard_external_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pasteboard_external_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pasteboard_external_file_path()) {
    _this->_impl_.pasteboard_external_file_path_.Set(from._internal_pasteboard_external_file_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.identifier_ = from._impl_.identifier_;
  // @@protoc_insertion_point(copy_constructor:TSP.DataInfo)
}

inline void DataInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.preferred_file_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.document_resource_locator_){}
    , decltype(_impl_.source_bookmark_data_){}
    , decltype(_impl_.pasteboard_external_file_path_){}
    , decltype(_impl_.identifier_){uint64_t{0u}}
  };
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_resource_locator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_resource_locator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_bookmark_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_bookmark_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pasteboard_external_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pasteboard_external_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataInfo::~DataInfo() {
  // @@protoc_insertion_point(destructor:TSP.DataInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digest_.Destroy();
  _impl_.preferred_file_name_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.document_resource_locator_.Destroy();
  _impl_.source_bookmark_data_.Destroy();
  _impl_.pasteboard_external_file_path_.Destroy();
}

void DataInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.DataInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.preferred_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.document_resource_locator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.source_bookmark_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.pasteboard_external_file_path_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.identifier_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_identifier(&has_bits);
          _impl_.identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string preferred_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_preferred_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.preferred_file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.file_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string document_resource_locator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_document_resource_locator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.document_resource_locator");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes source_bookmark_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_source_bookmark_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pasteboard_external_file_path = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pasteboard_external_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.DataInfo.pasteboard_external_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.DataInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 identifier = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_identifier(), target);
  }

  // required bytes digest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // required string preferred_file_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_file_name().data(), static_cast<int>(this->_internal_preferred_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.preferred_file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_preferred_file_name(), target);
  }

  // optional string file_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // optional string document_resource_locator = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_resource_locator().data(), static_cast<int>(this->_internal_document_resource_locator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.document_resource_locator");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_document_resource_locator(), target);
  }

  // optional bytes source_bookmark_data = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_source_bookmark_data(), target);
  }

  // optional string pasteboard_external_file_path = 99;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pasteboard_external_file_path().data(), static_cast<int>(this->_internal_pasteboard_external_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.DataInfo.pasteboard_external_file_path");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_pasteboard_external_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.DataInfo)
  return target;
}

size_t DataInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.DataInfo)
  size_t total_size = 0;

  if (_internal_has_digest()) {
    // required bytes digest = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  if (_internal_has_preferred_file_name()) {
    // required string preferred_file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_file_name());
  }

  if (_internal_has_identifier()) {
    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());
  }

  return total_size;
}
size_t DataInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.DataInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000043) ^ 0x00000043) == 0) {  // All required fields are present.
    // required bytes digest = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());

    // required string preferred_file_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_file_name());

    // required uint64 identifier = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_identifier());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional string file_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional string document_resource_locator = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_document_resource_locator());
    }

    // optional bytes source_bookmark_data = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_bookmark_data());
    }

    // optional string pasteboard_external_file_path = 99;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pasteboard_external_file_path());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataInfo::GetClassData() const { return &_class_data_; }


void DataInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataInfo*>(&to_msg);
  auto& from = static_cast<const DataInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.DataInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_preferred_file_name(from._internal_preferred_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_document_resource_locator(from._internal_document_resource_locator());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_source_bookmark_data(from._internal_source_bookmark_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_pasteboard_external_file_path(from._internal_pasteboard_external_file_path());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.identifier_ = from._impl_.identifier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataInfo::CopyFrom(const DataInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.DataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DataInfo::InternalSwap(DataInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_file_name_, lhs_arena,
      &other->_impl_.preferred_file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_resource_locator_, lhs_arena,
      &other->_impl_.document_resource_locator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_bookmark_data_, lhs_arena,
      &other->_impl_.source_bookmark_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pasteboard_external_file_path_, lhs_arena,
      &other->_impl_.pasteboard_external_file_path_, rhs_arena
  );
  swap(_impl_.identifier_, other->_impl_.identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[9]);
}

// ===================================================================

class ViewStateMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewStateMetadata>()._impl_._has_bits_);
  static void set_has_document_version_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::ComponentInfo& component(const ViewStateMetadata* msg);
  static void set_has_component(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::ComponentInfo&
ViewStateMetadata::_Internal::component(const ViewStateMetadata* msg) {
  return *msg->_impl_.component_;
}
ViewStateMetadata::ViewStateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSP.ViewStateMetadata)
}
ViewStateMetadata::ViewStateMetadata(const ViewStateMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewStateMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){from._impl_.version_}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.document_version_uuid_){}
    , decltype(_impl_.component_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.document_version_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_version_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_document_version_uuid()) {
    _this->_impl_.document_version_uuid_.Set(from._internal_document_version_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_component()) {
    _this->_impl_.component_ = new ::TSP::ComponentInfo(*from._impl_.component_);
  }
  // @@protoc_insertion_point(copy_constructor:TSP.ViewStateMetadata)
}

inline void ViewStateMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){arena}
    , /*decltype(_impl_._version_cached_byte_size_)*/{0}
    , decltype(_impl_.document_version_uuid_){}
    , decltype(_impl_.component_){nullptr}
  };
  _impl_.document_version_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_version_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ViewStateMetadata::~ViewStateMetadata() {
  // @@protoc_insertion_point(destructor:TSP.ViewStateMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewStateMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.~RepeatedField();
  _impl_.document_version_uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.component_;
}

void ViewStateMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewStateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:TSP.ViewStateMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.document_version_uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.component_ != nullptr);
      _impl_.component_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewStateMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 version = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string document_version_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_document_version_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSP.ViewStateMetadata.document_version_uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.ComponentInfo component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewStateMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSP.ViewStateMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    int byte_size = _impl_._version_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_version(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string document_version_uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_version_uuid().data(), static_cast<int>(this->_internal_document_version_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSP.ViewStateMetadata.document_version_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_document_version_uuid(), target);
  }

  // required .TSP.ComponentInfo component = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::component(this),
        _Internal::component(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSP.ViewStateMetadata)
  return target;
}

size_t ViewStateMetadata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSP.ViewStateMetadata)
  size_t total_size = 0;

  if (_internal_has_document_version_uuid()) {
    // required string document_version_uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_version_uuid());
  }

  if (_internal_has_component()) {
    // required .TSP.ComponentInfo component = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.component_);
  }

  return total_size;
}
size_t ViewStateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSP.ViewStateMetadata)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string document_version_uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_version_uuid());

    // required .TSP.ComponentInfo component = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.component_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 version = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.version_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._version_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewStateMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewStateMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewStateMetadata::GetClassData() const { return &_class_data_; }


void ViewStateMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewStateMetadata*>(&to_msg);
  auto& from = static_cast<const ViewStateMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSP.ViewStateMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.version_.MergeFrom(from._impl_.version_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_document_version_uuid(from._internal_document_version_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_component()->::TSP::ComponentInfo::MergeFrom(
          from._internal_component());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewStateMetadata::CopyFrom(const ViewStateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSP.ViewStateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateMetadata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_component()) {
    if (!_impl_.component_->IsInitialized()) return false;
  }
  return true;
}

void ViewStateMetadata::InternalSwap(ViewStateMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.version_.InternalSwap(&other->_impl_.version_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_version_uuid_, lhs_arena,
      &other->_impl_.document_version_uuid_, rhs_arena
  );
  swap(_impl_.component_, other->_impl_.component_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewStateMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSPArchiveMessages_2eproto_getter, &descriptor_table_TSPArchiveMessages_2eproto_once,
      file_level_metadata_TSPArchiveMessages_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSP::ArchiveInfo*
Arena::CreateMaybeMessage< ::TSP::ArchiveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ArchiveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::MessageInfo*
Arena::CreateMaybeMessage< ::TSP::MessageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::MessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FieldInfo*
Arena::CreateMaybeMessage< ::TSP::FieldInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FieldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::FieldPath*
Arena::CreateMaybeMessage< ::TSP::FieldPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::FieldPath >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentInfo*
Arena::CreateMaybeMessage< ::TSP::ComponentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentExternalReference*
Arena::CreateMaybeMessage< ::TSP::ComponentExternalReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentExternalReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ComponentDataReference*
Arena::CreateMaybeMessage< ::TSP::ComponentDataReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ComponentDataReference >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::PackageMetadata*
Arena::CreateMaybeMessage< ::TSP::PackageMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::PackageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::PasteboardMetadata*
Arena::CreateMaybeMessage< ::TSP::PasteboardMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::PasteboardMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::DataInfo*
Arena::CreateMaybeMessage< ::TSP::DataInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::DataInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSP::ViewStateMetadata*
Arena::CreateMaybeMessage< ::TSP::ViewStateMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSP::ViewStateMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
