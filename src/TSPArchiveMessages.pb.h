// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPArchiveMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSPArchiveMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSPArchiveMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSPArchiveMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSPArchiveMessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSPArchiveMessages_2eproto;
namespace TSP {
class ArchiveInfo;
struct ArchiveInfoDefaultTypeInternal;
extern ArchiveInfoDefaultTypeInternal _ArchiveInfo_default_instance_;
class ComponentDataReference;
struct ComponentDataReferenceDefaultTypeInternal;
extern ComponentDataReferenceDefaultTypeInternal _ComponentDataReference_default_instance_;
class ComponentExternalReference;
struct ComponentExternalReferenceDefaultTypeInternal;
extern ComponentExternalReferenceDefaultTypeInternal _ComponentExternalReference_default_instance_;
class ComponentInfo;
struct ComponentInfoDefaultTypeInternal;
extern ComponentInfoDefaultTypeInternal _ComponentInfo_default_instance_;
class DataInfo;
struct DataInfoDefaultTypeInternal;
extern DataInfoDefaultTypeInternal _DataInfo_default_instance_;
class FieldInfo;
struct FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
class FieldPath;
struct FieldPathDefaultTypeInternal;
extern FieldPathDefaultTypeInternal _FieldPath_default_instance_;
class MessageInfo;
struct MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class PackageMetadata;
struct PackageMetadataDefaultTypeInternal;
extern PackageMetadataDefaultTypeInternal _PackageMetadata_default_instance_;
class PasteboardMetadata;
struct PasteboardMetadataDefaultTypeInternal;
extern PasteboardMetadataDefaultTypeInternal _PasteboardMetadata_default_instance_;
class ViewStateMetadata;
struct ViewStateMetadataDefaultTypeInternal;
extern ViewStateMetadataDefaultTypeInternal _ViewStateMetadata_default_instance_;
}  // namespace TSP
PROTOBUF_NAMESPACE_OPEN
template<> ::TSP::ArchiveInfo* Arena::CreateMaybeMessage<::TSP::ArchiveInfo>(Arena*);
template<> ::TSP::ComponentDataReference* Arena::CreateMaybeMessage<::TSP::ComponentDataReference>(Arena*);
template<> ::TSP::ComponentExternalReference* Arena::CreateMaybeMessage<::TSP::ComponentExternalReference>(Arena*);
template<> ::TSP::ComponentInfo* Arena::CreateMaybeMessage<::TSP::ComponentInfo>(Arena*);
template<> ::TSP::DataInfo* Arena::CreateMaybeMessage<::TSP::DataInfo>(Arena*);
template<> ::TSP::FieldInfo* Arena::CreateMaybeMessage<::TSP::FieldInfo>(Arena*);
template<> ::TSP::FieldPath* Arena::CreateMaybeMessage<::TSP::FieldPath>(Arena*);
template<> ::TSP::MessageInfo* Arena::CreateMaybeMessage<::TSP::MessageInfo>(Arena*);
template<> ::TSP::PackageMetadata* Arena::CreateMaybeMessage<::TSP::PackageMetadata>(Arena*);
template<> ::TSP::PasteboardMetadata* Arena::CreateMaybeMessage<::TSP::PasteboardMetadata>(Arena*);
template<> ::TSP::ViewStateMetadata* Arena::CreateMaybeMessage<::TSP::ViewStateMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSP {

enum FieldInfo_Type : int {
  FieldInfo_Type_Value = 0,
  FieldInfo_Type_ObjectReference = 1,
  FieldInfo_Type_DataReference = 2,
  FieldInfo_Type_Message = 3
};
bool FieldInfo_Type_IsValid(int value);
constexpr FieldInfo_Type FieldInfo_Type_Type_MIN = FieldInfo_Type_Value;
constexpr FieldInfo_Type FieldInfo_Type_Type_MAX = FieldInfo_Type_Message;
constexpr int FieldInfo_Type_Type_ARRAYSIZE = FieldInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_Type_descriptor();
template<typename T>
inline const std::string& FieldInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldInfo_Type_descriptor(), enum_t_value);
}
inline bool FieldInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldInfo_Type>(
    FieldInfo_Type_descriptor(), name, value);
}
enum FieldInfo_Rule : int {
  FieldInfo_Rule_IgnoreAndDrop = 0,
  FieldInfo_Rule_IgnoreAndPreserve = 1,
  FieldInfo_Rule_MustUnderstand = 2,
  FieldInfo_Rule_NotSupported = -1
};
bool FieldInfo_Rule_IsValid(int value);
constexpr FieldInfo_Rule FieldInfo_Rule_Rule_MIN = FieldInfo_Rule_NotSupported;
constexpr FieldInfo_Rule FieldInfo_Rule_Rule_MAX = FieldInfo_Rule_MustUnderstand;
constexpr int FieldInfo_Rule_Rule_ARRAYSIZE = FieldInfo_Rule_Rule_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_Rule_descriptor();
template<typename T>
inline const std::string& FieldInfo_Rule_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldInfo_Rule>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldInfo_Rule_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldInfo_Rule_descriptor(), enum_t_value);
}
inline bool FieldInfo_Rule_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldInfo_Rule* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldInfo_Rule>(
    FieldInfo_Rule_descriptor(), name, value);
}
// ===================================================================

class ArchiveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ArchiveInfo) */ {
 public:
  inline ArchiveInfo() : ArchiveInfo(nullptr) {}
  ~ArchiveInfo() override;
  explicit PROTOBUF_CONSTEXPR ArchiveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArchiveInfo(const ArchiveInfo& from);
  ArchiveInfo(ArchiveInfo&& from) noexcept
    : ArchiveInfo() {
    *this = ::std::move(from);
  }

  inline ArchiveInfo& operator=(const ArchiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArchiveInfo& operator=(ArchiveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArchiveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArchiveInfo* internal_default_instance() {
    return reinterpret_cast<const ArchiveInfo*>(
               &_ArchiveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArchiveInfo& a, ArchiveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ArchiveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArchiveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArchiveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArchiveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArchiveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArchiveInfo& from) {
    ArchiveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArchiveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ArchiveInfo";
  }
  protected:
  explicit ArchiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfosFieldNumber = 2,
    kIdentifierFieldNumber = 1,
  };
  // repeated .TSP.MessageInfo message_infos = 2;
  int message_infos_size() const;
  private:
  int _internal_message_infos_size() const;
  public:
  void clear_message_infos();
  ::TSP::MessageInfo* mutable_message_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::MessageInfo >*
      mutable_message_infos();
  private:
  const ::TSP::MessageInfo& _internal_message_infos(int index) const;
  ::TSP::MessageInfo* _internal_add_message_infos();
  public:
  const ::TSP::MessageInfo& message_infos(int index) const;
  ::TSP::MessageInfo* add_message_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::MessageInfo >&
      message_infos() const;

  // optional uint64 identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  uint64_t identifier() const;
  void set_identifier(uint64_t value);
  private:
  uint64_t _internal_identifier() const;
  void _internal_set_identifier(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.ArchiveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::MessageInfo > message_infos_;
    uint64_t identifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class MessageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.MessageInfo) */ {
 public:
  inline MessageInfo() : MessageInfo(nullptr) {}
  ~MessageInfo() override;
  explicit PROTOBUF_CONSTEXPR MessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageInfo(const MessageInfo& from);
  MessageInfo(MessageInfo&& from) noexcept
    : MessageInfo() {
    *this = ::std::move(from);
  }

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfo& operator=(MessageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageInfo& a, MessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageInfo& from) {
    MessageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.MessageInfo";
  }
  protected:
  explicit MessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kFieldInfosFieldNumber = 4,
    kObjectReferencesFieldNumber = 5,
    kDataReferencesFieldNumber = 6,
    kTypeFieldNumber = 1,
    kLengthFieldNumber = 3,
  };
  // repeated uint32 version = 2 [packed = true];
  int version_size() const;
  private:
  int _internal_version_size() const;
  public:
  void clear_version();
  private:
  uint32_t _internal_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_version() const;
  void _internal_add_version(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_version();
  public:
  uint32_t version(int index) const;
  void set_version(int index, uint32_t value);
  void add_version(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_version();

  // repeated .TSP.FieldInfo field_infos = 4;
  int field_infos_size() const;
  private:
  int _internal_field_infos_size() const;
  public:
  void clear_field_infos();
  ::TSP::FieldInfo* mutable_field_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::FieldInfo >*
      mutable_field_infos();
  private:
  const ::TSP::FieldInfo& _internal_field_infos(int index) const;
  ::TSP::FieldInfo* _internal_add_field_infos();
  public:
  const ::TSP::FieldInfo& field_infos(int index) const;
  ::TSP::FieldInfo* add_field_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::FieldInfo >&
      field_infos() const;

  // repeated uint64 object_references = 5 [packed = true];
  int object_references_size() const;
  private:
  int _internal_object_references_size() const;
  public:
  void clear_object_references();
  private:
  uint64_t _internal_object_references(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_object_references() const;
  void _internal_add_object_references(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_object_references();
  public:
  uint64_t object_references(int index) const;
  void set_object_references(int index, uint64_t value);
  void add_object_references(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      object_references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_object_references();

  // repeated uint64 data_references = 6 [packed = true];
  int data_references_size() const;
  private:
  int _internal_data_references_size() const;
  public:
  void clear_data_references();
  private:
  uint64_t _internal_data_references(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_data_references() const;
  void _internal_add_data_references(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_data_references();
  public:
  uint64_t data_references(int index) const;
  void set_data_references(int index, uint64_t value);
  void add_data_references(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      data_references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_data_references();

  // required uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // required uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.MessageInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > version_;
    mutable std::atomic<int> _version_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::FieldInfo > field_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > object_references_;
    mutable std::atomic<int> _object_references_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > data_references_;
    mutable std::atomic<int> _data_references_cached_byte_size_;
    uint32_t type_;
    uint32_t length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class FieldInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.FieldInfo) */ {
 public:
  inline FieldInfo() : FieldInfo(nullptr) {}
  ~FieldInfo() override;
  explicit PROTOBUF_CONSTEXPR FieldInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldInfo(const FieldInfo& from);
  FieldInfo(FieldInfo&& from) noexcept
    : FieldInfo() {
    *this = ::std::move(from);
  }

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo& operator=(FieldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldInfo* internal_default_instance() {
    return reinterpret_cast<const FieldInfo*>(
               &_FieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldInfo& a, FieldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldInfo& from) {
    FieldInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.FieldInfo";
  }
  protected:
  explicit FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FieldInfo_Type Type;
  static constexpr Type Value =
    FieldInfo_Type_Value;
  static constexpr Type ObjectReference =
    FieldInfo_Type_ObjectReference;
  static constexpr Type DataReference =
    FieldInfo_Type_DataReference;
  static constexpr Type Message =
    FieldInfo_Type_Message;
  static inline bool Type_IsValid(int value) {
    return FieldInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    FieldInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    FieldInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    FieldInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return FieldInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return FieldInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return FieldInfo_Type_Parse(name, value);
  }

  typedef FieldInfo_Rule Rule;
  static constexpr Rule IgnoreAndDrop =
    FieldInfo_Rule_IgnoreAndDrop;
  static constexpr Rule IgnoreAndPreserve =
    FieldInfo_Rule_IgnoreAndPreserve;
  static constexpr Rule MustUnderstand =
    FieldInfo_Rule_MustUnderstand;
  static constexpr Rule NotSupported =
    FieldInfo_Rule_NotSupported;
  static inline bool Rule_IsValid(int value) {
    return FieldInfo_Rule_IsValid(value);
  }
  static constexpr Rule Rule_MIN =
    FieldInfo_Rule_Rule_MIN;
  static constexpr Rule Rule_MAX =
    FieldInfo_Rule_Rule_MAX;
  static constexpr int Rule_ARRAYSIZE =
    FieldInfo_Rule_Rule_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Rule_descriptor() {
    return FieldInfo_Rule_descriptor();
  }
  template<typename T>
  static inline const std::string& Rule_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Rule>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Rule_Name.");
    return FieldInfo_Rule_Name(enum_t_value);
  }
  static inline bool Rule_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Rule* value) {
    return FieldInfo_Rule_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObjectReferencesFieldNumber = 4,
    kDataReferencesFieldNumber = 5,
    kPathFieldNumber = 1,
    kTypeFieldNumber = 2,
    kRuleFieldNumber = 3,
  };
  // repeated uint64 object_references = 4 [packed = true];
  int object_references_size() const;
  private:
  int _internal_object_references_size() const;
  public:
  void clear_object_references();
  private:
  uint64_t _internal_object_references(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_object_references() const;
  void _internal_add_object_references(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_object_references();
  public:
  uint64_t object_references(int index) const;
  void set_object_references(int index, uint64_t value);
  void add_object_references(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      object_references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_object_references();

  // repeated uint64 data_references = 5 [packed = true];
  int data_references_size() const;
  private:
  int _internal_data_references_size() const;
  public:
  void clear_data_references();
  private:
  uint64_t _internal_data_references(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_data_references() const;
  void _internal_add_data_references(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_data_references();
  public:
  uint64_t data_references(int index) const;
  void set_data_references(int index, uint64_t value);
  void add_data_references(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      data_references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_data_references();

  // required .TSP.FieldPath path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::TSP::FieldPath& path() const;
  PROTOBUF_NODISCARD ::TSP::FieldPath* release_path();
  ::TSP::FieldPath* mutable_path();
  void set_allocated_path(::TSP::FieldPath* path);
  private:
  const ::TSP::FieldPath& _internal_path() const;
  ::TSP::FieldPath* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::TSP::FieldPath* path);
  ::TSP::FieldPath* unsafe_arena_release_path();

  // optional .TSP.FieldInfo.Type type = 2 [default = Value];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSP::FieldInfo_Type type() const;
  void set_type(::TSP::FieldInfo_Type value);
  private:
  ::TSP::FieldInfo_Type _internal_type() const;
  void _internal_set_type(::TSP::FieldInfo_Type value);
  public:

  // optional .TSP.FieldInfo.Rule rule = 3 [default = IgnoreAndDrop];
  bool has_rule() const;
  private:
  bool _internal_has_rule() const;
  public:
  void clear_rule();
  ::TSP::FieldInfo_Rule rule() const;
  void set_rule(::TSP::FieldInfo_Rule value);
  private:
  ::TSP::FieldInfo_Rule _internal_rule() const;
  void _internal_set_rule(::TSP::FieldInfo_Rule value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.FieldInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > object_references_;
    mutable std::atomic<int> _object_references_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > data_references_;
    mutable std::atomic<int> _data_references_cached_byte_size_;
    ::TSP::FieldPath* path_;
    int type_;
    int rule_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class FieldPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.FieldPath) */ {
 public:
  inline FieldPath() : FieldPath(nullptr) {}
  ~FieldPath() override;
  explicit PROTOBUF_CONSTEXPR FieldPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldPath(const FieldPath& from);
  FieldPath(FieldPath&& from) noexcept
    : FieldPath() {
    *this = ::std::move(from);
  }

  inline FieldPath& operator=(const FieldPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldPath& operator=(FieldPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldPath* internal_default_instance() {
    return reinterpret_cast<const FieldPath*>(
               &_FieldPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldPath& a, FieldPath& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldPath& from) {
    FieldPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.FieldPath";
  }
  protected:
  explicit FieldPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // repeated uint32 path = 1 [packed = true];
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  private:
  uint32_t _internal_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_path() const;
  void _internal_add_path(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_path();
  public:
  uint32_t path(int index) const;
  void set_path(int index, uint32_t value);
  void add_path(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:TSP.FieldPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > path_;
    mutable std::atomic<int> _path_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class ComponentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ComponentInfo) */ {
 public:
  inline ComponentInfo() : ComponentInfo(nullptr) {}
  ~ComponentInfo() override;
  explicit PROTOBUF_CONSTEXPR ComponentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentInfo(const ComponentInfo& from);
  ComponentInfo(ComponentInfo&& from) noexcept
    : ComponentInfo() {
    *this = ::std::move(from);
  }

  inline ComponentInfo& operator=(const ComponentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInfo& operator=(ComponentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentInfo* internal_default_instance() {
    return reinterpret_cast<const ComponentInfo*>(
               &_ComponentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ComponentInfo& a, ComponentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentInfo& from) {
    ComponentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ComponentInfo";
  }
  protected:
  explicit ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadVersionFieldNumber = 4,
    kWriteVersionFieldNumber = 5,
    kExternalReferencesFieldNumber = 6,
    kDataReferencesFieldNumber = 7,
    kPreferredLocatorFieldNumber = 2,
    kLocatorFieldNumber = 3,
    kIdentifierFieldNumber = 1,
    kAllowsDuplicatesOutsideOfDocumentPackageFieldNumber = 8,
    kIsStoredOutsideObjectArchiveFieldNumber = 10,
    kDirtiesDocumentPackageFieldNumber = 9,
  };
  // repeated uint32 read_version = 4 [packed = true];
  int read_version_size() const;
  private:
  int _internal_read_version_size() const;
  public:
  void clear_read_version();
  private:
  uint32_t _internal_read_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_read_version() const;
  void _internal_add_read_version(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_read_version();
  public:
  uint32_t read_version(int index) const;
  void set_read_version(int index, uint32_t value);
  void add_read_version(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      read_version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_read_version();

  // repeated uint32 write_version = 5 [packed = true];
  int write_version_size() const;
  private:
  int _internal_write_version_size() const;
  public:
  void clear_write_version();
  private:
  uint32_t _internal_write_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_write_version() const;
  void _internal_add_write_version(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_write_version();
  public:
  uint32_t write_version(int index) const;
  void set_write_version(int index, uint32_t value);
  void add_write_version(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      write_version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_write_version();

  // repeated .TSP.ComponentExternalReference external_references = 6;
  int external_references_size() const;
  private:
  int _internal_external_references_size() const;
  public:
  void clear_external_references();
  ::TSP::ComponentExternalReference* mutable_external_references(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentExternalReference >*
      mutable_external_references();
  private:
  const ::TSP::ComponentExternalReference& _internal_external_references(int index) const;
  ::TSP::ComponentExternalReference* _internal_add_external_references();
  public:
  const ::TSP::ComponentExternalReference& external_references(int index) const;
  ::TSP::ComponentExternalReference* add_external_references();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentExternalReference >&
      external_references() const;

  // repeated .TSP.ComponentDataReference data_references = 7;
  int data_references_size() const;
  private:
  int _internal_data_references_size() const;
  public:
  void clear_data_references();
  ::TSP::ComponentDataReference* mutable_data_references(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentDataReference >*
      mutable_data_references();
  private:
  const ::TSP::ComponentDataReference& _internal_data_references(int index) const;
  ::TSP::ComponentDataReference* _internal_add_data_references();
  public:
  const ::TSP::ComponentDataReference& data_references(int index) const;
  ::TSP::ComponentDataReference* add_data_references();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentDataReference >&
      data_references() const;

  // required string preferred_locator = 2;
  bool has_preferred_locator() const;
  private:
  bool _internal_has_preferred_locator() const;
  public:
  void clear_preferred_locator();
  const std::string& preferred_locator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preferred_locator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preferred_locator();
  PROTOBUF_NODISCARD std::string* release_preferred_locator();
  void set_allocated_preferred_locator(std::string* preferred_locator);
  private:
  const std::string& _internal_preferred_locator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_locator(const std::string& value);
  std::string* _internal_mutable_preferred_locator();
  public:

  // optional string locator = 3;
  bool has_locator() const;
  private:
  bool _internal_has_locator() const;
  public:
  void clear_locator();
  const std::string& locator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locator();
  PROTOBUF_NODISCARD std::string* release_locator();
  void set_allocated_locator(std::string* locator);
  private:
  const std::string& _internal_locator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locator(const std::string& value);
  std::string* _internal_mutable_locator();
  public:

  // required uint64 identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  uint64_t identifier() const;
  void set_identifier(uint64_t value);
  private:
  uint64_t _internal_identifier() const;
  void _internal_set_identifier(uint64_t value);
  public:

  // optional bool allows_duplicates_outside_of_document_package = 8 [default = false];
  bool has_allows_duplicates_outside_of_document_package() const;
  private:
  bool _internal_has_allows_duplicates_outside_of_document_package() const;
  public:
  void clear_allows_duplicates_outside_of_document_package();
  bool allows_duplicates_outside_of_document_package() const;
  void set_allows_duplicates_outside_of_document_package(bool value);
  private:
  bool _internal_allows_duplicates_outside_of_document_package() const;
  void _internal_set_allows_duplicates_outside_of_document_package(bool value);
  public:

  // optional bool is_stored_outside_object_archive = 10 [default = false];
  bool has_is_stored_outside_object_archive() const;
  private:
  bool _internal_has_is_stored_outside_object_archive() const;
  public:
  void clear_is_stored_outside_object_archive();
  bool is_stored_outside_object_archive() const;
  void set_is_stored_outside_object_archive(bool value);
  private:
  bool _internal_is_stored_outside_object_archive() const;
  void _internal_set_is_stored_outside_object_archive(bool value);
  public:

  // optional bool dirties_document_package = 9 [default = true];
  bool has_dirties_document_package() const;
  private:
  bool _internal_has_dirties_document_package() const;
  public:
  void clear_dirties_document_package();
  bool dirties_document_package() const;
  void set_dirties_document_package(bool value);
  private:
  bool _internal_dirties_document_package() const;
  void _internal_set_dirties_document_package(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.ComponentInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > read_version_;
    mutable std::atomic<int> _read_version_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > write_version_;
    mutable std::atomic<int> _write_version_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentExternalReference > external_references_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentDataReference > data_references_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_locator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locator_;
    uint64_t identifier_;
    bool allows_duplicates_outside_of_document_package_;
    bool is_stored_outside_object_archive_;
    bool dirties_document_package_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class ComponentExternalReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ComponentExternalReference) */ {
 public:
  inline ComponentExternalReference() : ComponentExternalReference(nullptr) {}
  ~ComponentExternalReference() override;
  explicit PROTOBUF_CONSTEXPR ComponentExternalReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentExternalReference(const ComponentExternalReference& from);
  ComponentExternalReference(ComponentExternalReference&& from) noexcept
    : ComponentExternalReference() {
    *this = ::std::move(from);
  }

  inline ComponentExternalReference& operator=(const ComponentExternalReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentExternalReference& operator=(ComponentExternalReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentExternalReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentExternalReference* internal_default_instance() {
    return reinterpret_cast<const ComponentExternalReference*>(
               &_ComponentExternalReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ComponentExternalReference& a, ComponentExternalReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentExternalReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentExternalReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentExternalReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentExternalReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentExternalReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentExternalReference& from) {
    ComponentExternalReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentExternalReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ComponentExternalReference";
  }
  protected:
  explicit ComponentExternalReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdentifierFieldNumber = 1,
    kObjectIdentifierFieldNumber = 2,
    kIsWeakFieldNumber = 3,
  };
  // required uint64 component_identifier = 1;
  bool has_component_identifier() const;
  private:
  bool _internal_has_component_identifier() const;
  public:
  void clear_component_identifier();
  uint64_t component_identifier() const;
  void set_component_identifier(uint64_t value);
  private:
  uint64_t _internal_component_identifier() const;
  void _internal_set_component_identifier(uint64_t value);
  public:

  // optional uint64 object_identifier = 2;
  bool has_object_identifier() const;
  private:
  bool _internal_has_object_identifier() const;
  public:
  void clear_object_identifier();
  uint64_t object_identifier() const;
  void set_object_identifier(uint64_t value);
  private:
  uint64_t _internal_object_identifier() const;
  void _internal_set_object_identifier(uint64_t value);
  public:

  // optional bool is_weak = 3;
  bool has_is_weak() const;
  private:
  bool _internal_has_is_weak() const;
  public:
  void clear_is_weak();
  bool is_weak() const;
  void set_is_weak(bool value);
  private:
  bool _internal_is_weak() const;
  void _internal_set_is_weak(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.ComponentExternalReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t component_identifier_;
    uint64_t object_identifier_;
    bool is_weak_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class ComponentDataReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ComponentDataReference) */ {
 public:
  inline ComponentDataReference() : ComponentDataReference(nullptr) {}
  ~ComponentDataReference() override;
  explicit PROTOBUF_CONSTEXPR ComponentDataReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentDataReference(const ComponentDataReference& from);
  ComponentDataReference(ComponentDataReference&& from) noexcept
    : ComponentDataReference() {
    *this = ::std::move(from);
  }

  inline ComponentDataReference& operator=(const ComponentDataReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentDataReference& operator=(ComponentDataReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentDataReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentDataReference* internal_default_instance() {
    return reinterpret_cast<const ComponentDataReference*>(
               &_ComponentDataReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ComponentDataReference& a, ComponentDataReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentDataReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentDataReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentDataReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentDataReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentDataReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentDataReference& from) {
    ComponentDataReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentDataReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ComponentDataReference";
  }
  protected:
  explicit ComponentDataReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataIdentifierFieldNumber = 1,
  };
  // required uint64 data_identifier = 1;
  bool has_data_identifier() const;
  private:
  bool _internal_has_data_identifier() const;
  public:
  void clear_data_identifier();
  uint64_t data_identifier() const;
  void set_data_identifier(uint64_t value);
  private:
  uint64_t _internal_data_identifier() const;
  void _internal_set_data_identifier(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.ComponentDataReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t data_identifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class PackageMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.PackageMetadata) */ {
 public:
  inline PackageMetadata() : PackageMetadata(nullptr) {}
  ~PackageMetadata() override;
  explicit PROTOBUF_CONSTEXPR PackageMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackageMetadata(const PackageMetadata& from);
  PackageMetadata(PackageMetadata&& from) noexcept
    : PackageMetadata() {
    *this = ::std::move(from);
  }

  inline PackageMetadata& operator=(const PackageMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageMetadata& operator=(PackageMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackageMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackageMetadata* internal_default_instance() {
    return reinterpret_cast<const PackageMetadata*>(
               &_PackageMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PackageMetadata& a, PackageMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackageMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackageMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackageMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackageMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PackageMetadata& from) {
    PackageMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.PackageMetadata";
  }
  protected:
  explicit PackageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 3,
    kDatasFieldNumber = 4,
    kReadVersionFieldNumber = 5,
    kWriteVersionFieldNumber = 6,
    kLastObjectIdentifierFieldNumber = 1,
  };
  // repeated .TSP.ComponentInfo components = 3;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::TSP::ComponentInfo* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentInfo >*
      mutable_components();
  private:
  const ::TSP::ComponentInfo& _internal_components(int index) const;
  ::TSP::ComponentInfo* _internal_add_components();
  public:
  const ::TSP::ComponentInfo& components(int index) const;
  ::TSP::ComponentInfo* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentInfo >&
      components() const;

  // repeated .TSP.DataInfo datas = 4;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::TSP::DataInfo* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >*
      mutable_datas();
  private:
  const ::TSP::DataInfo& _internal_datas(int index) const;
  ::TSP::DataInfo* _internal_add_datas();
  public:
  const ::TSP::DataInfo& datas(int index) const;
  ::TSP::DataInfo* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >&
      datas() const;

  // repeated uint32 read_version = 5 [packed = true];
  int read_version_size() const;
  private:
  int _internal_read_version_size() const;
  public:
  void clear_read_version();
  private:
  uint32_t _internal_read_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_read_version() const;
  void _internal_add_read_version(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_read_version();
  public:
  uint32_t read_version(int index) const;
  void set_read_version(int index, uint32_t value);
  void add_read_version(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      read_version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_read_version();

  // repeated uint32 write_version = 6 [packed = true];
  int write_version_size() const;
  private:
  int _internal_write_version_size() const;
  public:
  void clear_write_version();
  private:
  uint32_t _internal_write_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_write_version() const;
  void _internal_add_write_version(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_write_version();
  public:
  uint32_t write_version(int index) const;
  void set_write_version(int index, uint32_t value);
  void add_write_version(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      write_version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_write_version();

  // required uint64 last_object_identifier = 1;
  bool has_last_object_identifier() const;
  private:
  bool _internal_has_last_object_identifier() const;
  public:
  void clear_last_object_identifier();
  uint64_t last_object_identifier() const;
  void set_last_object_identifier(uint64_t value);
  private:
  uint64_t _internal_last_object_identifier() const;
  void _internal_set_last_object_identifier(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.PackageMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentInfo > components_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo > datas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > read_version_;
    mutable std::atomic<int> _read_version_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > write_version_;
    mutable std::atomic<int> _write_version_cached_byte_size_;
    uint64_t last_object_identifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class PasteboardMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.PasteboardMetadata) */ {
 public:
  inline PasteboardMetadata() : PasteboardMetadata(nullptr) {}
  ~PasteboardMetadata() override;
  explicit PROTOBUF_CONSTEXPR PasteboardMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteboardMetadata(const PasteboardMetadata& from);
  PasteboardMetadata(PasteboardMetadata&& from) noexcept
    : PasteboardMetadata() {
    *this = ::std::move(from);
  }

  inline PasteboardMetadata& operator=(const PasteboardMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteboardMetadata& operator=(PasteboardMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteboardMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteboardMetadata* internal_default_instance() {
    return reinterpret_cast<const PasteboardMetadata*>(
               &_PasteboardMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PasteboardMetadata& a, PasteboardMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteboardMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteboardMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasteboardMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasteboardMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PasteboardMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PasteboardMetadata& from) {
    PasteboardMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteboardMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.PasteboardMetadata";
  }
  protected:
  explicit PasteboardMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDatasFieldNumber = 3,
    kAppNameFieldNumber = 2,
    kSourceDocumentUuidFieldNumber = 4,
  };
  // repeated uint32 version = 1 [packed = true];
  int version_size() const;
  private:
  int _internal_version_size() const;
  public:
  void clear_version();
  private:
  uint32_t _internal_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_version() const;
  void _internal_add_version(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_version();
  public:
  uint32_t version(int index) const;
  void set_version(int index, uint32_t value);
  void add_version(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_version();

  // repeated .TSP.DataInfo datas = 3;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::TSP::DataInfo* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >*
      mutable_datas();
  private:
  const ::TSP::DataInfo& _internal_datas(int index) const;
  ::TSP::DataInfo* _internal_add_datas();
  public:
  const ::TSP::DataInfo& datas(int index) const;
  ::TSP::DataInfo* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >&
      datas() const;

  // required string app_name = 2;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string source_document_uuid = 4;
  bool has_source_document_uuid() const;
  private:
  bool _internal_has_source_document_uuid() const;
  public:
  void clear_source_document_uuid();
  const std::string& source_document_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_document_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_document_uuid();
  PROTOBUF_NODISCARD std::string* release_source_document_uuid();
  void set_allocated_source_document_uuid(std::string* source_document_uuid);
  private:
  const std::string& _internal_source_document_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_document_uuid(const std::string& value);
  std::string* _internal_mutable_source_document_uuid();
  public:

  // @@protoc_insertion_point(class_scope:TSP.PasteboardMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > version_;
    mutable std::atomic<int> _version_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo > datas_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_document_uuid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class DataInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.DataInfo) */ {
 public:
  inline DataInfo() : DataInfo(nullptr) {}
  ~DataInfo() override;
  explicit PROTOBUF_CONSTEXPR DataInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataInfo(const DataInfo& from);
  DataInfo(DataInfo&& from) noexcept
    : DataInfo() {
    *this = ::std::move(from);
  }

  inline DataInfo& operator=(const DataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataInfo& operator=(DataInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataInfo* internal_default_instance() {
    return reinterpret_cast<const DataInfo*>(
               &_DataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DataInfo& a, DataInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DataInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataInfo& from) {
    DataInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.DataInfo";
  }
  protected:
  explicit DataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 2,
    kPreferredFileNameFieldNumber = 3,
    kFileNameFieldNumber = 4,
    kDocumentResourceLocatorFieldNumber = 5,
    kSourceBookmarkDataFieldNumber = 6,
    kPasteboardExternalFilePathFieldNumber = 99,
    kIdentifierFieldNumber = 1,
  };
  // required bytes digest = 2;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // required string preferred_file_name = 3;
  bool has_preferred_file_name() const;
  private:
  bool _internal_has_preferred_file_name() const;
  public:
  void clear_preferred_file_name();
  const std::string& preferred_file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preferred_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preferred_file_name();
  PROTOBUF_NODISCARD std::string* release_preferred_file_name();
  void set_allocated_preferred_file_name(std::string* preferred_file_name);
  private:
  const std::string& _internal_preferred_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_file_name(const std::string& value);
  std::string* _internal_mutable_preferred_file_name();
  public:

  // optional string file_name = 4;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional string document_resource_locator = 5;
  bool has_document_resource_locator() const;
  private:
  bool _internal_has_document_resource_locator() const;
  public:
  void clear_document_resource_locator();
  const std::string& document_resource_locator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_resource_locator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_resource_locator();
  PROTOBUF_NODISCARD std::string* release_document_resource_locator();
  void set_allocated_document_resource_locator(std::string* document_resource_locator);
  private:
  const std::string& _internal_document_resource_locator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_resource_locator(const std::string& value);
  std::string* _internal_mutable_document_resource_locator();
  public:

  // optional bytes source_bookmark_data = 6;
  bool has_source_bookmark_data() const;
  private:
  bool _internal_has_source_bookmark_data() const;
  public:
  void clear_source_bookmark_data();
  const std::string& source_bookmark_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_bookmark_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_bookmark_data();
  PROTOBUF_NODISCARD std::string* release_source_bookmark_data();
  void set_allocated_source_bookmark_data(std::string* source_bookmark_data);
  private:
  const std::string& _internal_source_bookmark_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_bookmark_data(const std::string& value);
  std::string* _internal_mutable_source_bookmark_data();
  public:

  // optional string pasteboard_external_file_path = 99;
  bool has_pasteboard_external_file_path() const;
  private:
  bool _internal_has_pasteboard_external_file_path() const;
  public:
  void clear_pasteboard_external_file_path();
  const std::string& pasteboard_external_file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pasteboard_external_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pasteboard_external_file_path();
  PROTOBUF_NODISCARD std::string* release_pasteboard_external_file_path();
  void set_allocated_pasteboard_external_file_path(std::string* pasteboard_external_file_path);
  private:
  const std::string& _internal_pasteboard_external_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pasteboard_external_file_path(const std::string& value);
  std::string* _internal_mutable_pasteboard_external_file_path();
  public:

  // required uint64 identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  uint64_t identifier() const;
  void set_identifier(uint64_t value);
  private:
  uint64_t _internal_identifier() const;
  void _internal_set_identifier(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSP.DataInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_resource_locator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_bookmark_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pasteboard_external_file_path_;
    uint64_t identifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// -------------------------------------------------------------------

class ViewStateMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSP.ViewStateMetadata) */ {
 public:
  inline ViewStateMetadata() : ViewStateMetadata(nullptr) {}
  ~ViewStateMetadata() override;
  explicit PROTOBUF_CONSTEXPR ViewStateMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewStateMetadata(const ViewStateMetadata& from);
  ViewStateMetadata(ViewStateMetadata&& from) noexcept
    : ViewStateMetadata() {
    *this = ::std::move(from);
  }

  inline ViewStateMetadata& operator=(const ViewStateMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewStateMetadata& operator=(ViewStateMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewStateMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewStateMetadata* internal_default_instance() {
    return reinterpret_cast<const ViewStateMetadata*>(
               &_ViewStateMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ViewStateMetadata& a, ViewStateMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewStateMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewStateMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewStateMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewStateMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewStateMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ViewStateMetadata& from) {
    ViewStateMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewStateMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSP.ViewStateMetadata";
  }
  protected:
  explicit ViewStateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDocumentVersionUuidFieldNumber = 2,
    kComponentFieldNumber = 3,
  };
  // repeated uint32 version = 1 [packed = true];
  int version_size() const;
  private:
  int _internal_version_size() const;
  public:
  void clear_version();
  private:
  uint32_t _internal_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_version() const;
  void _internal_add_version(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_version();
  public:
  uint32_t version(int index) const;
  void set_version(int index, uint32_t value);
  void add_version(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_version();

  // required string document_version_uuid = 2;
  bool has_document_version_uuid() const;
  private:
  bool _internal_has_document_version_uuid() const;
  public:
  void clear_document_version_uuid();
  const std::string& document_version_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_version_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_version_uuid();
  PROTOBUF_NODISCARD std::string* release_document_version_uuid();
  void set_allocated_document_version_uuid(std::string* document_version_uuid);
  private:
  const std::string& _internal_document_version_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_version_uuid(const std::string& value);
  std::string* _internal_mutable_document_version_uuid();
  public:

  // required .TSP.ComponentInfo component = 3;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::TSP::ComponentInfo& component() const;
  PROTOBUF_NODISCARD ::TSP::ComponentInfo* release_component();
  ::TSP::ComponentInfo* mutable_component();
  void set_allocated_component(::TSP::ComponentInfo* component);
  private:
  const ::TSP::ComponentInfo& _internal_component() const;
  ::TSP::ComponentInfo* _internal_mutable_component();
  public:
  void unsafe_arena_set_allocated_component(
      ::TSP::ComponentInfo* component);
  ::TSP::ComponentInfo* unsafe_arena_release_component();

  // @@protoc_insertion_point(class_scope:TSP.ViewStateMetadata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > version_;
    mutable std::atomic<int> _version_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_version_uuid_;
    ::TSP::ComponentInfo* component_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSPArchiveMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArchiveInfo

// optional uint64 identifier = 1;
inline bool ArchiveInfo::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArchiveInfo::has_identifier() const {
  return _internal_has_identifier();
}
inline void ArchiveInfo::clear_identifier() {
  _impl_.identifier_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ArchiveInfo::_internal_identifier() const {
  return _impl_.identifier_;
}
inline uint64_t ArchiveInfo::identifier() const {
  // @@protoc_insertion_point(field_get:TSP.ArchiveInfo.identifier)
  return _internal_identifier();
}
inline void ArchiveInfo::_internal_set_identifier(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_ = value;
}
inline void ArchiveInfo::set_identifier(uint64_t value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.ArchiveInfo.identifier)
}

// repeated .TSP.MessageInfo message_infos = 2;
inline int ArchiveInfo::_internal_message_infos_size() const {
  return _impl_.message_infos_.size();
}
inline int ArchiveInfo::message_infos_size() const {
  return _internal_message_infos_size();
}
inline void ArchiveInfo::clear_message_infos() {
  _impl_.message_infos_.Clear();
}
inline ::TSP::MessageInfo* ArchiveInfo::mutable_message_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.ArchiveInfo.message_infos)
  return _impl_.message_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::MessageInfo >*
ArchiveInfo::mutable_message_infos() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ArchiveInfo.message_infos)
  return &_impl_.message_infos_;
}
inline const ::TSP::MessageInfo& ArchiveInfo::_internal_message_infos(int index) const {
  return _impl_.message_infos_.Get(index);
}
inline const ::TSP::MessageInfo& ArchiveInfo::message_infos(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ArchiveInfo.message_infos)
  return _internal_message_infos(index);
}
inline ::TSP::MessageInfo* ArchiveInfo::_internal_add_message_infos() {
  return _impl_.message_infos_.Add();
}
inline ::TSP::MessageInfo* ArchiveInfo::add_message_infos() {
  ::TSP::MessageInfo* _add = _internal_add_message_infos();
  // @@protoc_insertion_point(field_add:TSP.ArchiveInfo.message_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::MessageInfo >&
ArchiveInfo::message_infos() const {
  // @@protoc_insertion_point(field_list:TSP.ArchiveInfo.message_infos)
  return _impl_.message_infos_;
}

// -------------------------------------------------------------------

// MessageInfo

// required uint32 type = 1;
inline bool MessageInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageInfo::has_type() const {
  return _internal_has_type();
}
inline void MessageInfo::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t MessageInfo::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t MessageInfo::type() const {
  // @@protoc_insertion_point(field_get:TSP.MessageInfo.type)
  return _internal_type();
}
inline void MessageInfo::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void MessageInfo::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSP.MessageInfo.type)
}

// repeated uint32 version = 2 [packed = true];
inline int MessageInfo::_internal_version_size() const {
  return _impl_.version_.size();
}
inline int MessageInfo::version_size() const {
  return _internal_version_size();
}
inline void MessageInfo::clear_version() {
  _impl_.version_.Clear();
}
inline uint32_t MessageInfo::_internal_version(int index) const {
  return _impl_.version_.Get(index);
}
inline uint32_t MessageInfo::version(int index) const {
  // @@protoc_insertion_point(field_get:TSP.MessageInfo.version)
  return _internal_version(index);
}
inline void MessageInfo::set_version(int index, uint32_t value) {
  _impl_.version_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.MessageInfo.version)
}
inline void MessageInfo::_internal_add_version(uint32_t value) {
  _impl_.version_.Add(value);
}
inline void MessageInfo::add_version(uint32_t value) {
  _internal_add_version(value);
  // @@protoc_insertion_point(field_add:TSP.MessageInfo.version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MessageInfo::_internal_version() const {
  return _impl_.version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MessageInfo::version() const {
  // @@protoc_insertion_point(field_list:TSP.MessageInfo.version)
  return _internal_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MessageInfo::_internal_mutable_version() {
  return &_impl_.version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MessageInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable_list:TSP.MessageInfo.version)
  return _internal_mutable_version();
}

// required uint32 length = 3;
inline bool MessageInfo::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageInfo::has_length() const {
  return _internal_has_length();
}
inline void MessageInfo::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t MessageInfo::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t MessageInfo::length() const {
  // @@protoc_insertion_point(field_get:TSP.MessageInfo.length)
  return _internal_length();
}
inline void MessageInfo::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.length_ = value;
}
inline void MessageInfo::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TSP.MessageInfo.length)
}

// repeated .TSP.FieldInfo field_infos = 4;
inline int MessageInfo::_internal_field_infos_size() const {
  return _impl_.field_infos_.size();
}
inline int MessageInfo::field_infos_size() const {
  return _internal_field_infos_size();
}
inline void MessageInfo::clear_field_infos() {
  _impl_.field_infos_.Clear();
}
inline ::TSP::FieldInfo* MessageInfo::mutable_field_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.MessageInfo.field_infos)
  return _impl_.field_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::FieldInfo >*
MessageInfo::mutable_field_infos() {
  // @@protoc_insertion_point(field_mutable_list:TSP.MessageInfo.field_infos)
  return &_impl_.field_infos_;
}
inline const ::TSP::FieldInfo& MessageInfo::_internal_field_infos(int index) const {
  return _impl_.field_infos_.Get(index);
}
inline const ::TSP::FieldInfo& MessageInfo::field_infos(int index) const {
  // @@protoc_insertion_point(field_get:TSP.MessageInfo.field_infos)
  return _internal_field_infos(index);
}
inline ::TSP::FieldInfo* MessageInfo::_internal_add_field_infos() {
  return _impl_.field_infos_.Add();
}
inline ::TSP::FieldInfo* MessageInfo::add_field_infos() {
  ::TSP::FieldInfo* _add = _internal_add_field_infos();
  // @@protoc_insertion_point(field_add:TSP.MessageInfo.field_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::FieldInfo >&
MessageInfo::field_infos() const {
  // @@protoc_insertion_point(field_list:TSP.MessageInfo.field_infos)
  return _impl_.field_infos_;
}

// repeated uint64 object_references = 5 [packed = true];
inline int MessageInfo::_internal_object_references_size() const {
  return _impl_.object_references_.size();
}
inline int MessageInfo::object_references_size() const {
  return _internal_object_references_size();
}
inline void MessageInfo::clear_object_references() {
  _impl_.object_references_.Clear();
}
inline uint64_t MessageInfo::_internal_object_references(int index) const {
  return _impl_.object_references_.Get(index);
}
inline uint64_t MessageInfo::object_references(int index) const {
  // @@protoc_insertion_point(field_get:TSP.MessageInfo.object_references)
  return _internal_object_references(index);
}
inline void MessageInfo::set_object_references(int index, uint64_t value) {
  _impl_.object_references_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.MessageInfo.object_references)
}
inline void MessageInfo::_internal_add_object_references(uint64_t value) {
  _impl_.object_references_.Add(value);
}
inline void MessageInfo::add_object_references(uint64_t value) {
  _internal_add_object_references(value);
  // @@protoc_insertion_point(field_add:TSP.MessageInfo.object_references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
MessageInfo::_internal_object_references() const {
  return _impl_.object_references_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
MessageInfo::object_references() const {
  // @@protoc_insertion_point(field_list:TSP.MessageInfo.object_references)
  return _internal_object_references();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
MessageInfo::_internal_mutable_object_references() {
  return &_impl_.object_references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
MessageInfo::mutable_object_references() {
  // @@protoc_insertion_point(field_mutable_list:TSP.MessageInfo.object_references)
  return _internal_mutable_object_references();
}

// repeated uint64 data_references = 6 [packed = true];
inline int MessageInfo::_internal_data_references_size() const {
  return _impl_.data_references_.size();
}
inline int MessageInfo::data_references_size() const {
  return _internal_data_references_size();
}
inline void MessageInfo::clear_data_references() {
  _impl_.data_references_.Clear();
}
inline uint64_t MessageInfo::_internal_data_references(int index) const {
  return _impl_.data_references_.Get(index);
}
inline uint64_t MessageInfo::data_references(int index) const {
  // @@protoc_insertion_point(field_get:TSP.MessageInfo.data_references)
  return _internal_data_references(index);
}
inline void MessageInfo::set_data_references(int index, uint64_t value) {
  _impl_.data_references_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.MessageInfo.data_references)
}
inline void MessageInfo::_internal_add_data_references(uint64_t value) {
  _impl_.data_references_.Add(value);
}
inline void MessageInfo::add_data_references(uint64_t value) {
  _internal_add_data_references(value);
  // @@protoc_insertion_point(field_add:TSP.MessageInfo.data_references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
MessageInfo::_internal_data_references() const {
  return _impl_.data_references_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
MessageInfo::data_references() const {
  // @@protoc_insertion_point(field_list:TSP.MessageInfo.data_references)
  return _internal_data_references();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
MessageInfo::_internal_mutable_data_references() {
  return &_impl_.data_references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
MessageInfo::mutable_data_references() {
  // @@protoc_insertion_point(field_mutable_list:TSP.MessageInfo.data_references)
  return _internal_mutable_data_references();
}

// -------------------------------------------------------------------

// FieldInfo

// required .TSP.FieldPath path = 1;
inline bool FieldInfo::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.path_ != nullptr);
  return value;
}
inline bool FieldInfo::has_path() const {
  return _internal_has_path();
}
inline void FieldInfo::clear_path() {
  if (_impl_.path_ != nullptr) _impl_.path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSP::FieldPath& FieldInfo::_internal_path() const {
  const ::TSP::FieldPath* p = _impl_.path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::FieldPath&>(
      ::TSP::_FieldPath_default_instance_);
}
inline const ::TSP::FieldPath& FieldInfo::path() const {
  // @@protoc_insertion_point(field_get:TSP.FieldInfo.path)
  return _internal_path();
}
inline void FieldInfo::unsafe_arena_set_allocated_path(
    ::TSP::FieldPath* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path_);
  }
  _impl_.path_ = path;
  if (path) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.FieldInfo.path)
}
inline ::TSP::FieldPath* FieldInfo::release_path() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::FieldPath* temp = _impl_.path_;
  _impl_.path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::FieldPath* FieldInfo::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:TSP.FieldInfo.path)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::FieldPath* temp = _impl_.path_;
  _impl_.path_ = nullptr;
  return temp;
}
inline ::TSP::FieldPath* FieldInfo::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::FieldPath>(GetArenaForAllocation());
    _impl_.path_ = p;
  }
  return _impl_.path_;
}
inline ::TSP::FieldPath* FieldInfo::mutable_path() {
  ::TSP::FieldPath* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:TSP.FieldInfo.path)
  return _msg;
}
inline void FieldInfo::set_allocated_path(::TSP::FieldPath* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_ = path;
  // @@protoc_insertion_point(field_set_allocated:TSP.FieldInfo.path)
}

// optional .TSP.FieldInfo.Type type = 2 [default = Value];
inline bool FieldInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FieldInfo::has_type() const {
  return _internal_has_type();
}
inline void FieldInfo::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TSP::FieldInfo_Type FieldInfo::_internal_type() const {
  return static_cast< ::TSP::FieldInfo_Type >(_impl_.type_);
}
inline ::TSP::FieldInfo_Type FieldInfo::type() const {
  // @@protoc_insertion_point(field_get:TSP.FieldInfo.type)
  return _internal_type();
}
inline void FieldInfo::_internal_set_type(::TSP::FieldInfo_Type value) {
  assert(::TSP::FieldInfo_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void FieldInfo::set_type(::TSP::FieldInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSP.FieldInfo.type)
}

// optional .TSP.FieldInfo.Rule rule = 3 [default = IgnoreAndDrop];
inline bool FieldInfo::_internal_has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FieldInfo::has_rule() const {
  return _internal_has_rule();
}
inline void FieldInfo::clear_rule() {
  _impl_.rule_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TSP::FieldInfo_Rule FieldInfo::_internal_rule() const {
  return static_cast< ::TSP::FieldInfo_Rule >(_impl_.rule_);
}
inline ::TSP::FieldInfo_Rule FieldInfo::rule() const {
  // @@protoc_insertion_point(field_get:TSP.FieldInfo.rule)
  return _internal_rule();
}
inline void FieldInfo::_internal_set_rule(::TSP::FieldInfo_Rule value) {
  assert(::TSP::FieldInfo_Rule_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rule_ = value;
}
inline void FieldInfo::set_rule(::TSP::FieldInfo_Rule value) {
  _internal_set_rule(value);
  // @@protoc_insertion_point(field_set:TSP.FieldInfo.rule)
}

// repeated uint64 object_references = 4 [packed = true];
inline int FieldInfo::_internal_object_references_size() const {
  return _impl_.object_references_.size();
}
inline int FieldInfo::object_references_size() const {
  return _internal_object_references_size();
}
inline void FieldInfo::clear_object_references() {
  _impl_.object_references_.Clear();
}
inline uint64_t FieldInfo::_internal_object_references(int index) const {
  return _impl_.object_references_.Get(index);
}
inline uint64_t FieldInfo::object_references(int index) const {
  // @@protoc_insertion_point(field_get:TSP.FieldInfo.object_references)
  return _internal_object_references(index);
}
inline void FieldInfo::set_object_references(int index, uint64_t value) {
  _impl_.object_references_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.FieldInfo.object_references)
}
inline void FieldInfo::_internal_add_object_references(uint64_t value) {
  _impl_.object_references_.Add(value);
}
inline void FieldInfo::add_object_references(uint64_t value) {
  _internal_add_object_references(value);
  // @@protoc_insertion_point(field_add:TSP.FieldInfo.object_references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FieldInfo::_internal_object_references() const {
  return _impl_.object_references_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FieldInfo::object_references() const {
  // @@protoc_insertion_point(field_list:TSP.FieldInfo.object_references)
  return _internal_object_references();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FieldInfo::_internal_mutable_object_references() {
  return &_impl_.object_references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FieldInfo::mutable_object_references() {
  // @@protoc_insertion_point(field_mutable_list:TSP.FieldInfo.object_references)
  return _internal_mutable_object_references();
}

// repeated uint64 data_references = 5 [packed = true];
inline int FieldInfo::_internal_data_references_size() const {
  return _impl_.data_references_.size();
}
inline int FieldInfo::data_references_size() const {
  return _internal_data_references_size();
}
inline void FieldInfo::clear_data_references() {
  _impl_.data_references_.Clear();
}
inline uint64_t FieldInfo::_internal_data_references(int index) const {
  return _impl_.data_references_.Get(index);
}
inline uint64_t FieldInfo::data_references(int index) const {
  // @@protoc_insertion_point(field_get:TSP.FieldInfo.data_references)
  return _internal_data_references(index);
}
inline void FieldInfo::set_data_references(int index, uint64_t value) {
  _impl_.data_references_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.FieldInfo.data_references)
}
inline void FieldInfo::_internal_add_data_references(uint64_t value) {
  _impl_.data_references_.Add(value);
}
inline void FieldInfo::add_data_references(uint64_t value) {
  _internal_add_data_references(value);
  // @@protoc_insertion_point(field_add:TSP.FieldInfo.data_references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FieldInfo::_internal_data_references() const {
  return _impl_.data_references_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
FieldInfo::data_references() const {
  // @@protoc_insertion_point(field_list:TSP.FieldInfo.data_references)
  return _internal_data_references();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FieldInfo::_internal_mutable_data_references() {
  return &_impl_.data_references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
FieldInfo::mutable_data_references() {
  // @@protoc_insertion_point(field_mutable_list:TSP.FieldInfo.data_references)
  return _internal_mutable_data_references();
}

// -------------------------------------------------------------------

// FieldPath

// repeated uint32 path = 1 [packed = true];
inline int FieldPath::_internal_path_size() const {
  return _impl_.path_.size();
}
inline int FieldPath::path_size() const {
  return _internal_path_size();
}
inline void FieldPath::clear_path() {
  _impl_.path_.Clear();
}
inline uint32_t FieldPath::_internal_path(int index) const {
  return _impl_.path_.Get(index);
}
inline uint32_t FieldPath::path(int index) const {
  // @@protoc_insertion_point(field_get:TSP.FieldPath.path)
  return _internal_path(index);
}
inline void FieldPath::set_path(int index, uint32_t value) {
  _impl_.path_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.FieldPath.path)
}
inline void FieldPath::_internal_add_path(uint32_t value) {
  _impl_.path_.Add(value);
}
inline void FieldPath::add_path(uint32_t value) {
  _internal_add_path(value);
  // @@protoc_insertion_point(field_add:TSP.FieldPath.path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FieldPath::_internal_path() const {
  return _impl_.path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FieldPath::path() const {
  // @@protoc_insertion_point(field_list:TSP.FieldPath.path)
  return _internal_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FieldPath::_internal_mutable_path() {
  return &_impl_.path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FieldPath::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:TSP.FieldPath.path)
  return _internal_mutable_path();
}

// -------------------------------------------------------------------

// ComponentInfo

// required uint64 identifier = 1;
inline bool ComponentInfo::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentInfo::has_identifier() const {
  return _internal_has_identifier();
}
inline void ComponentInfo::clear_identifier() {
  _impl_.identifier_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t ComponentInfo::_internal_identifier() const {
  return _impl_.identifier_;
}
inline uint64_t ComponentInfo::identifier() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.identifier)
  return _internal_identifier();
}
inline void ComponentInfo::_internal_set_identifier(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.identifier_ = value;
}
inline void ComponentInfo::set_identifier(uint64_t value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.identifier)
}

// required string preferred_locator = 2;
inline bool ComponentInfo::_internal_has_preferred_locator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentInfo::has_preferred_locator() const {
  return _internal_has_preferred_locator();
}
inline void ComponentInfo::clear_preferred_locator() {
  _impl_.preferred_locator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentInfo::preferred_locator() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.preferred_locator)
  return _internal_preferred_locator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentInfo::set_preferred_locator(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.preferred_locator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.preferred_locator)
}
inline std::string* ComponentInfo::mutable_preferred_locator() {
  std::string* _s = _internal_mutable_preferred_locator();
  // @@protoc_insertion_point(field_mutable:TSP.ComponentInfo.preferred_locator)
  return _s;
}
inline const std::string& ComponentInfo::_internal_preferred_locator() const {
  return _impl_.preferred_locator_.Get();
}
inline void ComponentInfo::_internal_set_preferred_locator(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.preferred_locator_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentInfo::_internal_mutable_preferred_locator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.preferred_locator_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentInfo::release_preferred_locator() {
  // @@protoc_insertion_point(field_release:TSP.ComponentInfo.preferred_locator)
  if (!_internal_has_preferred_locator()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.preferred_locator_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preferred_locator_.IsDefault()) {
    _impl_.preferred_locator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentInfo::set_allocated_preferred_locator(std::string* preferred_locator) {
  if (preferred_locator != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.preferred_locator_.SetAllocated(preferred_locator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preferred_locator_.IsDefault()) {
    _impl_.preferred_locator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.ComponentInfo.preferred_locator)
}

// optional string locator = 3;
inline bool ComponentInfo::_internal_has_locator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentInfo::has_locator() const {
  return _internal_has_locator();
}
inline void ComponentInfo::clear_locator() {
  _impl_.locator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentInfo::locator() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.locator)
  return _internal_locator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentInfo::set_locator(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.locator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.locator)
}
inline std::string* ComponentInfo::mutable_locator() {
  std::string* _s = _internal_mutable_locator();
  // @@protoc_insertion_point(field_mutable:TSP.ComponentInfo.locator)
  return _s;
}
inline const std::string& ComponentInfo::_internal_locator() const {
  return _impl_.locator_.Get();
}
inline void ComponentInfo::_internal_set_locator(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.locator_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentInfo::_internal_mutable_locator() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.locator_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentInfo::release_locator() {
  // @@protoc_insertion_point(field_release:TSP.ComponentInfo.locator)
  if (!_internal_has_locator()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.locator_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locator_.IsDefault()) {
    _impl_.locator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentInfo::set_allocated_locator(std::string* locator) {
  if (locator != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.locator_.SetAllocated(locator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.locator_.IsDefault()) {
    _impl_.locator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.ComponentInfo.locator)
}

// repeated uint32 read_version = 4 [packed = true];
inline int ComponentInfo::_internal_read_version_size() const {
  return _impl_.read_version_.size();
}
inline int ComponentInfo::read_version_size() const {
  return _internal_read_version_size();
}
inline void ComponentInfo::clear_read_version() {
  _impl_.read_version_.Clear();
}
inline uint32_t ComponentInfo::_internal_read_version(int index) const {
  return _impl_.read_version_.Get(index);
}
inline uint32_t ComponentInfo::read_version(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.read_version)
  return _internal_read_version(index);
}
inline void ComponentInfo::set_read_version(int index, uint32_t value) {
  _impl_.read_version_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.read_version)
}
inline void ComponentInfo::_internal_add_read_version(uint32_t value) {
  _impl_.read_version_.Add(value);
}
inline void ComponentInfo::add_read_version(uint32_t value) {
  _internal_add_read_version(value);
  // @@protoc_insertion_point(field_add:TSP.ComponentInfo.read_version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ComponentInfo::_internal_read_version() const {
  return _impl_.read_version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ComponentInfo::read_version() const {
  // @@protoc_insertion_point(field_list:TSP.ComponentInfo.read_version)
  return _internal_read_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ComponentInfo::_internal_mutable_read_version() {
  return &_impl_.read_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ComponentInfo::mutable_read_version() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ComponentInfo.read_version)
  return _internal_mutable_read_version();
}

// repeated uint32 write_version = 5 [packed = true];
inline int ComponentInfo::_internal_write_version_size() const {
  return _impl_.write_version_.size();
}
inline int ComponentInfo::write_version_size() const {
  return _internal_write_version_size();
}
inline void ComponentInfo::clear_write_version() {
  _impl_.write_version_.Clear();
}
inline uint32_t ComponentInfo::_internal_write_version(int index) const {
  return _impl_.write_version_.Get(index);
}
inline uint32_t ComponentInfo::write_version(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.write_version)
  return _internal_write_version(index);
}
inline void ComponentInfo::set_write_version(int index, uint32_t value) {
  _impl_.write_version_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.write_version)
}
inline void ComponentInfo::_internal_add_write_version(uint32_t value) {
  _impl_.write_version_.Add(value);
}
inline void ComponentInfo::add_write_version(uint32_t value) {
  _internal_add_write_version(value);
  // @@protoc_insertion_point(field_add:TSP.ComponentInfo.write_version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ComponentInfo::_internal_write_version() const {
  return _impl_.write_version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ComponentInfo::write_version() const {
  // @@protoc_insertion_point(field_list:TSP.ComponentInfo.write_version)
  return _internal_write_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ComponentInfo::_internal_mutable_write_version() {
  return &_impl_.write_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ComponentInfo::mutable_write_version() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ComponentInfo.write_version)
  return _internal_mutable_write_version();
}

// repeated .TSP.ComponentExternalReference external_references = 6;
inline int ComponentInfo::_internal_external_references_size() const {
  return _impl_.external_references_.size();
}
inline int ComponentInfo::external_references_size() const {
  return _internal_external_references_size();
}
inline void ComponentInfo::clear_external_references() {
  _impl_.external_references_.Clear();
}
inline ::TSP::ComponentExternalReference* ComponentInfo::mutable_external_references(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.ComponentInfo.external_references)
  return _impl_.external_references_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentExternalReference >*
ComponentInfo::mutable_external_references() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ComponentInfo.external_references)
  return &_impl_.external_references_;
}
inline const ::TSP::ComponentExternalReference& ComponentInfo::_internal_external_references(int index) const {
  return _impl_.external_references_.Get(index);
}
inline const ::TSP::ComponentExternalReference& ComponentInfo::external_references(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.external_references)
  return _internal_external_references(index);
}
inline ::TSP::ComponentExternalReference* ComponentInfo::_internal_add_external_references() {
  return _impl_.external_references_.Add();
}
inline ::TSP::ComponentExternalReference* ComponentInfo::add_external_references() {
  ::TSP::ComponentExternalReference* _add = _internal_add_external_references();
  // @@protoc_insertion_point(field_add:TSP.ComponentInfo.external_references)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentExternalReference >&
ComponentInfo::external_references() const {
  // @@protoc_insertion_point(field_list:TSP.ComponentInfo.external_references)
  return _impl_.external_references_;
}

// repeated .TSP.ComponentDataReference data_references = 7;
inline int ComponentInfo::_internal_data_references_size() const {
  return _impl_.data_references_.size();
}
inline int ComponentInfo::data_references_size() const {
  return _internal_data_references_size();
}
inline void ComponentInfo::clear_data_references() {
  _impl_.data_references_.Clear();
}
inline ::TSP::ComponentDataReference* ComponentInfo::mutable_data_references(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.ComponentInfo.data_references)
  return _impl_.data_references_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentDataReference >*
ComponentInfo::mutable_data_references() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ComponentInfo.data_references)
  return &_impl_.data_references_;
}
inline const ::TSP::ComponentDataReference& ComponentInfo::_internal_data_references(int index) const {
  return _impl_.data_references_.Get(index);
}
inline const ::TSP::ComponentDataReference& ComponentInfo::data_references(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.data_references)
  return _internal_data_references(index);
}
inline ::TSP::ComponentDataReference* ComponentInfo::_internal_add_data_references() {
  return _impl_.data_references_.Add();
}
inline ::TSP::ComponentDataReference* ComponentInfo::add_data_references() {
  ::TSP::ComponentDataReference* _add = _internal_add_data_references();
  // @@protoc_insertion_point(field_add:TSP.ComponentInfo.data_references)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentDataReference >&
ComponentInfo::data_references() const {
  // @@protoc_insertion_point(field_list:TSP.ComponentInfo.data_references)
  return _impl_.data_references_;
}

// optional bool allows_duplicates_outside_of_document_package = 8 [default = false];
inline bool ComponentInfo::_internal_has_allows_duplicates_outside_of_document_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ComponentInfo::has_allows_duplicates_outside_of_document_package() const {
  return _internal_has_allows_duplicates_outside_of_document_package();
}
inline void ComponentInfo::clear_allows_duplicates_outside_of_document_package() {
  _impl_.allows_duplicates_outside_of_document_package_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ComponentInfo::_internal_allows_duplicates_outside_of_document_package() const {
  return _impl_.allows_duplicates_outside_of_document_package_;
}
inline bool ComponentInfo::allows_duplicates_outside_of_document_package() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.allows_duplicates_outside_of_document_package)
  return _internal_allows_duplicates_outside_of_document_package();
}
inline void ComponentInfo::_internal_set_allows_duplicates_outside_of_document_package(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.allows_duplicates_outside_of_document_package_ = value;
}
inline void ComponentInfo::set_allows_duplicates_outside_of_document_package(bool value) {
  _internal_set_allows_duplicates_outside_of_document_package(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.allows_duplicates_outside_of_document_package)
}

// optional bool dirties_document_package = 9 [default = true];
inline bool ComponentInfo::_internal_has_dirties_document_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ComponentInfo::has_dirties_document_package() const {
  return _internal_has_dirties_document_package();
}
inline void ComponentInfo::clear_dirties_document_package() {
  _impl_.dirties_document_package_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ComponentInfo::_internal_dirties_document_package() const {
  return _impl_.dirties_document_package_;
}
inline bool ComponentInfo::dirties_document_package() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.dirties_document_package)
  return _internal_dirties_document_package();
}
inline void ComponentInfo::_internal_set_dirties_document_package(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dirties_document_package_ = value;
}
inline void ComponentInfo::set_dirties_document_package(bool value) {
  _internal_set_dirties_document_package(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.dirties_document_package)
}

// optional bool is_stored_outside_object_archive = 10 [default = false];
inline bool ComponentInfo::_internal_has_is_stored_outside_object_archive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ComponentInfo::has_is_stored_outside_object_archive() const {
  return _internal_has_is_stored_outside_object_archive();
}
inline void ComponentInfo::clear_is_stored_outside_object_archive() {
  _impl_.is_stored_outside_object_archive_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ComponentInfo::_internal_is_stored_outside_object_archive() const {
  return _impl_.is_stored_outside_object_archive_;
}
inline bool ComponentInfo::is_stored_outside_object_archive() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentInfo.is_stored_outside_object_archive)
  return _internal_is_stored_outside_object_archive();
}
inline void ComponentInfo::_internal_set_is_stored_outside_object_archive(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_stored_outside_object_archive_ = value;
}
inline void ComponentInfo::set_is_stored_outside_object_archive(bool value) {
  _internal_set_is_stored_outside_object_archive(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentInfo.is_stored_outside_object_archive)
}

// -------------------------------------------------------------------

// ComponentExternalReference

// required uint64 component_identifier = 1;
inline bool ComponentExternalReference::_internal_has_component_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentExternalReference::has_component_identifier() const {
  return _internal_has_component_identifier();
}
inline void ComponentExternalReference::clear_component_identifier() {
  _impl_.component_identifier_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ComponentExternalReference::_internal_component_identifier() const {
  return _impl_.component_identifier_;
}
inline uint64_t ComponentExternalReference::component_identifier() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentExternalReference.component_identifier)
  return _internal_component_identifier();
}
inline void ComponentExternalReference::_internal_set_component_identifier(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.component_identifier_ = value;
}
inline void ComponentExternalReference::set_component_identifier(uint64_t value) {
  _internal_set_component_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentExternalReference.component_identifier)
}

// optional uint64 object_identifier = 2;
inline bool ComponentExternalReference::_internal_has_object_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentExternalReference::has_object_identifier() const {
  return _internal_has_object_identifier();
}
inline void ComponentExternalReference::clear_object_identifier() {
  _impl_.object_identifier_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ComponentExternalReference::_internal_object_identifier() const {
  return _impl_.object_identifier_;
}
inline uint64_t ComponentExternalReference::object_identifier() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentExternalReference.object_identifier)
  return _internal_object_identifier();
}
inline void ComponentExternalReference::_internal_set_object_identifier(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.object_identifier_ = value;
}
inline void ComponentExternalReference::set_object_identifier(uint64_t value) {
  _internal_set_object_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentExternalReference.object_identifier)
}

// optional bool is_weak = 3;
inline bool ComponentExternalReference::_internal_has_is_weak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentExternalReference::has_is_weak() const {
  return _internal_has_is_weak();
}
inline void ComponentExternalReference::clear_is_weak() {
  _impl_.is_weak_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ComponentExternalReference::_internal_is_weak() const {
  return _impl_.is_weak_;
}
inline bool ComponentExternalReference::is_weak() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentExternalReference.is_weak)
  return _internal_is_weak();
}
inline void ComponentExternalReference::_internal_set_is_weak(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_weak_ = value;
}
inline void ComponentExternalReference::set_is_weak(bool value) {
  _internal_set_is_weak(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentExternalReference.is_weak)
}

// -------------------------------------------------------------------

// ComponentDataReference

// required uint64 data_identifier = 1;
inline bool ComponentDataReference::_internal_has_data_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentDataReference::has_data_identifier() const {
  return _internal_has_data_identifier();
}
inline void ComponentDataReference::clear_data_identifier() {
  _impl_.data_identifier_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ComponentDataReference::_internal_data_identifier() const {
  return _impl_.data_identifier_;
}
inline uint64_t ComponentDataReference::data_identifier() const {
  // @@protoc_insertion_point(field_get:TSP.ComponentDataReference.data_identifier)
  return _internal_data_identifier();
}
inline void ComponentDataReference::_internal_set_data_identifier(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_identifier_ = value;
}
inline void ComponentDataReference::set_data_identifier(uint64_t value) {
  _internal_set_data_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.ComponentDataReference.data_identifier)
}

// -------------------------------------------------------------------

// PackageMetadata

// required uint64 last_object_identifier = 1;
inline bool PackageMetadata::_internal_has_last_object_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PackageMetadata::has_last_object_identifier() const {
  return _internal_has_last_object_identifier();
}
inline void PackageMetadata::clear_last_object_identifier() {
  _impl_.last_object_identifier_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PackageMetadata::_internal_last_object_identifier() const {
  return _impl_.last_object_identifier_;
}
inline uint64_t PackageMetadata::last_object_identifier() const {
  // @@protoc_insertion_point(field_get:TSP.PackageMetadata.last_object_identifier)
  return _internal_last_object_identifier();
}
inline void PackageMetadata::_internal_set_last_object_identifier(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_object_identifier_ = value;
}
inline void PackageMetadata::set_last_object_identifier(uint64_t value) {
  _internal_set_last_object_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.PackageMetadata.last_object_identifier)
}

// repeated .TSP.ComponentInfo components = 3;
inline int PackageMetadata::_internal_components_size() const {
  return _impl_.components_.size();
}
inline int PackageMetadata::components_size() const {
  return _internal_components_size();
}
inline void PackageMetadata::clear_components() {
  _impl_.components_.Clear();
}
inline ::TSP::ComponentInfo* PackageMetadata::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.PackageMetadata.components)
  return _impl_.components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentInfo >*
PackageMetadata::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PackageMetadata.components)
  return &_impl_.components_;
}
inline const ::TSP::ComponentInfo& PackageMetadata::_internal_components(int index) const {
  return _impl_.components_.Get(index);
}
inline const ::TSP::ComponentInfo& PackageMetadata::components(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PackageMetadata.components)
  return _internal_components(index);
}
inline ::TSP::ComponentInfo* PackageMetadata::_internal_add_components() {
  return _impl_.components_.Add();
}
inline ::TSP::ComponentInfo* PackageMetadata::add_components() {
  ::TSP::ComponentInfo* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:TSP.PackageMetadata.components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::ComponentInfo >&
PackageMetadata::components() const {
  // @@protoc_insertion_point(field_list:TSP.PackageMetadata.components)
  return _impl_.components_;
}

// repeated .TSP.DataInfo datas = 4;
inline int PackageMetadata::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int PackageMetadata::datas_size() const {
  return _internal_datas_size();
}
inline void PackageMetadata::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::TSP::DataInfo* PackageMetadata::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.PackageMetadata.datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >*
PackageMetadata::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PackageMetadata.datas)
  return &_impl_.datas_;
}
inline const ::TSP::DataInfo& PackageMetadata::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::TSP::DataInfo& PackageMetadata::datas(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PackageMetadata.datas)
  return _internal_datas(index);
}
inline ::TSP::DataInfo* PackageMetadata::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::TSP::DataInfo* PackageMetadata::add_datas() {
  ::TSP::DataInfo* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:TSP.PackageMetadata.datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >&
PackageMetadata::datas() const {
  // @@protoc_insertion_point(field_list:TSP.PackageMetadata.datas)
  return _impl_.datas_;
}

// repeated uint32 read_version = 5 [packed = true];
inline int PackageMetadata::_internal_read_version_size() const {
  return _impl_.read_version_.size();
}
inline int PackageMetadata::read_version_size() const {
  return _internal_read_version_size();
}
inline void PackageMetadata::clear_read_version() {
  _impl_.read_version_.Clear();
}
inline uint32_t PackageMetadata::_internal_read_version(int index) const {
  return _impl_.read_version_.Get(index);
}
inline uint32_t PackageMetadata::read_version(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PackageMetadata.read_version)
  return _internal_read_version(index);
}
inline void PackageMetadata::set_read_version(int index, uint32_t value) {
  _impl_.read_version_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.PackageMetadata.read_version)
}
inline void PackageMetadata::_internal_add_read_version(uint32_t value) {
  _impl_.read_version_.Add(value);
}
inline void PackageMetadata::add_read_version(uint32_t value) {
  _internal_add_read_version(value);
  // @@protoc_insertion_point(field_add:TSP.PackageMetadata.read_version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackageMetadata::_internal_read_version() const {
  return _impl_.read_version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackageMetadata::read_version() const {
  // @@protoc_insertion_point(field_list:TSP.PackageMetadata.read_version)
  return _internal_read_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackageMetadata::_internal_mutable_read_version() {
  return &_impl_.read_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackageMetadata::mutable_read_version() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PackageMetadata.read_version)
  return _internal_mutable_read_version();
}

// repeated uint32 write_version = 6 [packed = true];
inline int PackageMetadata::_internal_write_version_size() const {
  return _impl_.write_version_.size();
}
inline int PackageMetadata::write_version_size() const {
  return _internal_write_version_size();
}
inline void PackageMetadata::clear_write_version() {
  _impl_.write_version_.Clear();
}
inline uint32_t PackageMetadata::_internal_write_version(int index) const {
  return _impl_.write_version_.Get(index);
}
inline uint32_t PackageMetadata::write_version(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PackageMetadata.write_version)
  return _internal_write_version(index);
}
inline void PackageMetadata::set_write_version(int index, uint32_t value) {
  _impl_.write_version_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.PackageMetadata.write_version)
}
inline void PackageMetadata::_internal_add_write_version(uint32_t value) {
  _impl_.write_version_.Add(value);
}
inline void PackageMetadata::add_write_version(uint32_t value) {
  _internal_add_write_version(value);
  // @@protoc_insertion_point(field_add:TSP.PackageMetadata.write_version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackageMetadata::_internal_write_version() const {
  return _impl_.write_version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackageMetadata::write_version() const {
  // @@protoc_insertion_point(field_list:TSP.PackageMetadata.write_version)
  return _internal_write_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackageMetadata::_internal_mutable_write_version() {
  return &_impl_.write_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackageMetadata::mutable_write_version() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PackageMetadata.write_version)
  return _internal_mutable_write_version();
}

// -------------------------------------------------------------------

// PasteboardMetadata

// repeated uint32 version = 1 [packed = true];
inline int PasteboardMetadata::_internal_version_size() const {
  return _impl_.version_.size();
}
inline int PasteboardMetadata::version_size() const {
  return _internal_version_size();
}
inline void PasteboardMetadata::clear_version() {
  _impl_.version_.Clear();
}
inline uint32_t PasteboardMetadata::_internal_version(int index) const {
  return _impl_.version_.Get(index);
}
inline uint32_t PasteboardMetadata::version(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardMetadata.version)
  return _internal_version(index);
}
inline void PasteboardMetadata::set_version(int index, uint32_t value) {
  _impl_.version_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.PasteboardMetadata.version)
}
inline void PasteboardMetadata::_internal_add_version(uint32_t value) {
  _impl_.version_.Add(value);
}
inline void PasteboardMetadata::add_version(uint32_t value) {
  _internal_add_version(value);
  // @@protoc_insertion_point(field_add:TSP.PasteboardMetadata.version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PasteboardMetadata::_internal_version() const {
  return _impl_.version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PasteboardMetadata::version() const {
  // @@protoc_insertion_point(field_list:TSP.PasteboardMetadata.version)
  return _internal_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PasteboardMetadata::_internal_mutable_version() {
  return &_impl_.version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PasteboardMetadata::mutable_version() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PasteboardMetadata.version)
  return _internal_mutable_version();
}

// required string app_name = 2;
inline bool PasteboardMetadata::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasteboardMetadata::has_app_name() const {
  return _internal_has_app_name();
}
inline void PasteboardMetadata::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasteboardMetadata::app_name() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardMetadata.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasteboardMetadata::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.PasteboardMetadata.app_name)
}
inline std::string* PasteboardMetadata::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardMetadata.app_name)
  return _s;
}
inline const std::string& PasteboardMetadata::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void PasteboardMetadata::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PasteboardMetadata::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PasteboardMetadata::release_app_name() {
  // @@protoc_insertion_point(field_release:TSP.PasteboardMetadata.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasteboardMetadata::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.PasteboardMetadata.app_name)
}

// repeated .TSP.DataInfo datas = 3;
inline int PasteboardMetadata::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int PasteboardMetadata::datas_size() const {
  return _internal_datas_size();
}
inline void PasteboardMetadata::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::TSP::DataInfo* PasteboardMetadata::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardMetadata.datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >*
PasteboardMetadata::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:TSP.PasteboardMetadata.datas)
  return &_impl_.datas_;
}
inline const ::TSP::DataInfo& PasteboardMetadata::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::TSP::DataInfo& PasteboardMetadata::datas(int index) const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardMetadata.datas)
  return _internal_datas(index);
}
inline ::TSP::DataInfo* PasteboardMetadata::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::TSP::DataInfo* PasteboardMetadata::add_datas() {
  ::TSP::DataInfo* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:TSP.PasteboardMetadata.datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataInfo >&
PasteboardMetadata::datas() const {
  // @@protoc_insertion_point(field_list:TSP.PasteboardMetadata.datas)
  return _impl_.datas_;
}

// optional string source_document_uuid = 4;
inline bool PasteboardMetadata::_internal_has_source_document_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PasteboardMetadata::has_source_document_uuid() const {
  return _internal_has_source_document_uuid();
}
inline void PasteboardMetadata::clear_source_document_uuid() {
  _impl_.source_document_uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PasteboardMetadata::source_document_uuid() const {
  // @@protoc_insertion_point(field_get:TSP.PasteboardMetadata.source_document_uuid)
  return _internal_source_document_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasteboardMetadata::set_source_document_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.source_document_uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.PasteboardMetadata.source_document_uuid)
}
inline std::string* PasteboardMetadata::mutable_source_document_uuid() {
  std::string* _s = _internal_mutable_source_document_uuid();
  // @@protoc_insertion_point(field_mutable:TSP.PasteboardMetadata.source_document_uuid)
  return _s;
}
inline const std::string& PasteboardMetadata::_internal_source_document_uuid() const {
  return _impl_.source_document_uuid_.Get();
}
inline void PasteboardMetadata::_internal_set_source_document_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_document_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* PasteboardMetadata::_internal_mutable_source_document_uuid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.source_document_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* PasteboardMetadata::release_source_document_uuid() {
  // @@protoc_insertion_point(field_release:TSP.PasteboardMetadata.source_document_uuid)
  if (!_internal_has_source_document_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.source_document_uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_document_uuid_.IsDefault()) {
    _impl_.source_document_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasteboardMetadata::set_allocated_source_document_uuid(std::string* source_document_uuid) {
  if (source_document_uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.source_document_uuid_.SetAllocated(source_document_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_document_uuid_.IsDefault()) {
    _impl_.source_document_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.PasteboardMetadata.source_document_uuid)
}

// -------------------------------------------------------------------

// DataInfo

// required uint64 identifier = 1;
inline bool DataInfo::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DataInfo::has_identifier() const {
  return _internal_has_identifier();
}
inline void DataInfo::clear_identifier() {
  _impl_.identifier_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t DataInfo::_internal_identifier() const {
  return _impl_.identifier_;
}
inline uint64_t DataInfo::identifier() const {
  // @@protoc_insertion_point(field_get:TSP.DataInfo.identifier)
  return _internal_identifier();
}
inline void DataInfo::_internal_set_identifier(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.identifier_ = value;
}
inline void DataInfo::set_identifier(uint64_t value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:TSP.DataInfo.identifier)
}

// required bytes digest = 2;
inline bool DataInfo::_internal_has_digest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataInfo::has_digest() const {
  return _internal_has_digest();
}
inline void DataInfo::clear_digest() {
  _impl_.digest_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataInfo::digest() const {
  // @@protoc_insertion_point(field_get:TSP.DataInfo.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataInfo::set_digest(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.digest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DataInfo.digest)
}
inline std::string* DataInfo::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:TSP.DataInfo.digest)
  return _s;
}
inline const std::string& DataInfo::_internal_digest() const {
  return _impl_.digest_.Get();
}
inline void DataInfo::_internal_set_digest(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.digest_.Set(value, GetArenaForAllocation());
}
inline std::string* DataInfo::_internal_mutable_digest() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.digest_.Mutable(GetArenaForAllocation());
}
inline std::string* DataInfo::release_digest() {
  // @@protoc_insertion_point(field_release:TSP.DataInfo.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.digest_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataInfo::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.digest_.SetAllocated(digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DataInfo.digest)
}

// required string preferred_file_name = 3;
inline bool DataInfo::_internal_has_preferred_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataInfo::has_preferred_file_name() const {
  return _internal_has_preferred_file_name();
}
inline void DataInfo::clear_preferred_file_name() {
  _impl_.preferred_file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataInfo::preferred_file_name() const {
  // @@protoc_insertion_point(field_get:TSP.DataInfo.preferred_file_name)
  return _internal_preferred_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataInfo::set_preferred_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.preferred_file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DataInfo.preferred_file_name)
}
inline std::string* DataInfo::mutable_preferred_file_name() {
  std::string* _s = _internal_mutable_preferred_file_name();
  // @@protoc_insertion_point(field_mutable:TSP.DataInfo.preferred_file_name)
  return _s;
}
inline const std::string& DataInfo::_internal_preferred_file_name() const {
  return _impl_.preferred_file_name_.Get();
}
inline void DataInfo::_internal_set_preferred_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.preferred_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataInfo::_internal_mutable_preferred_file_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.preferred_file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataInfo::release_preferred_file_name() {
  // @@protoc_insertion_point(field_release:TSP.DataInfo.preferred_file_name)
  if (!_internal_has_preferred_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.preferred_file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preferred_file_name_.IsDefault()) {
    _impl_.preferred_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataInfo::set_allocated_preferred_file_name(std::string* preferred_file_name) {
  if (preferred_file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.preferred_file_name_.SetAllocated(preferred_file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preferred_file_name_.IsDefault()) {
    _impl_.preferred_file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DataInfo.preferred_file_name)
}

// optional string file_name = 4;
inline bool DataInfo::_internal_has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataInfo::has_file_name() const {
  return _internal_has_file_name();
}
inline void DataInfo::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DataInfo::file_name() const {
  // @@protoc_insertion_point(field_get:TSP.DataInfo.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataInfo::set_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DataInfo.file_name)
}
inline std::string* DataInfo::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:TSP.DataInfo.file_name)
  return _s;
}
inline const std::string& DataInfo::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void DataInfo::_internal_set_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DataInfo::_internal_mutable_file_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DataInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:TSP.DataInfo.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DataInfo.file_name)
}

// optional string document_resource_locator = 5;
inline bool DataInfo::_internal_has_document_resource_locator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DataInfo::has_document_resource_locator() const {
  return _internal_has_document_resource_locator();
}
inline void DataInfo::clear_document_resource_locator() {
  _impl_.document_resource_locator_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DataInfo::document_resource_locator() const {
  // @@protoc_insertion_point(field_get:TSP.DataInfo.document_resource_locator)
  return _internal_document_resource_locator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataInfo::set_document_resource_locator(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.document_resource_locator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DataInfo.document_resource_locator)
}
inline std::string* DataInfo::mutable_document_resource_locator() {
  std::string* _s = _internal_mutable_document_resource_locator();
  // @@protoc_insertion_point(field_mutable:TSP.DataInfo.document_resource_locator)
  return _s;
}
inline const std::string& DataInfo::_internal_document_resource_locator() const {
  return _impl_.document_resource_locator_.Get();
}
inline void DataInfo::_internal_set_document_resource_locator(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.document_resource_locator_.Set(value, GetArenaForAllocation());
}
inline std::string* DataInfo::_internal_mutable_document_resource_locator() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.document_resource_locator_.Mutable(GetArenaForAllocation());
}
inline std::string* DataInfo::release_document_resource_locator() {
  // @@protoc_insertion_point(field_release:TSP.DataInfo.document_resource_locator)
  if (!_internal_has_document_resource_locator()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.document_resource_locator_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_resource_locator_.IsDefault()) {
    _impl_.document_resource_locator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataInfo::set_allocated_document_resource_locator(std::string* document_resource_locator) {
  if (document_resource_locator != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.document_resource_locator_.SetAllocated(document_resource_locator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_resource_locator_.IsDefault()) {
    _impl_.document_resource_locator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DataInfo.document_resource_locator)
}

// optional bytes source_bookmark_data = 6;
inline bool DataInfo::_internal_has_source_bookmark_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DataInfo::has_source_bookmark_data() const {
  return _internal_has_source_bookmark_data();
}
inline void DataInfo::clear_source_bookmark_data() {
  _impl_.source_bookmark_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DataInfo::source_bookmark_data() const {
  // @@protoc_insertion_point(field_get:TSP.DataInfo.source_bookmark_data)
  return _internal_source_bookmark_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataInfo::set_source_bookmark_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.source_bookmark_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DataInfo.source_bookmark_data)
}
inline std::string* DataInfo::mutable_source_bookmark_data() {
  std::string* _s = _internal_mutable_source_bookmark_data();
  // @@protoc_insertion_point(field_mutable:TSP.DataInfo.source_bookmark_data)
  return _s;
}
inline const std::string& DataInfo::_internal_source_bookmark_data() const {
  return _impl_.source_bookmark_data_.Get();
}
inline void DataInfo::_internal_set_source_bookmark_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.source_bookmark_data_.Set(value, GetArenaForAllocation());
}
inline std::string* DataInfo::_internal_mutable_source_bookmark_data() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.source_bookmark_data_.Mutable(GetArenaForAllocation());
}
inline std::string* DataInfo::release_source_bookmark_data() {
  // @@protoc_insertion_point(field_release:TSP.DataInfo.source_bookmark_data)
  if (!_internal_has_source_bookmark_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.source_bookmark_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_bookmark_data_.IsDefault()) {
    _impl_.source_bookmark_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataInfo::set_allocated_source_bookmark_data(std::string* source_bookmark_data) {
  if (source_bookmark_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.source_bookmark_data_.SetAllocated(source_bookmark_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_bookmark_data_.IsDefault()) {
    _impl_.source_bookmark_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DataInfo.source_bookmark_data)
}

// optional string pasteboard_external_file_path = 99;
inline bool DataInfo::_internal_has_pasteboard_external_file_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DataInfo::has_pasteboard_external_file_path() const {
  return _internal_has_pasteboard_external_file_path();
}
inline void DataInfo::clear_pasteboard_external_file_path() {
  _impl_.pasteboard_external_file_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DataInfo::pasteboard_external_file_path() const {
  // @@protoc_insertion_point(field_get:TSP.DataInfo.pasteboard_external_file_path)
  return _internal_pasteboard_external_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataInfo::set_pasteboard_external_file_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.pasteboard_external_file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.DataInfo.pasteboard_external_file_path)
}
inline std::string* DataInfo::mutable_pasteboard_external_file_path() {
  std::string* _s = _internal_mutable_pasteboard_external_file_path();
  // @@protoc_insertion_point(field_mutable:TSP.DataInfo.pasteboard_external_file_path)
  return _s;
}
inline const std::string& DataInfo::_internal_pasteboard_external_file_path() const {
  return _impl_.pasteboard_external_file_path_.Get();
}
inline void DataInfo::_internal_set_pasteboard_external_file_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pasteboard_external_file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* DataInfo::_internal_mutable_pasteboard_external_file_path() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.pasteboard_external_file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* DataInfo::release_pasteboard_external_file_path() {
  // @@protoc_insertion_point(field_release:TSP.DataInfo.pasteboard_external_file_path)
  if (!_internal_has_pasteboard_external_file_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.pasteboard_external_file_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pasteboard_external_file_path_.IsDefault()) {
    _impl_.pasteboard_external_file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DataInfo::set_allocated_pasteboard_external_file_path(std::string* pasteboard_external_file_path) {
  if (pasteboard_external_file_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.pasteboard_external_file_path_.SetAllocated(pasteboard_external_file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pasteboard_external_file_path_.IsDefault()) {
    _impl_.pasteboard_external_file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.DataInfo.pasteboard_external_file_path)
}

// -------------------------------------------------------------------

// ViewStateMetadata

// repeated uint32 version = 1 [packed = true];
inline int ViewStateMetadata::_internal_version_size() const {
  return _impl_.version_.size();
}
inline int ViewStateMetadata::version_size() const {
  return _internal_version_size();
}
inline void ViewStateMetadata::clear_version() {
  _impl_.version_.Clear();
}
inline uint32_t ViewStateMetadata::_internal_version(int index) const {
  return _impl_.version_.Get(index);
}
inline uint32_t ViewStateMetadata::version(int index) const {
  // @@protoc_insertion_point(field_get:TSP.ViewStateMetadata.version)
  return _internal_version(index);
}
inline void ViewStateMetadata::set_version(int index, uint32_t value) {
  _impl_.version_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSP.ViewStateMetadata.version)
}
inline void ViewStateMetadata::_internal_add_version(uint32_t value) {
  _impl_.version_.Add(value);
}
inline void ViewStateMetadata::add_version(uint32_t value) {
  _internal_add_version(value);
  // @@protoc_insertion_point(field_add:TSP.ViewStateMetadata.version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ViewStateMetadata::_internal_version() const {
  return _impl_.version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ViewStateMetadata::version() const {
  // @@protoc_insertion_point(field_list:TSP.ViewStateMetadata.version)
  return _internal_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ViewStateMetadata::_internal_mutable_version() {
  return &_impl_.version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ViewStateMetadata::mutable_version() {
  // @@protoc_insertion_point(field_mutable_list:TSP.ViewStateMetadata.version)
  return _internal_mutable_version();
}

// required string document_version_uuid = 2;
inline bool ViewStateMetadata::_internal_has_document_version_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ViewStateMetadata::has_document_version_uuid() const {
  return _internal_has_document_version_uuid();
}
inline void ViewStateMetadata::clear_document_version_uuid() {
  _impl_.document_version_uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ViewStateMetadata::document_version_uuid() const {
  // @@protoc_insertion_point(field_get:TSP.ViewStateMetadata.document_version_uuid)
  return _internal_document_version_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewStateMetadata::set_document_version_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.document_version_uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSP.ViewStateMetadata.document_version_uuid)
}
inline std::string* ViewStateMetadata::mutable_document_version_uuid() {
  std::string* _s = _internal_mutable_document_version_uuid();
  // @@protoc_insertion_point(field_mutable:TSP.ViewStateMetadata.document_version_uuid)
  return _s;
}
inline const std::string& ViewStateMetadata::_internal_document_version_uuid() const {
  return _impl_.document_version_uuid_.Get();
}
inline void ViewStateMetadata::_internal_set_document_version_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.document_version_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* ViewStateMetadata::_internal_mutable_document_version_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.document_version_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* ViewStateMetadata::release_document_version_uuid() {
  // @@protoc_insertion_point(field_release:TSP.ViewStateMetadata.document_version_uuid)
  if (!_internal_has_document_version_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.document_version_uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_version_uuid_.IsDefault()) {
    _impl_.document_version_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ViewStateMetadata::set_allocated_document_version_uuid(std::string* document_version_uuid) {
  if (document_version_uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.document_version_uuid_.SetAllocated(document_version_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_version_uuid_.IsDefault()) {
    _impl_.document_version_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSP.ViewStateMetadata.document_version_uuid)
}

// required .TSP.ComponentInfo component = 3;
inline bool ViewStateMetadata::_internal_has_component() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.component_ != nullptr);
  return value;
}
inline bool ViewStateMetadata::has_component() const {
  return _internal_has_component();
}
inline void ViewStateMetadata::clear_component() {
  if (_impl_.component_ != nullptr) _impl_.component_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSP::ComponentInfo& ViewStateMetadata::_internal_component() const {
  const ::TSP::ComponentInfo* p = _impl_.component_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::ComponentInfo&>(
      ::TSP::_ComponentInfo_default_instance_);
}
inline const ::TSP::ComponentInfo& ViewStateMetadata::component() const {
  // @@protoc_insertion_point(field_get:TSP.ViewStateMetadata.component)
  return _internal_component();
}
inline void ViewStateMetadata::unsafe_arena_set_allocated_component(
    ::TSP::ComponentInfo* component) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_);
  }
  _impl_.component_ = component;
  if (component) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSP.ViewStateMetadata.component)
}
inline ::TSP::ComponentInfo* ViewStateMetadata::release_component() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ComponentInfo* temp = _impl_.component_;
  _impl_.component_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::ComponentInfo* ViewStateMetadata::unsafe_arena_release_component() {
  // @@protoc_insertion_point(field_release:TSP.ViewStateMetadata.component)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::ComponentInfo* temp = _impl_.component_;
  _impl_.component_ = nullptr;
  return temp;
}
inline ::TSP::ComponentInfo* ViewStateMetadata::_internal_mutable_component() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.component_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::ComponentInfo>(GetArenaForAllocation());
    _impl_.component_ = p;
  }
  return _impl_.component_;
}
inline ::TSP::ComponentInfo* ViewStateMetadata::mutable_component() {
  ::TSP::ComponentInfo* _msg = _internal_mutable_component();
  // @@protoc_insertion_point(field_mutable:TSP.ViewStateMetadata.component)
  return _msg;
}
inline void ViewStateMetadata::set_allocated_component(::TSP::ComponentInfo* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.component_;
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(component);
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.component_ = component;
  // @@protoc_insertion_point(field_set_allocated:TSP.ViewStateMetadata.component)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSP::FieldInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::FieldInfo_Type>() {
  return ::TSP::FieldInfo_Type_descriptor();
}
template <> struct is_proto_enum< ::TSP::FieldInfo_Rule> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSP::FieldInfo_Rule>() {
  return ::TSP::FieldInfo_Rule_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSPArchiveMessages_2eproto
